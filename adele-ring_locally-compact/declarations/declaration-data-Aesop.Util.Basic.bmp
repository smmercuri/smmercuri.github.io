{"name":"Aesop.Util.Basic","instances":[],"imports":["Init","Aesop.Nanos","Aesop.Util.UnionFind","Aesop.Util.UnorderedArraySet","Std.Data.String","Std.Lean.Expr","Std.Lean.Meta.DiscrTree","Std.Lean.PersistentHashSet","Lean.Meta.Tactic.TryThis"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L381-L388","name":"Aesop.throwAesopEx","line":381,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.throwAesopEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.throwAesopEx\"><span class=\"name\">Aesop</span>.<span class=\"name\">throwAesopEx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L375-L379","name":"Aesop.aesop.smallErrorMessages","line":375,"kind":"opaque","docLink":"./Aesop/Util/Basic.html#Aesop.aesop.smallErrorMessages","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.aesop.smallErrorMessages\"><span class=\"name\">Aesop</span>.<span class=\"name\">aesop</span>.<span class=\"name\">smallErrorMessages</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L361-L373","name":"Aesop.elabPattern.adjustCtx","line":361,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.elabPattern.adjustCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.elabPattern.adjustCtx\"><span class=\"name\">Aesop</span>.<span class=\"name\">elabPattern</span>.<span class=\"name\">adjustCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(old : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Lean.Elab.Term.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Lean.Elab.Term.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L358-L373","name":"Aesop.elabPattern","line":358,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.elabPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.elabPattern\"><span class=\"name\">Aesop</span>.<span class=\"name\">elabPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L347-L355","name":"Aesop.withMaxHeartbeats","line":347,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.withMaxHeartbeats","doc":"Runs a computation for at most the given number of heartbeats times 1000,\nignoring the global heartbeat limit. Note that heartbeats spent on the\ncomputation still count towards the global heartbeat count.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.withMaxHeartbeats\"><span class=\"name\">Aesop</span>.<span class=\"name\">withMaxHeartbeats</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L337-L340","name":"Aesop.addTryThisTacticSeqSuggestion.dedent","line":337,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.addTryThisTacticSeqSuggestion.dedent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.addTryThisTacticSeqSuggestion.dedent\"><span class=\"name\">Aesop</span>.<span class=\"name\">addTryThisTacticSeqSuggestion</span>.<span class=\"name\">dedent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L316-L340","name":"Aesop.addTryThisTacticSeqSuggestion","line":316,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.addTryThisTacticSeqSuggestion","doc":"Register a \"Try this\" suggestion for a tactic sequence.\n\nIt works when the tactic to replace appears on its own line:\n\n```lean\nby\n  aesop?\n```\n\nIt doesn't work (i.e., the suggestion will appear but in the wrong place) when\nthe tactic to replace is preceded by other text on the same line:\n\n```lean\nhave x := by aesop?\n```\n\nThe `Try this:` suggestion in the infoview is not correctly formatted, but\nthere's nothing we can do about this at the moment.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.addTryThisTacticSeqSuggestion\"><span class=\"name\">Aesop</span>.<span class=\"name\">addTryThisTacticSeqSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suggestion : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(origSpan? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L288-L292","name":"Aesop.withAllTransparencySyntax","line":288,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.withAllTransparencySyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.withAllTransparencySyntax\"><span class=\"name\">Aesop</span>.<span class=\"name\">withAllTransparencySyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(md : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L280-L286","name":"Aesop.withTransparencySyntax","line":280,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.withTransparencySyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.withTransparencySyntax\"><span class=\"name\">Aesop</span>.<span class=\"name\">withTransparencySyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(md : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L274-L278","name":"Aesop.withAllTransparencySeqSyntax","line":274,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.withAllTransparencySeqSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.withAllTransparencySeqSyntax\"><span class=\"name\">Aesop</span>.<span class=\"name\">withAllTransparencySeqSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(md : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L266-L272","name":"Aesop.withTransparencySeqSyntax","line":266,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.withTransparencySeqSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.withTransparencySeqSyntax\"><span class=\"name\">Aesop</span>.<span class=\"name\">withTransparencySeqSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(md : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L245-L258","name":"Aesop.partitionGoalsAndMVars","line":245,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.partitionGoalsAndMVars","doc":"Partition an array of `MVarId`s into 'goals' and 'proper mvars'. An `MVarId`\nfrom the input array `ms` is classified as a proper mvar if any of the `ms`\ndepend on it, and as a goal otherwise. Additionally, for each goal, we report\nthe set of mvars that the goal depends on.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.partitionGoalsAndMVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">partitionGoalsAndMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goals : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Aesop/Util/UnorderedArraySet.html#Aesop.UnorderedArraySet\">Aesop.UnorderedArraySet</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Aesop/Util/UnorderedArraySet.html#Aesop.UnorderedArraySet\">Aesop.UnorderedArraySet</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L234-L237","name":"Aesop.getAppUpToDefeq.go","line":234,"kind":"opaque","docLink":"./Aesop/Util/Basic.html#Aesop.getAppUpToDefeq.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.getAppUpToDefeq.go\"><span class=\"name\">Aesop</span>.<span class=\"name\">getAppUpToDefeq</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L231-L237","name":"Aesop.getAppUpToDefeq","line":231,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.getAppUpToDefeq","doc":"If the input expression `e` reduces to `f x₁ ... xₙ` via repeated `whnf`, this\nfunction returns `f` and `[x₁, ⋯, xₙ]`. Otherwise it returns `e` (unchanged, not\nin WHNF!) and `[]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.getAppUpToDefeq\"><span class=\"name\">Aesop</span>.<span class=\"name\">getAppUpToDefeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L216-L224","name":"Aesop.isAppOfUpToDefeq","line":216,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.isAppOfUpToDefeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.isAppOfUpToDefeq\"><span class=\"name\">Aesop</span>.<span class=\"name\">isAppOfUpToDefeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L211-L214","name":"Aesop.updateSimpEntryPriority","line":211,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.updateSimpEntryPriority","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.updateSimpEntryPriority\"><span class=\"name\">Aesop</span>.<span class=\"name\">updateSimpEntryPriority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(priority : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L208-L209","name":"Aesop.runTermElabMAsCoreM","line":208,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.runTermElabMAsCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.runTermElabMAsCoreM\"><span class=\"name\">Aesop</span>.<span class=\"name\">runTermElabMAsCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L204-L205","name":"Aesop.runMetaMAsCoreM","line":204,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.runMetaMAsCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.runMetaMAsCoreM\"><span class=\"name\">Aesop</span>.<span class=\"name\">runMetaMAsCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L200-L201","name":"Aesop.setThe","line":200,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.setThe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.setThe\"><span class=\"name\">Aesop</span>.<span class=\"name\">setThe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L191-L194","name":"Aesop.SimpTheorems.containsDecl","line":191,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.SimpTheorems.containsDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.SimpTheorems.containsDecl\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">containsDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thms : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L188-L189","name":"Aesop.SimpTheorems.simpEntries","line":188,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.SimpTheorems.simpEntries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.SimpTheorems.simpEntries\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">simpEntries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thms : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L184-L186","name":"Aesop.SimpTheorems.foldSimpEntries","line":184,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.SimpTheorems.foldSimpEntries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.SimpTheorems.foldSimpEntries\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">foldSimpEntries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thms : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L178-L182","name":"Aesop.SimpTheorems.foldSimpEntriesM.processTheorem","line":178,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.SimpTheorems.foldSimpEntriesM.processTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.SimpTheorems.foldSimpEntriesM.processTheorem\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">foldSimpEntriesM</span>.<span class=\"name\">processTheorem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thms : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thm : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L169-L182","name":"Aesop.SimpTheorems.foldSimpEntriesM","line":169,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.SimpTheorems.foldSimpEntriesM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.SimpTheorems.foldSimpEntriesM\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">foldSimpEntriesM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thms : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L162-L167","name":"Aesop.SimpTheorems.addSimpEntry","line":162,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.SimpTheorems.addSimpEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.SimpTheorems.addSimpEntry\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">addSimpEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a> → <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L154-L156","name":"Aesop.filterDiscrTree","line":154,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.filterDiscrTree","doc":"Remove elements for which `p` returns `false` from the given `DiscrTree`.\nThe removed elements are folded over using `f` and `init`, so `f` is called\nonce for each removed element and the final state of type `σ` is returned.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.filterDiscrTree\"><span class=\"name\">Aesop</span>.<span class=\"name\">filterDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L139-L147","name":"Aesop.filterDiscrTreeM","line":139,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.filterDiscrTreeM","doc":"Remove elements for which `p` returns `false` from the given `DiscrTree`.\nThe removed elements are monadically folded over using `f` and `init`, so `f`\nis called once for each removed element and the final state of type `σ` is\nreturned.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.filterDiscrTreeM\"><span class=\"name\">Aesop</span>.<span class=\"name\">filterDiscrTreeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L107-L108","name":"Aesop.isEmptyTrie","line":107,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.isEmptyTrie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.isEmptyTrie\"><span class=\"name\">Aesop</span>.<span class=\"name\">isEmptyTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie\">Lean.Meta.DiscrTree.Trie</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L99-L105","name":"Aesop.getConstDiscrTreeKeys","line":99,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.getConstDiscrTreeKeys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.getConstDiscrTreeKeys\"><span class=\"name\">Aesop</span>.<span class=\"name\">getConstDiscrTreeKeys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L89-L93","name":"Aesop.getConclusionDiscrTreeKeys","line":89,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.getConclusionDiscrTreeKeys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.getConclusionDiscrTreeKeys\"><span class=\"name\">Aesop</span>.<span class=\"name\">getConclusionDiscrTreeKeys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L77-L79","name":"Aesop.PersistentHashSet.toArray","line":77,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.PersistentHashSet.toArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.PersistentHashSet.toArray\"><span class=\"name\">Aesop</span>.<span class=\"name\">PersistentHashSet</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PersistentHashSet\">Lean.PersistentHashSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L70-L72","name":"Aesop.PersistentHashSet.toList","line":70,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.PersistentHashSet.toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.PersistentHashSet.toList\"><span class=\"name\">Aesop</span>.<span class=\"name\">PersistentHashSet</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PersistentHashSet\">Lean.PersistentHashSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L61-L62","name":"Aesop.HashSet.filter","line":61,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.HashSet.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.HashSet.filter\"><span class=\"name\">Aesop</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L52-L56","name":"Aesop.time'","line":52,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.time'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.time'\"><span class=\"name\">Aesop</span>.<span class=\"name\">time'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Aesop/Nanos.html#Aesop.Nanos\">Aesop.Nanos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L45-L49","name":"Aesop.time","line":45,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.time","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.time\"><span class=\"name\">Aesop</span>.<span class=\"name\">time</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Nanos.html#Aesop.Nanos\">Aesop.Nanos</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L30-L40","name":"Aesop.Subarray.popFront?","line":30,"kind":"def","docLink":"./Aesop/Util/Basic.html#Aesop.Subarray.popFront?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.Subarray.popFront?\"><span class=\"name\">Aesop</span>.<span class=\"name\">Subarray</span>.<span class=\"name\">popFront?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/8be30c25e3caa06937feeb62f7ca898370f80ee9/Aesop/Util/Basic.lean#L21-L24","name":"Aesop.Array.size_modify","line":21,"kind":"theorem","docLink":"./Aesop/Util/Basic.html#Aesop.Array.size_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/Basic.html#Aesop.Array.size_modify\"><span class=\"name\">Aesop</span>.<span class=\"name\">Array</span>.<span class=\"name\">size_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array.size\">Array.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.modify\">Array.modify</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.size\">Array.size</a> <span class=\"fn\">a</span></span></span></div></div>"}]}