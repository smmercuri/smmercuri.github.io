{"name":"Aesop.Util.EqualUpToIds","instances":[{"typeNames":["Aesop.EqualUpToIdsM"],"name":"Aesop.instMonadEqualUpToIdsM","className":"Monad"}],"imports":["Init","Lean.Elab.Tactic.Basic","Batteries.Lean.Meta.SavedState"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L391-L396","name":"Aesop.tacticStatesEqualUpToIds'","line":391,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds'\"><span class=\"name\">Aesop</span>.<span class=\"name\">tacticStatesEqualUpToIds'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowAssignmentDiff : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">Aesop.EqualUpToIdsM.State</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L385-L389","name":"Aesop.tacticStatesEqualUpToIds","line":385,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">tacticStatesEqualUpToIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowAssignmentDiff : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L378-L383","name":"Aesop.unassignedMVarsEqualUptoIds'","line":378,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds'\"><span class=\"name\">Aesop</span>.<span class=\"name\">unassignedMVarsEqualUptoIds'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₁ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₂ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowAssignmentDiff : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">Aesop.EqualUpToIdsM.State</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L372-L376","name":"Aesop.unassignedMVarsEqualUptoIds","line":372,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">unassignedMVarsEqualUptoIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₁ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₂ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowAssignmentDiff : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L364-L370","name":"Aesop.exprsEqualUpToIds'","line":364,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds'\"><span class=\"name\">Aesop</span>.<span class=\"name\">exprsEqualUpToIds'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowAssignmentDiff : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L356-L362","name":"Aesop.exprsEqualUpToIds","line":356,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">exprsEqualUpToIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx₁ : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx₂ : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localInstances₁ : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localInstances₂ : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowAssignmentDiff : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L345-L352","name":"Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore","line":345,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">tacticStatesEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goals₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L342-L343","name":"Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore","line":342,"kind":"opaque","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">unassignedMVarsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId₁ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₂ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L339-L339","name":"Aesop.EqualUpToIds.exprsEqualUpToIdsCore","line":339,"kind":"opaque","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.exprsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.exprsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">exprsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L302-L333","name":"Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore","line":302,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">unassignedMVarsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId₁ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₂ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L287-L300","name":"Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go","line":287,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localContextsEqualUpToIdsCore</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">decls₁</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">decls₂</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(gctx : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L276-L300","name":"Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore","line":276,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localContextsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lctx₁ : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx₂ : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localInstances₁ : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localInstances₂ : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L261-L274","name":"Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore","line":261,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localDeclsEqualUpToIdsCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L227-L259","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.compareMVarValues","line":227,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.compareMVarValues","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.compareMVarValues\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore'</span>.<span class=\"name\">compareMVarValues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v₁ : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₂ : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L220-L225","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.normalizeMVar","line":220,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.normalizeMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.normalizeMVar\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore'</span>.<span class=\"name\">normalizeMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L174-L259","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'","line":174,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L168-L172","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.printExpr","line":168,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.printExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.printExpr\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore</span>.<span class=\"name\">printExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localInstances : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L165-L166","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.instMVars","line":165,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.instMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.instMVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore</span>.<span class=\"name\">instMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L156-L172","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore","line":156,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L147-L147","name":"Aesop.EqualUpToIds.levelsEqualUpToIdsCore","line":147,"kind":"opaque","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.levelsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.levelsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">levelsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L124-L141","name":"Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'","line":124,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">levelsEqualUpToIdsCore'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L118-L122","name":"Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore","line":118,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">levelsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L109-L109","name":"Aesop.EqualUpToIds.MVarValue.delayedAssignment","line":109,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.delayedAssignment","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.delayedAssignment\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">delayedAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(da : <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">Lean.DelayedMetavarAssignment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L108-L108","name":"Aesop.EqualUpToIds.MVarValue.expr","line":108,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.expr\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L107-L107","name":"Aesop.EqualUpToIds.MVarValue.mvarId","line":107,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.mvarId\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L106-L109","name":"Aesop.EqualUpToIds.MVarValue","line":106,"kind":"inductive","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L104-L104","name":"Aesop.EqualUpToIds.GoalContext.equalFVarIds","line":104,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.equalFVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.equalFVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">equalFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L103-L103","name":"Aesop.EqualUpToIds.GoalContext.localInstances₂","line":103,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">localInstances₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L102-L102","name":"Aesop.EqualUpToIds.GoalContext.lctx₂","line":102,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">lctx₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L101-L101","name":"Aesop.EqualUpToIds.GoalContext.localInstances₁","line":101,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">localInstances₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L100-L100","name":"Aesop.EqualUpToIds.GoalContext.lctx₁","line":100,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">lctx₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L99-L99","name":"Aesop.EqualUpToIds.GoalContext.mk","line":99,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lctx₁ : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localInstances₁ : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx₂ : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localInstances₂ : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(equalFVarIds : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L99-L104","name":"Aesop.EqualUpToIds.GoalContext","line":99,"kind":"structure","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L89-L97","name":"Aesop.EqualUpToIds.equalCommonMVars?","line":89,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonMVars?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonMVars?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">equalCommonMVars?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId₁ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₂ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L79-L87","name":"Aesop.EqualUpToIds.equalCommonLMVars?","line":79,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonLMVars?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonLMVars?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">equalCommonLMVars?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lmvarId₁ : <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lmvarId₂ : <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L76-L77","name":"Aesop.EqualUpToIds.readAllowAssignmentDiff","line":76,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readAllowAssignmentDiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readAllowAssignmentDiff\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readAllowAssignmentDiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L73-L74","name":"Aesop.EqualUpToIds.readMCtx₂","line":73,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readMCtx₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L70-L71","name":"Aesop.EqualUpToIds.readMCtx₁","line":70,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readMCtx₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L67-L68","name":"Aesop.EqualUpToIds.readCommonMCtx?","line":67,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readCommonMCtx?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readCommonMCtx?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readCommonMCtx?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L60-L63","name":"Aesop.EqualUpToIdsM.run","line":60,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowAssignmentDiff : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L54-L58","name":"Aesop.EqualUpToIdsM.run'","line":54,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run'\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowAssignmentDiff : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">Aesop.EqualUpToIdsM.State</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L51-L52","name":"Aesop.instMonadEqualUpToIdsM","line":51,"kind":"instance","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.instMonadEqualUpToIdsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.instMonadEqualUpToIdsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">instMonadEqualUpToIdsM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">Aesop.EqualUpToIdsM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L45-L46","name":"Aesop.EqualUpToIdsM","line":45,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L40-L40","name":"Aesop.EqualUpToIdsM.State.rightUnassignedMVarValues","line":40,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.rightUnassignedMVarValues","doc":"A map from metavariables which are unassigned in the right goal\nto their corresponding expression in the left goal. Only used when\n`allowAssignmentDiff = true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.rightUnassignedMVarValues\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">rightUnassignedMVarValues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">Aesop.EqualUpToIdsM.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L36-L36","name":"Aesop.EqualUpToIdsM.State.leftUnassignedMVarValues","line":36,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.leftUnassignedMVarValues","doc":"A map from metavariables which are unassigned in the left goal\nto their corresponding expression in the right goal. Only used when\n`allowAssignmentDiff = true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.leftUnassignedMVarValues\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">leftUnassignedMVarValues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">Aesop.EqualUpToIdsM.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L32-L32","name":"Aesop.EqualUpToIdsM.State.equalLMVarIds","line":32,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalLMVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalLMVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">equalLMVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">Aesop.EqualUpToIdsM.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L31-L31","name":"Aesop.EqualUpToIdsM.State.equalMVarIds","line":31,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalMVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalMVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">equalMVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">Aesop.EqualUpToIdsM.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L30-L30","name":"Aesop.EqualUpToIdsM.State.mk","line":30,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(equalMVarIds : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(equalLMVarIds : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(leftUnassignedMVarValues : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rightUnassignedMVarValues : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">Aesop.EqualUpToIdsM.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L30-L40","name":"Aesop.EqualUpToIdsM.State","line":30,"kind":"structure","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L28-L28","name":"Aesop.EqualUpToIdsM.Context.allowAssignmentDiff","line":28,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.allowAssignmentDiff","doc":"Allow metavariables to be unassigned on one side of the comparison and\nassigned on the other. So when we compare two expressions and we encounter\na metavariable `?x` in one of them and a subexpression `e` in the other (at\nthe same position), we consider `?x` equal to `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.allowAssignmentDiff\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">allowAssignmentDiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Aesop.EqualUpToIdsM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L22-L22","name":"Aesop.EqualUpToIdsM.Context.mctx₂","line":22,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mctx₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Aesop.EqualUpToIdsM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L21-L21","name":"Aesop.EqualUpToIdsM.Context.mctx₁","line":21,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mctx₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Aesop.EqualUpToIdsM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L20-L20","name":"Aesop.EqualUpToIdsM.Context.commonMCtx?","line":20,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.commonMCtx?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.commonMCtx?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">commonMCtx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Aesop.EqualUpToIdsM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L19-L19","name":"Aesop.EqualUpToIdsM.Context.mk","line":19,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowAssignmentDiff : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Aesop.EqualUpToIdsM.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/79fb157c6a5061190d169535f8e5cb007914a82e/Aesop/Util/EqualUpToIds.lean#L19-L28","name":"Aesop.EqualUpToIdsM.Context","line":19,"kind":"structure","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}