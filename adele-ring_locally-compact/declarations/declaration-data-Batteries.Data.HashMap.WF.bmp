{"name":"Batteries.Data.HashMap.WF","instances":[],"imports":["Init","Batteries.Data.HashMap.Basic","Batteries.Data.Array.Lemmas","Batteries.Data.Nat.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L393-L394","name":"Batteries.HashMap.filter","line":393,"kind":"def","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.filter","doc":"Constructs a map with the set of all pairs `a, b` such that `f` returns true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.filter\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>} → <span class=\"fn\">{<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>} → <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap\">Batteries.HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap\">Batteries.HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L389-L390","name":"Batteries.HashMap.filterMap","line":389,"kind":"def","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.filterMap","doc":"Applies `f` to each key-value pair `a, b` in the map. If it returns `some c` then\n`a, c` is pushed into the new map; else the key is removed from the map.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.filterMap\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>} →\n  <span class=\"fn\">{<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>} →\n    <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2} → <span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">γ</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap\">Batteries.HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap\">Batteries.HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L382-L383","name":"Batteries.HashMap.mapVal","line":382,"kind":"def","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.mapVal","doc":"Map a function over the values in the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.mapVal\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">mapVal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>} →\n  <span class=\"fn\">{<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>} → <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2} → <span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap\">Batteries.HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap\">Batteries.HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L326-L375","name":"Batteries.HashMap.Imp.WF.filterMap","line":326,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.WF.filterMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.WF.filterMap\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">WF</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp\">Batteries.HashMap.Imp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">m</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.filterMap\">Batteries.HashMap.Imp.filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span></span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L313-L324","name":"Batteries.HashMap.Imp.WF.mapVal","line":313,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.WF.mapVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.WF.mapVal\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">WF</span>.<span class=\"name\">mapVal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp\">Batteries.HashMap.Imp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">m</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.mapVal\">Batteries.HashMap.Imp.mapVal</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span></span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L309-L311","name":"Batteries.HashMap.Imp.WF_iff","line":309,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.WF_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.WF_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">WF_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp\">Batteries.HashMap.Imp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.WF</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.buckets</span>.size</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.buckets</span>.WF</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L300-L307","name":"Batteries.HashMap.Imp.WF.out","line":300,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.WF.out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.WF.out\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">WF</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp\">Batteries.HashMap.Imp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">m</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.buckets</span>.size</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.buckets</span>.WF</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L290-L298","name":"Batteries.HashMap.Imp.modify_WF","line":290,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.modify_WF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.modify_WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">modify_WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp\">Batteries.HashMap.Imp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.buckets</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.modify</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>)</span>.buckets</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L282-L288","name":"Batteries.HashMap.Imp.modify_size","line":282,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.modify_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.modify_size\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">modify_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp\">Batteries.HashMap.Imp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.buckets</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.modify</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.modify</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>)</span>.buckets</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L274-L280","name":"Batteries.HashMap.Imp.erase_WF","line":274,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.erase_WF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.erase_WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">erase_WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp\">Batteries.HashMap.Imp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.buckets</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.erase</span> <span class=\"fn\">k</span></span>)</span>.buckets</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L257-L272","name":"Batteries.HashMap.Imp.erase_size","line":257,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.erase_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.erase_size\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">erase_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp\">Batteries.HashMap.Imp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.buckets</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.erase</span> <span class=\"fn\">k</span></span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.erase</span> <span class=\"fn\">k</span></span>)</span>.buckets</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L235-L255","name":"Batteries.HashMap.Imp.insert_WF","line":235,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.insert_WF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.insert_WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">insert_WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp\">Batteries.HashMap.Imp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.buckets</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.insert</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span>)</span>.buckets</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L187-L200","name":"Batteries.HashMap.Imp.insert_size","line":187,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.insert_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.insert_size\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">insert_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp\">Batteries.HashMap.Imp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.buckets</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.insert</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.insert</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span>)</span>.buckets</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L157-L184","name":"Batteries.HashMap.Imp.expand_WF.go","line":157,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.expand_WF.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.expand_WF.go\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">expand_WF</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{source : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs₁ : <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.LawfulHashable\">Batteries.HashMap.LawfulHashable</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Classes/BEq.html#PartialEquivBEq\">PartialEquivBEq</a> <span class=\"fn\">α</span></span>] (<span class=\"fn\">bucket</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">bucket</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">source</span>.data</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.fst</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.fst</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">bucket</span>.toList</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs₂ : <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">source</span>.size</span></span>),\n  <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.All\">Batteries.AssocList.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable.hash\">hash</a> <span class=\"fn\">k</span></span>)</span>.toUSize</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">source</span>.size</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">source</span>[<span class=\"fn\">j</span>]</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{target : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.WF</span> <a href=\"./Init/Prelude.html#And\">∧</a>   <span class=\"fn\">∀ (<span class=\"fn\">bucket</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">bucket</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.val</span>.data</span></span> →\n      <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.All\">Batteries.AssocList.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable.hash\">hash</a> <span class=\"fn\">k</span></span>)</span>.toUSize</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">source</span>.size</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">bucket</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.expand.go\">Batteries.HashMap.Imp.expand.go</a> <span class=\"fn\">i</span> <span class=\"fn\">source</span> <span class=\"fn\">target</span></span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L153-L185","name":"Batteries.HashMap.Imp.expand_WF","line":153,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.expand_WF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.expand_WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">expand_WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sz : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{buckets : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">buckets</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.expand\">Batteries.HashMap.Imp.expand</a> <span class=\"fn\">sz</span> <span class=\"fn\">buckets</span></span>)</span>.buckets</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L122-L151","name":"Batteries.HashMap.Imp.expand_WF.foldl","line":122,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.expand_WF.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.expand_WF.foldl\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">expand_WF</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rank : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl₁ : <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Classes/BEq.html#PartialEquivBEq\">PartialEquivBEq</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.LawfulHashable\">Batteries.HashMap.LawfulHashable</a> <span class=\"fn\">α</span></span>],\n  <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.fst</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.fst</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span>)</span> <span class=\"fn\">l</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl₂ : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rank</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{target : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht₁ : <span class=\"fn\"><span class=\"fn\">target</span>.WF</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht₂ : <span class=\"fn\">∀ (<span class=\"fn\">bucket</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">bucket</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.val</span>.data</span></span> →\n    <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.All\">Batteries.AssocList.All</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt;\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rank</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>           <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Classes/BEq.html#PartialEquivBEq\">PartialEquivBEq</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.LawfulHashable\">Batteries.HashMap.LawfulHashable</a> <span class=\"fn\">α</span></span>] (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.fst</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span></span></span>)</span>\n      <span class=\"fn\">bucket</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.reinsertAux\">Batteries.HashMap.Imp.reinsertAux</a> <span class=\"fn\">d</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span> <span class=\"fn\"><span class=\"fn\">x</span>.snd</span></span></span>)</span>\n      <span class=\"fn\">target</span> <span class=\"fn\">l</span></span>)</span>.WF</span> <a href=\"./Init/Prelude.html#And\">∧</a>   <span class=\"fn\">∀ (<span class=\"fn\">bucket</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">bucket</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>         <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a>\n              <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.reinsertAux\">Batteries.HashMap.Imp.reinsertAux</a> <span class=\"fn\">d</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span> <span class=\"fn\"><span class=\"fn\">x</span>.snd</span></span></span>)</span>\n              <span class=\"fn\">target</span> <span class=\"fn\">l</span></span>)</span>.val</span>.data</span></span> →\n      <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.All\">Batteries.AssocList.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rank</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">bucket</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L91-L119","name":"Batteries.HashMap.Imp.expand_size.go","line":91,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.expand_size.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.expand_size.go\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">expand_size</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(source : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">source</span>.data</span>[<span class=\"fn\">j</span>]?</span>.getD</span> <span class=\"fn\">Batteries.AssocList.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Batteries.AssocList.nil</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.expand.go\">Batteries.HashMap.Imp.expand.go</a> <span class=\"fn\">i</span> <span class=\"fn\">source</span> <span class=\"fn\">target</span></span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toList</span>.length</span></span>)</span> <span class=\"fn\"><span class=\"fn\">source</span>.data</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">target</span>.size</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L85-L120","name":"Batteries.HashMap.Imp.expand_size","line":85,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.expand_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.expand_size\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">expand_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sz : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{buckets : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.expand\">Batteries.HashMap.Imp.expand</a> <span class=\"fn\">sz</span> <span class=\"fn\">buckets</span></span>)</span>.buckets</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">buckets</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L76-L83","name":"Batteries.HashMap.Imp.reinsertAux_WF","line":76,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.reinsertAux_WF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.reinsertAux_WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">reinsertAux_WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{data : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">data</span>.WF</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Classes/BEq.html#PartialEquivBEq\">PartialEquivBEq</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.LawfulHashable\">Batteries.HashMap.LawfulHashable</a> <span class=\"fn\">α</span></span>],\n  <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.All\">Batteries.AssocList.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">data</span>.val</span>[<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.mkIdx\">Batteries.HashMap.Imp.mkIdx</a> <span class=\"fn\">⋯</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable.hash\">hash</a> <span class=\"fn\">a</span></span>)</span>.toUSize</span></span>)</span>.val</span>]</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.reinsertAux\">Batteries.HashMap.Imp.reinsertAux</a> <span class=\"fn\">data</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L69-L74","name":"Batteries.HashMap.Imp.reinsertAux_size","line":69,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.reinsertAux_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.reinsertAux_size\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">reinsertAux_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(data : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.reinsertAux\">Batteries.HashMap.Imp.reinsertAux</a> <span class=\"fn\">data</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">data</span>.size</span>.succ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L48-L65","name":"Batteries.HashMap.Imp.Buckets.WF.update","line":48,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.WF.update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.WF.update\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Buckets</span>.<span class=\"name\">WF</span>.<span class=\"name\">update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{buckets : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">buckets</span>.val</span>.size</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">buckets</span>.WF</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Classes/BEq.html#PartialEquivBEq\">PartialEquivBEq</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.LawfulHashable\">Batteries.HashMap.LawfulHashable</a> <span class=\"fn\">α</span></span>],\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.fst</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.fst</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span>)</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">buckets</span>.val</span>[<span class=\"fn\">i</span>]</span>.toList</span></span> →\n    <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.fst</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.fst</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">d</span>.toList</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.All\">Batteries.AssocList.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable.hash\">hash</a> <span class=\"fn\">k</span></span>)</span>.toUSize</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">buckets</span>.val</span>.size</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span>.toNat</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">buckets</span>.val</span>[<span class=\"fn\">i</span>]</span></span> →\n  <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.All\">Batteries.AssocList.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable.hash\">hash</a> <span class=\"fn\">k</span></span>)</span>.toUSize</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">buckets</span>.val</span>.size</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span>.toNat</span></span></span>)</span> <span class=\"fn\">d</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">buckets</span>.update</span> <span class=\"fn\">i</span> <span class=\"fn\">d</span> <span class=\"fn\">h</span></span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L42-L46","name":"Batteries.HashMap.Imp.Buckets.WF.mk'","line":42,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.WF.mk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.WF.mk'\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Buckets</span>.<span class=\"name\">WF</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets.mk\">Batteries.HashMap.Imp.Buckets.mk</a> <span class=\"fn\">n</span> <span class=\"fn\">h</span></span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L38-L40","name":"Batteries.HashMap.Imp.Buckets.mk_size","line":38,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.mk_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.mk_size\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Buckets</span>.<span class=\"name\">mk_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets.mk\">Batteries.HashMap.Imp.Buckets.mk</a> <span class=\"fn\">n</span> <span class=\"fn\">h</span></span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L35-L36","name":"Batteries.HashMap.Imp.Buckets.size_eq","line":35,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.size_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Buckets</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(data : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">data</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toList</span>.length</span></span>)</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">data</span>.val</span>.data</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L29-L33","name":"Batteries.HashMap.Imp.Buckets.update_update","line":29,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.update_update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.update_update\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Buckets</span>.<span class=\"name\">update_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d' : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.val</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.update</span> <span class=\"fn\">i</span> <span class=\"fn\">d</span> <span class=\"fn\">h</span></span>)</span>.val</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.update</span> <span class=\"fn\">i</span> <span class=\"fn\">d</span> <span class=\"fn\">h</span></span>)</span>.update</span> <span class=\"fn\">i</span> <span class=\"fn\">d'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.update</span> <span class=\"fn\">i</span> <span class=\"fn\">d'</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L23-L27","name":"Batteries.HashMap.Imp.Buckets.exists_of_update","line":23,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.exists_of_update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.exists_of_update\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Buckets</span>.<span class=\"name\">exists_of_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.val</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>),\n  <span class=\"fn\">∃ (<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.val</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.val</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span></span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span>.toNat</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.update</span> <span class=\"fn\">i</span> <span class=\"fn\">d</span> <span class=\"fn\">h</span></span>)</span>.val</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L20-L21","name":"Batteries.HashMap.Imp.Buckets.update_data","line":20,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.update_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.update_data\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Buckets</span>.<span class=\"name\">update_data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.val</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.update</span> <span class=\"fn\">i</span> <span class=\"fn\">d</span> <span class=\"fn\">h</span></span>)</span>.val</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.val</span>.data</span>.set</span> <span class=\"fn\"><span class=\"fn\">i</span>.toNat</span> <span class=\"fn\">d</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/HashMap/WF.lean#L17-L18","name":"Batteries.HashMap.Imp.Buckets.ext","line":17,"kind":"theorem","docLink":"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/HashMap/WF.html#Batteries.HashMap.Imp.Buckets.ext\"><span class=\"name\">Batteries</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Buckets</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\"><a href=\"./Batteries/Data/HashMap/Basic.html#Batteries.HashMap.Imp.Buckets\">Batteries.HashMap.Imp.Buckets</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b₁</span>.val</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b₂</span>.val</span>.data</span></span> → <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₂</span></span></span></div></div>"}]}