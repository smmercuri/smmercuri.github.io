{"name":"Batteries.Data.Nat.Lemmas","instances":[],"imports":["Init","Batteries.Tactic.Alias","Batteries.Data.Nat.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L188-L188","name":"Nat.pow_two_pos","line":188,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.pow_two_pos","doc":"**Alias** of `Nat.two_pow_pos`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.pow_two_pos\"><span class=\"name\">Nat</span>.<span class=\"name\">pow_two_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L187-L187","name":"Nat.lt_connex","line":187,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.lt_connex","doc":"**Alias** of `Nat.lt_or_gt_of_ne`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.lt_connex\"><span class=\"name\">Nat</span>.<span class=\"name\">lt_connex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ne : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L184-L185","name":"Nat.sum_append","line":184,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.sum_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.sum_append\"><span class=\"name\">Nat</span>.<span class=\"name\">sum_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">l₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L182-L182","name":"Nat.sum_cons","line":182,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.sum_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.sum_cons\"><span class=\"name\">Nat</span>.<span class=\"name\">sum_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L180-L180","name":"Nat.sum_nil","line":180,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.sum_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.sum_nil\"><span class=\"name\">Nat</span>.<span class=\"name\">sum_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L168-L168","name":"Nat.mul_lt_mul'","line":168,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.mul_lt_mul'","doc":"**Alias** of `Nat.mul_lt_mul_of_le_of_lt`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.mul_lt_mul'\"><span class=\"name\">Nat</span>.<span class=\"name\">mul_lt_mul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hac : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hbd : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">d</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L166-L166","name":"Nat.mul_lt_mul","line":166,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.mul_lt_mul","doc":"**Alias** of `Nat.mul_lt_mul_of_lt_of_le'`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.mul_lt_mul\"><span class=\"name\">Nat</span>.<span class=\"name\">mul_lt_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hac : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hbd : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">d</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L161-L162","name":"Nat.le_of_le_of_sub_le_sub_left","line":161,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.le_of_le_of_sub_le_sub_left","doc":"**Alias** of `Nat.le_of_sub_le_sub_left`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.le_of_le_of_sub_le_sub_left\"><span class=\"name\">Nat</span>.<span class=\"name\">le_of_le_of_sub_le_sub_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">n</span></span></span> → <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L158-L159","name":"Nat.le_of_le_of_sub_le_sub_right","line":158,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.le_of_le_of_sub_le_sub_right","doc":"**Alias** of `Nat.le_of_sub_le_sub_right`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.le_of_le_of_sub_le_sub_right\"><span class=\"name\">Nat</span>.<span class=\"name\">le_of_le_of_sub_le_sub_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">k</span></span></span> → <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L154-L154","name":"Nat.succ_add_eq_succ_add","line":154,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.succ_add_eq_succ_add","doc":"**Alias** of `Nat.succ_add_eq_add_succ`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.succ_add_eq_succ_add\"><span class=\"name\">Nat</span>.<span class=\"name\">succ_add_eq_succ_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.succ</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.succ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L146-L150","name":"Nat.sum_trichotomy","line":146,"kind":"def","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.sum_trichotomy","doc":"Strong case analysis on `a < b ∨ a = b ∨ b < a` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.sum_trichotomy\"><span class=\"name\">Nat</span>.<span class=\"name\">sum_trichotomy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L142-L143","name":"Nat.lt_sum_ge","line":142,"kind":"def","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.lt_sum_ge","doc":"Strong case analysis on `a < b ∨ b ≤ a` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.lt_sum_ge\"><span class=\"name\">Nat</span>.<span class=\"name\">lt_sum_ge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L134-L137","name":"Nat.casesDiagOn_succ_succ","line":134,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.casesDiagOn_succ_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.casesDiagOn_succ_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">casesDiagOn_succ_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.casesDiagOn\">Nat.casesDiagOn</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">succ_succ</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L129-L132","name":"Nat.casesDiagOn_succ_zero","line":129,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.casesDiagOn_succ_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.casesDiagOn_succ_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">casesDiagOn_succ_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.casesDiagOn\">Nat.casesDiagOn</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">succ_zero</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L124-L127","name":"Nat.casesDiagOn_zero_succ","line":124,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.casesDiagOn_zero_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.casesDiagOn_zero_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">casesDiagOn_zero_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.casesDiagOn\">Nat.casesDiagOn</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">zero_succ</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L119-L122","name":"Nat.casesDiagOn_zero_zero","line":119,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.casesDiagOn_zero_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.casesDiagOn_zero_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">casesDiagOn_zero_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.casesDiagOn\">Nat.casesDiagOn</a> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">zero_zero</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L113-L117","name":"Nat.recDiagOn_succ_succ","line":113,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagOn_succ_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagOn_succ_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiagOn_succ_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagOn\">Nat.recDiagOn</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">succ_succ</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagOn\">Nat.recDiagOn</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L106-L111","name":"Nat.recDiagOn_succ_zero","line":106,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagOn_succ_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagOn_succ_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiagOn_succ_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagOn\">Nat.recDiagOn</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">succ_zero</span> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagOn\">Nat.recDiagOn</a> <span class=\"fn\">m</span> <span class=\"fn\">0</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L99-L104","name":"Nat.recDiagOn_zero_succ","line":99,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagOn_zero_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagOn_zero_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiagOn_zero_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagOn\">Nat.recDiagOn</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">zero_succ</span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagOn\">Nat.recDiagOn</a> <span class=\"fn\">0</span> <span class=\"fn\">n</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L94-L97","name":"Nat.recDiagOn_zero_zero","line":94,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagOn_zero_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagOn_zero_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiagOn_zero_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagOn\">Nat.recDiagOn</a> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">zero_zero</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L88-L92","name":"Nat.recDiag_succ_succ","line":88,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiag_succ_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiag_succ_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiag_succ_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiag\">Nat.recDiag</a> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">succ_succ</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiag\">Nat.recDiag</a> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L81-L86","name":"Nat.recDiag_succ_zero","line":81,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiag_succ_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiag_succ_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiag_succ_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiag\">Nat.recDiag</a> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">succ_zero</span> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiag\">Nat.recDiag</a> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L74-L79","name":"Nat.recDiag_zero_succ","line":74,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiag_zero_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiag_zero_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiag_zero_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiag\">Nat.recDiag</a> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">zero_succ</span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiag\">Nat.recDiag</a> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L69-L72","name":"Nat.recDiag_zero_zero","line":69,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiag_zero_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiag_zero_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiag_zero_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_zero : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiag\">Nat.recDiag</a> <span class=\"fn\">zero_zero</span> <span class=\"fn\">zero_succ</span> <span class=\"fn\">succ_zero</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">zero_zero</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L63-L67","name":"Nat.recDiagAux_succ_succ","line":63,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagAux_succ_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagAux_succ_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiagAux_succ_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_left : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_right : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagAux\">Nat.recDiagAux</a> <span class=\"fn\">zero_left</span> <span class=\"fn\">zero_right</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">succ_succ</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagAux\">Nat.recDiagAux</a> <span class=\"fn\">zero_left</span> <span class=\"fn\">zero_right</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L57-L61","name":"Nat.recDiagAux_zero_right","line":57,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagAux_zero_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagAux_zero_right\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiagAux_zero_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_left : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_right : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">zero_left</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">zero_right</span> <span class=\"fn\">0</span></span></span>)</span> <a href=\"./Batteries/Data/Nat/Lemmas.html#_auto._@.Batteries.Data.Nat.Lemmas._hyg.496\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagAux\">Nat.recDiagAux</a> <span class=\"fn\">zero_left</span> <span class=\"fn\">zero_right</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">zero_right</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L52-L55","name":"Nat.recDiagAux_zero_left","line":52,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagAux_zero_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recDiagAux_zero_left\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiagAux_zero_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero_left : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zero_right : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ_succ : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagAux\">Nat.recDiagAux</a> <span class=\"fn\">zero_left</span> <span class=\"fn\">zero_right</span> <span class=\"fn\">succ_succ</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">zero_left</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L48-L50","name":"Nat.strongRecOn_eq","line":48,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.strongRecOn_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.strongRecOn_eq\"><span class=\"name\">Nat</span>.<span class=\"name\">strongRecOn_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ind : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.strongRecOn</span> <span class=\"fn\">ind</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ind</span> <span class=\"fn\">t</span> <span class=\"fn\">fun (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">t</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.strongRecOn</span> <span class=\"fn\">ind</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L44-L46","name":"Nat.strongRec_eq","line":44,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.strongRec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.strongRec_eq\"><span class=\"name\">Nat</span>.<span class=\"name\">strongRec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ind : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.strongRec\">Nat.strongRec</a> <span class=\"fn\">ind</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ind</span> <span class=\"fn\">t</span> <span class=\"fn\">fun (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">t</span></span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.strongRec\">Nat.strongRec</a> <span class=\"fn\">ind</span> <span class=\"fn\">m</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L40-L42","name":"Nat.casesAuxOn_succ","line":40,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.casesAuxOn_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.casesAuxOn_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">casesAuxOn_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Nat/Basic.html#Nat.casesAuxOn\">Nat.casesAuxOn</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">zero</span> <span class=\"fn\">succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">succ</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L36-L38","name":"Nat.casesAuxOn_zero","line":36,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.casesAuxOn_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.casesAuxOn_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">casesAuxOn_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Nat/Basic.html#Nat.casesAuxOn\">Nat.casesAuxOn</a> <span class=\"fn\">0</span> <span class=\"fn\">zero</span> <span class=\"fn\">succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">zero</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L32-L34","name":"Nat.recAuxOn_succ","line":32,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recAuxOn_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recAuxOn_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">recAuxOn_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recAuxOn\">Nat.recAuxOn</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">zero</span> <span class=\"fn\">succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">succ</span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recAuxOn\">Nat.recAuxOn</a> <span class=\"fn\">n</span> <span class=\"fn\">zero</span> <span class=\"fn\">succ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L28-L30","name":"Nat.recAuxOn_zero","line":28,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recAuxOn_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recAuxOn_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">recAuxOn_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Nat/Basic.html#Nat.recAuxOn\">Nat.recAuxOn</a> <span class=\"fn\">0</span> <span class=\"fn\">zero</span> <span class=\"fn\">succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">zero</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L24-L26","name":"Nat.recAux_succ","line":24,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recAux_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recAux_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">recAux_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Nat/Basic.html#Nat.recAux\">Nat.recAux</a> <span class=\"fn\">zero</span> <span class=\"fn\">succ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">succ</span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Nat/Basic.html#Nat.recAux\">Nat.recAux</a> <span class=\"fn\">zero</span> <span class=\"fn\">succ</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Nat/Lemmas.lean#L20-L22","name":"Nat.recAux_zero","line":20,"kind":"theorem","docLink":"./Batteries/Data/Nat/Lemmas.html#Nat.recAux_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Lemmas.html#Nat.recAux_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">recAux_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(succ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Nat/Basic.html#Nat.recAux\">Nat.recAux</a> <span class=\"fn\">zero</span> <span class=\"fn\">succ</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">zero</span></span></div></div>"}]}