{"name":"Batteries.Data.RBMap.Basic","instances":[{"typeNames":["Batteries.RBColor"],"name":"Batteries.instReprRBColor","className":"Repr"},{"typeNames":["Batteries.RBNode"],"name":"Batteries.instReprRBNode","className":"Repr"},{"typeNames":["Batteries.RBNode"],"name":"Batteries.RBNode.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Batteries.RBNode"],"name":"Batteries.RBNode.instForIn","className":"ForIn"},{"typeNames":["Batteries.RBNode","Batteries.RBNode.Stream"],"name":"Batteries.RBNode.instToStreamStream","className":"ToStream"},{"typeNames":["Batteries.RBNode.Stream"],"name":"Batteries.RBNode.instStreamStream","className":"Stream"},{"typeNames":["Batteries.RBNode.All"],"name":"Batteries.RBNode.instDecidableAllOfDecidablePred","className":"Decidable"},{"typeNames":["Batteries.RBNode.Any"],"name":"Batteries.RBNode.instDecidableAnyOfDecidablePred","className":"Decidable"},{"typeNames":["Batteries.RBNode"],"name":"Batteries.RBNode.instMembership","className":"Membership"},{"typeNames":["Batteries.RBNode"],"name":"Batteries.RBNode.instBEq","className":"BEq"},{"typeNames":["Batteries.RBNode.cmpLT"],"name":"Batteries.RBNode.instDecidableCmpLTOfTransCmp","className":"Decidable"},{"typeNames":["Batteries.RBNode.cmpEq"],"name":"Batteries.RBNode.instDecidableCmpEqOfTransCmp","className":"Decidable"},{"typeNames":["Batteries.RBSet"],"name":"Batteries.RBSet.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Batteries.RBSet"],"name":"Batteries.RBSet.instInhabited","className":"Inhabited"},{"typeNames":["Batteries.RBSet"],"name":"Batteries.RBSet.instForIn","className":"ForIn"},{"typeNames":["Batteries.RBSet","Batteries.RBNode.Stream"],"name":"Batteries.RBSet.instToStreamStream","className":"ToStream"},{"typeNames":["Batteries.RBSet"],"name":"Batteries.RBSet.instRepr","className":"Repr"},{"typeNames":["Batteries.RBSet"],"name":"Batteries.RBSet.instMembership","className":"Membership"},{"typeNames":["Batteries.RBSet"],"name":"Batteries.RBSet.instBEq","className":"BEq"},{"typeNames":["Batteries.RBSet"],"name":"Batteries.RBSet.instUnion","className":"Union"},{"typeNames":["Batteries.RBSet"],"name":"Batteries.RBSet.instSDiff","className":"SDiff"},{"typeNames":["Batteries.RBMap"],"name":"Batteries.instEmptyCollectionRBMap","className":"EmptyCollection"},{"typeNames":["Batteries.RBMap"],"name":"Batteries.instInhabitedRBMap","className":"Inhabited"},{"typeNames":["Batteries.RBMap","Prod"],"name":"Batteries.RBMap.instForInProd","className":"ForIn"},{"typeNames":["Batteries.RBMap","Batteries.RBNode.Stream"],"name":"Batteries.RBMap.instToStreamStreamProd","className":"ToStream"},{"typeNames":["Batteries.RBMap.Keys","Array"],"name":"Batteries.RBMap.instCoeHeadKeysArray","className":"CoeHead"},{"typeNames":["Batteries.RBMap.Keys","List"],"name":"Batteries.RBMap.instCoeHeadKeysList","className":"CoeHead"},{"typeNames":["Batteries.RBMap.Keys"],"name":"Batteries.RBMap.instForInKeys","className":"ForIn"},{"typeNames":["Batteries.RBMap.Keys"],"name":"Batteries.RBMap.instForMKeys","className":"ForM"},{"typeNames":["Batteries.RBMap.Keys","Batteries.RBMap.Keys.Stream"],"name":"Batteries.RBMap.instToStreamKeysStream","className":"ToStream"},{"typeNames":["Batteries.RBMap.Keys.Stream"],"name":"Batteries.RBMap.instStreamStream","className":"Stream"},{"typeNames":["Batteries.RBMap.Values","Array"],"name":"Batteries.RBMap.instCoeHeadValuesArray","className":"CoeHead"},{"typeNames":["Batteries.RBMap.Values","List"],"name":"Batteries.RBMap.instCoeHeadValuesList","className":"CoeHead"},{"typeNames":["Batteries.RBMap.Values"],"name":"Batteries.RBMap.instForInValues","className":"ForIn"},{"typeNames":["Batteries.RBMap.Values"],"name":"Batteries.RBMap.instForMValues","className":"ForM"},{"typeNames":["Batteries.RBMap.Values","Batteries.RBMap.Values.Stream"],"name":"Batteries.RBMap.instToStreamValuesStream","className":"ToStream"},{"typeNames":["Batteries.RBMap.Values.Stream"],"name":"Batteries.RBMap.instStreamStream_1","className":"Stream"},{"typeNames":["Batteries.RBMap"],"name":"Batteries.RBMap.instRepr","className":"Repr"},{"typeNames":["Batteries.RBMap"],"name":"Batteries.RBMap.instBEq","className":"BEq"}],"imports":["Init","Batteries.Classes.Order","Batteries.Control.ForInStep.Basic","Batteries.Tactic.Lint.Misc","Batteries.Tactic.Alias"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1160-L1161","name":"List.toRBMap","line":1160,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#List.toRBMap","doc":"`O(n log n)`. Build a tree from an unsorted list by inserting them one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#List.toRBMap\"><span class=\"name\">List</span>.<span class=\"name\">toRBMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1153-L1153","name":"Batteries.RBMap.sdiff","line":1153,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.sdiff","doc":"`O(n₁ * (log n₁ + log n₂))`. Constructs the set of all elements of `t₁` that are not in `t₂`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.sdiff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">sdiff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1147-L1148","name":"Batteries.RBMap.filter","line":1147,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.filter","doc":"`O(n * log n)`. Constructs the set of all elements satisfying `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.filter\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1142-L1144","name":"Batteries.RBMap.intersectWith","line":1142,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.intersectWith","doc":"`O(n₁ * log (n₁ + n₂))`. Intersects the maps `t₁` and `t₂`\nusing `mergeFn a b` to produce the new value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.intersectWith\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">intersectWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mergeFn : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">δ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">δ</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1135-L1136","name":"Batteries.RBMap.mergeWith","line":1135,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.mergeWith","doc":"`O(n₂ * log (n₁ + n₂))`. Merges the maps `t₁` and `t₂`, if a key `a : α` exists in both,\nthen use `mergeFn a b₁ b₂` to produce the new merged value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.mergeWith\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">mergeWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mergeFn : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1128-L1129","name":"Batteries.RBMap.find!","line":1128,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find!","doc":"Attempts to find the value with key `k : α` in `t` and panics if there is no such key. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find!\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">find!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1125-L1125","name":"Batteries.RBMap.max!","line":1125,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.max!","doc":"`O(log n)`. Returns the maximum element of the map, or panics if the map is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.max!\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1122-L1122","name":"Batteries.RBMap.min!","line":1122,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.min!","doc":"`O(log n)`. Returns the minimum element of the map, or panics if the map is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.min!\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1119-L1119","name":"Batteries.RBMap.size","line":1119,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.size","doc":"`O(n)`. The number of items in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1116-L1116","name":"Batteries.RBMap.instBEq","line":1116,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instBEq","doc":"Returns true if `t₁` and `t₂` have the same keys and values\n(assuming `cmp` and `==` are compatible), ignoring the internal tree structure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instBEq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1109-L1110","name":"Batteries.RBMap.eqKeys","line":1109,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.eqKeys","doc":"Asserts that `t₁` and `t₂` have the same set of keys (up to equality). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.eqKeys\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">eqKeys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1105-L1106","name":"Batteries.RBMap.all₂","line":1105,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.all₂","doc":"Asserts that `t₁` and `t₂` have the same number of elements in the same order,\nand `R` holds pairwise between them. The tree structure is ignored.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.all₂\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">all₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpγ : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">γ</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">δ</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmpα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">γ</span> <span class=\"fn\">δ</span> <span class=\"fn\">cmpγ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1099-L1099","name":"Batteries.RBMap.any","line":1099,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.any","doc":"`O(n)`. Returns true if the given predicate is true for any item in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.any\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1096-L1096","name":"Batteries.RBMap.all","line":1096,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.all","doc":"`O(n)`. Returns true if the given predicate is true for all items in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.all\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1093-L1093","name":"Batteries.RBMap.contains","line":1093,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.contains","doc":"`O(log n)`. Returns true if the given key `a` is in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.contains\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1089-L1090","name":"Batteries.RBMap.lowerBound?","line":1089,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.lowerBound?","doc":"`O(log n)`. `lowerBound? k` retrieves the key-value pair of the largest key\nsmaller than or equal to `k`, if it exists.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.lowerBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1083-L1083","name":"Batteries.RBMap.findD","line":1083,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findD","doc":"`O(log n)`. Find the value corresponding to key `k`, or return `v₀` if it is not in the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findD\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₀ : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1080-L1080","name":"Batteries.RBMap.find?","line":1080,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?","doc":"`O(log n)`. Find the value corresponding to key `k`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1077-L1077","name":"Batteries.RBMap.findEntry?","line":1077,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?","doc":"`O(log n)`. Find an entry in the tree with key equal to `k`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1073-L1074","name":"Batteries.RBMap.ofArray","line":1073,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.ofArray","doc":"`O(n log n)`. Build a tree from an unsorted array by inserting them one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.ofArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1069-L1070","name":"Batteries.RBMap.ofList","line":1069,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.ofList","doc":"`O(n log n)`. Build a tree from an unsorted list by inserting them one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.ofList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1066-L1066","name":"Batteries.RBMap.erase","line":1066,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.erase","doc":"`O(log n)`. Remove an element `k` from the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.erase\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1063-L1063","name":"Batteries.RBMap.insert","line":1063,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert","doc":"`O(log n)`. Insert key-value pair `(k, v)` into the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1059-L1060","name":"Batteries.RBMap.instRepr","line":1059,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instRepr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1057-L1057","name":"Batteries.RBMap.max","line":1057,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.max","doc":"**Alias** of `Batteries.RBMap.max?`.\n\n---\n\n`O(log n)`. Returns the key-value pair `(a, b)` such that `a ≥ k` for all keys in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.max\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1056-L1056","name":"Batteries.RBMap.min","line":1056,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.min","doc":"**Alias** of `Batteries.RBMap.min?`.\n\n---\n\n`O(log n)`. Returns the key-value pair `(a, b)` such that `a ≤ k` for all keys in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.min\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1054-L1054","name":"Batteries.RBMap.max?","line":1054,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.max?","doc":"`O(log n)`. Returns the key-value pair `(a, b)` such that `a ≥ k` for all keys in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.max?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1051-L1051","name":"Batteries.RBMap.min?","line":1051,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.min?","doc":"`O(log n)`. Returns the key-value pair `(a, b)` such that `a ≤ k` for all keys in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.min?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1048-L1048","name":"Batteries.RBMap.toList","line":1048,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList","doc":"`O(n)`. Convert the tree to a list in ascending order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1045-L1045","name":"Batteries.RBMap.isEmpty","line":1045,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.isEmpty","doc":"`O(1)`. Is the tree empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.isEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1042-L1042","name":"Batteries.RBMap.instStreamStream_1","line":1042,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instStreamStream_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instStreamStream_1\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instStreamStream_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.Stream\">Batteries.RBMap.Values.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1041-L1041","name":"Batteries.RBMap.instToStreamValuesStream","line":1041,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instToStreamValuesStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instToStreamValuesStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instToStreamValuesStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values\">Batteries.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.Stream\">Batteries.RBMap.Values.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1036-L1039","name":"Batteries.RBMap.Values.Stream.next?","line":1036,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.Stream.next?","doc":"`O(1)` amortized, `O(log n)` worst case: Get the next element from the stream. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.Stream.next?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span>.<span class=\"name\">Stream</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.Stream\">Batteries.RBMap.Values.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.Stream\">Batteries.RBMap.Values.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1033-L1033","name":"Batteries.RBMap.Values.toStream","line":1033,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.toStream","doc":"A stream over the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.toStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span>.<span class=\"name\">toStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values\">Batteries.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.Stream\">Batteries.RBMap.Values.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1030-L1030","name":"Batteries.RBMap.Values.Stream","line":1030,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.Stream","doc":"The result of `toStream` on a `Values`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.Stream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span>.<span class=\"name\">Stream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_2 u_1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1026-L1027","name":"Batteries.RBMap.instForMValues","line":1026,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instForMValues","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instForMValues\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instForMValues</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM\">ForM</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values\">Batteries.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1023-L1024","name":"Batteries.RBMap.instForInValues","line":1023,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instForInValues","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instForInValues\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instForInValues</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values\">Batteries.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1021-L1021","name":"Batteries.RBMap.instCoeHeadValuesList","line":1021,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instCoeHeadValuesList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instCoeHeadValuesList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instCoeHeadValuesList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHead\">CoeHead</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values\">Batteries.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1019-L1019","name":"Batteries.RBMap.instCoeHeadValuesArray","line":1019,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instCoeHeadValuesArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instCoeHeadValuesArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instCoeHeadValuesArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHead\">CoeHead</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values\">Batteries.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1017-L1017","name":"Batteries.RBMap.Values.toList","line":1017,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.toList","doc":"`O(n)`. Constructs the list of values of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1015-L1015","name":"Batteries.RBMap.Values.toArray","line":1015,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.toArray","doc":"`O(n)`. Constructs the array of values of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values.toArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1013-L1013","name":"Batteries.RBMap.values","line":1013,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.values","doc":"The \"keys\" of the map. This is an `O(1)` wrapper operation, which\ncan be used in `for` loops or converted to an array or list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.values\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">values</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values\">Batteries.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1007-L1007","name":"Batteries.RBMap.Values","line":1007,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values","doc":"An \"iterator\" over the values of the map. This is a trivial wrapper over the underlying map,\nbut it comes with a small API to use it in a `for` loop or convert it to an array or list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Values\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L1000-L1001","name":"Batteries.RBMap.valuesList","line":1000,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.valuesList","doc":"`O(n)`. Constructs the list of values of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.valuesList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">valuesList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L996-L997","name":"Batteries.RBMap.valuesArray","line":996,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.valuesArray","doc":"`O(n)`. Constructs the array of values of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.valuesArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">valuesArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L993-L993","name":"Batteries.RBMap.instStreamStream","line":993,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instStreamStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instStreamStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instStreamStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.Stream\">Batteries.RBMap.Keys.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L992-L992","name":"Batteries.RBMap.instToStreamKeysStream","line":992,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instToStreamKeysStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instToStreamKeysStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instToStreamKeysStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys\">Batteries.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.Stream\">Batteries.RBMap.Keys.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L987-L990","name":"Batteries.RBMap.Keys.Stream.next?","line":987,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.Stream.next?","doc":"`O(1)` amortized, `O(log n)` worst case: Get the next element from the stream. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.Stream.next?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span>.<span class=\"name\">Stream</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.Stream\">Batteries.RBMap.Keys.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.Stream\">Batteries.RBMap.Keys.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L984-L984","name":"Batteries.RBMap.Keys.toStream","line":984,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.toStream","doc":"A stream over the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.toStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span>.<span class=\"name\">toStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys\">Batteries.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.Stream\">Batteries.RBMap.Keys.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L981-L981","name":"Batteries.RBMap.Keys.Stream","line":981,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.Stream","doc":"The result of `toStream` on a `Keys`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.Stream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span>.<span class=\"name\">Stream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_2 u_1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L977-L978","name":"Batteries.RBMap.instForMKeys","line":977,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instForMKeys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instForMKeys\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instForMKeys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM\">ForM</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys\">Batteries.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L974-L975","name":"Batteries.RBMap.instForInKeys","line":974,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instForInKeys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instForInKeys\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instForInKeys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys\">Batteries.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L972-L972","name":"Batteries.RBMap.instCoeHeadKeysList","line":972,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instCoeHeadKeysList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instCoeHeadKeysList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instCoeHeadKeysList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHead\">CoeHead</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys\">Batteries.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L970-L970","name":"Batteries.RBMap.instCoeHeadKeysArray","line":970,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instCoeHeadKeysArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instCoeHeadKeysArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instCoeHeadKeysArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHead\">CoeHead</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys\">Batteries.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L968-L968","name":"Batteries.RBMap.Keys.toList","line":968,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.toList","doc":"`O(n)`. Constructs the list of keys of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L966-L966","name":"Batteries.RBMap.Keys.toArray","line":966,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.toArray","doc":"`O(n)`. Constructs the array of keys of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys.toArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L964-L964","name":"Batteries.RBMap.keys","line":964,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.keys","doc":"The keys of the map. This is an `O(1)` wrapper operation, which\ncan be used in `for` loops or converted to an array or list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.keys\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys\">Batteries.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L958-L958","name":"Batteries.RBMap.Keys","line":958,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys","doc":"An \"iterator\" over the keys of the map. This is a trivial wrapper over the underlying map,\nbut it comes with a small API to use it in a `for` loop or convert it to an array or list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.Keys\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L951-L952","name":"Batteries.RBMap.keysList","line":951,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.keysList","doc":"`O(n)`. Constructs the list of keys of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.keysList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">keysList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L947-L948","name":"Batteries.RBMap.keysArray","line":947,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.keysArray","doc":"`O(n)`. Constructs the array of keys of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.keysArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">keysArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L943-L944","name":"Batteries.RBMap.instToStreamStreamProd","line":943,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instToStreamStreamProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instToStreamStreamProd\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instToStreamStreamProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L941-L941","name":"Batteries.RBMap.instForInProd","line":941,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instForInProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.instForInProd\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instForInProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L938-L939","name":"Batteries.RBMap.forM","line":938,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.forM","doc":"`O(n)`. Run monadic function `f` on each element of the tree (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.forM\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L934-L935","name":"Batteries.RBMap.foldlM","line":934,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.foldlM","doc":"`O(n)`. Fold a monadic function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.foldlM\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L930-L931","name":"Batteries.RBMap.foldr","line":930,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.foldr","doc":"`O(n)`. Fold a function on the values from right to left (in decreasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.foldr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L926-L927","name":"Batteries.RBMap.foldl","line":926,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.foldl","doc":"`O(n)`. Fold a function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.foldl\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L920-L920","name":"Batteries.RBMap.single","line":920,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.single","doc":"`O(1)`. Construct a new tree with one key-value pair `k, v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.single\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L917-L917","name":"Batteries.instInhabitedRBMap","line":917,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.instInhabitedRBMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.instInhabitedRBMap\"><span class=\"name\">Batteries</span>.<span class=\"name\">instInhabitedRBMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L914-L915","name":"Batteries.instEmptyCollectionRBMap","line":914,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.instEmptyCollectionRBMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.instEmptyCollectionRBMap\"><span class=\"name\">Batteries</span>.<span class=\"name\">instEmptyCollectionRBMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L911-L912","name":"Batteries.RBMap.empty","line":911,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.empty","doc":"`O(1)`. Construct a new empty map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.empty\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L907-L908","name":"Batteries.mkRBMap","line":907,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.mkRBMap","doc":"`O(1)`. Construct a new empty map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.mkRBMap\"><span class=\"name\">Batteries</span>.<span class=\"name\">mkRBMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L903-L904","name":"Batteries.RBMap","line":903,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap","doc":"An `RBMap` is a self-balancing binary search tree, used to store a key-value map.\nThe `cmp` function is the comparator that will be used for performing searches;\nit should satisfy the requirements of `TransCmp` for it to have sensible behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L892-L892","name":"Batteries.RBSet.instSDiff","line":892,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instSDiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instSDiff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instSDiff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#SDiff\">SDiff</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L890-L890","name":"Batteries.RBSet.sdiff","line":890,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.sdiff","doc":"`O(n₁ * (log n₁ + log n₂))`. Constructs the set of all elements of `t₁` that are not in `t₂`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.sdiff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">sdiff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L884-L885","name":"Batteries.RBSet.map","line":884,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.map","doc":"`O(n * log n)`. Map a function on every value in the set.\nIf the function is monotone, consider using the more efficient `RBSet.mapMonotone` instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.map\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmpα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">β</span> <span class=\"fn\">cmpβ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L877-L878","name":"Batteries.RBSet.filter","line":877,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.filter","doc":"`O(n * log n)`. Constructs the set of all elements satisfying `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.filter\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L869-L874","name":"Batteries.RBSet.intersectWith","line":869,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.intersectWith","doc":"`O(n₁ * log (n₁ + n₂))`. Intersects the maps `t₁` and `t₂`\nusing `mergeFn a b` to produce the new value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.intersectWith\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">intersectWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpγ : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">γ</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mergeFn : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmpα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">β</span> <span class=\"fn\">cmpβ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">γ</span> <span class=\"fn\">cmpγ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L861-L863","name":"Batteries.RBSet.mergeWith","line":861,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.mergeWith","doc":"`O(n₂ * log (n₁ + n₂))`. Merges the maps `t₁` and `t₂`. If equal keys exist in both,\nthen use `mergeFn a₁ a₂` to produce the new merged value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.mergeWith\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mergeWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mergeFn : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L855-L855","name":"Batteries.RBSet.instUnion","line":855,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instUnion\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Union\">Union</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L852-L853","name":"Batteries.RBSet.union","line":852,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.union","doc":"`O(n₂ * log (n₁ + n₂))`. Merges the maps `t₁` and `t₂`.\nIf equal keys exist in both, the key from `t₂` is preferred.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.union\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L845-L846","name":"Batteries.RBSet.alterP","line":845,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.alterP","doc":"`O(log n)`. `alterP cut f t` simultaneously handles inserting, erasing and replacing an element\nusing a function `f : Option α → Option α`. It is passed the result of `t.findP? cut`\nand can either return `none` to remove the element or `some a` to replace/insert\nthe element with `a` (which must have the same ordering properties as the original element).\n\nThe element is used linearly if `t` is unshared.\n\nThe `AlterWF` assumption is required because `f` may change\nthe ordering properties of the element, which would break the invariants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.alterP\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">alterP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[wf : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.AlterWF</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L832-L832","name":"Batteries.RBSet.AlterWF.wf","line":832,"kind":"theorem","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.AlterWF.wf","doc":"The resulting tree is well formed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.AlterWF.wf\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">AlterWF</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.AlterWF</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">Batteries.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.alter\">Batteries.RBNode.alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L830-L830","name":"Batteries.RBSet.AlterWF.mk","line":830,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.AlterWF.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.AlterWF.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">AlterWF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(wf : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">Batteries.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.alter\">Batteries.RBNode.alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.AlterWF</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L830-L832","name":"Batteries.RBSet.AlterWF","line":830,"kind":"class","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.AlterWF","doc":"The predicate asserting that the result of `alterP` is safe to construct. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.AlterWF\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">AlterWF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L826-L827","name":"Batteries.RBSet.modifyP","line":826,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.modifyP","doc":"`O(log n)`. In-place replace an element found by `cut`.\nThis takes the element out of the tree while `f` runs,\nso it uses the element linearly if `t` is unshared.\n\nThe `ModifyWF` assumption is required because `f` may change\nthe ordering properties of the element, which would break the invariants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.modifyP\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">modifyP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[wf : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.ModifyWF</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L816-L816","name":"Batteries.RBSet.ModifyWF.wf","line":816,"kind":"theorem","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ModifyWF.wf","doc":"The resulting tree is well formed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ModifyWF.wf\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ModifyWF</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.ModifyWF</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">Batteries.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.modify\">Batteries.RBNode.modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L814-L814","name":"Batteries.RBSet.ModifyWF.mk","line":814,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ModifyWF.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ModifyWF.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ModifyWF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(wf : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">Batteries.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.modify\">Batteries.RBNode.modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.ModifyWF</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L814-L816","name":"Batteries.RBSet.ModifyWF","line":814,"kind":"class","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ModifyWF","doc":"The predicate asserting that the result of `modifyP` is safe to construct. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ModifyWF\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ModifyWF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L810-L811","name":"Batteries.RBSet.find!","line":810,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find!","doc":"`O(log n)`. Attempts to find the value with key `k : α` in `t` and panics if there is no such key.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find!\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L804-L805","name":"Batteries.RBSet.findP!","line":804,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP!","doc":"`O(log n)`. Attempts to find the value with key `k : α` in `t` and panics if there is no such key.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP!\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L799-L799","name":"Batteries.RBSet.max!","line":799,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.max!","doc":"`O(log n)`. Returns the maximum element of the tree, or panics if the tree is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.max!\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L796-L796","name":"Batteries.RBSet.min!","line":796,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.min!","doc":"`O(log n)`. Returns the minimum element of the tree, or panics if the tree is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.min!\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L793-L793","name":"Batteries.RBSet.size","line":793,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.size","doc":"`O(n)`. The number of items in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L789-L790","name":"Batteries.RBSet.instBEq","line":789,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instBEq","doc":"Returns true if `t₁` and `t₂` are equal as sets (assuming `cmp` and `==` are compatible),\nignoring the internal tree structure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instBEq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L782-L783","name":"Batteries.RBSet.Slow.instDecidableMem","line":782,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.Slow.instDecidableMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.Slow.instDecidableMem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.Mem\">Batteries.RBSet.Mem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L779-L780","name":"Batteries.RBSet.Slow.instDecidableMemP","line":779,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.Slow.instDecidableMemP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.Slow.instDecidableMemP\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableMemP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.MemP\">Batteries.RBSet.MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L776-L777","name":"Batteries.RBSet.Slow.instDecidableEMem","line":776,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.Slow.instDecidableEMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.Slow.instDecidableEMem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableEMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.EMem\">Batteries.RBSet.EMem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L771-L771","name":"Batteries.RBSet.instMembership","line":771,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instMembership","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instMembership\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instMembership</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L769-L769","name":"Batteries.RBSet.Mem","line":769,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.Mem","doc":"True if `x` is equivalent to an element of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.Mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L766-L766","name":"Batteries.RBSet.MemP","line":766,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.MemP","doc":"True if the specified `cut` matches at least one element of of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.MemP\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">MemP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L763-L763","name":"Batteries.RBSet.EMem","line":763,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.EMem","doc":"True if `x` is an element of `t` \"exactly\", i.e. up to equality, not the `cmp` relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.EMem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">EMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L759-L760","name":"Batteries.RBSet.all₂","line":759,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.all₂","doc":"Asserts that `t₁` and `t₂` have the same number of elements in the same order,\nand `R` holds pairwise between them. The tree structure is ignored.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.all₂\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">all₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmpα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">β</span> <span class=\"fn\">cmpβ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L753-L753","name":"Batteries.RBSet.any","line":753,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.any","doc":"`O(n)`. Returns true if the given predicate is true for any item in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.any\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L750-L750","name":"Batteries.RBSet.all","line":750,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.all","doc":"`O(n)`. Returns true if the given predicate is true for all items in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.all\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L746-L747","name":"Batteries.RBSet.ofArray","line":746,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ofArray","doc":"`O(n log n)`. Build a tree from an unsorted array by inserting them one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ofArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L742-L743","name":"Batteries.RBSet.ofList","line":742,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ofList","doc":"`O(n log n)`. Build a tree from an unsorted list by inserting them one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ofList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L739-L739","name":"Batteries.RBSet.contains","line":739,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.contains","doc":"`O(log n)`. Returns true if the given key `a` is in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.contains\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L736-L736","name":"Batteries.RBSet.containsP","line":736,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.containsP","doc":"`O(log n)`. Returns true if the given cut returns `eq` for something in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.containsP\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">containsP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L733-L733","name":"Batteries.RBSet.lowerBound?","line":733,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBound?","doc":"`O(log n)`. `lowerBound? k` retrieves the largest entry smaller than or equal to `k`,\nif it exists.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L727-L727","name":"Batteries.RBSet.lowerBoundP?","line":727,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBoundP?","doc":"`O(log n)`. `lowerBoundP cut` retrieves the largest entry comparing `lt` or `eq` under `cut`,\nif it exists. If multiple keys in the map return `eq` under `cut`, any of them may be returned.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBoundP?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBoundP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L721-L721","name":"Batteries.RBSet.upperBound?","line":721,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBound?","doc":"`O(log n)`. `upperBound? k` retrieves the largest entry smaller than or equal to `k`,\nif it exists.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L715-L715","name":"Batteries.RBSet.upperBoundP?","line":715,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBoundP?","doc":"`O(log n)`. `upperBoundP cut` retrieves the smallest entry comparing `gt` or `eq` under `cut`,\nif it exists. If multiple keys in the map return `eq` under `cut`, any of them may be returned.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBoundP?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBoundP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L709-L709","name":"Batteries.RBSet.findPD","line":709,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findPD","doc":"`O(log n)`. Find an element in the tree, or return a default value `v₀`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findPD\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findPD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₀ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L706-L706","name":"Batteries.RBSet.find?","line":706,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?","doc":"`O(log n)`. Returns an element in the tree equivalent to `x` if one exists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L703-L703","name":"Batteries.RBSet.findP?","line":703,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?","doc":"`O(log n)`. Find an element in the tree using a cut function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L699-L700","name":"Batteries.RBSet.erase","line":699,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.erase","doc":"`O(log n)`. Remove an element from the tree using a cut function.\nThe `cut` function is used to locate an element in the tree:\nit returns `.gt` if we go too high and `.lt` if we go too low;\nif it returns `.eq` we will remove the element.\n(The function `cmp k` for some key `k` is a valid cut function, but we can also use cuts that\nare not of this form as long as they are suitably monotonic.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.erase\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L684-L689","name":"Batteries.RBSet.insertMany","line":684,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insertMany","doc":"Insert all elements from a collection into a `RBSet α cmp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insertMany\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L679-L679","name":"Batteries.RBSet.insert","line":679,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert","doc":"`O(log n)`. Insert element `v` into the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L675-L676","name":"Batteries.RBSet.instRepr","line":675,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instRepr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L673-L673","name":"Batteries.RBSet.max","line":673,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.max","doc":"**Alias** of `Batteries.RBSet.max?`.\n\n---\n\n`O(log n)`. Returns the entry `a` such that `a ≥ k` for all keys in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.max\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L672-L672","name":"Batteries.RBSet.min","line":672,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.min","doc":"**Alias** of `Batteries.RBSet.min?`.\n\n---\n\n`O(log n)`. Returns the entry `a` such that `a ≤ k` for all keys in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.min\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L670-L670","name":"Batteries.RBSet.max?","line":670,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.max?","doc":"`O(log n)`. Returns the entry `a` such that `a ≥ k` for all keys in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.max?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L667-L667","name":"Batteries.RBSet.min?","line":667,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.min?","doc":"`O(log n)`. Returns the entry `a` such that `a ≤ k` for all keys in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.min?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L664-L664","name":"Batteries.RBSet.toList","line":664,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList","doc":"`O(n)`. Convert the tree to a list in ascending order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L659-L661","name":"Batteries.RBSet.isEmpty","line":659,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.isEmpty","doc":"`O(1)`. Is the tree empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.isEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L656-L656","name":"Batteries.RBSet.instToStreamStream","line":656,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instToStreamStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instToStreamStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instToStreamStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L653-L654","name":"Batteries.RBSet.instForIn","line":653,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instForIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instForIn\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instForIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L651-L651","name":"Batteries.RBSet.forM","line":651,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.forM","doc":"`O(n)`. Run monadic function `f` on each element of the tree (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.forM\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L647-L648","name":"Batteries.RBSet.foldlM","line":647,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.foldlM","doc":"`O(n)`. Fold a monadic function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.foldlM\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L644-L644","name":"Batteries.RBSet.foldr","line":644,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.foldr","doc":"`O(n)`. Fold a function on the values from right to left (in decreasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.foldr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L641-L641","name":"Batteries.RBSet.foldl","line":641,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.foldl","doc":"`O(n)`. Fold a function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.foldl\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L637-L638","name":"Batteries.RBSet.single","line":637,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.single","doc":"`O(1)`. Construct a new tree with one element `v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.single\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L634-L634","name":"Batteries.RBSet.instInhabited","line":634,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instInhabited\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L632-L632","name":"Batteries.RBSet.instEmptyCollection","line":632,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.instEmptyCollection\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L630-L630","name":"Batteries.RBSet.empty","line":630,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.empty","doc":"`O(1)`. Construct a new empty tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.empty\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L625-L625","name":"Batteries.mkRBSet","line":625,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.mkRBSet","doc":"`O(1)`. Construct a new empty tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.mkRBSet\"><span class=\"name\">Batteries</span>.<span class=\"name\">mkRBSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L622-L622","name":"Batteries.RBSet","line":622,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet","doc":"An `RBSet` is a self-balancing binary search tree.\nThe `cmp` function is the comparator that will be used for performing searches;\nit should satisfy the requirements of `TransCmp` for it to have sensible behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L609-L611","name":"Batteries.RBNode.WF.erase","line":609,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF.erase","doc":"Erasing from a well-formed tree yields another well-formed tree.\n(See `Ordered.erase` and `Balanced.erase` for the actual proofs.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF.erase\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">Batteries.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">Batteries.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.erase\">Batteries.RBNode.erase</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L606-L608","name":"Batteries.RBNode.WF.insert","line":606,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF.insert","doc":"Inserting into a well-formed tree yields another well-formed tree.\n(See `Ordered.insert` and `Balanced.insert` for the actual proofs.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">Batteries.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">Batteries.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">Batteries.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L603-L605","name":"Batteries.RBNode.WF.mk","line":603,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF.mk","doc":"The actual well-formedness invariant: a red-black tree has the\nordering and balance invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Batteries.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.Balanced</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">Batteries.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L602-L611","name":"Batteries.RBNode.WF","line":602,"kind":"inductive","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF","doc":"The well-formedness invariant for a red-black tree. The first constructor is the real invariant,\nand the others allow us to \"cheat\" in this file and define `insert` and `erase`,\nwhich have more complex proofs that are delayed to `Batteries.Data.RBMap.Lemmas`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L593-L595","name":"Batteries.RBNode.Balanced.black","line":593,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced.black","doc":"A black node is balanced with black-height `n + 1`\nif its children both have black-height `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced.black\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">black</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Balanced</span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Balanced</span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">Batteries.RBNode.node</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">Batteries.RBColor.black</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span> <span class=\"fn\">y</span></span>)</span>.Balanced</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">Batteries.RBColor.black</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L590-L592","name":"Batteries.RBNode.Balanced.red","line":590,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced.red","doc":"A red node is balanced with black-height `n`\nif its children are both black with with black-height `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced.red\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Balanced</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">Batteries.RBColor.black</a> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Balanced</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">Batteries.RBColor.black</a> <span class=\"fn\">n</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">Batteries.RBNode.node</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">Batteries.RBColor.red</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span> <span class=\"fn\">y</span></span>)</span>.Balanced</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">Batteries.RBColor.red</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L588-L589","name":"Batteries.RBNode.Balanced.nil","line":588,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced.nil","doc":"A nil node is balanced with black-height 0, and it is considered black. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Batteries.RBNode.nil</span>.Balanced</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">Batteries.RBColor.black</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L587-L595","name":"Batteries.RBNode.Balanced","line":587,"kind":"inductive","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced","doc":"The red-black balance invariant. `Balanced t c n` says that the color of the root node is `c`,\nand the black-height (the number of black nodes on any path from the root) of the tree is `n`.\nAdditionally, every red node must have black children.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L574-L580","name":"Batteries.RBNode.Slow.instDecidableOrdered","line":574,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Slow.instDecidableOrdered","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Slow.instDecidableOrdered\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableOrdered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.TransCmp\">Batteries.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Batteries.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L568-L570","name":"Batteries.RBNode.Ordered","line":568,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered","doc":"The ordering invariant of a red-black tree, which is a binary search tree.\nThis says that every element of a left subtree is less than the root, and\nevery element in the right subtree is greater than the root, where the\nless than relation `x < y` is understood to mean `cmp x y = .lt`.\n\nBecause we do not assume that `cmp` is lawful when stating this property,\nwe write it in such a way that if `cmp` is not lawful then the condition holds trivially.\nThat way we can prove the ordering invariants without assuming `cmp` is lawful.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L547-L556","name":"Batteries.RBNode.alter","line":547,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.alter","doc":"`alter cut f t` simultaneously handles inserting, erasing and replacing an element\nusing a function `f : Option α → Option α`. It is passed the result of `t.find? cut`\nand can either return `none` to remove the element or `some a` to replace/insert\nthe element with `a` (which must have the same ordering properties as the original element).\n\nThe element is used linearly if `t` is unshared.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.alter\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L534-L537","name":"Batteries.RBNode.modify","line":534,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.modify","doc":"`modify cut f t` uses `cut` to find an element,\nthen modifies the element using `f` and reinserts it into the tree.\n\nBecause the tree structure is not modified,\n`f` must not modify the ordering properties of the element.\n\nThe element in `t` is used linearly if `t` is unshared.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.modify\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L520-L523","name":"Batteries.RBNode.Path.erase","line":520,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.erase","doc":"`path.erase t v` removes the root element of `t` from the tree, assuming that `(t, path)` was\nthe result of a previous `zoom` operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.erase\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(path : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L509-L514","name":"Batteries.RBNode.Path.del","line":509,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.del","doc":"`path.del t c` does the second part of `RBNode.del`, which unwinds the stack\nand rebuilds the tree. The `c` argument is the color of the node before the deletion\n(we used `t₀.isBlack` for this in `RBNode.del` but the original tree is no longer\navailable in this formulation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.del\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L498-L501","name":"Batteries.RBNode.Path.insert","line":498,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insert","doc":"`path.insert t v` inserts element `v` into the tree, assuming that `(t, path)` was the result of a\nprevious `zoom` operation (so either the root of `t` is equivalent to `v` or it is empty).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(path : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L491-L492","name":"Batteries.RBNode.Path.insertNew","line":491,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insertNew","doc":"`path.insertNew v` inserts element `v` into the tree, assuming that `path` is zoomed in\non a `nil` node such that inserting a new element at this position is valid.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insertNew\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">insertNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(path : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L480-L485","name":"Batteries.RBNode.Path.ins","line":480,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.ins","doc":"This function does the second part of `RBNode.ins`,\nwhich unwinds the stack and rebuilds the tree.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.ins\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L468-L474","name":"Batteries.RBNode.zoom","line":468,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom","doc":"Like `find?`, but instead of just returning the element, it returns the entire subtree\nat the element and a path back to the root for reconstructing the tree.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">zoom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">Batteries.RBNode.Path.root</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L459-L462","name":"Batteries.RBNode.Path.fill","line":459,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.fill","doc":"Fills the `Path` with a subtree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.fill\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">fill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L455-L456","name":"Batteries.RBNode.Path.right","line":455,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.right","doc":"A path that goes down the right subtree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.right\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parent : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L453-L454","name":"Batteries.RBNode.Path.left","line":453,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.left","doc":"A path that goes down the left subtree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.left\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parent : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L451-L452","name":"Batteries.RBNode.Path.root","line":451,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.root","doc":"The root of the tree, which is the end of the path of parents. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.root\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Batteries.RBNode.Path</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L450-L456","name":"Batteries.RBNode.Path","line":450,"kind":"inductive","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path","doc":"A `RBNode.Path α` is a \"cursor\" into an `RBNode` which represents the path\nfrom the root to a subtree. Note that the path goes from the target subtree\nup to the root, which is reversed from the normal way data is stored in the tree.\nSee [Zipper](https://en.wikipedia.org/wiki/Zipper_(data_structure)) for more information.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L442-L442","name":"Batteries.RBNode.toArray","line":442,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toArray","doc":"Converts the tree into an array in increasing sorted order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L437-L439","name":"Batteries.RBNode.map","line":437,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.map","doc":"`O(n)`. Map a function on every value in the tree.\nThis requires `IsMonotone` on the function in order to preserve the order invariant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.map\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L429-L431","name":"Batteries.RBNode.root?","line":429,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.root?","doc":"Returns the root of the tree, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.root?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">root?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L420-L426","name":"Batteries.RBNode.lowerBound?","line":420,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?","doc":"`lowerBound? cut` retrieves the largest entry smaller than or equal to `cut`, if it exists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">none</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L411-L417","name":"Batteries.RBNode.upperBound?","line":411,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?","doc":"`upperBound? cut` retrieves the smallest entry larger than or equal to `cut`, if it exists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">upperBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">none</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L402-L408","name":"Batteries.RBNode.find?","line":402,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?","doc":"Finds an element in the tree satisfying the `cut` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L399-L399","name":"Batteries.RBNode.erase","line":399,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.erase","doc":"The `erase cut t` function removes an element from the tree `t`.\nThe `cut` function is used to locate an element in the tree:\nit returns `.gt` if we go too high and `.lt` if we go too low;\nif it returns `.eq` we will remove the element.\n(The function `cmp k` for some key `k` is a valid cut function, but we can also use cuts that\nare not of this form as long as they are suitably monotonic.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.erase\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L379-L389","name":"Batteries.RBNode.del","line":379,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.del","doc":"The core of the `erase` function. The tree returned from this function has a broken invariant,\nwhich is restored in `erase`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.del\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L359-L371","name":"Batteries.RBNode.append","line":359,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.append","doc":"Concatenate two trees with the same black-height. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.append\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L354-L356","name":"Batteries.RBNode.size","line":354,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.size","doc":"The number of nodes in the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L345-L351","name":"Batteries.RBNode.balRight","line":345,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balRight","doc":"Rebalancing a tree which has shrunk on the right. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balRight\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L336-L342","name":"Batteries.RBNode.balLeft","line":336,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balLeft","doc":"Rebalancing a tree which has shrunk on the left. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balLeft\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L331-L333","name":"Batteries.RBNode.setRed","line":331,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setRed","doc":"Recolor the root of the tree to `red` if possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setRed\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setRed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L323-L326","name":"Batteries.RBNode.insert","line":323,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert","doc":"`insert cmp t v` inserts element `v` into the tree, using the provided comparator\n`cmp` to put it in the right place and automatically rebalancing the tree as necessary.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L306-L317","name":"Batteries.RBNode.ins","line":306,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.ins","doc":"The core of the `insert` function. This adds an element `x` to a balanced red-black tree.\nImportantly, the result of calling `ins` is not a proper red-black tree,\nbecause it has a broken balance invariant.\n(See `Balanced.ins` for the balance invariant of `ins`.)\nThe `insert` function does the final fixup needed to restore the invariant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.ins\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L293-L295","name":"Batteries.RBNode.reverse","line":293,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse","doc":"`O(n)`. Reverses the ordering of the tree without any rebalancing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L288-L290","name":"Batteries.RBNode.setBlack","line":288,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack","doc":"Changes the color of the root to `black`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L283-L285","name":"Batteries.RBNode.isBlack","line":283,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isBlack","doc":"Returns `black` if the node is black, otherwise `red`.\n(Nil nodes are treated as `red`, which is not the usual convention but useful for deletion.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isBlack\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L275-L277","name":"Batteries.RBNode.isRed","line":275,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isRed","doc":"Returns `red` if the node is red, otherwise `black`. (Nil nodes are treated as `black`.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isRed\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isRed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L269-L272","name":"Batteries.RBNode.balance2","line":269,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance2","doc":"The second half of Okasaki's `balance`, concerning red-red sequences in the right child. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance2\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L263-L266","name":"Batteries.RBNode.balance1","line":263,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance1","doc":"The first half of Okasaki's `balance`, concerning red-red sequences in the left child. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance1\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L253-L260","name":"Batteries.RBNode.isOrdered","line":253,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isOrdered","doc":"`O(n)`. Verifies an ordering relation on the nodes of the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isOrdered\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isOrdered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L250-L250","name":"Batteries.RBNode.instDecidableCmpEqOfTransCmp","line":250,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instDecidableCmpEqOfTransCmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instDecidableCmpEqOfTransCmp\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instDecidableCmpEqOfTransCmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} →\n  <span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>} → <span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.TransCmp\">Batteries.TransCmp</a> <span class=\"fn\">cmp</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">Batteries.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L248-L248","name":"Batteries.RBNode.cmpEq_iff","line":248,"kind":"theorem","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpEq_iff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.TransCmp\">Batteries.TransCmp</a> <span class=\"fn\">cmp</span></span>],\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">Batteries.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L246-L246","name":"Batteries.RBNode.cmpEq","line":246,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq","doc":"We say that `x ≈ y` under the comparator `cmp` if `cmp x y = .eq`. See also `cmpLT`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L243-L243","name":"Batteries.RBNode.instDecidableCmpLTOfTransCmp","line":243,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instDecidableCmpLTOfTransCmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instDecidableCmpLTOfTransCmp\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instDecidableCmpLTOfTransCmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} →\n  <span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>} → <span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.TransCmp\">Batteries.TransCmp</a> <span class=\"fn\">cmp</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">Batteries.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L241-L241","name":"Batteries.RBNode.cmpLT_iff","line":241,"kind":"theorem","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT_iff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.TransCmp\">Batteries.TransCmp</a> <span class=\"fn\">cmp</span></span>],\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">Batteries.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L239-L239","name":"Batteries.RBNode.cmpLT","line":239,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT","doc":"We say that `x < y` under the comparator `cmp` if `cmp x y = .lt`.\n\n* In order to avoid assuming the comparator is always lawful, we use a\n  local `∀ [TransCmp cmp]` binder in the relation so that the ordering\n  properties of the tree only need to hold if the comparator is lawful.\n* The `Nonempty` wrapper is a no-op because this is already a proposition,\n  but it prevents the `[TransCmp cmp]` binder from being introduced when we don't want it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L227-L228","name":"Batteries.RBNode.instBEq","line":227,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instBEq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L221-L225","name":"Batteries.RBNode.all₂","line":221,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.all₂","doc":"Asserts that `t₁` and `t₂` have the same number of elements in the same order,\nand `R` holds pairwise between them. The tree structure is ignored.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.all₂\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">all₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L214-L215","name":"Batteries.RBNode.Slow.instDecidableMem","line":214,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Slow.instDecidableMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Slow.instDecidableMem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Mem\">Batteries.RBNode.Mem</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L211-L212","name":"Batteries.RBNode.Slow.instDecidableMemP","line":211,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Slow.instDecidableMemP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Slow.instDecidableMemP\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableMemP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.MemP\">Batteries.RBNode.MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L208-L209","name":"Batteries.RBNode.Slow.instDecidableEMem","line":208,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Slow.instDecidableEMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Slow.instDecidableEMem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableEMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.EMem\">Batteries.RBNode.EMem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L203-L203","name":"Batteries.RBNode.Mem","line":203,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Mem","doc":"True if `x` is equivalent to an element of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L200-L200","name":"Batteries.RBNode.MemP","line":200,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.MemP","doc":"True if the specified `cut` matches at least one element of of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.MemP\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">MemP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L197-L197","name":"Batteries.RBNode.instMembership","line":197,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instMembership","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instMembership\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instMembership</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L195-L195","name":"Batteries.RBNode.EMem","line":195,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.EMem","doc":"True if `x` is an element of `t` \"exactly\", i.e. up to equality, not the `cmp` relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.EMem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">EMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L191-L192","name":"Batteries.RBNode.instDecidableAnyOfDecidablePred","line":191,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instDecidableAnyOfDecidablePred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instDecidableAnyOfDecidablePred\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instDecidableAnyOfDecidablePred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Any\">Batteries.RBNode.Any</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L188-L189","name":"Batteries.RBNode.any_iff","line":188,"kind":"theorem","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.any_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.any_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">any_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.any\">Batteries.RBNode.any</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Any\">Batteries.RBNode.Any</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L184-L186","name":"Batteries.RBNode.Any","line":184,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Any","doc":"Asserts that `p` holds on some element of the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Any\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L180-L181","name":"Batteries.RBNode.instDecidableAllOfDecidablePred","line":180,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instDecidableAllOfDecidablePred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instDecidableAllOfDecidablePred\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instDecidableAllOfDecidablePred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">Batteries.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L177-L178","name":"Batteries.RBNode.all_iff","line":177,"kind":"theorem","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.all_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.all_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">all_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.all\">Batteries.RBNode.all</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">Batteries.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L173-L175","name":"Batteries.RBNode.All.imp","line":173,"kind":"theorem","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All.imp\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">Batteries.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">Batteries.RBNode.All</a> <span class=\"fn\">q</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L169-L171","name":"Batteries.RBNode.All","line":169,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All","doc":"Asserts that `p` holds on every element of the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L164-L166","name":"Batteries.RBNode.any","line":164,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.any","doc":"Returns `true` iff any element of the tree satisfies `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.any\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L159-L161","name":"Batteries.RBNode.all","line":159,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.all","doc":"Returns `true` iff every element of the tree satisfies `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.all\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L156-L156","name":"Batteries.RBNode.instStreamStream","line":156,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instStreamStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instStreamStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instStreamStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L155-L155","name":"Batteries.RBNode.instToStreamStream","line":155,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instToStreamStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instToStreamStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instToStreamStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L151-L151","name":"Batteries.RBNode.Stream.toList","line":151,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList","doc":"`O(n)`. Convert the stream to a list in ascending order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L146-L148","name":"Batteries.RBNode.Stream.foldr","line":146,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.foldr","doc":"Fold a function on the values from right to left (in decreasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.foldr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L141-L143","name":"Batteries.RBNode.Stream.foldl","line":141,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.foldl","doc":"Fold a function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.foldl\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L136-L138","name":"Batteries.RBNode.Stream.next?","line":136,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.next?","doc":"`O(1)` amortized, `O(log n)` worst case: Get the next element from the stream. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.next?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L129-L131","name":"Batteries.RBNode.toStream","line":129,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toStream","doc":"`O(log n)`. Turn a node into a stream, by descending along the left spine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">Batteries.RBNode.Stream.nil</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L124-L126","name":"Batteries.RBNode.Stream.cons","line":124,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.cons","doc":"We are ready to deliver element `v` with right child `r`,\nand where `tail` represents all the subtrees we have yet to destructure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.cons\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tail : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L122-L123","name":"Batteries.RBNode.Stream.nil","line":122,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.nil","doc":"The stream is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">Batteries.RBNode.Stream</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L121-L126","name":"Batteries.RBNode.Stream","line":121,"kind":"inductive","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream","doc":"An auxiliary data structure (an iterator) over an `RBNode` which lazily\npulls elements from the left.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L114-L115","name":"Batteries.RBNode.instForIn","line":114,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instForIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instForIn\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instForIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L110-L112","name":"Batteries.RBNode.forIn.visit","line":110,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.forIn.visit","doc":"Inner loop of `forIn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.forIn.visit\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forIn</span>.<span class=\"name\">visit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">σ</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">σ</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L105-L112","name":"Batteries.RBNode.forIn","line":105,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.forIn","doc":"Implementation of `for x in t` loops over a `RBNode` (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.forIn\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">σ</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L100-L102","name":"Batteries.RBNode.foldlM","line":100,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldlM","doc":"Fold a monadic function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldlM\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L95-L97","name":"Batteries.RBNode.forM","line":95,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.forM","doc":"Run monadic function `f` on each element of the tree (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.forM\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L92-L92","name":"Batteries.RBNode.toList","line":92,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList","doc":"`O(n)`. Convert the tree to a list in ascending order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L87-L89","name":"Batteries.RBNode.foldr","line":87,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldr","doc":"Fold a function on the values from right to left (in decreasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L82-L84","name":"Batteries.RBNode.foldl","line":82,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldl","doc":"Fold a function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldl\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L77-L79","name":"Batteries.RBNode.fold","line":77,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.fold","doc":"Fold a function in tree order along the nodes. `v₀` is used at `nil` nodes and\n`f` is used to combine results at branching nodes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.fold\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v₀ : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L71-L71","name":"Batteries.RBNode.max","line":71,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.max","doc":"**Alias** of `Batteries.RBNode.max?`.\n\n---\n\nThe maximum element of a tree is the right-most value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.max\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L70-L70","name":"Batteries.RBNode.min","line":70,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.min","doc":"**Alias** of `Batteries.RBNode.min?`.\n\n---\n\nThe minimum element of a tree is the left-most value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.min\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L65-L68","name":"Batteries.RBNode.max?","line":65,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.max?","doc":"The maximum element of a tree is the right-most value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.max?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L59-L62","name":"Batteries.RBNode.min?","line":59,"kind":"def","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.min?","doc":"The minimum element of a tree is the left-most value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.min?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L56-L56","name":"Batteries.RBNode.instEmptyCollection","line":56,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.instEmptyCollection\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L51-L51","name":"Batteries.instReprRBNode","line":51,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.instReprRBNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.instReprRBNode\"><span class=\"name\">Batteries</span>.<span class=\"name\">instReprRBNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L47-L50","name":"Batteries.RBNode.node","line":47,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node","doc":"A node consists of a value `v`, a subtree `l` of smaller items,\nand a subtree `r` of larger items. The color `c` is either `red` or `black`\nand participates in the red-black balance invariant (see `Balanced`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L45-L46","name":"Batteries.RBNode.nil","line":45,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.nil","doc":"An empty tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">Batteries.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L44-L51","name":"Batteries.RBNode","line":44,"kind":"inductive","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode","doc":"A red-black tree. (This is an internal implementation detail of the `RBSet` type,\nwhich includes the invariants of the tree.) This is a binary search tree augmented with\na \"color\" field which is either red or black for each node and used to implement\nthe re-balancing operations.\nSee: [Red–black tree](https://en.wikipedia.org/wiki/Red%E2%80%93black_tree)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L35-L35","name":"Batteries.instReprRBColor","line":35,"kind":"instance","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.instReprRBColor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.instReprRBColor\"><span class=\"name\">Batteries</span>.<span class=\"name\">instReprRBColor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L33-L34","name":"Batteries.RBColor.black","line":33,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black","doc":"Every path from the root to a leaf must pass through the same number of black nodes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBColor</span>.<span class=\"name\">black</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L31-L32","name":"Batteries.RBColor.red","line":31,"kind":"ctor","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red","doc":"A red node is required to have black children. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBColor</span>.<span class=\"name\">red</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">Batteries.RBColor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/RBMap/Basic.lean#L30-L35","name":"Batteries.RBColor","line":30,"kind":"inductive","docLink":"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor","doc":"In a red-black tree, every node has a color which is either \"red\" or \"black\"\n(this particular choice of colors is conventional). A nil node is considered black.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBColor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}