{"name":"Batteries.Data.Rat.Basic","instances":[{"typeNames":["Eq"],"name":"instDecidableEqRat","className":"Decidable"},{"typeNames":["Rat"],"name":"instInhabitedRat","className":"Inhabited"},{"typeNames":["Rat"],"name":"instToStringRat","className":"ToString"},{"typeNames":["Rat"],"name":"instReprRat","className":"Repr"},{"typeNames":["Rat"],"name":"Rat.instNatCast","className":"NatCast"},{"typeNames":["Rat"],"name":"Rat.instIntCast","className":"IntCast"},{"typeNames":["Rat"],"name":"Rat.instOfNat","className":"OfNat"},{"typeNames":["Rat"],"name":"Rat.instOfScientific","className":"OfScientific"},{"typeNames":["Rat"],"name":"Rat.instLT","className":"LT"},{"typeNames":["LT.lt"],"name":"Rat.instDecidableLt","className":"Decidable"},{"typeNames":["Rat"],"name":"Rat.instLE","className":"LE"},{"typeNames":["LE.le"],"name":"Rat.instDecidableLe","className":"Decidable"},{"typeNames":["Rat"],"name":"Rat.instMul","className":"Mul"},{"typeNames":["Rat"],"name":"Rat.instDiv","className":"Div"},{"typeNames":["Rat"],"name":"Rat.instAdd","className":"Add"},{"typeNames":["Rat"],"name":"Rat.instNeg","className":"Neg"},{"typeNames":["Rat"],"name":"Rat.instSub","className":"Sub"},{"typeNames":["Rat","Float"],"name":"Rat.instCoeFloat","className":"Coe"}],"imports":["Init","Batteries.Data.Nat.Gcd","Batteries.Data.Int.DivMod","Batteries.Lean.Float"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L295-L295","name":"Rat.instCoeFloat","line":295,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instCoeFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instCoeFloat\"><span class=\"name\">Rat</span>.<span class=\"name\">instCoeFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L293-L293","name":"Float.toRat0","line":293,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Float.toRat0","doc":"Convert this floating point number to a rational value,\nmapping non-finite values (`inf`, `-inf`, `nan`) to 0.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Float.toRat0\"><span class=\"name\">Float</span>.<span class=\"name\">toRat0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L285-L287","name":"Float.toRat?","line":285,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Float.toRat?","doc":"Convert this floating point number to a rational value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Float.toRat?\"><span class=\"name\">Float</span>.<span class=\"name\">toRat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L282-L282","name":"Rat.toFloat","line":282,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.toFloat","doc":"Convert this rational number to a `Float` value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.toFloat\"><span class=\"name\">Rat</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L275-L279","name":"Rat.ceil","line":275,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.ceil","doc":"The ceiling of a rational number `a` is the smallest integer greater than or equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.ceil\"><span class=\"name\">Rat</span>.<span class=\"name\">ceil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L268-L272","name":"Rat.floor","line":268,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.floor","doc":"The floor of a rational number `a` is the largest integer less than or equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.floor\"><span class=\"name\">Rat</span>.<span class=\"name\">floor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L265-L265","name":"Rat.instSub","line":265,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instSub\"><span class=\"name\">Rat</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L250-L263","name":"Rat.sub","line":250,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.sub","doc":"Subtraction of rational numbers. (This definition is `@[irreducible]` because you don't want to\nunfold it. Use `Rat.sub_def` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.sub\"><span class=\"name\">Rat</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L239-L245","name":"Rat.sub.aux","line":239,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.sub.aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.sub.aux\"><span class=\"name\">Rat</span>.<span class=\"name\">sub</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ad : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{bd : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.den</span>.gcd</span> <span class=\"fn\"><span class=\"fn\">b</span>.den</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(had : <span class=\"fn\"><span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hbd : <span class=\"fn\"><span class=\"fn\">bd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">den</span> := <span class=\"fn\"><span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.den</span></span>;\n<span class=\"fn\">let <span class=\"fn\">num</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.num</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">bd</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.num</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">ad</span></span></span></span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.natAbs</span>.gcd</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.natAbs</span>.gcd</span> <span class=\"fn\">den</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L237-L237","name":"Rat.instNeg","line":237,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instNeg\"><span class=\"name\">Rat</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L234-L235","name":"Rat.neg","line":234,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.neg","doc":"Negation of rational numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.neg\"><span class=\"name\">Rat</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L231-L231","name":"Rat.instAdd","line":231,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instAdd\"><span class=\"name\">Rat</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L216-L229","name":"Rat.add","line":216,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.add","doc":"Addition of rational numbers. (This definition is `@[irreducible]` because you don't want to\nunfold it. Use `Rat.add_def` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.add\"><span class=\"name\">Rat</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L184-L210","name":"Rat.add.aux","line":184,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.add.aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.add.aux\"><span class=\"name\">Rat</span>.<span class=\"name\">add</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ad : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{bd : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.den</span>.gcd</span> <span class=\"fn\"><span class=\"fn\">b</span>.den</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(had : <span class=\"fn\"><span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hbd : <span class=\"fn\"><span class=\"fn\">bd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">den</span> := <span class=\"fn\"><span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.den</span></span>;\n<span class=\"fn\">let <span class=\"fn\">num</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.num</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">bd</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.num</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">ad</span></span></span></span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.natAbs</span>.gcd</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.natAbs</span>.gcd</span> <span class=\"fn\">den</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L182-L182","name":"Rat.instDiv","line":182,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instDiv","doc":"Division of rational numbers. Note: `div a 0 = 0`.  Written with a separate function `Rat.div`\nas a wrapper so that the definition is not unfolded at `.instance` transparency. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instDiv\"><span class=\"name\">Rat</span>.<span class=\"name\">instDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L178-L178","name":"Rat.div","line":178,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.div","doc":"Division of rational numbers. Note: `div a 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.div\"><span class=\"name\">Rat</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a> → <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a> → <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L165-L175","name":"Rat.inv","line":165,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.inv","doc":"The inverse of a rational number. Note: `inv 0 = 0`. (This definition is `@[irreducible]`\nbecause you don't want to unfold it. Use `Rat.inv_def` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.inv\"><span class=\"name\">Rat</span>.<span class=\"name\">inv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L159-L159","name":"Rat.instMul","line":159,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instMul\"><span class=\"name\">Rat</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L142-L157","name":"Rat.mul","line":142,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.mul","doc":"Multiplication of rational numbers. (This definition is `@[irreducible]` because you don't\nwant to unfold it. Use `Rat.mul_def` instead.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.mul\"><span class=\"name\">Rat</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L137-L138","name":"Rat.instDecidableLe","line":137,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instDecidableLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instDecidableLe\"><span class=\"name\">Rat</span>.<span class=\"name\">instDecidableLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L135-L135","name":"Rat.instLE","line":135,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instLE\"><span class=\"name\">Rat</span>.<span class=\"name\">instLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L132-L133","name":"Rat.instDecidableLt","line":132,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instDecidableLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instDecidableLt\"><span class=\"name\">Rat</span>.<span class=\"name\">instDecidableLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L130-L130","name":"Rat.instLT","line":130,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instLT\"><span class=\"name\">Rat</span>.<span class=\"name\">instLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L119-L128","name":"Rat.blt","line":119,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.blt","doc":"Rational number strictly less than relation, as a `Bool`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.blt\"><span class=\"name\">Rat</span>.<span class=\"name\">blt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L116-L116","name":"Rat.instOfScientific","line":116,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instOfScientific","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instOfScientific\"><span class=\"name\">Rat</span>.<span class=\"name\">instOfScientific</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L110-L114","name":"Rat.ofScientific","line":110,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.ofScientific","doc":"Implements \"scientific notation\" `123.4e-5` for rational numbers. (This definition is\n`@[irreducible]` because you don't want to unfold it. Use `Rat.ofScientific_def`,\n`Rat.ofScientific_true_def`, or `Rat.ofScientific_false_def` instead.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.ofScientific\"><span class=\"name\">Rat</span>.<span class=\"name\">ofScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L105-L105","name":"Rat.«term_/._»","line":105,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.«term_/._»","doc":"Form the quotient `n / d` where `n d : Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.«term_/._»\"><span class=\"name\">Rat</span>.<span class=\"name\">«term_/</span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L101-L103","name":"Rat.divInt","line":101,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.divInt","doc":"Form the quotient `n / d` where `n d : Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.divInt\"><span class=\"name\">Rat</span>.<span class=\"name\">divInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L98-L98","name":"Rat.isInt","line":98,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.isInt","doc":"Is this rational number integral? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.isInt\"><span class=\"name\">Rat</span>.<span class=\"name\">isInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L95-L95","name":"Rat.instOfNat","line":95,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instOfNat\"><span class=\"name\">Rat</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L93-L93","name":"Rat.instIntCast","line":93,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instIntCast\"><span class=\"name\">Rat</span>.<span class=\"name\">instIntCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L91-L92","name":"Rat.instNatCast","line":91,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instNatCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instNatCast\"><span class=\"name\">Rat</span>.<span class=\"name\">instNatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L89-L89","name":"Rat.ofInt","line":89,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.ofInt","doc":"Embedding of `Int` in the rational numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.ofInt\"><span class=\"name\">Rat</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L83-L84","name":"mkRat","line":83,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#mkRat","doc":"Construct a rational number from a numerator and denominator.\nThis is a \"smart constructor\" that divides the numerator and denominator by\nthe gcd to ensure that the resulting rational number is normalized, and returns\nzero if `den` is zero.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#mkRat\"><span class=\"name\">mkRat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L73-L75","name":"Rat.normalize","line":73,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.normalize","doc":"Construct a normalized `Rat` from a numerator and nonzero denominator.\nThis is a \"smart constructor\" that divides the numerator and denominator by\nthe gcd to ensure that the resulting rational number is normalized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.normalize\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den_nz : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span> <a href=\"./Batteries/Data/Rat/Basic.html#_auto._@.Batteries.Data.Rat.Basic._hyg.707\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L60-L66","name":"Rat.normalize.reduced","line":60,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.normalize.reduced","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.normalize.reduced\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">reduced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{den : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(den_nz : <span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.natAbs</span>.gcd</span> <span class=\"fn\">den</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.div</span> <span class=\"fn\">↑<span class=\"fn\">g</span></span></span>)</span>.natAbs</span>.Coprime</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L56-L58","name":"Rat.normalize.den_nz","line":56,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.normalize.den_nz","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.normalize.den_nz\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">den_nz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{den : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(den_nz : <span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.natAbs</span>.gcd</span> <span class=\"fn\">den</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L48-L54","name":"Rat.maybeNormalize","line":48,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.maybeNormalize","doc":"Auxiliary definition for `Rat.normalize`. Constructs `num / den` as a rational number,\ndividing both `num` and `den` by `g` (which is the gcd of the two) if it is not 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.maybeNormalize\"><span class=\"name\">Rat</span>.<span class=\"name\">maybeNormalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den_nz : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(reduced : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.div</span> <span class=\"fn\">↑<span class=\"fn\">g</span></span></span>)</span>.natAbs</span>.Coprime</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L39-L39","name":"Rat.den_pos","line":39,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.den_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.den_pos\"><span class=\"name\">Rat</span>.<span class=\"name\">den_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">self</span>.den</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L36-L37","name":"instReprRat","line":36,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#instReprRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#instReprRat\"><span class=\"name\">instReprRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L33-L34","name":"instToStringRat","line":33,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#instToStringRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#instToStringRat\"><span class=\"name\">instToStringRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L31-L31","name":"instInhabitedRat","line":31,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#instInhabitedRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#instInhabitedRat\"><span class=\"name\">instInhabitedRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L29-L29","name":"instDecidableEqRat","line":29,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#instDecidableEqRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#instDecidableEqRat\"><span class=\"name\">instDecidableEqRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L28-L28","name":"Rat.reduced","line":28,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.reduced","doc":"The numerator and denominator are coprime: it is in \"reduced form\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.reduced\"><span class=\"name\">Rat</span>.<span class=\"name\">reduced</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.num</span>.natAbs</span>.Coprime</span> <span class=\"fn\"><span class=\"fn\">self</span>.den</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L26-L26","name":"Rat.den_nz","line":26,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.den_nz","doc":"The denominator is nonzero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.den_nz\"><span class=\"name\">Rat</span>.<span class=\"name\">den_nz</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L24-L24","name":"Rat.den","line":24,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.den","doc":"The denominator of the rational number is a natural number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.den\"><span class=\"name\">Rat</span>.<span class=\"name\">den</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L22-L22","name":"Rat.num","line":22,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.num","doc":"The numerator of the rational number is an integer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.num\"><span class=\"name\">Rat</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L20-L20","name":"Rat.mk'","line":20,"kind":"ctor","docLink":"./Batteries/Data/Rat/Basic.html#Rat.mk'","doc":"Constructs a rational number from components.\nWe rename the constructor to `mk'` to avoid a clash with the smart constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.mk'\"><span class=\"name\">Rat</span>.<span class=\"name\">mk'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den_nz : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span> <a href=\"./Batteries/Data/Rat/Basic.html#_auto._@.Batteries.Data.Rat.Basic._hyg.5\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(reduced : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.natAbs</span>.Coprime</span> <span class=\"fn\">den</span></span>)</span> <a href=\"./Batteries/Data/Rat/Basic.html#_auto._@.Batteries.Data.Rat.Basic._hyg.6\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/Rat/Basic.lean#L17-L29","name":"Rat","line":17,"kind":"structure","docLink":"./Batteries/Data/Rat/Basic.html#Rat","doc":"Rational numbers, implemented as a pair of integers `num / den` such that the\ndenominator is positive and the numerator and denominator are coprime.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat\"><span class=\"name\">Rat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}