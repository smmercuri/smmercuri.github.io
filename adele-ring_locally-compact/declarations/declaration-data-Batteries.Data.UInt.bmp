{"name":"Batteries.Data.UInt","instances":[{"typeNames":["UInt8"],"name":"instLawfulOrdUInt8","className":"Batteries.LawfulCmp"},{"typeNames":["UInt16"],"name":"instLawfulOrdUInt16","className":"Batteries.LawfulCmp"},{"typeNames":["UInt32"],"name":"instLawfulOrdUInt32","className":"Batteries.LawfulCmp"},{"typeNames":["UInt64"],"name":"instLawfulOrdUInt64","className":"Batteries.LawfulCmp"},{"typeNames":["USize"],"name":"instLawfulOrdUSize","className":"Batteries.LawfulCmp"}],"imports":["Init","Batteries.Classes.Order"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L254-L255","name":"instLawfulOrdUSize","line":254,"kind":"instance","docLink":"./Batteries/Data/UInt.html#instLawfulOrdUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#instLawfulOrdUSize\"><span class=\"name\">instLawfulOrdUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LawfulOrd\">Batteries.LawfulOrd</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L251-L252","name":"USize.le_antisymm","line":251,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.le_antisymm\"><span class=\"name\">USize</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L248-L249","name":"USize.le_antisymm_iff","line":248,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.le_antisymm_iff\"><span class=\"name\">USize</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L246-L246","name":"USize.toNat_modn","line":246,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_modn\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.modn</span> <span class=\"fn\">n</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L244-L244","name":"USize.toNat_mod","line":244,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_mod\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L242-L242","name":"USize.toNat_div","line":242,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_div\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L240-L240","name":"USize.toNat_mul","line":240,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_mul\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L237-L238","name":"USize.toNat_sub","line":237,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_sub\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L235-L235","name":"USize.toNat_add","line":235,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_add\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L233-L233","name":"USize.toNat_zero","line":233,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_zero\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.toNat\">USize.toNat</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L231-L231","name":"UInt32.toUSize_toNat","line":231,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toUSize_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toUSize_toNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUSize</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L228-L229","name":"USize.toUInt64_toNat","line":228,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toUInt64_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toUInt64_toNat\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt64</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L225-L226","name":"USize.toNat_lt","line":225,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_lt\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L220-L223","name":"USize.size_le","line":220,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.size_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.size_le\"><span class=\"name\">USize</span>.<span class=\"name\">size_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L215-L218","name":"USize.le_size","line":215,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.le_size\"><span class=\"name\">USize</span>.<span class=\"name\">le_size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L211-L213","name":"USize.size_eq","line":211,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.size_eq\"><span class=\"name\">USize</span>.<span class=\"name\">size_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L208-L209","name":"USize.toNat_ofNat","line":208,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_ofNat\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L205-L206","name":"USize.val_ofNat","line":205,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.val_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.val_ofNat\"><span class=\"name\">USize</span>.<span class=\"name\">val_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>)</span>.val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L203-L203","name":"USize.val_val_eq_toNat","line":203,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.val_val_eq_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.val_val_eq_toNat\"><span class=\"name\">USize</span>.<span class=\"name\">val_val_eq_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L201-L201","name":"USize.ext_iff","line":201,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.ext_iff\"><span class=\"name\">USize</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L198-L199","name":"USize.ext","line":198,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.ext\"><span class=\"name\">USize</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L193-L194","name":"instLawfulOrdUInt64","line":193,"kind":"instance","docLink":"./Batteries/Data/UInt.html#instLawfulOrdUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#instLawfulOrdUInt64\"><span class=\"name\">instLawfulOrdUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LawfulOrd\">Batteries.LawfulOrd</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L190-L191","name":"UInt64.le_antisymm","line":190,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.le_antisymm\"><span class=\"name\">UInt64</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L187-L188","name":"UInt64.le_antisymm_iff","line":187,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.le_antisymm_iff\"><span class=\"name\">UInt64</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L185-L185","name":"UInt64.toNat_modn","line":185,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_modn\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.modn</span> <span class=\"fn\">n</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L183-L183","name":"UInt64.toNat_mod","line":183,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L181-L181","name":"UInt64.toNat_div","line":181,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_div\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L179-L179","name":"UInt64.toNat_mul","line":179,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_mul\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt64.size\">UInt64.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L176-L177","name":"UInt64.toNat_sub","line":176,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_sub\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.size\">UInt64.size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt64.size\">UInt64.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L174-L174","name":"UInt64.toNat_add","line":174,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_add\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt64.size\">UInt64.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L172-L172","name":"UInt64.toNat_zero","line":172,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_zero\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.toNat\">UInt64.toNat</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L170-L170","name":"UInt64.toUInt32_toNat","line":170,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toUInt32_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toUInt32_toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt32</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L168-L168","name":"UInt64.toUInt16_toNat","line":168,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toUInt16_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toUInt16_toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt16</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L166-L166","name":"UInt64.toUInt8_toNat","line":166,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toUInt8_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toUInt8_toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt8</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L164-L164","name":"UInt64.toNat_lt","line":164,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_lt\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L161-L162","name":"UInt64.toNat_ofNat","line":161,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_ofNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt64.size\">UInt64.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L158-L159","name":"UInt64.val_ofNat","line":158,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.val_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.val_ofNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">val_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>)</span>.val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L156-L156","name":"UInt64.val_val_eq_toNat","line":156,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.val_val_eq_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.val_val_eq_toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">val_val_eq_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L154-L154","name":"UInt64.ext_iff","line":154,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.ext_iff\"><span class=\"name\">UInt64</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L151-L152","name":"UInt64.ext","line":151,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.ext\"><span class=\"name\">UInt64</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L146-L147","name":"instLawfulOrdUInt32","line":146,"kind":"instance","docLink":"./Batteries/Data/UInt.html#instLawfulOrdUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#instLawfulOrdUInt32\"><span class=\"name\">instLawfulOrdUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LawfulOrd\">Batteries.LawfulOrd</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L143-L144","name":"UInt32.le_antisymm","line":143,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.le_antisymm\"><span class=\"name\">UInt32</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L140-L141","name":"UInt32.le_antisymm_iff","line":140,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.le_antisymm_iff\"><span class=\"name\">UInt32</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L138-L138","name":"UInt32.toNat_modn","line":138,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_modn\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.modn</span> <span class=\"fn\">n</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L136-L136","name":"UInt32.toNat_mod","line":136,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L134-L134","name":"UInt32.toNat_div","line":134,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_div\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L132-L132","name":"UInt32.toNat_mul","line":132,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_mul\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L129-L130","name":"UInt32.toNat_sub","line":129,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_sub\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L127-L127","name":"UInt32.toNat_add","line":127,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_add\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L125-L125","name":"UInt32.toNat_zero","line":125,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_zero\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.toNat\">UInt32.toNat</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L123-L123","name":"UInt32.toUInt64_toNat","line":123,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toUInt64_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toUInt64_toNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt64</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L121-L121","name":"UInt32.toUInt16_toNat","line":121,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toUInt16_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toUInt16_toNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt16</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L119-L119","name":"UInt32.toUInt8_toNat","line":119,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toUInt8_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toUInt8_toNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt8</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L117-L117","name":"UInt32.toNat_lt","line":117,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L114-L115","name":"UInt32.toNat_ofNat","line":114,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_ofNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L111-L112","name":"UInt32.val_ofNat","line":111,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.val_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.val_ofNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">val_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>)</span>.val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L109-L109","name":"UInt32.val_val_eq_toNat","line":109,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.val_val_eq_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.val_val_eq_toNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">val_val_eq_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L107-L107","name":"UInt32.ext_iff","line":107,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.ext_iff\"><span class=\"name\">UInt32</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L104-L105","name":"UInt32.ext","line":104,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.ext\"><span class=\"name\">UInt32</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L99-L100","name":"instLawfulOrdUInt16","line":99,"kind":"instance","docLink":"./Batteries/Data/UInt.html#instLawfulOrdUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#instLawfulOrdUInt16\"><span class=\"name\">instLawfulOrdUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LawfulOrd\">Batteries.LawfulOrd</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L96-L97","name":"UInt16.le_antisymm","line":96,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.le_antisymm\"><span class=\"name\">UInt16</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L93-L94","name":"UInt16.le_antisymm_iff","line":93,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.le_antisymm_iff\"><span class=\"name\">UInt16</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L91-L91","name":"UInt16.toNat_modn","line":91,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_modn\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.modn</span> <span class=\"fn\">n</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L89-L89","name":"UInt16.toNat_mod","line":89,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L87-L87","name":"UInt16.toNat_div","line":87,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_div\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L85-L85","name":"UInt16.toNat_mul","line":85,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_mul\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt16.size\">UInt16.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L82-L83","name":"UInt16.toNat_sub","line":82,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_sub\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.size\">UInt16.size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt16.size\">UInt16.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L80-L80","name":"UInt16.toNat_add","line":80,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_add\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt16.size\">UInt16.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L78-L78","name":"UInt16.toNat_zero","line":78,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_zero\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.toNat\">UInt16.toNat</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L76-L76","name":"UInt16.toUInt64_toNat","line":76,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toUInt64_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toUInt64_toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt64</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L74-L74","name":"UInt16.toUInt32_toNat","line":74,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toUInt32_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toUInt32_toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt32</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L72-L72","name":"UInt16.toUInt8_toNat","line":72,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toUInt8_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toUInt8_toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt8</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L70-L70","name":"UInt16.toNat_lt","line":70,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_lt\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L67-L68","name":"UInt16.toNat_ofNat","line":67,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_ofNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt16.size\">UInt16.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L64-L65","name":"UInt16.val_ofNat","line":64,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.val_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.val_ofNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">val_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>)</span>.val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L62-L62","name":"UInt16.val_val_eq_toNat","line":62,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.val_val_eq_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.val_val_eq_toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">val_val_eq_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L60-L60","name":"UInt16.ext_iff","line":60,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.ext_iff\"><span class=\"name\">UInt16</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L57-L58","name":"UInt16.ext","line":57,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.ext\"><span class=\"name\">UInt16</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L52-L53","name":"instLawfulOrdUInt8","line":52,"kind":"instance","docLink":"./Batteries/Data/UInt.html#instLawfulOrdUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#instLawfulOrdUInt8\"><span class=\"name\">instLawfulOrdUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LawfulOrd\">Batteries.LawfulOrd</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L49-L50","name":"UInt8.le_antisymm","line":49,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.le_antisymm\"><span class=\"name\">UInt8</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L46-L47","name":"UInt8.le_antisymm_iff","line":46,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.le_antisymm_iff\"><span class=\"name\">UInt8</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L44-L44","name":"UInt8.toNat_modn","line":44,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_modn\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.modn</span> <span class=\"fn\">n</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L42-L42","name":"UInt8.toNat_mod","line":42,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_mod\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L40-L40","name":"UInt8.toNat_div","line":40,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_div\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L38-L38","name":"UInt8.toNat_mul","line":38,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_mul\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt8.size\">UInt8.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L35-L36","name":"UInt8.toNat_sub","line":35,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_sub\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.size\">UInt8.size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt8.size\">UInt8.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L33-L33","name":"UInt8.toNat_add","line":33,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_add\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt8.size\">UInt8.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L31-L31","name":"UInt8.toNat_zero","line":31,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_zero\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.toNat\">UInt8.toNat</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L29-L29","name":"UInt8.toUInt64_toNat","line":29,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toUInt64_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toUInt64_toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt64</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L27-L27","name":"UInt8.toUInt32_toNat","line":27,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toUInt32_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toUInt32_toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt32</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L25-L25","name":"UInt8.toUInt16_toNat","line":25,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toUInt16_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toUInt16_toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt16</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L23-L23","name":"UInt8.toNat_lt","line":23,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_lt\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L20-L21","name":"UInt8.toNat_ofNat","line":20,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_ofNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt8.size\">UInt8.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L17-L18","name":"UInt8.val_ofNat","line":17,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.val_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.val_ofNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">val_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>)</span>.val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L15-L15","name":"UInt8.val_val_eq_toNat","line":15,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.val_val_eq_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.val_val_eq_toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">val_val_eq_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L13-L13","name":"UInt8.ext_iff","line":13,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.ext_iff\"><span class=\"name\">UInt8</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Data/UInt.lean#L10-L11","name":"UInt8.ext","line":10,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.ext\"><span class=\"name\">UInt8</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"}]}