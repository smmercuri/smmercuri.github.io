{"name":"Batteries.Tactic.Lint.Basic","instances":[],"imports":["Init","Lean.Structure","Lean.Elab.InfoTree.Main","Lean.Elab.Exception"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L135-L136","name":"Std.Tactic.Lint.shouldBeLinted","line":135,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.shouldBeLinted","doc":"Returns true if `decl` should be checked\nusing `linter`, i.e., if there is no `nolint` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.shouldBeLinted\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">shouldBeLinted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(linter : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L118-L131","name":"Std.Tactic.Lint.nolintAttr","line":118,"kind":"opaque","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.nolintAttr","doc":"Defines the user attribute `nolint` for skipping `#lint` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.nolintAttr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">nolintAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">Lean.ParametricAttribute</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L114-L116","name":"Std.Tactic.Lint.nolint","line":114,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.nolint","doc":"`@[nolint linterName]` omits the tagged declaration from being checked by\nthe linter with name `linterName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.nolint\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">nolint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L88-L95","name":"Std.Tactic.Lint.env_linter","line":88,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.env_linter","doc":"Defines the `@[env_linter]` attribute for adding a linter to the default set.\nThe form `@[env_linter disabled]` will not add the linter to the default set,\nbut it will be shown by `#list_linters` and can be selected by the `#lint` command.\n\nLinters are named using their declaration names, without the namespace. These must be distinct.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.env_linter\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">env_linter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L76-L86","name":"Std.Tactic.Lint.batteriesLinterExt","line":76,"kind":"opaque","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.batteriesLinterExt","doc":"Defines the `env_linter` extension for adding a linter to the default set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.batteriesLinterExt\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">batteriesLinterExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L73-L74","name":"Std.Tactic.Lint.getLinter","line":73,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.getLinter","doc":"Gets a linter by declaration name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.getLinter\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">getLinter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L70-L70","name":"Std.Tactic.Lint.NamedLinter.declName","line":70,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter.declName","doc":"The linter declaration name "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter.declName\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">NamedLinter</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L68-L68","name":"Std.Tactic.Lint.NamedLinter.name","line":68,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter.name","doc":"The name of the named linter. This is just the declaration name without the namespace. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter.name\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">NamedLinter</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L66-L66","name":"Std.Tactic.Lint.NamedLinter.mk","line":66,"kind":"ctor","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">NamedLinter</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toLinter : <a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L66-L70","name":"Std.Tactic.Lint.NamedLinter","line":66,"kind":"structure","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter","doc":"A `NamedLinter` is a linter associated to a particular declaration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">NamedLinter</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">Linter</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L63-L63","name":"Std.Tactic.Lint.Linter.isFast","line":63,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.isFast","doc":"If `isFast` is false, this test will be omitted from `#lint-`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.isFast\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">Linter</span>.<span class=\"name\">isFast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L61-L61","name":"Std.Tactic.Lint.Linter.errorsFound","line":61,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.errorsFound","doc":"`errorsFound` is printed when at least one test is positive "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.errorsFound\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">Linter</span>.<span class=\"name\">errorsFound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L59-L59","name":"Std.Tactic.Lint.Linter.noErrorsFound","line":59,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.noErrorsFound","doc":"`noErrorsFound` is the message printed when all tests are negative "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.noErrorsFound\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">Linter</span>.<span class=\"name\">noErrorsFound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L57-L57","name":"Std.Tactic.Lint.Linter.test","line":57,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.test","doc":"`test` defines a test to perform on every declaration. It should never fail. Returning `none`\nsignifies a passing test. Returning `some msg` reports a failing test with error `msg`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.test\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">Linter</span>.<span class=\"name\">test</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L54-L54","name":"Std.Tactic.Lint.Linter.mk","line":54,"kind":"ctor","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">Linter</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(test : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(noErrorsFound : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(errorsFound : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isFast : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L54-L63","name":"Std.Tactic.Lint.Linter","line":54,"kind":"structure","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter","doc":"A linting test for the `#lint` command. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">Linter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Basic.lean#L35-L51","name":"Std.Tactic.Lint.isAutoDecl","line":35,"kind":"def","docLink":"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.isAutoDecl","doc":"Returns true if `decl` is an automatically generated declaration.\n\nAlso returns true if `decl` is an internal name or created during macro\nexpansion.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.isAutoDecl\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">isAutoDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}