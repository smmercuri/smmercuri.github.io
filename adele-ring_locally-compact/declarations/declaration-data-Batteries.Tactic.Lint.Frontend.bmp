{"name":"Batteries.Tactic.Lint.Frontend","instances":[{"typeNames":["Std.Tactic.Lint.LintVerbosity"],"name":"Std.Tactic.Lint.instInhabitedLintVerbosity","className":"Inhabited"},{"typeNames":["Eq"],"name":"Std.Tactic.Lint.instDecidableEqLintVerbosity","className":"Decidable"},{"typeNames":["Std.Tactic.Lint.LintVerbosity"],"name":"Std.Tactic.Lint.instReprLintVerbosity","className":"Repr"}],"imports":["Init","Lean.Util.Paths","Lean.Elab.Command","Batteries.Tactic.Lint.Basic","Batteries.Tactic.OpenPrivate"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L273-L281","name":"Std.Tactic.Lint.«command#list_linters»","line":273,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.«command#list_linters»","doc":"The command `#list_linters` prints a list of all available linters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.«command#list_linters»\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">«command#list_linters»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L228-L270","name":"Std.Tactic.Lint.«command#lint+-*Only___»","line":228,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.«command#lint+-*Only___»","doc":"The command `#lint` runs the linters on the current file (by default).\n\n`#lint only someLinter` can be used to run only a single linter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.«command#lint+-*Only___»\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">«command#lint+-*Only___»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L224-L225","name":"Std.Tactic.Lint.inProject","line":224,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.inProject","doc":"The `in foo` config argument allows running the linter on a specified project. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.inProject\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">inProject</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L215-L222","name":"Std.Tactic.Lint.getDeclsInPackage","line":215,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getDeclsInPackage","doc":"Get the list of all declarations in the specified package. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getDeclsInPackage\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">getDeclsInPackage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pkg : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L211-L212","name":"Std.Tactic.Lint.getAllDecls","line":211,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getAllDecls","doc":"Get the list of all declarations in the environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getAllDecls\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">getAllDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L207-L208","name":"Std.Tactic.Lint.getDeclsInCurrModule","line":207,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getDeclsInCurrModule","doc":"Get the list of declarations in the current module. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getDeclsInCurrModule\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">getDeclsInCurrModule</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L176-L204","name":"Std.Tactic.Lint.formatLinterResults","line":176,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.formatLinterResults","doc":"Formats the linter results as Lean code with comments and `#check` commands.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.formatLinterResults\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">formatLinterResults</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(results : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(groupByFilename : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(whereDesc : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(runSlowLinters : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(verbose : <a href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numLinters : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useErrorFormat : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L153-L171","name":"Std.Tactic.Lint.groupedByFilename","line":153,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.groupedByFilename","doc":"Formats a map of linter warnings grouped by filename with `-- filename` comments.\nThe first `drop_fn_chars` characters are stripped from the filename.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.groupedByFilename\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">groupedByFilename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(results : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useErrorFormat : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L143-L147","name":"Std.Tactic.Lint.printWarnings","line":143,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.printWarnings","doc":"Formats a map of linter warnings using `print_warning`, sorted by line number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.printWarnings\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">printWarnings</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(results : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(filePath : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> <span class=\"fn\">default</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useErrorFormat : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L132-L140","name":"Std.Tactic.Lint.printWarning","line":132,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.printWarning","doc":"Formats a linter warning as `#check` command with comment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.printWarning\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">printWarning</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(warning : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useErrorFormat : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(filePath : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> <span class=\"fn\">default</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L124-L129","name":"Std.Tactic.Lint.sortResults","line":124,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.sortResults","doc":"Sorts a map with declaration keys as names by line number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.sortResults\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">sortResults</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(results : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L99-L121","name":"Std.Tactic.Lint.lintCore","line":99,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.lintCore","doc":"Runs all the specified linters on all the specified declarations in parallel,\nproducing a list of results.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.lintCore\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">lintCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(linters : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L76-L90","name":"Std.Tactic.Lint.getChecks","line":76,"kind":"def","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getChecks","doc":"`getChecks slow runOnly runAlways` produces a list of linters.\n`runOnly` is an optional list of names that should resolve to declarations with type `NamedLinter`.\nIf populated, only these linters are run (regardless of the default configuration).\n`runAlways` is an optional list of names that should resolve to declarations with type\n`NamedLinter`. If populated, these linters are always run (regardless of their configuration).\nSpecifying a linter in `runAlways` but not `runOnly` is an error.\nOtherwise, it uses all enabled linters in the environment tagged with `@[env_linter]`.\nIf `slow` is false, it only uses the fast default tests. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getChecks\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">getChecks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(slow : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(runOnly : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(runAlways : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L66-L66","name":"Std.Tactic.Lint.instReprLintVerbosity","line":66,"kind":"instance","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instReprLintVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instReprLintVerbosity\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">instReprLintVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L66-L66","name":"Std.Tactic.Lint.instDecidableEqLintVerbosity","line":66,"kind":"instance","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instDecidableEqLintVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instDecidableEqLintVerbosity\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">instDecidableEqLintVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L66-L66","name":"Std.Tactic.Lint.instInhabitedLintVerbosity","line":66,"kind":"instance","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instInhabitedLintVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instInhabitedLintVerbosity\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">instInhabitedLintVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L64-L65","name":"Std.Tactic.Lint.LintVerbosity.high","line":64,"kind":"ctor","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.high","doc":"`high`: print output of every check. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.high\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">LintVerbosity</span>.<span class=\"name\">high</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L62-L63","name":"Std.Tactic.Lint.LintVerbosity.medium","line":62,"kind":"ctor","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.medium","doc":"`medium`: only print failing checks, print confirmation on success. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.medium\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">LintVerbosity</span>.<span class=\"name\">medium</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L60-L61","name":"Std.Tactic.Lint.LintVerbosity.low","line":60,"kind":"ctor","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.low","doc":"`low`: only print failing checks, print nothing on success. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.low\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">LintVerbosity</span>.<span class=\"name\">low</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/e7897807913fafdab31b01b9f627550bcc96cff2/Batteries/Tactic/Lint/Frontend.lean#L59-L66","name":"Std.Tactic.Lint.LintVerbosity","line":59,"kind":"inductive","docLink":"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity","doc":"Verbosity for the linter output. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">LintVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}