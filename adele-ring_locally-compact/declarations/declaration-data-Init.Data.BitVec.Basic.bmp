{"name":"Init.Data.BitVec.Basic","instances":[{"typeNames":["Eq"],"name":"instDecidableEqBitVec","className":"Decidable"},{"typeNames":["BitVec"],"name":"BitVec.instOfNat","className":"OfNat"},{"typeNames":["BitVec"],"name":"BitVec.natCastInst","className":"NatCast"},{"typeNames":["BitVec"],"name":"BitVec.instSubsingletonBitVecOfNatNatInstOfNatNat","className":"Subsingleton"},{"typeNames":["BitVec"],"name":"BitVec.instInhabitedBitVec","className":"Inhabited"},{"typeNames":["BitVec"],"name":"BitVec.instIntCastBitVec","className":"IntCast"},{"typeNames":["BitVec"],"name":"BitVec.instReprBitVec","className":"Repr"},{"typeNames":["BitVec"],"name":"BitVec.instToStringBitVec","className":"ToString"},{"typeNames":["BitVec"],"name":"BitVec.instAddBitVec","className":"Add"},{"typeNames":["BitVec"],"name":"BitVec.instSubBitVec","className":"Sub"},{"typeNames":["BitVec"],"name":"BitVec.instNegBitVec","className":"Neg"},{"typeNames":["BitVec"],"name":"BitVec.instMulBitVec","className":"Mul"},{"typeNames":["BitVec"],"name":"BitVec.instDivBitVec","className":"Div"},{"typeNames":["BitVec"],"name":"BitVec.instModBitVec","className":"Mod"},{"typeNames":["BitVec"],"name":"BitVec.instLTBitVec","className":"LT"},{"typeNames":["LT.lt"],"name":"BitVec.instDecidableLtBitVecInstLTBitVec","className":"Decidable"},{"typeNames":["BitVec"],"name":"BitVec.instLEBitVec","className":"LE"},{"typeNames":["LE.le"],"name":"BitVec.instDecidableLeBitVecInstLEBitVec","className":"Decidable"},{"typeNames":["BitVec"],"name":"BitVec.instAndOpBitVec","className":"AndOp"},{"typeNames":["BitVec"],"name":"BitVec.instOrOpBitVec","className":"OrOp"},{"typeNames":["BitVec"],"name":"BitVec.instXorBitVec","className":"Xor"},{"typeNames":["BitVec"],"name":"BitVec.instComplementBitVec","className":"Complement"},{"typeNames":["BitVec","Nat","BitVec"],"name":"BitVec.instHShiftLeftBitVecNat","className":"HShiftLeft"},{"typeNames":["BitVec","Nat","BitVec"],"name":"BitVec.instHShiftRightBitVecNat","className":"HShiftRight"},{"typeNames":["BitVec","BitVec","BitVec"],"name":"BitVec.instHShiftLeftBitVec","className":"HShiftLeft"},{"typeNames":["BitVec","BitVec","BitVec"],"name":"BitVec.instHShiftRightBitVec","className":"HShiftRight"},{"typeNames":["BitVec","BitVec","BitVec"],"name":"BitVec.instHAppendBitVecHAddNatInstHAddInstAddNat","className":"HAppend"}],"imports":["Init.Data.Fin.Basic","Init.Data.Nat.Bitwise.Lemmas","Init.Data.Nat.Power2"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L614-L614","name":"BitVec.zero_eq","line":614,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.zero_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.zero_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">zero_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.zero\">BitVec.zero</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L613-L613","name":"BitVec.mul_eq","line":613,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.mul_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.mul_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">mul_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.mul\">BitVec.mul</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L612-L612","name":"BitVec.sub_eq","line":612,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.sub_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.sub_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">sub_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.sub\">BitVec.sub</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L611-L611","name":"BitVec.add_eq","line":611,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.add_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.add_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">add_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.add\">BitVec.add</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L610-L610","name":"BitVec.neg_eq","line":610,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.neg_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.neg_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">neg_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.neg\">BitVec.neg</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L609-L609","name":"BitVec.xor_eq","line":609,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.xor_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.xor_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">xor_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.xor\">BitVec.xor</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L608-L608","name":"BitVec.or_eq","line":608,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.or_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.or_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.or\">BitVec.or</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L607-L607","name":"BitVec.and_eq","line":607,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.and_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.and_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">and_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.and\">BitVec.and</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L606-L606","name":"BitVec.not_eq","line":606,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.not_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.not_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">not_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.not\">BitVec.not</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L605-L605","name":"BitVec.ushiftRight_eq","line":605,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ushiftRight_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ushiftRight_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRight_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ushiftRight\">BitVec.ushiftRight</a> <span class=\"fn\">x</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L604-L604","name":"BitVec.shiftLeft_eq","line":604,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.shiftLeft_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.shiftLeft_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.shiftLeft\">BitVec.shiftLeft</a> <span class=\"fn\">x</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L603-L603","name":"BitVec.append_eq","line":603,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.append_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.append_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">append_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.append\">BitVec.append</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L595-L597","name":"BitVec.ofBool_append","line":595,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ofBool_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool_append\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msb : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lsbs : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">msb</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">lsbs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cons\">BitVec.cons</a> <span class=\"fn\">msb</span> <span class=\"fn\">lsbs</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L591-L593","name":"BitVec.append_ofBool","line":591,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.append_ofBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.append_ofBool\"><span class=\"name\">BitVec</span>.<span class=\"name\">append_ofBool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msbs : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lsb : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">msbs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">lsb</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.concat\">BitVec.concat</a> <span class=\"fn\">msbs</span> <span class=\"fn\">lsb</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L588-L589","name":"BitVec.cons","line":588,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.cons","doc":"Prepend a single bit to the front of a bitvector, using big endian order (see `append`).\nThat is, the new bit is the most significant bit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.cons\"><span class=\"name\">BitVec</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msb : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lsbs : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L584-L584","name":"BitVec.concat","line":584,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.concat","doc":"Append a single bit to the end of a bitvector, using big endian order (see `append`).\nThat is, the new bit is the least significant bit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.concat\"><span class=\"name\">BitVec</span>.<span class=\"name\">concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msbs : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lsb : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L567-L572","name":"BitVec.replicate","line":567,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.replicate","doc":"`replicate i x` concatenates `i` copies of `x` into a new vector of length `w*i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.replicate\"><span class=\"name\">BitVec</span>.<span class=\"name\">replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span> → <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L563-L563","name":"BitVec.instHAppendBitVecHAddNatInstHAddInstAddNat","line":563,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instHAppendBitVecHAddNatInstHAddInstAddNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instHAppendBitVecHAddNatInstHAddInstAddNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">instHAppendBitVecHAddNatInstHAddInstAddNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAppend\">HAppend</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">v</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L560-L561","name":"BitVec.append","line":560,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.append","doc":"Concatenation of bitvectors. This uses the \"big endian\" convention that the more significant\ninput is on the left, so `0xAB#8 ++ 0xCD#8 = 0xABCD#16`.\n\nSMT-Lib name: `concat`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.append\"><span class=\"name\">BitVec</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msbs : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lsbs : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L552-L552","name":"BitVec.rotateRight","line":552,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.rotateRight","doc":"Rotate right for bit vectors. All the bits of `x` are shifted to lower positions, with the\nbottom `n` bits wrapping around to fill the high bits.\n\n```lean\nrotateRight 0b01001#5 1 = 0b10100\n```\nSMT-Lib name: `rotate_right` except this operator uses a `Nat` shift amount.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.rotateRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">rotateRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L541-L541","name":"BitVec.rotateLeft","line":541,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.rotateLeft","doc":"Rotate left for bit vectors. All the bits of `x` are shifted to higher positions, with the top `n`\nbits wrapping around to fill the low bits.\n\n```lean\nrotateLeft  0b0011#4 3 = 0b1001\n```\nSMT-Lib name: `rotate_left` except this operator uses a `Nat` shift amount.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.rotateLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">rotateLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L530-L530","name":"BitVec.instHShiftRightBitVec","line":530,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instHShiftRightBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instHShiftRightBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instHShiftRightBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L529-L529","name":"BitVec.instHShiftLeftBitVec","line":529,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instHShiftLeftBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instHShiftLeftBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instHShiftLeftBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L527-L527","name":"BitVec.sshiftRight","line":527,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight","doc":"Arithmetic right shift for bit vectors. The high bits are filled with the\nmost-significant bit.\nAs a numeric operation, this is equivalent to `a.toInt >>> s`.\n\nSMT-Lib name: `bvashr` except this operator uses a `Nat` shift value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">sshiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L518-L518","name":"BitVec.instHShiftRightBitVecNat","line":518,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instHShiftRightBitVecNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instHShiftRightBitVecNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">instHShiftRightBitVecNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L511-L516","name":"BitVec.ushiftRight","line":511,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ushiftRight","doc":"(Logical) right shift for bit vectors. The high bits are filled with zeros.\nAs a numeric operation, this is equivalent to `a / 2^s`, rounding down.\n\nSMT-Lib name: `bvlshr` except this operator uses a `Nat` shift value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ushiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L503-L503","name":"BitVec.instHShiftLeftBitVecNat","line":503,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instHShiftLeftBitVecNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instHShiftLeftBitVecNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">instHShiftLeftBitVecNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L502-L502","name":"BitVec.shiftLeft","line":502,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.shiftLeft","doc":"Left shift for bit vectors. The low bits are filled with zeros. As a numeric operation, this is\nequivalent to `a * 2^s`, modulo `2^n`.\n\nSMT-Lib name: `bvshl` except this operator uses a `Nat` shift value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.shiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L494-L494","name":"BitVec.instComplementBitVec","line":494,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instComplementBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instComplementBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instComplementBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L493-L493","name":"BitVec.not","line":493,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.not","doc":"Bitwise NOT for bit vectors.\n\n```lean\n~~~(0b0101#4) == 0b1010\n```\nSMT-Lib name: `bvnot`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.not\"><span class=\"name\">BitVec</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L483-L483","name":"BitVec.instXorBitVec","line":483,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instXorBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instXorBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instXorBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L481-L482","name":"BitVec.xor","line":481,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.xor","doc":"Bitwise XOR for bit vectors.\n\n```lean\n0b1010#4 ^^^ 0b0110#4 = 0b1100#4\n```\n\nSMT-Lib name: `bvxor`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.xor\"><span class=\"name\">BitVec</span>.<span class=\"name\">xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L470-L470","name":"BitVec.instOrOpBitVec","line":470,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instOrOpBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instOrOpBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instOrOpBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L468-L469","name":"BitVec.or","line":468,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.or","doc":"Bitwise OR for bit vectors.\n\n```lean\n0b1010#4 ||| 0b0110#4 = 0b1110#4\n```\n\nSMT-Lib name: `bvor`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.or\"><span class=\"name\">BitVec</span>.<span class=\"name\">or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L457-L457","name":"BitVec.instAndOpBitVec","line":457,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instAndOpBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instAndOpBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instAndOpBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L455-L456","name":"BitVec.and","line":455,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.and","doc":"Bitwise AND for bit vectors.\n\n```lean\n0b1010#4 &&& 0b0110#4 = 0b0010#4\n```\n\nSMT-Lib name: `bvand`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.and\"><span class=\"name\">BitVec</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L440-L440","name":"BitVec.signExtend","line":440,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.signExtend","doc":"Sign extend a vector of length `w`, extending with `i` additional copies of the most significant\nbit in `x`. If `x` is an empty vector, then the sign is treated as zero.\n\nSMT-Lib name: `sign_extend`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">signExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L432-L432","name":"BitVec.truncate","line":432,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.truncate","doc":"Truncate the high bits of bitvector `x` of length `w`, resulting in a vector of length `v`.\nIf `v > w` then it zero-extends the vector instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.truncate\"><span class=\"name\">BitVec</span>.<span class=\"name\">truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L422-L426","name":"BitVec.zeroExtend","line":422,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.zeroExtend","doc":"Zero extend vector `x` of length `w` by adding zeros in the high bits until it has length `v`.\nIf `v < w` then it truncates the high bits instead.\n\nSMT-Lib name: `zero_extend`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.zeroExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">zeroExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L409-L414","name":"BitVec.shiftLeftZeroExtend","line":409,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.shiftLeftZeroExtend","doc":"`shiftLeftZeroExtend x n` returns `zeroExtend (w+n) x <<< n` without\nneeding to compute `x % 2^(2+n)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.shiftLeftZeroExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeftZeroExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msbs : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L400-L403","name":"BitVec.zeroExtend'","line":400,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.zeroExtend'","doc":"A version of `zeroExtend` that requires a proof, but is a noop.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.zeroExtend'\"><span class=\"name\">BitVec</span>.<span class=\"name\">zeroExtend'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L395-L395","name":"BitVec.extractLsb","line":395,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.extractLsb","doc":"Extraction of bits `hi` (inclusive) down to `lo` (inclusive) from a bit vector of size `n` to\nyield a new bitvector of size `hi - lo + 1`.\n\nSMT-Lib name: `extract`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb\"><span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">lo</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L387-L387","name":"BitVec.extractLsb'","line":387,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'","doc":"Extraction of bits `start` to `start + len - 1` from a bit vector of size `n` to yield a\nnew bitvector of size `len`. If `start + len > n`, then the vector will be zero-padded in the\nhigh bits.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\"><span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">len</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L380-L380","name":"BitVec.cast_eq","line":380,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.cast_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.cast_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">cast_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">h</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L376-L378","name":"BitVec.cast_cast","line":376,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.cast_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.cast_cast\"><span class=\"name\">BitVec</span>.<span class=\"name\">cast_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">h₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">h₁</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L372-L374","name":"BitVec.cast_ofNat","line":372,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.cast_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.cast_ofNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">cast_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">h</span> <span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L370-L370","name":"BitVec.cast","line":370,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.cast","doc":"`cast eq i` embeds `i` into an equal `BitVec` type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\"><span class=\"name\">BitVec</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L363-L363","name":"BitVec.sle","line":363,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.sle","doc":"Signed less-than-or-equal-to for bit vectors.\n\nSMT-Lib name: `bvsle`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\"><span class=\"name\">BitVec</span>.<span class=\"name\">sle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L356-L356","name":"BitVec.slt","line":356,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.slt","doc":"Signed less-than for bit vectors.\n\n```lean\nBitVec.slt 6#4 7 = true\nBitVec.slt 7#4 8 = false\n```\nSMT-Lib name: `bvslt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\"><span class=\"name\">BitVec</span>.<span class=\"name\">slt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L344-L345","name":"BitVec.instDecidableLeBitVecInstLEBitVec","line":344,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instDecidableLeBitVecInstLEBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instDecidableLeBitVecInstLEBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instDecidableLeBitVecInstLEBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L343-L343","name":"BitVec.instLEBitVec","line":343,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instLEBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instLEBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instLEBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L341-L341","name":"BitVec.ule","line":341,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ule","doc":"Unsigned less-than-or-equal-to for bit vectors.\n\nSMT-Lib name: `bvule`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ule\"><span class=\"name\">BitVec</span>.<span class=\"name\">ule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L333-L334","name":"BitVec.instDecidableLtBitVecInstLTBitVec","line":333,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instDecidableLtBitVecInstLTBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instDecidableLtBitVecInstLTBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instDecidableLtBitVecInstLTBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L332-L332","name":"BitVec.instLTBitVec","line":332,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instLTBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instLTBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instLTBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L330-L330","name":"BitVec.ult","line":330,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ult","doc":"Unsigned less-than for bit vectors.\n\nSMT-Lib name: `bvult`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\"><span class=\"name\">BitVec</span>.<span class=\"name\">ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L319-L319","name":"BitVec.fill","line":319,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.fill","doc":"Fills a bitvector with `w` copies of the bit `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.fill\"><span class=\"name\">BitVec</span>.<span class=\"name\">fill</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L316-L316","name":"BitVec.ofBool_true","line":316,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ofBool_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool_true\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_true</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L315-L315","name":"BitVec.ofBool_false","line":315,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ofBool_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool_false\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_false</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L313-L313","name":"BitVec.ofBool","line":313,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ofBool","doc":"Turn a `Bool` into a bitvector of length `1` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofBool</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L296-L305","name":"BitVec.smod","line":296,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.smod","doc":"Remainder for signed division rounded to negative infinity.\n\nSMT_Lib name: `bvsmod`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\"><span class=\"name\">BitVec</span>.<span class=\"name\">smod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L284-L289","name":"BitVec.srem","line":284,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.srem","doc":"Remainder for signed division rounding to zero.\n\nSMT_Lib name: `bvsrem`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\"><span class=\"name\">BitVec</span>.<span class=\"name\">srem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L272-L277","name":"BitVec.smtSDiv","line":272,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.smtSDiv","doc":"Signed division for bit vectors using SMTLIB rules for division by zero.\n\nSpecifically, `smtSDiv x 0 = if x >= 0 then -1 else 1`\n\nSMT-Lib name: `bvsdiv`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.smtSDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">smtSDiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L258-L263","name":"BitVec.sdiv","line":258,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.sdiv","doc":"Signed t-division for bit vectors using the Lean convention where division\nby zero returns zero.\n\n```lean\nsdiv 7#4 2 = 3#4\nsdiv (-9#4) 2 = -4#4\nsdiv 5#4 -2 = -2#4\nsdiv (-7#4) (-2) = 3#4\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">sdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L245-L245","name":"BitVec.smtUDiv","line":245,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.smtUDiv","doc":"Unsigned division for bit vectors using the\n[SMT-Lib convention](http://smtlib.cs.uiowa.edu/theories-FixedSizeBitVectors.shtml)\nwhere division by zero returns the `allOnes` bitvector.\n\nSMT-Lib name: `bvudiv`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.smtUDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">smtUDiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L236-L236","name":"BitVec.instModBitVec","line":236,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instModBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instModBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instModBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L234-L235","name":"BitVec.umod","line":234,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.umod","doc":"Unsigned modulo for bit vectors.\n\nSMT-Lib name: `bvurem`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.umod\"><span class=\"name\">BitVec</span>.<span class=\"name\">umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L227-L227","name":"BitVec.instDivBitVec","line":227,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instDivBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instDivBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instDivBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L225-L226","name":"BitVec.udiv","line":225,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.udiv","doc":"Unsigned division for bit vectors using the Lean convention where division by zero returns zero.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.udiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">udiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L220-L220","name":"BitVec.instMulBitVec","line":220,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instMulBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instMulBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instMulBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L219-L219","name":"BitVec.mul","line":219,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.mul","doc":"Multiplication for bit vectors. This can be interpreted as either signed or unsigned negation\nmodulo `2^n`.\n\nSMT-Lib name: `bvmul`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.mul\"><span class=\"name\">BitVec</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L211-L211","name":"BitVec.abs","line":211,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.abs","doc":"Return the absolute value of a signed bitvector.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.abs\"><span class=\"name\">BitVec</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L206-L206","name":"BitVec.instNegBitVec","line":206,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instNegBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instNegBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instNegBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L205-L205","name":"BitVec.neg","line":205,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.neg","doc":"Negation for bit vectors. This can be interpreted as either signed or unsigned negation\nmodulo `2^n`.\n\nSMT-Lib name: `bvneg`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.neg\"><span class=\"name\">BitVec</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L197-L197","name":"BitVec.instSubBitVec","line":197,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instSubBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instSubBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instSubBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L196-L196","name":"BitVec.sub","line":196,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.sub","doc":"Subtraction for bit vectors. This can be interpreted as either signed or unsigned subtraction\nmodulo `2^n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.sub\"><span class=\"name\">BitVec</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L190-L190","name":"BitVec.instAddBitVec","line":190,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instAddBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instAddBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instAddBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L189-L189","name":"BitVec.add","line":189,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.add","doc":"Addition for bit vectors. This can be interpreted as either signed or unsigned addition\nmodulo `2^n`.\n\nSMT-Lib name: `bvadd`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.add\"><span class=\"name\">BitVec</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L177-L177","name":"BitVec.instToStringBitVec","line":177,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instToStringBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instToStringBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instToStringBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L176-L176","name":"BitVec.instReprBitVec","line":176,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instReprBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instReprBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instReprBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L171-L174","name":"BitVec.toHex","line":171,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.toHex","doc":"Convert bitvector into a fixed-width hex number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.toHex\"><span class=\"name\">BitVec</span>.<span class=\"name\">toHex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L162-L164","name":"BitVec.unexpandBitVecOfNatLt","line":162,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.unexpandBitVecOfNatLt","doc":"Unexpander for bit vector literals without truncation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.unexpandBitVecOfNatLt\"><span class=\"name\">BitVec</span>.<span class=\"name\">unexpandBitVecOfNatLt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L157-L158","name":"BitVec.«term__#'__»","line":157,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.«term__#'__»","doc":"Notation for bit vector literals without truncation. `i#'lt` is a shorthand for `BitVec.ofNatLt i lt`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.«term__#'__»\"><span class=\"name\">BitVec</span>.<span class=\"name\">«term__#'__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L153-L155","name":"BitVec.unexpandBitVecOfNat","line":153,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.unexpandBitVecOfNat","doc":"Unexpander for bit vector literals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.unexpandBitVecOfNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">unexpandBitVecOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L148-L149","name":"BitVec.«term__#__»","line":148,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.«term__#__»","doc":"Notation for bit vector literals. `i#n` is a shorthand for `BitVec.ofNat n i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.«term__#__»\"><span class=\"name\">BitVec</span>.<span class=\"name\">«term__#__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L142-L142","name":"BitVec.instIntCastBitVec","line":142,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instIntCastBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instIntCastBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instIntCastBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L133-L140","name":"BitVec.ofInt","line":133,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ofInt","doc":"The `BitVec` with value `(2^n + (i mod 2^n)) mod 2^n`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L126-L130","name":"BitVec.toInt","line":126,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.toInt","doc":"Interpret the bitvector as an integer stored in two's complement form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L119-L119","name":"BitVec.msb","line":119,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.msb","doc":"Return most-significant bit in bitvector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L116-L116","name":"BitVec.getMsb","line":116,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.getMsb","doc":"Return the `i`-th most significant bit or `false` if `i ≥ w`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsb\"><span class=\"name\">BitVec</span>.<span class=\"name\">getMsb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L113-L113","name":"BitVec.getLsb","line":113,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.getLsb","doc":"Return the `i`-th least significant bit or `false` if `i ≥ w`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsb\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L105-L106","name":"BitVec.allOnes","line":105,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.allOnes","doc":"Bit vector of size `n` where all bits are `1`s "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.allOnes\"><span class=\"name\">BitVec</span>.<span class=\"name\">allOnes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L102-L102","name":"BitVec.instInhabitedBitVec","line":102,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instInhabitedBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instInhabitedBitVec\"><span class=\"name\">BitVec</span>.<span class=\"name\">instInhabitedBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L101-L101","name":"BitVec.zero","line":101,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.zero","doc":"Return a bitvector `0` of size `n`. This is the bitvector with all zero bits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L94-L94","name":"BitVec.eq_nil","line":94,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.eq_nil","doc":"Every bitvector of length 0 is equal to `nil`, i.e., there is only one empty bitvector "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.eq_nil\"><span class=\"name\">BitVec</span>.<span class=\"name\">eq_nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/BitVec/Basic.html#BitVec.nil\">BitVec.nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L91-L91","name":"BitVec.nil","line":91,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.nil","doc":"The empty bitvector "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.nil\"><span class=\"name\">BitVec</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L87-L88","name":"BitVec.instSubsingletonBitVecOfNatNatInstOfNatNat","line":87,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instSubsingletonBitVecOfNatNatInstOfNatNat","doc":"All empty bitvectors are equal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instSubsingletonBitVecOfNatNatInstOfNatNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">instSubsingletonBitVecOfNatNatInstOfNatNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">0</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L80-L80","name":"BitVec.natCast_eq_ofNat","line":80,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.natCast_eq_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.natCast_eq_ofNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">natCast_eq_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L77-L77","name":"BitVec.ofNat_eq_ofNat","line":77,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ofNat_eq_ofNat","doc":"Theorem for normalizing the bit vector literal representation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ofNat_eq_ofNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofNat_eq_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span>#<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L73-L73","name":"BitVec.isLt","line":73,"kind":"theorem","docLink":"./Init/Data/BitVec/Basic.html#BitVec.isLt","doc":"Return the bound in terms of toNat. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.isLt\"><span class=\"name\">BitVec</span>.<span class=\"name\">isLt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.toNat\">BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L70-L70","name":"BitVec.toNat","line":70,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.toNat","doc":"Given a bitvector `a`, return the underlying `Nat`. This is O(1) because `BitVec` is a\n(zero-cost) wrapper around a `Nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.toNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L66-L66","name":"BitVec.natCastInst","line":66,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.natCastInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.natCastInst\"><span class=\"name\">BitVec</span>.<span class=\"name\">natCastInst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L65-L65","name":"BitVec.instOfNat","line":65,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#BitVec.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.instOfNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L62-L63","name":"BitVec.ofNat","line":62,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ofNat","doc":"The `BitVec` with value `i mod 2^n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ofNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L57-L58","name":"BitVec.ofNatLt","line":57,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ofNatLt","doc":"The `BitVec` with value `i`, given a proof that `i < 2^n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ofNatLt\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofNatLt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L49-L49","name":"instDecidableEqBitVec","line":49,"kind":"instance","docLink":"./Init/Data/BitVec/Basic.html#instDecidableEqBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#instDecidableEqBitVec\"><span class=\"name\">instDecidableEqBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L41-L47","name":"BitVec.decEq","line":41,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.decEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.decEq\"><span class=\"name\">BitVec</span>.<span class=\"name\">decEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L36-L36","name":"Std.BitVec","line":36,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#Std.BitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#Std.BitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L34-L34","name":"BitVec.toFin","line":34,"kind":"def","docLink":"./Init/Data/BitVec/Basic.html#BitVec.toFin","doc":"Interpret a bitvector as a number less than `2^w`.\nO(1), because we use `Fin` as the internal representation of a bitvector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.toFin\"><span class=\"name\">BitVec</span>.<span class=\"name\">toFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L31-L31","name":"BitVec.ofFin","line":31,"kind":"ctor","docLink":"./Init/Data/BitVec/Basic.html#BitVec.ofFin","doc":"Construct a `BitVec w` from a number less than `2^w`.\nO(1), because we use `Fin` as the internal representation of a bitvector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec.ofFin\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toFin : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/BitVec/Basic.lean#L28-L34","name":"BitVec","line":28,"kind":"structure","docLink":"./Init/Data/BitVec/Basic.html#BitVec","doc":"A bitvector of the specified width.\n\nThis is represented as the underlying `Nat` number in both the runtime\nand the kernel, inheriting all the special support for `Nat`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Basic.html#BitVec\"><span class=\"name\">BitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}