{"name":"Init.Data.BitVec.Bitblast","instances":[],"imports":["Init.Data.BitVec.Folds","Init.Data.Nat.Mod"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L234-L236","name":"BitVec.sle_eq_carry","line":234,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sle_eq_carry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sle_eq_carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">sle_eq_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.sle</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.msb</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">y</span>.msb</span></span>)</span>.xor</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">w</span> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L231-L232","name":"BitVec.sle_eq_not_slt","line":231,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sle_eq_not_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sle_eq_not_slt\"><span class=\"name\">BitVec</span>.<span class=\"name\">sle_eq_not_slt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.sle</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.slt</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L226-L229","name":"BitVec.slt_eq_not_carry","line":226,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.slt_eq_not_carry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.slt_eq_not_carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">slt_eq_not_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.slt</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.msb</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">y</span>.msb</span></span>)</span>.xor</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span></span>)</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L219-L224","name":"BitVec.slt_eq_ult","line":219,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.slt_eq_ult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.slt_eq_ult\"><span class=\"name\">BitVec</span>.<span class=\"name\">slt_eq_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.slt</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.msb</span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\"><span class=\"fn\">y</span>.msb</span></span>)</span>.xor</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.ult</span> <span class=\"fn\">y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L214-L217","name":"BitVec.slt_eq_not_ult_of_msb_neq","line":214,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.slt_eq_not_ult_of_msb_neq","doc":"If two bitvectors have different `msb`s, then signed and unsigned comparisons are opposites "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.slt_eq_not_ult_of_msb_neq\"><span class=\"name\">BitVec</span>.<span class=\"name\">slt_eq_not_ult_of_msb_neq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.msb</span> <a href=\"./Init/Core.html#Ne\">â‰ </a> <span class=\"fn\"><span class=\"fn\">y</span>.msb</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.slt</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.ult</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L208-L211","name":"BitVec.ult_eq_msb_of_msb_neq","line":208,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ult_eq_msb_of_msb_neq","doc":"If two bitvectors have different `msb`s, then unsigned comparison is determined by this bit "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ult_eq_msb_of_msb_neq\"><span class=\"name\">BitVec</span>.<span class=\"name\">ult_eq_msb_of_msb_neq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.msb</span> <a href=\"./Init/Core.html#Ne\">â‰ </a> <span class=\"fn\"><span class=\"fn\">y</span>.msb</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.ult</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.msb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L202-L205","name":"BitVec.slt_eq_ult_of_msb_eq","line":202,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.slt_eq_ult_of_msb_eq","doc":"If two bitvectors have the same `msb`, then signed and unsigned comparisons coincide "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.slt_eq_ult_of_msb_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">slt_eq_ult_of_msb_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.msb</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.msb</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.slt</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.ult</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L198-L199","name":"BitVec.ule_eq_carry","line":198,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ule_eq_carry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ule_eq_carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">ule_eq_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.ule</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">w</span> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L195-L196","name":"BitVec.ule_eq_not_ult","line":195,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ule_eq_not_ult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ule_eq_not_ult\"><span class=\"name\">BitVec</span>.<span class=\"name\">ule_eq_not_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.ule</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.ult</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L189-L193","name":"BitVec.ult_eq_not_carry","line":189,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ult_eq_not_carry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ult_eq_not_carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">ult_eq_not_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.ult</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span></span>)</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L180-L185","name":"BitVec.bit_neg_eq_neg","line":180,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.bit_neg_eq_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.bit_neg_eq_neg\"><span class=\"name\">BitVec</span>.<span class=\"name\">bit_neg_eq_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Folds.html#BitVec.iunfoldr\">BitVec.iunfoldr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>) (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">(<span class=\"fn\">c</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.getLsb</span> <span class=\"fn\">â†‘<span class=\"fn\">i</span></span></span></span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span>.snd</span>.adc</span> <span class=\"fn\">(<span class=\"fn\">1#<span class=\"fn\">w</span></span>)</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span>.snd</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L176-L178","name":"BitVec.bit_not_eq_not","line":176,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_eq_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_eq_not\"><span class=\"name\">BitVec</span>.<span class=\"name\">bit_not_eq_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Folds.html#BitVec.iunfoldr\">BitVec.iunfoldr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>) (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">(<span class=\"fn\">c</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.getLsb</span> <span class=\"fn\">â†‘<span class=\"fn\">i</span></span></span></span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span>.snd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L168-L174","name":"BitVec.bit_not_add_self","line":168,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_add_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_add_self\"><span class=\"name\">BitVec</span>.<span class=\"name\">bit_not_add_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Folds.html#BitVec.iunfoldr\">BitVec.iunfoldr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>) (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">(<span class=\"fn\">c</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.getLsb</span> <span class=\"fn\">â†‘<span class=\"fn\">i</span></span></span></span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span>.snd</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L164-L166","name":"BitVec.bit_not_testBit","line":164,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_testBit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_testBit\"><span class=\"name\">BitVec</span>.<span class=\"name\">bit_not_testBit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Folds.html#BitVec.iunfoldr\">BitVec.iunfoldr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>) (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">(<span class=\"fn\">c</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.getLsb</span> <span class=\"fn\">â†‘<span class=\"fn\">i</span></span></span></span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span>.snd</span>.getLsb</span> <span class=\"fn\">â†‘<span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.getLsb</span> <span class=\"fn\">â†‘<span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L159-L160","name":"BitVec.allOnes_sub_eq_not","line":159,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.allOnes_sub_eq_not","doc":"Subtracting `x` from the all ones bitvector is equivalent to taking its complement "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.allOnes_sub_eq_not\"><span class=\"name\">BitVec</span>.<span class=\"name\">allOnes_sub_eq_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.allOnes\">BitVec.allOnes</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L153-L156","name":"BitVec.add_not_self","line":153,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.add_not_self","doc":"Adding a bitvector to its own complement yields the all ones bitpattern "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.add_not_self\"><span class=\"name\">BitVec</span>.<span class=\"name\">add_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.allOnes\">BitVec.allOnes</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L147-L148","name":"BitVec.add_eq_adc","line":147,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.add_eq_adc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.add_eq_adc\"><span class=\"name\">BitVec</span>.<span class=\"name\">add_eq_adc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.adc</span> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span>.snd</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L134-L145","name":"BitVec.adc_spec","line":134,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.adc_spec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.adc_spec\"><span class=\"name\">BitVec</span>.<span class=\"name\">adc_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.adc</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.zeroExtend\">BitVec.zeroExtend</a> <span class=\"fn\">w</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">c</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L129-L132","name":"BitVec.getLsb_add","line":129,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsb_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsb_add\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i_lt : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.getLsb</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.getLsb</span> <span class=\"fn\">i</span></span>)</span>.xor</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.getLsb</span> <span class=\"fn\">i</span></span>)</span>.xor</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L108-L127","name":"BitVec.getLsb_add_add_bool","line":108,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsb_add_add_bool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsb_add_add_bool\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_add_add_bool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i_lt : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.zeroExtend\">BitVec.zeroExtend</a> <span class=\"fn\">w</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">c</span></span>)</span></span></span>)</span>.getLsb</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.getLsb</span> <span class=\"fn\">i</span></span>)</span>.xor</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.getLsb</span> <span class=\"fn\">i</span></span>)</span>.xor</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L105-L106","name":"BitVec.adc","line":105,"kind":"def","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.adc","doc":"Bitwise addition implemented via a ripple carry adder. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.adc\"><span class=\"name\">BitVec</span>.<span class=\"name\">adc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L102-L102","name":"BitVec.adcb","line":102,"kind":"def","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.adcb","doc":"Carry function for bitwise addition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.adcb\"><span class=\"name\">BitVec</span>.<span class=\"name\">adcb</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L92-L99","name":"BitVec.carry_succ","line":92,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.carry_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry_succ\"><span class=\"name\">BitVec</span>.<span class=\"name\">carry_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.getLsb</span> <span class=\"fn\">i</span></span>)</span>.atLeastTwo</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.getLsb</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L89-L90","name":"BitVec.carry_zero","line":89,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.carry_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">carry_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">âˆ€ {<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>} {<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L86-L87","name":"BitVec.carry","line":86,"kind":"def","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.carry","doc":"carry i x y c returns true if the `i` carry bit is true when computing `x + y + c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L43-L43","name":"Bool.atLeastTwo_true_right","line":43,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_right\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_true_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.atLeastTwo</span> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#or\">||</a> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L42-L42","name":"Bool.atLeastTwo_true_mid","line":42,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_mid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_mid\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_true_mid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.atLeastTwo</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#or\">||</a> <span class=\"fn\">c</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L41-L41","name":"Bool.atLeastTwo_true_left","line":41,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_left\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_true_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.true\">true</a>.atLeastTwo</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#or\">||</a> <span class=\"fn\">c</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L40-L40","name":"Bool.atLeastTwo_false_right","line":40,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_right\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_false_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.atLeastTwo</span> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L39-L39","name":"Bool.atLeastTwo_false_mid","line":39,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_mid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_mid\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_false_mid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.atLeastTwo</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\">c</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L38-L38","name":"Bool.atLeastTwo_false_left","line":38,"kind":"theorem","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_left\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_false_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.false\">false</a>.atLeastTwo</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\">c</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Data/BitVec/Bitblast.lean#L36-L36","name":"Bool.atLeastTwo","line":36,"kind":"def","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo","doc":"At least two out of three booleans are true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"}]}