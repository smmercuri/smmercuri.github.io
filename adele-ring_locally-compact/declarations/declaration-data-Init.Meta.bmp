{"name":"Init.Meta","instances":[{"typeNames":["Lean.Name"],"name":"Lean.Name.instToString","className":"ToString"},{"typeNames":["Lean.Name"],"name":"Lean.Name.instRepr","className":"Repr"},{"typeNames":["Lean.Name"],"name":"Lean.Name.instLawfulBEq","className":"LawfulBEq"},{"typeNames":["Eq"],"name":"Lean.Name.instDecidableEq","className":"Decidable"},{"typeNames":[],"name":"Lean.monadNameGeneratorLift","className":"Lean.MonadNameGenerator"},{"typeNames":["Lean.Syntax.Preresolved"],"name":"Lean.Syntax.instReprPreresolved","className":"Repr"},{"typeNames":["Lean.Syntax"],"name":"Lean.Syntax.instRepr","className":"Repr"},{"typeNames":["Lean.TSyntax"],"name":"Lean.Syntax.instReprTSyntax","className":"Repr"},{"typeNames":["Lean.TSyntax","Lean.TSyntax"],"name":"Lean.TSyntax.instCoeConsSyntaxNodeKindNil","className":"Coe"},{"typeNames":["Lean.TSyntax","Lean.TSyntax"],"name":"Lean.TSyntax.instCoeConsSyntaxNodeKind","className":"Coe"},{"typeNames":["Lean.Syntax.Ident","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeIdentTerm","className":"Coe"},{"typeNames":["Lean.Syntax.Term","Lean.TSyntax.mk","Lean.Syntax.Ident"],"name":"Lean.TSyntax.instCoeDepTermMkIdentIdent","className":"CoeDep"},{"typeNames":["Lean.Syntax.StrLit","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeStrLitTerm","className":"Coe"},{"typeNames":["Lean.Syntax.NameLit","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeNameLitTerm","className":"Coe"},{"typeNames":["Lean.Syntax.ScientificLit","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeScientificLitTerm","className":"Coe"},{"typeNames":["Lean.Syntax.NumLit","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeNumLitTerm","className":"Coe"},{"typeNames":["Lean.Syntax.CharLit","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeCharLitTerm","className":"Coe"},{"typeNames":["Lean.Syntax.Ident","Lean.Syntax.Level"],"name":"Lean.TSyntax.instCoeIdentLevel","className":"Coe"},{"typeNames":["Lean.Syntax.NumLit","Lean.Syntax.Prio"],"name":"Lean.TSyntax.instCoeNumLitPrio","className":"Coe"},{"typeNames":["Lean.Syntax.NumLit","Lean.Syntax.Prec"],"name":"Lean.TSyntax.instCoeNumLitPrec","className":"Coe"},{"typeNames":["Lean.Syntax.Preresolved"],"name":"Lean.Syntax.instBEqPreresolved","className":"BEq"},{"typeNames":["Lean.Syntax"],"name":"Lean.Syntax.instBEq","className":"BEq"},{"typeNames":["Lean.TSyntax"],"name":"Lean.Syntax.instBEqTSyntax","className":"BEq"},{"typeNames":["Array","Lean.Syntax.SepArray"],"name":"Lean.Syntax.instCoeArraySepArray","className":"Coe"},{"typeNames":["Lean.TSyntaxArray","Lean.Syntax.TSepArray"],"name":"Lean.Syntax.instCoeTSyntaxArrayTSepArray","className":"Coe"},{"typeNames":[],"name":"Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil","className":"Lean.Quote"},{"typeNames":["Lean.Syntax.Term","Lean.Name.mkStr1"],"name":"Lean.instQuoteTermMkStr1","className":"Lean.Quote"},{"typeNames":["Bool","Lean.Name.mkStr1"],"name":"Lean.instQuoteBoolMkStr1","className":"Lean.Quote"},{"typeNames":["Char","Lean.charLitKind"],"name":"Lean.instQuoteCharCharLitKind","className":"Lean.Quote"},{"typeNames":["String","Lean.strLitKind"],"name":"Lean.instQuoteStringStrLitKind","className":"Lean.Quote"},{"typeNames":["Nat","Lean.numLitKind"],"name":"Lean.instQuoteNatNumLitKind","className":"Lean.Quote"},{"typeNames":["Substring","Lean.Name.mkStr1"],"name":"Lean.instQuoteSubstringMkStr1","className":"Lean.Quote"},{"typeNames":["Lean.Name","Lean.Name.mkStr1"],"name":"Lean.instQuoteNameMkStr1","className":"Lean.Quote"},{"typeNames":["Prod","Lean.Name.mkStr1"],"name":"Lean.instQuoteProdMkStr1","className":"Lean.Quote"},{"typeNames":["List","Lean.Name.mkStr1"],"name":"Lean.instQuoteListMkStr1","className":"Lean.Quote"},{"typeNames":["Array","Lean.Name.mkStr1"],"name":"Lean.instQuoteArrayMkStr1","className":"Lean.Quote"},{"typeNames":["Option","Lean.Name.mkStr1"],"name":"Lean.Option.hasQuote","className":"Lean.Quote"},{"typeNames":["Lean.Syntax.SepArray"],"name":"Lean.Syntax.instEmptyCollectionSepArray","className":"EmptyCollection"},{"typeNames":["Lean.Syntax.TSepArray"],"name":"Lean.Syntax.instEmptyCollectionTSepArray","className":"EmptyCollection"},{"typeNames":["Lean.Syntax.SepArray","Array"],"name":"Lean.Syntax.instCoeOutSepArrayArray","className":"CoeOut"},{"typeNames":["Lean.Syntax.TSepArray","Lean.TSyntaxArray"],"name":"Lean.Syntax.instCoeOutTSepArrayTSyntaxArray","className":"CoeOut"},{"typeNames":["Lean.TSyntaxArray","Lean.TSyntaxArray"],"name":"Lean.Syntax.instCoeTSyntaxArrayOfTSyntax","className":"Coe"},{"typeNames":["Lean.TSyntaxArray","Array"],"name":"Lean.Syntax.instCoeOutTSyntaxArrayArray","className":"CoeOut"},{"typeNames":["Lean.Syntax.Ident","Lean.TSyntax"],"name":"Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil","className":"Coe"},{"typeNames":["Lean.Syntax.Term","Lean.TSyntax"],"name":"Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil","className":"Coe"},{"typeNames":["Lean.Meta.DSimp.Config"],"name":"Lean.Meta.instReprConfig","className":"Repr"},{"typeNames":["Lean.Meta.Simp.Config"],"name":"Lean.Meta.instReprConfig_1","className":"Repr"},{"typeNames":["Lean.Meta.EtaStructMode"],"name":"Lean.Meta.instReprEtaStructMode","className":"Repr"},{"typeNames":["Lean.Meta.TransparencyMode"],"name":"Lean.Meta.instReprTransparencyMode","className":"Repr"}],"imports":["Init.MetaTypes","Init.Data.Array.Basic","Init.Data.Option.BasicAux"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1432-L1435","name":"Lean.Parser.Tactic.dsimpAutoUnfold","line":1432,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.dsimpAutoUnfold","doc":"`dsimp!` is shorthand for `dsimp` with `autoUnfold := true`.\nThis will rewrite with all equation lemmas, which can be used to\npartially evaluate many definitions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.dsimpAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1429-L1430","name":"Lean.Parser.Tactic.simpAllArithAutoUnfold","line":1429,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllArithAutoUnfold","doc":"`simp_all_arith!` combines the effects of `simp_all`, `simp_arith` and `simp!`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllArithAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllArithAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1426-L1427","name":"Lean.Parser.Tactic.simpAllArith","line":1426,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllArith","doc":"`simp_all_arith` combines the effects of `simp_all` and `simp_arith`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllArith</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1421-L1424","name":"Lean.Parser.Tactic.simpAllAutoUnfold","line":1421,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllAutoUnfold","doc":"`simp_all!` is shorthand for `simp_all` with `autoUnfold := true`.\nThis will rewrite with all equation lemmas, which can be used to\npartially evaluate many definitions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1416-L1419","name":"Lean.Parser.Tactic.simpArithAutoUnfold","line":1416,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpArithAutoUnfold","doc":"`simp_arith!` is shorthand for `simp_arith` with `autoUnfold := true`.\nThis will rewrite with all equation lemmas, which can be used to\npartially evaluate many definitions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpArithAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpArithAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1412-L1414","name":"Lean.Parser.Tactic.simpArith","line":1412,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpArith","doc":"`simp_arith` is shorthand for `simp` with `arith := true` and `decide := true`.\nThis enables the use of normalization by linear arithmetic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpArith</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1407-L1410","name":"Lean.Parser.Tactic.simpAutoUnfold","line":1407,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAutoUnfold","doc":"`simp!` is shorthand for `simp` with `autoUnfold := true`.\nThis will rewrite with all equation lemmas, which can be used to\npartially evaluate many definitions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1387-L1405","name":"Lean.Parser.Tactic.declareSimpLikeTactic","line":1387,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.declareSimpLikeTactic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.declareSimpLikeTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">declareSimpLikeTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1385-L1385","name":"Lean.Parser.Tactic.dsimpKind","line":1385,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.dsimpKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.dsimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1384-L1384","name":"Lean.Parser.Tactic.simpAllKind","line":1384,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1381-L1382","name":"Lean.Parser.Tactic.tacticErw__","line":1381,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.tacticErw__","doc":"`erw [rules]` is a shorthand for `rw (config := { transparency := .default }) [rules]`.\nThis does rewriting up to unfolding of regular definitions (by comparison to regular `rw`\nwhich only unfolds `@[reducible]` definitions). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.tacticErw__\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticErw__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1368-L1368","name":"Lean.Meta.CheckTactic.CheckGoalType.intro","line":1368,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.CheckTactic.CheckGoalType.intro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.CheckTactic.CheckGoalType.intro\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckTactic</span>.<span class=\"name\">CheckGoalType</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Meta.CheckTactic.CheckGoalType\">Lean.Meta.CheckTactic.CheckGoalType</a> <span class=\"fn\">val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1367-L1368","name":"Lean.Meta.CheckTactic.CheckGoalType","line":1367,"kind":"inductive","docLink":"./Init/Meta.html#Lean.Meta.CheckTactic.CheckGoalType","doc":"Type used to lift an arbitrary value into a type parameter so it can\nappear in a proof goal.\n\nIt is used by the #check_tactic command.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.CheckTactic.CheckGoalType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckTactic</span>.<span class=\"name\">CheckGoalType</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1355-L1355","name":"Lean.Meta.Omega.OmegaConfig.splitMinMax","line":1355,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitMinMax","doc":"Whenever `min a b` or `max a b` is found, rewrite in terms of the definition\n`if a ≤ b ...`, for later case splitting.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitMinMax\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitMinMax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1350-L1350","name":"Lean.Meta.Omega.OmegaConfig.splitNatAbs","line":1350,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitNatAbs","doc":"Whenever `Int.natAbs a` is found, register the disjunction\n`0 ≤ a ∧ Int.natAbs a = a ∨ a < 0 ∧ Int.natAbs a = - a` for later splitting.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitNatAbs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitNatAbs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1345-L1345","name":"Lean.Meta.Omega.OmegaConfig.splitNatSub","line":1345,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitNatSub","doc":"Whenever `((a - b : Nat) : Int)` is found, register the disjunction\n`b ≤ a ∧ ((a - b : Nat) : Int) = a - b ∨ a < b ∧ ((a - b : Nat) : Int) = 0`\nfor later splitting.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitNatSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitNatSub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1339-L1339","name":"Lean.Meta.Omega.OmegaConfig.splitDisjunctions","line":1339,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitDisjunctions","doc":"Split disjunctions in the context.\n\nNote that with `splitDisjunctions := false` omega will not be able to solve `x = y` goals\nas these are usually handled by introducing `¬ x = y` as a hypothesis, then replacing this with\n`x < y ∨ x > y`.\n\nOn the other hand, `omega` does not currently detect disjunctions which, when split,\nintroduce no new useful information, so the presence of irrelevant disjunctions in the context\ncan significantly increase run time.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitDisjunctions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitDisjunctions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1327-L1327","name":"Lean.Meta.Omega.OmegaConfig.mk","line":1327,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(splitDisjunctions : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(splitNatSub : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(splitNatAbs : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(splitMinMax : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1327-L1355","name":"Lean.Meta.Omega.OmegaConfig","line":1327,"kind":"structure","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig","doc":"Configures the behaviour of the `omega` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1320-L1320","name":"Lean.Meta.Rewrite.Config.newGoals","line":1320,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config.newGoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config.newGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">newGoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.Rewrite.NewGoals\">Lean.Meta.Rewrite.NewGoals</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1319-L1319","name":"Lean.Meta.Rewrite.Config.occs","line":1319,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config.occs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config.occs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">occs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1318-L1318","name":"Lean.Meta.Rewrite.Config.offsetCnstrs","line":1318,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config.offsetCnstrs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config.offsetCnstrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">offsetCnstrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1317-L1317","name":"Lean.Meta.Rewrite.Config.transparency","line":1317,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config.transparency","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config.transparency\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">transparency</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1316-L1316","name":"Lean.Meta.Rewrite.Config.mk","line":1316,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(transparency : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(offsetCnstrs : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(occs : <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newGoals : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.NewGoals\">Lean.Meta.Rewrite.NewGoals</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1316-L1320","name":"Lean.Meta.Rewrite.Config","line":1316,"kind":"structure","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1314-L1314","name":"Lean.Meta.Rewrite.NewGoals","line":1314,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.NewGoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.NewGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">NewGoals</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1310-L1310","name":"Lean.Meta.ApplyConfig.approx","line":1310,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig.approx","doc":"If `approx := true`, then we turn on `isDefEq` approximations. That is, we use\nthe `approxDefEq` combinator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.approx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">approx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1305-L1305","name":"Lean.Meta.ApplyConfig.allowSynthFailures","line":1305,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig.allowSynthFailures","doc":"If `allowSynthFailures` is `true`, then `apply` will return instance implicit arguments\nfor which typeclass search failed as new goals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.allowSynthFailures\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">allowSynthFailures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1300-L1300","name":"Lean.Meta.ApplyConfig.synthAssignedInstances","line":1300,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig.synthAssignedInstances","doc":"If `synthAssignedInstances` is `true`, then `apply` will synthesize instance implicit arguments\neven if they have assigned by `isDefEq`, and then check whether the synthesized value matches the\none inferred. The `congr` tactic sets this flag to false.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.synthAssignedInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">synthAssignedInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1294-L1294","name":"Lean.Meta.ApplyConfig.newGoals","line":1294,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig.newGoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.newGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">newGoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\">Lean.Meta.ApplyNewGoals</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1293-L1293","name":"Lean.Meta.ApplyConfig.mk","line":1293,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(newGoals : <a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\">Lean.Meta.ApplyNewGoals</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(synthAssignedInstances : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowSynthFailures : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(approx : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1293-L1310","name":"Lean.Meta.ApplyConfig","line":1293,"kind":"structure","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig","doc":"Configures the behaviour of the `apply` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1289-L1289","name":"Lean.Meta.ApplyNewGoals.all","line":1289,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.ApplyNewGoals.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\">Lean.Meta.ApplyNewGoals</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1289-L1289","name":"Lean.Meta.ApplyNewGoals.nonDependentOnly","line":1289,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.ApplyNewGoals.nonDependentOnly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals.nonDependentOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span>.<span class=\"name\">nonDependentOnly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\">Lean.Meta.ApplyNewGoals</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1289-L1289","name":"Lean.Meta.ApplyNewGoals.nonDependentFirst","line":1289,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.ApplyNewGoals.nonDependentFirst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals.nonDependentFirst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span>.<span class=\"name\">nonDependentFirst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\">Lean.Meta.ApplyNewGoals</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1288-L1289","name":"Lean.Meta.ApplyNewGoals","line":1288,"kind":"inductive","docLink":"./Init/Meta.html#Lean.Meta.ApplyNewGoals","doc":"Controls which new mvars are turned in to goals by the `apply` tactic.\n- `nonDependentFirst`  mvars that don't depend on other goals appear first in the goal list.\n- `nonDependentOnly` only mvars that don't depend on other goals are added to goal list.\n- `all` all unassigned mvars are added to the goal list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1277-L1279","name":"Lean.Meta.Occurrences.isAll","line":1277,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Occurrences.isAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Occurrences.isAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">isAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1272-L1275","name":"Lean.Meta.Occurrences.contains","line":1272,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Occurrences.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Occurrences.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1270-L1270","name":"Lean.Meta.instReprTransparencyMode","line":1270,"kind":"instance","docLink":"./Init/Meta.html#Lean.Meta.instReprTransparencyMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.instReprTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1270-L1270","name":"Lean.Meta.instReprEtaStructMode","line":1270,"kind":"instance","docLink":"./Init/Meta.html#Lean.Meta.instReprEtaStructMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.instReprEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1270-L1270","name":"Lean.Meta.instReprConfig_1","line":1270,"kind":"instance","docLink":"./Init/Meta.html#Lean.Meta.instReprConfig_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.instReprConfig_1\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprConfig_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1270-L1270","name":"Lean.Meta.instReprConfig","line":1270,"kind":"instance","docLink":"./Init/Meta.html#Lean.Meta.instReprConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.instReprConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1261-L1264","name":"Lean.TSyntax.getDocString","line":1261,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getDocString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getDocString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1257-L1259","name":"Lean.TSyntax.expandInterpolatedStr","line":1257,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.expandInterpolatedStr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.expandInterpolatedStr\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">expandInterpolatedStr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(interpStr : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <a href=\"./Init/Prelude.html#Lean.interpolatedStrKind\">Lean.interpolatedStrKind</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toTypeFn : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1242-L1254","name":"Lean.TSyntax.expandInterpolatedStrChunks","line":1242,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.expandInterpolatedStrChunks","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.expandInterpolatedStrChunks\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">expandInterpolatedStrChunks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(chunks : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkAppend : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkElem : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1235-L1236","name":"Lean.Syntax.getSepArgs","line":1235,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.getSepArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getSepArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getSepArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1230-L1233","name":"Lean.Syntax.isInterpolatedStrLit?","line":1230,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isInterpolatedStrLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isInterpolatedStrLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isInterpolatedStrLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1193-L1194","name":"Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil","line":1193,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.funBinder</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1190-L1191","name":"Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil","line":1190,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.declId</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1187-L1188","name":"Lean.Syntax.instCoeOutTSyntaxArrayArray","line":1187,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeOutTSyntaxArrayArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeOutTSyntaxArrayArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeOutTSyntaxArrayArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1184-L1185","name":"Lean.Syntax.instCoeTSyntaxArrayOfTSyntax","line":1184,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeTSyntaxArrayOfTSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeTSyntaxArrayOfTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeTSyntaxArrayOfTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k' : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k'</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1181-L1182","name":"Lean.Syntax.instCoeOutTSepArrayTSyntaxArray","line":1181,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeOutTSepArrayTSyntaxArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeOutTSepArrayTSyntaxArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeOutTSepArrayTSyntaxArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1178-L1179","name":"Lean.Syntax.instCoeOutSepArrayArray","line":1178,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeOutSepArrayArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeOutSepArrayArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeOutSepArrayArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1175-L1176","name":"Lean.Syntax.instEmptyCollectionTSepArray","line":1175,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instEmptyCollectionTSepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instEmptyCollectionTSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instEmptyCollectionTSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">sep</span> <span class=\"fn\">k</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1172-L1173","name":"Lean.Syntax.instEmptyCollectionSepArray","line":1172,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instEmptyCollectionSepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instEmptyCollectionSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instEmptyCollectionSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1166-L1170","name":"Lean.Syntax.TSepArray.push","line":1166,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.TSepArray.push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.TSepArray.push\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TSepArray</span>.<span class=\"name\">push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(sa : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1163-L1164","name":"Lean.Syntax.TSepArray.getElems","line":1163,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.TSepArray.getElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.TSepArray.getElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TSepArray</span>.<span class=\"name\">getElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(sa : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1160-L1161","name":"Lean.Syntax.SepArray.getElems","line":1160,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.SepArray.getElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.SepArray.getElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">SepArray</span>.<span class=\"name\">getElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(sa : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1153-L1154","name":"Array.mapSepElems","line":1153,"kind":"def","docLink":"./Init/Meta.html#Array.mapSepElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Array.mapSepElems\"><span class=\"name\">Array</span>.<span class=\"name\">mapSepElems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1150-L1151","name":"Array.mapSepElemsM","line":1150,"kind":"def","docLink":"./Init/Meta.html#Array.mapSepElemsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Array.mapSepElemsM\"><span class=\"name\">Array</span>.<span class=\"name\">mapSepElemsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1136-L1137","name":"Array.filterSepElems","line":1136,"kind":"def","docLink":"./Init/Meta.html#Array.filterSepElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Array.filterSepElems\"><span class=\"name\">Array</span>.<span class=\"name\">filterSepElems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1133-L1134","name":"Array.filterSepElemsM","line":1133,"kind":"def","docLink":"./Init/Meta.html#Array.filterSepElemsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Array.filterSepElemsM\"><span class=\"name\">Array</span>.<span class=\"name\">filterSepElemsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1111-L1111","name":"Array.getSepElems","line":1111,"kind":"def","docLink":"./Init/Meta.html#Array.getSepElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Array.getSepElems\"><span class=\"name\">Array</span>.<span class=\"name\">getSepElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1103-L1105","name":"Lean.evalOptPrio","line":1103,"kind":"def","docLink":"./Init/Meta.html#Lean.evalOptPrio","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.evalOptPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">evalOptPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`prio</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1101-L1101","name":"Lean.termEval_prio_","line":1101,"kind":"def","docLink":"./Init/Meta.html#Lean.termEval_prio_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.termEval_prio_\"><span class=\"name\">Lean</span>.<span class=\"name\">termEval_prio_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1088-L1093","name":"Lean.evalPrio","line":1088,"kind":"def","docLink":"./Init/Meta.html#Lean.evalPrio","doc":"Evaluator for `prio` DSL "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.evalPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">evalPrio</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1085-L1085","name":"Lean.termEval_prec_","line":1085,"kind":"def","docLink":"./Init/Meta.html#Lean.termEval_prec_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.termEval_prec_\"><span class=\"name\">Lean</span>.<span class=\"name\">termEval_prec_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1072-L1077","name":"Lean.evalPrec","line":1072,"kind":"def","docLink":"./Init/Meta.html#Lean.evalPrec","doc":"Evaluator for `prec` DSL "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.evalPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">evalPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1065-L1068","name":"Lean.Option.hasQuote","line":1065,"kind":"instance","docLink":"./Init/Meta.html#Lean.Option.hasQuote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Option.hasQuote\"><span class=\"name\">Lean</span>.<span class=\"name\">Option</span>.<span class=\"name\">hasQuote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1062-L1063","name":"Lean.instQuoteArrayMkStr1","line":1062,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteArrayMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteArrayMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteArrayMkStr1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1045-L1046","name":"Lean.instQuoteListMkStr1","line":1045,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteListMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteListMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteListMkStr1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1037-L1039","name":"Lean.instQuoteProdMkStr1","line":1037,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteProdMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteProdMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteProdMkStr1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1032-L1035","name":"Lean.instQuoteNameMkStr1","line":1032,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteNameMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteNameMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteNameMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1027-L1030","name":"Lean.quoteNameMk","line":1027,"kind":"def","docLink":"./Init/Meta.html#Lean.quoteNameMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.quoteNameMk\"><span class=\"name\">Lean</span>.<span class=\"name\">quoteNameMk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1017-L1017","name":"Lean.instQuoteSubstringMkStr1","line":1017,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteSubstringMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteSubstringMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteSubstringMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1016-L1016","name":"Lean.instQuoteNatNumLitKind","line":1016,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteNatNumLitKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteNatNumLitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteNatNumLitKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Lean.numLitKind\">Lean.numLitKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1015-L1015","name":"Lean.instQuoteStringStrLitKind","line":1015,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteStringStrLitKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteStringStrLitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteStringStrLitKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Lean.strLitKind\">Lean.strLitKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1014-L1014","name":"Lean.instQuoteCharCharLitKind","line":1014,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteCharCharLitKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteCharCharLitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteCharCharLitKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Lean.charLitKind\">Lean.charLitKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1013-L1013","name":"Lean.instQuoteBoolMkStr1","line":1013,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteBoolMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteBoolMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteBoolMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1012-L1012","name":"Lean.instQuoteTermMkStr1","line":1012,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteTermMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteTermMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteTermMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1010-L1010","name":"Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil","line":1010,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k' : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k'</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1005-L1005","name":"Lean.Quote.quote","line":1005,"kind":"def","docLink":"./Init/Meta.html#Lean.Quote.quote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Quote.quote\"><span class=\"name\">Lean</span>.<span class=\"name\">Quote</span>.<span class=\"name\">quote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <span class=\"fn\">`term</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1004-L1004","name":"Lean.Quote.mk","line":1004,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Quote.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Quote.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Quote</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <span class=\"fn\">`term</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(quote : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L1004-L1005","name":"Lean.Quote","line":1004,"kind":"class","docLink":"./Init/Meta.html#Lean.Quote","doc":"Reflect a runtime datum back to surface syntax (best-effort). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Quote\"><span class=\"name\">Lean</span>.<span class=\"name\">Quote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <span class=\"fn\">`term</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L998-L1001","name":"Lean.HygieneInfo.mkIdent","line":998,"kind":"def","docLink":"./Init/Meta.html#Lean.HygieneInfo.mkIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.HygieneInfo.mkIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">HygieneInfo</span>.<span class=\"name\">mkIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.HygieneInfo\">Lean.HygieneInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L991-L992","name":"Lean.TSyntax.Compat.instCoeTailArraySyntaxTSepArray","line":991,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">Compat</span>.<span class=\"name\">instCoeTailArraySyntaxTSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L986-L987","name":"Lean.TSyntax.getHygieneInfo","line":986,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getHygieneInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getHygieneInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getHygieneInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.HygieneInfo\">Lean.HygieneInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L983-L984","name":"Lean.TSyntax.getName","line":983,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getName\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.NameLit\">Lean.NameLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L980-L981","name":"Lean.TSyntax.getChar","line":980,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getChar\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.CharLit\">Lean.CharLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L977-L978","name":"Lean.TSyntax.getString","line":977,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getString\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.StrLit\">Lean.StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L974-L975","name":"Lean.TSyntax.getScientific","line":974,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getScientific","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getScientific\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.ScientificLit\">Lean.ScientificLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L971-L972","name":"Lean.TSyntax.getId","line":971,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getId\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L968-L969","name":"Lean.TSyntax.getNat","line":968,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getNat\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L961-L962","name":"Lean.Syntax.find?","line":961,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.find?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L957-L959","name":"Lean.Syntax.findAux","line":957,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.findAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.findAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">findAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L952-L955","name":"Lean.Syntax.getOptionalIdent?","line":952,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.getOptionalIdent?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getOptionalIdent?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getOptionalIdent?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L945-L950","name":"Lean.Syntax.isNone","line":945,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isNone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isNone\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isNone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L941-L943","name":"Lean.Syntax.isToken","line":941,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isToken","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isToken\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isToken</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(token : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L937-L939","name":"Lean.Syntax.isAtom","line":937,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isAtom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isAtom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L933-L935","name":"Lean.Syntax.hasArgs","line":933,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.hasArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.hasArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">hasArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L928-L931","name":"Lean.Syntax.isNameLit?","line":928,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isNameLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isNameLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isNameLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L920-L926","name":"Lean.Syntax.decodeNameLit","line":920,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeNameLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeNameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeNameLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L917-L918","name":"String.toName","line":917,"kind":"def","docLink":"./Init/Meta.html#String.toName","doc":"Converts a `String` to a hierarchical `Name` after splitting it at the dots.\n\n`\"a.b\".toName` is the name `a.b`, not `«a.b»`. For the latter, use `Name.mkSimple`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#String.toName\"><span class=\"name\">String</span>.<span class=\"name\">toName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L896-L910","name":"Substring.toName","line":896,"kind":"def","docLink":"./Init/Meta.html#Substring.toName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Substring.toName\"><span class=\"name\">Substring</span>.<span class=\"name\">toName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L893-L894","name":"Lean.Syntax.splitNameLit","line":893,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.splitNameLit","doc":"Split a name literal (without the backtick) into its dot-separated components. For example,\n`foo.bla.«bo.o»` ↦ `[\"foo\", \"bla\", \"«bo.o»\"]`. If the literal cannot be parsed, return `[]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.splitNameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">splitNameLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L861-L864","name":"Lean.Syntax.isCharLit?","line":861,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isCharLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isCharLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isCharLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L853-L859","name":"Lean.Syntax.decodeCharLit","line":853,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeCharLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeCharLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeCharLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L848-L851","name":"Lean.Syntax.isStrLit?","line":848,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isStrLit?","doc":"If the provided `Syntax` is a string literal, returns the string it represents.\n\nEven if the `Syntax` is a `str` node, the function may return `none` if its internally ill-formed.\nThe parser should always create well-formed `str` nodes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isStrLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isStrLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L836-L840","name":"Lean.Syntax.decodeStrLit","line":836,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeStrLit","doc":"Takes the string literal lexical syntax parsed by the parser and interprets it as a string.\nThis is where escape sequences are processed for example.\nThe string `s` is is either a plain string literal or a raw string literal.\n\nIf it returns `none` then the string literal is ill-formed, which indicates a bug in the parser.\nThe function is not required to return `none` if the string literal is ill-formed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeStrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeStrLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L820-L826","name":"Lean.Syntax.decodeRawStrLitAux","line":820,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.decodeRawStrLitAux","doc":"Takes a raw string literal, counts the number of `#`'s after the `r`, and interprets it as a string.\nThe position `i` should start at `1`, which is the character after the leading `r`.\nThe algorithm is simple: we are given `r##...#\"...string...\"##...#` with zero or more `#`s.\nBy counting the number of leading `#`'s, we can extract the `...string...`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeRawStrLitAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeRawStrLitAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L797-L812","name":"Lean.Syntax.decodeStrLitAux","line":797,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.decodeStrLitAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeStrLitAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeStrLitAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L793-L795","name":"Lean.Syntax.decodeStringGap","line":793,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeStringGap","doc":"Decodes a valid string gap after the `\\`.\nNote that this function matches `\"\\\" whitespace+` rather than\nthe more restrictive `\"\\\" newline whitespace*` since this simplifies the implementation.\nJustification: this does not overlap with any other sequences beginning with `\\`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeStringGap\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeStringGap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L765-L785","name":"Lean.Syntax.decodeQuotedChar","line":765,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeQuotedChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeQuotedChar\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeQuotedChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L760-L763","name":"Lean.Syntax.toNat","line":760,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.toNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L755-L758","name":"Lean.Syntax.isIdOrAtom?","line":755,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isIdOrAtom?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isIdOrAtom?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isIdOrAtom?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L750-L753","name":"Lean.Syntax.isScientificLit?","line":750,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isScientificLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isScientificLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isScientificLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L736-L748","name":"Lean.Syntax.decodeScientificLitVal?.decode","line":736,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decode\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span>.<span class=\"name\">decode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L724-L734","name":"Lean.Syntax.decodeScientificLitVal?.decodeAfterDot","line":724,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeAfterDot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeAfterDot\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span>.<span class=\"name\">decodeAfterDot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L714-L722","name":"Lean.Syntax.decodeScientificLitVal?.decodeExp","line":714,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeExp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeExp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span>.<span class=\"name\">decodeExp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L699-L712","name":"Lean.Syntax.decodeScientificLitVal?.decodeAfterExp","line":699,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeAfterExp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeAfterExp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span>.<span class=\"name\">decodeAfterExp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sign : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exp : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L690-L748","name":"Lean.Syntax.decodeScientificLitVal?","line":690,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?","doc":"Decodes a 'scientific number' string which is consumed by the `OfScientific` class.\nTakes as input a string such as `123`, `123.456e7` and returns a triple `(n, sign, e)` with value given by\n`n * 10^-e` if `sign` else `n * 10^e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L683-L684","name":"Lean.Syntax.isFieldIdx?","line":683,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isFieldIdx?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isFieldIdx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isFieldIdx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L680-L681","name":"Lean.Syntax.isNatLit?","line":680,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isNatLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isNatLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isNatLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L664-L673","name":"Lean.Syntax.isLit?","line":664,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(litKind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L647-L662","name":"Lean.Syntax.decodeNatLitVal?","line":647,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeNatLitVal?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeNatLitVal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeNatLitVal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L601-L602","name":"Lean.Syntax.mkNameLit","line":601,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkNameLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkNameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkNameLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.NameLit\">Lean.NameLit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L598-L599","name":"Lean.Syntax.mkScientificLit","line":598,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkScientificLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkScientificLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkScientificLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <a href=\"./Init/Prelude.html#Lean.scientificLitKind\">Lean.scientificLitKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L595-L596","name":"Lean.Syntax.mkNumLit","line":595,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkNumLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkNumLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkNumLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L592-L593","name":"Lean.Syntax.mkStrLit","line":592,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkStrLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkStrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkStrLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.StrLit\">Lean.StrLit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L589-L590","name":"Lean.Syntax.mkCharLit","line":589,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkCharLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkCharLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkCharLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.CharLit\">Lean.CharLit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L585-L587","name":"Lean.Syntax.mkLit","line":585,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">kind</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L582-L583","name":"Lean.Syntax.mkCApp","line":582,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkCApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkCApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkCApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`term</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L578-L580","name":"Lean.Syntax.mkApp","line":578,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkApp","doc":"Create syntax representing a Lean term application, but avoid degenerate empty applications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`term</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L574-L575","name":"Lean.Syntax.instCoeTSyntaxArrayTSepArray","line":574,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeTSyntaxArrayTSepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeTSyntaxArrayTSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeTSyntaxArrayTSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L571-L572","name":"Lean.Syntax.TSepArray.ofElems","line":571,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.TSepArray.ofElems","doc":"Constructs a typed separated array from elements.\nThe given array does not include the separators.\n\nLike `Syntax.SepArray.ofElems` but for typed syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.TSepArray.ofElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TSepArray</span>.<span class=\"name\">ofElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(elems : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L562-L563","name":"Lean.Syntax.instCoeArraySepArray","line":562,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeArraySepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeArraySepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeArraySepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L558-L560","name":"Lean.Syntax.SepArray.ofElemsUsingRef","line":558,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.SepArray.ofElemsUsingRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.SepArray.ofElemsUsingRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">SepArray</span>.<span class=\"name\">ofElemsUsingRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(elems : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L555-L556","name":"Lean.Syntax.SepArray.ofElems","line":555,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.SepArray.ofElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.SepArray.ofElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">SepArray</span>.<span class=\"name\">ofElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(elems : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L552-L553","name":"Lean.Syntax.mkSep","line":552,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkSep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkSep\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkSep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L547-L548","name":"Lean.mkHole","line":547,"kind":"def","docLink":"./Init/Meta.html#Lean.mkHole","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkHole\"><span class=\"name\">Lean</span>.<span class=\"name\">mkHole</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L542-L545","name":"Lean.mkOptionalNode","line":542,"kind":"def","docLink":"./Init/Meta.html#Lean.mkOptionalNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkOptionalNode\"><span class=\"name\">Lean</span>.<span class=\"name\">mkOptionalNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arg : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L531-L540","name":"Lean.mkSepArray","line":531,"kind":"def","docLink":"./Init/Meta.html#Lean.mkSepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">mkSepArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L528-L529","name":"Lean.mkGroupNode","line":528,"kind":"def","docLink":"./Init/Meta.html#Lean.mkGroupNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkGroupNode\"><span class=\"name\">Lean</span>.<span class=\"name\">mkGroupNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">#[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L525-L526","name":"Lean.mkIdent","line":525,"kind":"def","docLink":"./Init/Meta.html#Lean.mkIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L521-L522","name":"Lean.mkCIdent","line":521,"kind":"def","docLink":"./Init/Meta.html#Lean.mkCIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkCIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">mkCIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L518-L519","name":"Lean.mkCIdentFromRef","line":518,"kind":"def","docLink":"./Init/Meta.html#Lean.mkCIdentFromRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkCIdentFromRef\"><span class=\"name\">Lean</span>.<span class=\"name\">mkCIdentFromRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L513-L516","name":"Lean.mkCIdentFrom","line":513,"kind":"def","docLink":"./Init/Meta.html#Lean.mkCIdentFrom","doc":"Create an identifier referring to a constant `c` copying the position from `src`.\nThis variant of `mkIdentFrom` makes sure that the identifier cannot accidentally\nbe captured. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkCIdentFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">mkCIdentFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(src : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L506-L507","name":"Lean.mkIdentFromRef","line":506,"kind":"def","docLink":"./Init/Meta.html#Lean.mkIdentFromRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkIdentFromRef\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIdentFromRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L503-L504","name":"Lean.mkIdentFrom","line":503,"kind":"def","docLink":"./Init/Meta.html#Lean.mkIdentFrom","doc":"Create an identifier copying the position from `src`.\nTo refer to a specific constant, use `mkCIdentFrom` instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkIdentFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIdentFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(src : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L484-L496","name":"Lean.expandMacros","line":484,"kind":"opaque","docLink":"./Init/Meta.html#Lean.expandMacros","doc":"Expand macros in the given syntax.\nA node with kind `k` is visited only if `p k` is true.\n\nNote that the default value for `p` returns false for `by ...` nodes.\nThis is a \"hack\". The tactic framework abuses the macro system to implement extensible tactics.\nFor example, one can define\n```lean\nsyntax \"my_trivial\" : tactic -- extensible tactic\n\nmacro_rules | `(tactic| my_trivial) => `(tactic| decide)\nmacro_rules | `(tactic| my_trivial) => `(tactic| assumption)\n```\nWhen the tactic evaluator finds the tactic `my_trivial`, it tries to evaluate the `macro_rule` expansions\nuntil one \"works\", i.e., the macro expansion is evaluated without producing an exception.\nWe say this solution is a bit hackish because the term elaborator may invoke `expandMacros` with `(p := fun _ => true)`,\nand expand the tactic macros as just macros. In the example above, `my_trivial` would be replaced with `assumption`,\n`decide` would not be tried if `assumption` fails at tactic evaluation time.\n\nWe are considering two possible solutions for this issue:\n1- A proper extensible tactic feature that does not rely on the macro system.\n\n2- Typed macros that know the syntax categories they're working in. Then, we would be able to select which\n   syntactic categories are expanded by `expandMacros`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.expandMacros\"><span class=\"name\">Lean</span>.<span class=\"name\">expandMacros</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\">`Lean.Parser.Term.byTactic</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L454-L457","name":"Lean.withHeadRefOnly","line":454,"kind":"def","docLink":"./Init/Meta.html#Lean.withHeadRefOnly","doc":"Use the head atom/identifier of the current `ref` as the `ref` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.withHeadRefOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">withHeadRefOnly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L448-L449","name":"Lean.Syntax.mkSynthetic","line":448,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkSynthetic","doc":"Ensure head position is synthetic. The server regards syntax as \"original\" only if both head and tail info are `original`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkSynthetic\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkSynthetic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L444-L445","name":"Lean.Syntax.copyHeadTailInfoFrom","line":444,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.copyHeadTailInfoFrom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.copyHeadTailInfoFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">copyHeadTailInfoFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(target : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(source : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L437-L442","name":"Lean.Syntax.getHead?","line":437,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.getHead?","doc":"Return the first atom/identifier that has position information "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getHead?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getHead?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L430-L434","name":"Lean.Syntax.setInfo","line":430,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.setInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.setInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L425-L428","name":"Lean.Syntax.setHeadInfo","line":425,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.setHeadInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.setHeadInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setHeadInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L416-L423","name":"Lean.Syntax.setHeadInfoAux","line":416,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.setHeadInfoAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.setHeadInfoAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setHeadInfoAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L402-L405","name":"Lean.Syntax.unsetTrailing","line":402,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.unsetTrailing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.unsetTrailing\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">unsetTrailing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L397-L400","name":"Lean.Syntax.setTailInfo","line":397,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.setTailInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.setTailInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setTailInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L388-L395","name":"Lean.Syntax.setTailInfoAux","line":388,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.setTailInfoAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.setTailInfoAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setTailInfoAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L368-L376","name":"Lean.Syntax.getSubstring?","line":368,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.getSubstring?","doc":"Return substring of original input covering `stx`.\nResult is meaningful only if all involved `SourceInfo.original`s refer to the same string (as is the case after parsing). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getSubstring?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getSubstring?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(withLeading : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(withTrailing : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L360-L363","name":"Lean.Syntax.getTrailingSize","line":360,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.getTrailingSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getTrailingSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTrailingSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L357-L358","name":"Lean.Syntax.getTailInfo","line":357,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.getTailInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getTailInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTailInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L349-L355","name":"Lean.Syntax.getTailInfo?","line":349,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.getTailInfo?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getTailInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTailInfo?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L347-L347","name":"Lean.Syntax.instBEqTSyntax","line":347,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instBEqTSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instBEqTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instBEqTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L346-L346","name":"Lean.Syntax.instBEq","line":346,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L339-L344","name":"Lean.Syntax.structEq","line":339,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.structEq","doc":"Compare syntax structures modulo source info. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.structEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">structEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L336-L336","name":"Lean.Syntax.instBEqPreresolved","line":336,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instBEqPreresolved","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instBEqPreresolved\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instBEqPreresolved</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Lean.Syntax.Preresolved</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L327-L328","name":"Lean.TSyntax.Compat.instCoeTailArraySyntaxTSyntaxArray","line":327,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSyntaxArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSyntaxArray\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">Compat</span>.<span class=\"name\">instCoeTailArraySyntaxTSyntaxArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L324-L325","name":"Lean.TSyntax.Compat.instCoeTailSyntax","line":324,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">Compat</span>.<span class=\"name\">instCoeTailSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L319-L320","name":"Lean.TSyntax.instCoeNumLitPrec","line":319,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeNumLitPrec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeNumLitPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNumLitPrec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Prec\">Lean.Prec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L316-L317","name":"Lean.TSyntax.instCoeNumLitPrio","line":316,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeNumLitPrio","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeNumLitPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNumLitPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Prio\">Lean.Prio</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L313-L314","name":"Lean.TSyntax.instCoeIdentLevel","line":313,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeIdentLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeIdentLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeIdentLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a> <a href=\"./Init/Meta.html#Lean.Syntax.Level\">Lean.Syntax.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L310-L311","name":"Lean.TSyntax.instCoeCharLitTerm","line":310,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeCharLitTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeCharLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeCharLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.CharLit\">Lean.CharLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L307-L308","name":"Lean.TSyntax.instCoeNumLitTerm","line":307,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeNumLitTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeNumLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNumLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L304-L305","name":"Lean.TSyntax.instCoeScientificLitTerm","line":304,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeScientificLitTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeScientificLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeScientificLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.ScientificLit\">Lean.ScientificLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L301-L302","name":"Lean.TSyntax.instCoeNameLitTerm","line":301,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeNameLitTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeNameLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNameLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.NameLit\">Lean.NameLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L298-L299","name":"Lean.TSyntax.instCoeStrLitTerm","line":298,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeStrLitTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeStrLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeStrLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.StrLit\">Lean.StrLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L295-L296","name":"Lean.TSyntax.instCoeDepTermMkIdentIdent","line":295,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeDepTermMkIdentIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeDepTermMkIdentIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeDepTermMkIdentIdent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ss : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{res : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Lean.Syntax.Preresolved</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeDep\">CoeDep</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> <span class=\"fn\">{ <span class=\"fn\">raw</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.ident\">Lean.Syntax.ident</a> <span class=\"fn\">info</span> <span class=\"fn\">ss</span> <span class=\"fn\">n</span> <span class=\"fn\">res</span></span> }</span> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L292-L293","name":"Lean.TSyntax.instCoeIdentTerm","line":292,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeIdentTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeIdentTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeIdentTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L289-L290","name":"Lean.TSyntax.instCoeConsSyntaxNodeKind","line":289,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeConsSyntaxNodeKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeConsSyntaxNodeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeConsSyntaxNodeKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ks : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k' : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">ks</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ks</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L286-L287","name":"Lean.TSyntax.instCoeConsSyntaxNodeKindNil","line":286,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeConsSyntaxNodeKindNil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeConsSyntaxNodeKindNil\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeConsSyntaxNodeKindNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ks : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ks</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L278-L278","name":"Lean.Syntax.HygieneInfo","line":278,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.HygieneInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.HygieneInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">HygieneInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L277-L277","name":"Lean.Syntax.NumLit","line":277,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.NumLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.NumLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">NumLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L276-L276","name":"Lean.Syntax.ScientificLit","line":276,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.ScientificLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.ScientificLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">ScientificLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L275-L275","name":"Lean.Syntax.NameLit","line":275,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.NameLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.NameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">NameLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L274-L274","name":"Lean.Syntax.CharLit","line":274,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.CharLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.CharLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">CharLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L273-L273","name":"Lean.Syntax.StrLit","line":273,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.StrLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.StrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">StrLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L272-L272","name":"Lean.Syntax.Ident","line":272,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Ident","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Ident\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Ident</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L271-L271","name":"Lean.Syntax.Prio","line":271,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Prio","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Prio\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Prio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L270-L270","name":"Lean.Syntax.Prec","line":270,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Prec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Prec\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Prec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L269-L269","name":"Lean.Syntax.Tactic","line":269,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Tactic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Tactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L268-L268","name":"Lean.Syntax.Level","line":268,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Level","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Level\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Level</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L267-L267","name":"Lean.Syntax.Command","line":267,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Command","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Command\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Command</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L266-L266","name":"Lean.Syntax.Term","line":266,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Term\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Term</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L264-L264","name":"Lean.Syntax.instReprTSyntax","line":264,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instReprTSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instReprTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instReprTSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">ks</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>} → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">ks</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L263-L263","name":"Lean.Syntax.instRepr","line":263,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instRepr\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L262-L262","name":"Lean.Syntax.instReprPreresolved","line":262,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instReprPreresolved","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instReprPreresolved\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instReprPreresolved</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Lean.Syntax.Preresolved</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L255-L258","name":"Lean.monadNameGeneratorLift","line":255,"kind":"instance","docLink":"./Init/Meta.html#Lean.monadNameGeneratorLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.monadNameGeneratorLift\"><span class=\"name\">Lean</span>.<span class=\"name\">monadNameGeneratorLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L249-L253","name":"Lean.mkFreshId","line":249,"kind":"def","docLink":"./Init/Meta.html#Lean.mkFreshId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkFreshId\"><span class=\"name\">Lean</span>.<span class=\"name\">mkFreshId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L245-L245","name":"Lean.MonadNameGenerator.setNGen","line":245,"kind":"def","docLink":"./Init/Meta.html#Lean.MonadNameGenerator.setNGen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.MonadNameGenerator.setNGen\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span>.<span class=\"name\">setNGen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L244-L244","name":"Lean.MonadNameGenerator.getNGen","line":244,"kind":"def","docLink":"./Init/Meta.html#Lean.MonadNameGenerator.getNGen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.MonadNameGenerator.getNGen\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span>.<span class=\"name\">getNGen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L243-L243","name":"Lean.MonadNameGenerator.mk","line":243,"kind":"ctor","docLink":"./Init/Meta.html#Lean.MonadNameGenerator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.MonadNameGenerator.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(getNGen : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(setNGen : <span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L243-L245","name":"Lean.MonadNameGenerator","line":243,"kind":"class","docLink":"./Init/Meta.html#Lean.MonadNameGenerator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.MonadNameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L237-L239","name":"Lean.NameGenerator.mkChild","line":237,"kind":"def","docLink":"./Init/Meta.html#Lean.NameGenerator.mkChild","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.NameGenerator.mkChild\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">mkChild</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L234-L235","name":"Lean.NameGenerator.next","line":234,"kind":"def","docLink":"./Init/Meta.html#Lean.NameGenerator.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.NameGenerator.next\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L231-L232","name":"Lean.NameGenerator.curr","line":231,"kind":"def","docLink":"./Init/Meta.html#Lean.NameGenerator.curr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.NameGenerator.curr\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">curr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L224-L225","name":"Lean.Name.instDecidableEq","line":224,"kind":"instance","docLink":"./Init/Meta.html#Lean.Name.instDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.instDecidableEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instDecidableEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L220-L222","name":"Lean.Name.instLawfulBEq","line":220,"kind":"instance","docLink":"./Init/Meta.html#Lean.Name.instLawfulBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.instLawfulBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instLawfulBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L216-L218","name":"Lean.Name.beq_iff_eq","line":216,"kind":"theorem","docLink":"./Init/Meta.html#Lean.Name.beq_iff_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.beq_iff_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">beq_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L210-L214","name":"Lean.Name.appendBefore","line":210,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.appendBefore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.appendBefore\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">appendBefore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L204-L207","name":"Lean.Name.appendIndexAfter","line":204,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.appendIndexAfter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.appendIndexAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">appendIndexAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L198-L201","name":"Lean.Name.appendAfter","line":198,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.appendAfter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.appendAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">appendAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suffix : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L190-L195","name":"Lean.Name.modifyBase","line":190,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.modifyBase","doc":"Remove macros scopes, apply `f`, and put them back "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.modifyBase\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">modifyBase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L183-L187","name":"Lean.Name.eraseSuffix?","line":183,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.eraseSuffix?","doc":"`eraseSuffix? n s` return `n'` if `n` is of the form `n == n' ++ s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.eraseSuffix?\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">eraseSuffix?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L174-L178","name":"Lean.Name.replacePrefix","line":174,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.replacePrefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.replacePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">replacePrefix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L170-L172","name":"Lean.Name.capitalize","line":170,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.capitalize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.capitalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">capitalize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L167-L168","name":"Lean.Name.instRepr","line":167,"kind":"instance","docLink":"./Init/Meta.html#Lean.Name.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.instRepr\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L157-L165","name":"Lean.Name.reprPrec","line":157,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.reprPrec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.reprPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">reprPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prec : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L149-L150","name":"Lean.Name.instToString","line":149,"kind":"instance","docLink":"./Init/Meta.html#Lean.Name.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L142-L147","name":"Lean.Name.toString.maybePseudoSyntax","line":142,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.toString.maybePseudoSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.toString.maybePseudoSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toString</span>.<span class=\"name\">maybePseudoSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L138-L147","name":"Lean.Name.toString","line":138,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(escape : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L136-L136","name":"Lean.Name.toStringWithSep.maybeEscape","line":136,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.toStringWithSep.maybeEscape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.toStringWithSep.maybeEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toStringWithSep</span>.<span class=\"name\">maybeEscape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(escape : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L129-L136","name":"Lean.Name.toStringWithSep","line":129,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.toStringWithSep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.toStringWithSep\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toStringWithSep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(sep : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(escape : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L122-L125","name":"Lean.Name.escapePart","line":122,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.escapePart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.escapePart\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">escapePart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L117-L120","name":"Lean.Name.isInaccessibleUserName","line":117,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.isInaccessibleUserName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.isInaccessibleUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isInaccessibleUserName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L109-L114","name":"Lean.Name.getRoot","line":109,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.getRoot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.getRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">getRoot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L106-L106","name":"Lean.isIdEndEscape","line":106,"kind":"def","docLink":"./Init/Meta.html#Lean.isIdEndEscape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isIdEndEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdEndEscape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L105-L105","name":"Lean.isIdBeginEscape","line":105,"kind":"def","docLink":"./Init/Meta.html#Lean.isIdBeginEscape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isIdBeginEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdBeginEscape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L104-L104","name":"Lean.idEndEscape","line":104,"kind":"def","docLink":"./Init/Meta.html#Lean.idEndEscape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.idEndEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">idEndEscape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L103-L103","name":"Lean.idBeginEscape","line":103,"kind":"def","docLink":"./Init/Meta.html#Lean.idBeginEscape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.idBeginEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">idBeginEscape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L100-L101","name":"Lean.isIdRest","line":100,"kind":"def","docLink":"./Init/Meta.html#Lean.isIdRest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isIdRest\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdRest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L97-L98","name":"Lean.isIdFirst","line":97,"kind":"def","docLink":"./Init/Meta.html#Lean.isIdFirst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isIdFirst\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdFirst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L92-L95","name":"Lean.isSubScriptAlnum","line":92,"kind":"def","docLink":"./Init/Meta.html#Lean.isSubScriptAlnum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isSubScriptAlnum\"><span class=\"name\">Lean</span>.<span class=\"name\">isSubScriptAlnum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L89-L90","name":"Lean.isNumericSubscript","line":89,"kind":"def","docLink":"./Init/Meta.html#Lean.isNumericSubscript","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isNumericSubscript\"><span class=\"name\">Lean</span>.<span class=\"name\">isNumericSubscript</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L81-L87","name":"Lean.isLetterLike","line":81,"kind":"def","docLink":"./Init/Meta.html#Lean.isLetterLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isLetterLike\"><span class=\"name\">Lean</span>.<span class=\"name\">isLetterLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L78-L79","name":"Lean.isGreek","line":78,"kind":"def","docLink":"./Init/Meta.html#Lean.isGreek","doc":"Valid identifier names "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isGreek\"><span class=\"name\">Lean</span>.<span class=\"name\">isGreek</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L75-L75","name":"Lean.Internal.hasLLVMBackend","line":75,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Internal.hasLLVMBackend","doc":"This function can be used to detect whether the compiler has support for\ngenerating LLVM instead of C. It is used by lake instead of the --features\nflag in order to avoid having to run a compiler for this every time on startup.\nSee #2572.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Internal.hasLLVMBackend\"><span class=\"name\">Lean</span>.<span class=\"name\">Internal</span>.<span class=\"name\">hasLLVMBackend</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L66-L66","name":"Lean.Internal.isStage0","line":66,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Internal.isStage0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Internal.isStage0\"><span class=\"name\">Lean</span>.<span class=\"name\">Internal</span>.<span class=\"name\">isStage0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L54-L63","name":"Lean.toolchain","line":54,"kind":"def","docLink":"./Init/Meta.html#Lean.toolchain","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.toolchain\"><span class=\"name\">Lean</span>.<span class=\"name\">toolchain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L51-L52","name":"Lean.origin","line":51,"kind":"def","docLink":"./Init/Meta.html#Lean.origin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.origin\"><span class=\"name\">Lean</span>.<span class=\"name\">origin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L43-L49","name":"Lean.versionString","line":43,"kind":"def","docLink":"./Init/Meta.html#Lean.versionString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.versionString\"><span class=\"name\">Lean</span>.<span class=\"name\">versionString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L40-L41","name":"Lean.versionStringCore","line":40,"kind":"def","docLink":"./Init/Meta.html#Lean.versionStringCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.versionStringCore\"><span class=\"name\">Lean</span>.<span class=\"name\">versionStringCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L38-L38","name":"Lean.version.specialDesc","line":38,"kind":"def","docLink":"./Init/Meta.html#Lean.version.specialDesc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.specialDesc\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">specialDesc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L37-L37","name":"Lean.version.getSpecialDesc","line":37,"kind":"opaque","docLink":"./Init/Meta.html#Lean.version.getSpecialDesc","doc":"Additional version description like \"nightly-2018-03-11\" "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.getSpecialDesc\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">getSpecialDesc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L33-L33","name":"Lean.version.isRelease","line":33,"kind":"def","docLink":"./Init/Meta.html#Lean.version.isRelease","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.isRelease\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">isRelease</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L32-L32","name":"Lean.version.getIsRelease","line":32,"kind":"opaque","docLink":"./Init/Meta.html#Lean.version.getIsRelease","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.getIsRelease\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">getIsRelease</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L29-L29","name":"Lean.githash","line":29,"kind":"def","docLink":"./Init/Meta.html#Lean.githash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.githash\"><span class=\"name\">Lean</span>.<span class=\"name\">githash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L28-L28","name":"Lean.getGithash","line":28,"kind":"opaque","docLink":"./Init/Meta.html#Lean.getGithash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.getGithash\"><span class=\"name\">Lean</span>.<span class=\"name\">getGithash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L25-L25","name":"Lean.version.patch","line":25,"kind":"def","docLink":"./Init/Meta.html#Lean.version.patch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.patch\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">patch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L21-L21","name":"Lean.version.minor","line":21,"kind":"def","docLink":"./Init/Meta.html#Lean.version.minor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.minor\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">minor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Init/Meta.lean#L17-L17","name":"Lean.version.major","line":17,"kind":"def","docLink":"./Init/Meta.html#Lean.version.major","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.major\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">major</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"}]}