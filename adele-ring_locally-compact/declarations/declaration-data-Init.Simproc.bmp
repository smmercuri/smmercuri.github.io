{"name":"Init.Simproc","instances":[],"imports":["Init.NotationExtra"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Simproc.lean#L76-L79","name":"Lean.Parser.Attr.sevalprocBuiltinAttr","line":76,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.Attr.sevalprocBuiltinAttr","doc":"Auxiliary attribute for builtin symbolic evaluation procedures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.sevalprocBuiltinAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">sevalprocBuiltinAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Simproc.lean#L71-L74","name":"Lean.Parser.Attr.simprocBuiltinAttr","line":71,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.Attr.simprocBuiltinAttr","doc":"Auxiliary attribute for builtin simplification procedures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.simprocBuiltinAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">simprocBuiltinAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Simproc.lean#L66-L69","name":"Lean.Parser.Attr.sevalprocAttr","line":66,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.Attr.sevalprocAttr","doc":"Auxiliary attribute for symbolic evaluation procedures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.sevalprocAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">sevalprocAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Simproc.lean#L61-L64","name":"Lean.Parser.Attr.simprocAttr","line":61,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.Attr.simprocAttr","doc":"Auxiliary attribute for simplification procedures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.simprocAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">simprocAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Simproc.lean#L55-L58","name":"Lean.Parser.simprocPatternBuiltin","line":55,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.simprocPatternBuiltin","doc":"Auxiliary command for associating a pattern with a builtin simplification procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.simprocPatternBuiltin\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">simprocPatternBuiltin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Simproc.lean#L50-L53","name":"Lean.Parser.simprocPattern","line":50,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.simprocPattern","doc":"Auxiliary command for associating a pattern with a simplification procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.simprocPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">simprocPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Simproc.lean#L45-L48","name":"Lean.Parser.«command_Builtin_simproc_decl_(_):=_»","line":45,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command_Builtin_simproc_decl_(_):=_»","doc":"A builtin simplification procedure declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command_Builtin_simproc_decl_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command_Builtin_simproc_decl_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Simproc.lean#L40-L43","name":"Lean.Parser.«command__Builtin_simproc__[_]_(_):=_»","line":40,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command__Builtin_simproc__[_]_(_):=_»","doc":"A builtin simplification procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command__Builtin_simproc__[_]_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command__Builtin_simproc__[_]_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Simproc.lean#L34-L38","name":"Lean.Parser.«command_Simproc_decl_(_):=_»","line":34,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command_Simproc_decl_(_):=_»","doc":"A user-defined simplification procedure declaration. To activate this procedure in `simp` tactic,\nwe must provide it as an argument, or use the command `attribute` to set its `[simproc]` attribute.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command_Simproc_decl_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command_Simproc_decl_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Simproc.lean#L10-L32","name":"Lean.Parser.«command__Simproc__[_]_(_):=_»","line":10,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command__Simproc__[_]_(_):=_»","doc":"A user-defined simplification procedure used by the `simp` tactic, and its variants.\nHere is an example.\n```lean\nsimproc reduce_add (_ + _) := fun e => do\n  unless (e.isAppOfArity ``HAdd.hAdd 6) do return none\n  let some n ← getNatValue? (e.getArg! 4) | return none\n  let some m ← getNatValue? (e.getArg! 5) | return none\n  return some (.done { expr := mkNatLit (n+m) })\n```\nThe `simp` tactic invokes `reduce_add` whenever it finds a term of the form `_ + _`.\nThe simplification procedures are stored in an (imperfect) discrimination tree.\nThe procedure should **not** assume the term `e` perfectly matches the given pattern.\nThe body of a simplification procedure must have type `Simproc`, which is an alias for\n`Expr → SimpM (Option Step)`.\nYou can instruct the simplifier to apply the procedure before its sub-expressions\nhave been simplified by using the modifier `↓` before the procedure name. Example.\n```lean\nsimproc ↓ reduce_add (_ + _) := fun e => ...\n```\nSimplification procedures can be also scoped or local.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command__Simproc__[_]_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command__Simproc__[_]_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}