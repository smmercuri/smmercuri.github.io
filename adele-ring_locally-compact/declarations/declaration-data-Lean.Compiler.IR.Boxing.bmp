{"name":"Lean.Compiler.IR.Boxing","instances":[],"imports":["Lean.Runtime","Lean.Compiler.ClosedTermCache","Lean.Compiler.ExternAttr","Lean.Compiler.IR.Basic","Lean.Compiler.IR.CompilerM","Lean.Compiler.IR.FreeVars","Lean.Compiler.IR.ElimDeadVars"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L341-L343","name":"Lean.IR.explicitBoxing","line":341,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.explicitBoxing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.explicitBoxing\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">explicitBoxing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/CompilerM.html#Lean.IR.CompilerM\">Lean.IR.CompilerM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L325-L337","name":"Lean.IR.ExplicitBoxing.run","line":325,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.run\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L293-L323","name":"Lean.IR.ExplicitBoxing.visitFnBody","line":293,"kind":"opaque","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">visitFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L269-L291","name":"Lean.IR.ExplicitBoxing.visitVDeclExpr","line":269,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitVDeclExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitVDeclExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">visitVDeclExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L261-L267","name":"Lean.IR.ExplicitBoxing.castResultIfNeeded","line":261,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castResultIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castResultIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castResultIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eType : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L254-L259","name":"Lean.IR.ExplicitBoxing.unboxResultIfNeeded","line":254,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.unboxResultIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.unboxResultIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">unboxResultIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L249-L252","name":"Lean.IR.ExplicitBoxing.boxArgsIfNeeded","line":249,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.boxArgsIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.boxArgsIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">boxArgsIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L244-L247","name":"Lean.IR.ExplicitBoxing.castArgsIfNeeded","line":244,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castArgsIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L222-L242","name":"Lean.IR.ExplicitBoxing.castArgsIfNeededAux","line":222,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeededAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeededAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castArgsIfNeededAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(typeFromIdx : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L217-L220","name":"Lean.IR.ExplicitBoxing.castArgIfNeeded","line":217,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castArgIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expected : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L208-L215","name":"Lean.IR.ExplicitBoxing.castVarIfNeeded","line":208,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castVarIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castVarIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castVarIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expected : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L178-L206","name":"Lean.IR.ExplicitBoxing.mkCast","line":178,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkCast","doc":"Auxiliary function used by castVarIfNeeded.\nIt is used when the expected type does not match `xType`.\nIf `xType` is scalar, then we need to \"box\" it. Otherwise, we need to \"unbox\" it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkCast\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xType : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L154-L155","name":"Lean.IR.ExplicitBoxing.withJDecl","line":154,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withJDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withJDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">withJDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L151-L152","name":"Lean.IR.ExplicitBoxing.withVDecl","line":151,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withVDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withVDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">withVDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L148-L149","name":"Lean.IR.ExplicitBoxing.withParams","line":148,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">withParams</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L142-L146","name":"Lean.IR.ExplicitBoxing.getDecl","line":142,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fid : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L136-L140","name":"Lean.IR.ExplicitBoxing.getJPParams","line":136,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getJPParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getJPParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getJPParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L130-L134","name":"Lean.IR.ExplicitBoxing.getVarType","line":130,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getVarType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getVarType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getVarType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L128-L128","name":"Lean.IR.ExplicitBoxing.getResultType","line":128,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getResultType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getResultType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getResultType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L127-L127","name":"Lean.IR.ExplicitBoxing.getLocalContext","line":127,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getLocalContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getLocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getLocalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L126-L126","name":"Lean.IR.ExplicitBoxing.getEnv","line":126,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getEnv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getEnv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">Lean.IR.ExplicitBoxing.M</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L120-L120","name":"Lean.IR.ExplicitBoxing.M","line":120,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L118-L118","name":"Lean.IR.ExplicitBoxing.BoxingState.nextAuxId","line":118,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextAuxId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextAuxId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">nextAuxId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">Lean.IR.ExplicitBoxing.BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L117-L117","name":"Lean.IR.ExplicitBoxing.BoxingState.auxDeclCache","line":117,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDeclCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDeclCache\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">auxDeclCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">Lean.IR.ExplicitBoxing.BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">Lean.AssocList</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L116-L116","name":"Lean.IR.ExplicitBoxing.BoxingState.auxDecls","line":116,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDecls","doc":"We create auxiliary declarations when boxing constant and literals.\nThe idea is to avoid code such as\n```\nlet x1 := Uint64.inhabited;\nlet x2 := box x1;\n...\n```\nWe currently do not cache these declarations in an environment extension, but\nwe use auxDeclCache to avoid creating equivalent auxiliary declarations more than once when\nprocessing the same IR declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">auxDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">Lean.IR.ExplicitBoxing.BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L104-L104","name":"Lean.IR.ExplicitBoxing.BoxingState.nextIdx","line":104,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">nextIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">Lean.IR.ExplicitBoxing.BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L103-L103","name":"Lean.IR.ExplicitBoxing.BoxingState.mk","line":103,"kind":"ctor","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(nextIdx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(auxDecls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(auxDeclCache : <span class=\"fn\"><a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">Lean.AssocList</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nextAuxId : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">Lean.IR.ExplicitBoxing.BoxingState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L103-L118","name":"Lean.IR.ExplicitBoxing.BoxingState","line":103,"kind":"structure","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L101-L101","name":"Lean.IR.ExplicitBoxing.BoxingContext.env","line":101,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.env","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.env\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">Lean.IR.ExplicitBoxing.BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L100-L100","name":"Lean.IR.ExplicitBoxing.BoxingContext.decls","line":100,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.decls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">Lean.IR.ExplicitBoxing.BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L99-L99","name":"Lean.IR.ExplicitBoxing.BoxingContext.resultType","line":99,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.resultType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.resultType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">resultType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">Lean.IR.ExplicitBoxing.BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L98-L98","name":"Lean.IR.ExplicitBoxing.BoxingContext.localCtx","line":98,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.localCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.localCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">localCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">Lean.IR.ExplicitBoxing.BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L97-L97","name":"Lean.IR.ExplicitBoxing.BoxingContext.f","line":97,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.f\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">Lean.IR.ExplicitBoxing.BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L96-L96","name":"Lean.IR.ExplicitBoxing.BoxingContext.mk","line":96,"kind":"ctor","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localCtx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(resultType : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">Lean.IR.ExplicitBoxing.BoxingContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L96-L101","name":"Lean.IR.ExplicitBoxing.BoxingContext","line":96,"kind":"structure","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L93-L94","name":"Lean.IR.ExplicitBoxing.eqvTypes","line":93,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.eqvTypes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.eqvTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">eqvTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L78-L91","name":"Lean.IR.ExplicitBoxing.getScrutineeType","line":78,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getScrutineeType","doc":"Infer scrutinee type using `case` alternatives.\nThis can be done whenever `alts` does not contain an `Alt.default _` value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getScrutineeType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getScrutineeType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(alts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Lean.IR.Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L71-L74","name":"Lean.IR.ExplicitBoxing.addBoxedVersions","line":71,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.addBoxedVersions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.addBoxedVersions\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">addBoxedVersions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L68-L69","name":"Lean.IR.ExplicitBoxing.mkBoxedVersion","line":68,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersion\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkBoxedVersion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L47-L66","name":"Lean.IR.ExplicitBoxing.mkBoxedVersionAux","line":47,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersionAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersionAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkBoxedVersionAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.N\">Lean.IR.ExplicitBoxing.N</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L42-L45","name":"Lean.IR.ExplicitBoxing.requiresBoxedVersion","line":42,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.requiresBoxedVersion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.requiresBoxedVersion\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">requiresBoxedVersion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L37-L37","name":"Lean.IR.ExplicitBoxing.N","line":37,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.N","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.N\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">N</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L34-L35","name":"Lean.IR.ExplicitBoxing.isBoxedName","line":34,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.isBoxedName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.isBoxedName\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">isBoxedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Compiler/IR/Boxing.lean#L31-L32","name":"Lean.IR.ExplicitBoxing.mkBoxedName","line":31,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedName\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkBoxedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"}]}