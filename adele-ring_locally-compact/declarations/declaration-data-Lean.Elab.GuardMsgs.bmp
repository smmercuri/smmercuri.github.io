{"name":"Lean.Elab.GuardMsgs","instances":[{"typeNames":["Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure"],"name":"Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","className":"TypeName"}],"imports":["Lean.Server.CodeActions.Attr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L105-L134","name":"Lean.Elab.Tactic.GuardMsgs.guardMsgsCodeAction","line":105,"kind":"def","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.guardMsgsCodeAction","doc":"A code action which will update the doc comment on a `#guard_msgs` invocation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.guardMsgsCodeAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">guardMsgsCodeAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions/Attr.html#Lean.CodeAction.CommandCodeAction\">Lean.CodeAction.CommandCodeAction</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L76-L100","name":"Lean.Elab.Tactic.GuardMsgs.elabGuardMsgs","line":76,"kind":"def","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.elabGuardMsgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.elabGuardMsgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">elabGuardMsgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L74-L74","name":"Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","line":74,"kind":"instance","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">instTypeNameGuardMsgFailure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\">Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L73-L73","name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.res","line":73,"kind":"def","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.res","doc":"The result of the nested command "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.res\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span>.<span class=\"name\">res</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\">Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L71-L71","name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.mk","line":71,"kind":"ctor","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(res : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\">Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L71-L74","name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure","line":71,"kind":"structure","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure","doc":"An info tree node corresponding to a failed `#guard_msgs` invocation,\nused for code action support. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L46-L67","name":"Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsSpec","line":46,"kind":"def","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsSpec","doc":"Parses a `guardMsgsSpec`.\n- No specification: check everything.\n- With a specification: interpret the spec, and if nothing applies pass it through. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsSpec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">parseGuardMsgsSpec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(spec? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.guardMsgsSpec</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a> â†’ <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult\">Lean.Elab.Tactic.GuardMsgs.SpecResult</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L40-L41","name":"Lean.Elab.Tactic.GuardMsgs.SpecResult.passthrough","line":40,"kind":"ctor","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult.passthrough","doc":"Do not capture the message. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult.passthrough\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">SpecResult</span>.<span class=\"name\">passthrough</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult\">Lean.Elab.Tactic.GuardMsgs.SpecResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L38-L39","name":"Lean.Elab.Tactic.GuardMsgs.SpecResult.drop","line":38,"kind":"ctor","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult.drop","doc":"Drop the message and delete it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult.drop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">SpecResult</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult\">Lean.Elab.Tactic.GuardMsgs.SpecResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L36-L37","name":"Lean.Elab.Tactic.GuardMsgs.SpecResult.check","line":36,"kind":"ctor","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult.check","doc":"Capture the message and check it matches the docstring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">SpecResult</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult\">Lean.Elab.Tactic.GuardMsgs.SpecResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/GuardMsgs.lean#L35-L41","name":"Lean.Elab.Tactic.GuardMsgs.SpecResult","line":35,"kind":"inductive","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult","doc":"The decision made by a specification for a message. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.SpecResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">SpecResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}