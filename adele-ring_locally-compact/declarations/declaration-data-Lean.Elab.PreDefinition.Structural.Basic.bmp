{"name":"Lean.Elab.PreDefinition.Structural.Basic","instances":[{"typeNames":["Lean.Elab.Structural.M"],"name":"Lean.Elab.Structural.instInhabitedM","className":"Inhabited"}],"imports":["Lean.Meta.Basic","Lean.Meta.ForEachExpr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L62-L65","name":"Lean.Elab.Structural.recArgHasLooseBVarsAt","line":62,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.recArgHasLooseBVarsAt","doc":"Return true iff `e` contains an application `recFnName .. t ..` where the term `t` is\nthe argument we are trying to recurse on, and it contains loose bound variables.\n\nWe use this test to decide whether we should process a matcher-application as a regular\napplication or not. That is, whether we should push the `below` argument should be affected by the matcher or not.\nIf `e` does not contain an application of the form `recFnName .. t ..`, then we know\nthe recursion doesn't depend on any pattern variable in this matcher.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.recArgHasLooseBVarsAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">recArgHasLooseBVarsAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(recFnName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(recArgPos : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L50-L51","name":"Lean.Elab.Structural.run","line":50,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">Lean.Elab.Structural.M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.State\">Lean.Elab.Structural.State</a> <span class=\"fn\">{ <span class=\"fn\">addMatchers</span> := <span class=\"fn\">#[]</span> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.State\">Lean.Elab.Structural.State</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L47-L48","name":"Lean.Elab.Structural.instInhabitedM","line":47,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.instInhabitedM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.instInhabitedM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">instInhabitedM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">Lean.Elab.Structural.M</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L45-L45","name":"Lean.Elab.Structural.M","line":45,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L43-L43","name":"Lean.Elab.Structural.State.addMatchers","line":43,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.State.addMatchers","doc":"As part of the inductive predicates case, we keep adding more and more discriminants from the\nlocal context and build up a bigger matcher application until we reach a fixed point.\nAs a side-effect, this creates matchers. Here we capture all these side-effects, because\nthe construction rolls back any changes done to the environment and the side-effects\nneed to be replayed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.State.addMatchers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">State</span>.<span class=\"name\">addMatchers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.State\">Lean.Elab.Structural.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L37-L37","name":"Lean.Elab.Structural.State.mk","line":37,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(addMatchers : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.State\">Lean.Elab.Structural.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L37-L43","name":"Lean.Elab.Structural.State","line":37,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L34-L35","name":"Lean.Elab.Structural.RecArgInfo.recArgPos","line":34,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.recArgPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.recArgPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">recArgPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L32-L32","name":"Lean.Elab.Structural.RecArgInfo.indPred","line":32,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indPred","doc":"true if the type is an inductive predicate "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L30-L30","name":"Lean.Elab.Structural.RecArgInfo.reflexive","line":30,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.reflexive","doc":"true if we are recursing over a reflexive inductive datatype "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.reflexive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">reflexive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L28-L28","name":"Lean.Elab.Structural.RecArgInfo.indIndices","line":28,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indIndices","doc":"inductive datatype indices of the argument we are recursing on, it is equal to `indicesPos.map fun i => ys.get! i` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L26-L26","name":"Lean.Elab.Structural.RecArgInfo.indParams","line":26,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indParams","doc":"inductive datatype parameters of the argument we are recursing on "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L24-L24","name":"Lean.Elab.Structural.RecArgInfo.indLevels","line":24,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indLevels","doc":"inductive datatype universe levels of the argument we are recursing on "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indLevels\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indLevels</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L22-L22","name":"Lean.Elab.Structural.RecArgInfo.indName","line":22,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indName","doc":"inductive datatype name of the argument we are recursing on "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L20-L20","name":"Lean.Elab.Structural.RecArgInfo.indicesPos","line":20,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indicesPos","doc":"position in `ys` of the inductive datatype indices we are recursing on "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.indicesPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indicesPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L18-L18","name":"Lean.Elab.Structural.RecArgInfo.pos","line":18,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.pos","doc":"position in `ys` of the argument we are recursing on "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.pos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L16-L16","name":"Lean.Elab.Structural.RecArgInfo.ys","line":16,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.ys","doc":"recursion arguments "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.ys\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">ys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L14-L14","name":"Lean.Elab.Structural.RecArgInfo.fixedParams","line":14,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.fixedParams","doc":"`fixedParams ++ ys` are the arguments of the function we are trying to justify termination using structural recursion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.fixedParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">fixedParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L12-L12","name":"Lean.Elab.Structural.RecArgInfo.mk","line":12,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fixedParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indicesPos : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indLevels : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indIndices : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(reflexive : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indPred : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/Structural/Basic.lean#L12-L32","name":"Lean.Elab.Structural.RecArgInfo","line":12,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}