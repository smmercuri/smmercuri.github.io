{"name":"Lean.Elab.Tactic.Guard","instances":[],"imports":["Init.Guard","Lean.Elab.Command","Lean.Elab.Tactic.Conv.Basic","Lean.Meta.Basic","Lean.Meta.Eval"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L146-L158","name":"Lean.Elab.Tactic.GuardExpr.evalGuardCmd","line":146,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardCmd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardCmd\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardCmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L136-L143","name":"Lean.Elab.Tactic.GuardExpr.evalGuardExprCmd","line":136,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExprCmd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExprCmd\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardExprCmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L133-L133","name":"Lean.Elab.Tactic.GuardExpr.evalGuardHypConv","line":133,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardHypConv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardHypConv\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardHypConv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L106-L130","name":"Lean.Elab.Tactic.GuardExpr.evalGuardHyp","line":106,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardHyp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardHyp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L103-L103","name":"Lean.Elab.Tactic.GuardExpr.evalGuardTargetConv","line":103,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardTargetConv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardTargetConv\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardTargetConv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L89-L99","name":"Lean.Elab.Tactic.GuardExpr.evalGuardTarget","line":89,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardTarget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardTarget\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardTarget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L86-L86","name":"Lean.Elab.Tactic.GuardExpr.evalGuardExprConv","line":86,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExprConv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExprConv\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardExprConv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L75-L82","name":"Lean.Elab.Tactic.GuardExpr.evalGuardExpr","line":75,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L65-L72","name":"Lean.Elab.Tactic.GuardExpr.elabAndEvalMatchKind","line":65,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.elabAndEvalMatchKind","doc":"Elaborate `a` and `b` and then do the given equality test `mk`. We make sure to unify\nthe types of `a` and `b` after elaboration so that when synthesizing pending metavariables\nwe don't get the wrong instances due to default instances (for example, for nat literals). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.elabAndEvalMatchKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">elabAndEvalMatchKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mk : <a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">Lean.Elab.Tactic.GuardExpr.MatchKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L56-L59","name":"Lean.Elab.Tactic.GuardExpr.MatchKind.isEq","line":56,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.isEq","doc":"Applies the selected matching rule to two expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.isEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span>.<span class=\"name\">isEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">Lean.Elab.Tactic.GuardExpr.MatchKind</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L48-L53","name":"Lean.Elab.Tactic.GuardExpr.equal.toMatchKind","line":48,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.equal.toMatchKind","doc":"Converts a `equal` syntax into a `MatchKind` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.equal.toMatchKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">equal</span>.<span class=\"name\">toMatchKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.equal</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">Lean.Elab.Tactic.GuardExpr.MatchKind</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L40-L45","name":"Lean.Elab.Tactic.GuardExpr.colonEq.toMatchKind","line":40,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.colonEq.toMatchKind","doc":"Converts a `colonEq` syntax into a `MatchKind` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.colonEq.toMatchKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">colonEq</span>.<span class=\"name\">toMatchKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.colonEq</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">Lean.Elab.Tactic.GuardExpr.MatchKind</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L32-L37","name":"Lean.Elab.Tactic.GuardExpr.colon.toMatchKind","line":32,"kind":"def","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.colon.toMatchKind","doc":"Converts a `colon` syntax into a `MatchKind` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.colon.toMatchKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">colon</span>.<span class=\"name\">toMatchKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.colon</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">Lean.Elab.Tactic.GuardExpr.MatchKind</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L26-L27","name":"Lean.Elab.Tactic.GuardExpr.MatchKind.alphaEq","line":26,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.alphaEq","doc":"An alpha-eq match means that `Expr.eqv` returns true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.alphaEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span>.<span class=\"name\">alphaEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">Lean.Elab.Tactic.GuardExpr.MatchKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L24-L25","name":"Lean.Elab.Tactic.GuardExpr.MatchKind.defEq","line":24,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.defEq","doc":"A defeq match `isDefEqGuarded` returns true. (Note that unification is allowed here.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.defEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span>.<span class=\"name\">defEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(red : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.reducible\">Lean.Meta.TransparencyMode.reducible</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">Lean.Elab.Tactic.GuardExpr.MatchKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L22-L23","name":"Lean.Elab.Tactic.GuardExpr.MatchKind.syntactic","line":22,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.syntactic","doc":"A syntactic match means that the `Expr`s are `==` after stripping `MData` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.syntactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span>.<span class=\"name\">syntactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">Lean.Elab.Tactic.GuardExpr.MatchKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Elab/Tactic/Guard.lean#L21-L27","name":"Lean.Elab.Tactic.GuardExpr.MatchKind","line":21,"kind":"inductive","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind","doc":"The various `guard_*` tactics have similar matching specifiers for how equal expressions\nhave to be to pass the tactic.\nThis inductive gives the different specifiers that can be selected.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}