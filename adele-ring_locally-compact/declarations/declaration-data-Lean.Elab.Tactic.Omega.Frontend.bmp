{"name":"Lean.Elab.Tactic.Omega.Frontend","instances":[{"typeNames":["Lean.Elab.Tactic.Omega.MetaProblem"],"name":"Lean.Elab.Tactic.Omega.MetaProblem.instInhabitedMetaProblem","className":"Inhabited"}],"imports":["Lean.Elab.Tactic.Omega.Core","Lean.Elab.Tactic.FalseOrByContra","Lean.Meta.Tactic.Cases","Lean.Elab.Tactic.Config"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L611-L613","name":"Lean.Elab.Tactic.Omega.bvOmegaSimpExtension","line":611,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.bvOmegaSimpExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.bvOmegaSimpExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">bvOmegaSimpExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Lean.Meta.SimpExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L605-L609","name":"Lean.Elab.Tactic.Omega.evalOmega","line":605,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.evalOmega","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.evalOmega\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">evalOmega</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L602-L602","name":"Lean.Elab.Tactic.Omega.omegaDefault","line":602,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaDefault","doc":"The `omega` tactic, for resolving integer and natural linear arithmetic problems. This\n`TacticM Unit` frontend with default configuration can be used as an Aesop rule, for example via\nthe tactic call `aesop (add 50% tactic Lean.Omega.omegaDefault)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omegaDefault</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L590-L597","name":"Lean.Elab.Tactic.Omega.omegaTactic","line":590,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaTactic","doc":"The `omega` tactic, for resolving integer and natural linear arithmetic problems. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omegaTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L584-L585","name":"Lean.Elab.Tactic.Omega.omega","line":584,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omega","doc":"Given a collection of facts, try prove `False` using the omega algorithm,\nand close the goal using that.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omega\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omega</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(facts : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cfg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">splitDisjunctions</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">splitNatSub</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">splitNatAbs</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">splitMinMax</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L562-L576","name":"Lean.Elab.Tactic.Omega.omegaImpl","line":562,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaImpl","doc":"Implementation of the `omega` algorithm, and handling disjunctions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omegaImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L536-L559","name":"Lean.Elab.Tactic.Omega.splitDisjunction","line":536,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.splitDisjunction","doc":"Split a disjunction in a `MetaProblem`, and if we find a new usable fact\ncall `omegaImpl` in both branches.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.splitDisjunction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">splitDisjunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L517-L527","name":"Lean.Elab.Tactic.Omega.cases₂","line":517,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.cases₂","doc":"Given `p : P ∨ Q` (or any inductive type with two one-argument constructors),\nsplit the goal into two subgoals:\none containing the hypothesis `h : P` and another containing `h : Q`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.cases₂\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">cases₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hName : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <span class=\"fn\">`h</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L497-L508","name":"Lean.Elab.Tactic.Omega.MetaProblem.processFacts","line":497,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processFacts","doc":"Process all the facts in a `MetaProblem`, returning the new problem, and the number of new facts.\n\nThis is partial because new facts may be generated along the way.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">processFacts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L412-L490","name":"Lean.Elab.Tactic.Omega.MetaProblem.addFact","line":412,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addFact","doc":"Parse an `Expr` and extract facts, also returning the number of new facts found.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">addFact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L359-L407","name":"Lean.Elab.Tactic.Omega.MetaProblem.pushNot","line":359,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.pushNot","doc":"Given a fact `h` with type `¬ P`, return a more useful fact obtained by pushing the negation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.pushNot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">pushNot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L347-L356","name":"Lean.Elab.Tactic.Omega.MetaProblem.addIntInequality","line":347,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntInequality","doc":"Add an integer inequality to the `Problem`.\n\nWe solve equalities as they are discovered, as this often results in an earlier contradiction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntInequality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">addIntInequality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L331-L340","name":"Lean.Elab.Tactic.Omega.MetaProblem.addIntEquality","line":331,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntEquality","doc":"Add an integer equality to the `Problem`.\n\nWe solve equalities as they are discovered, as this often results in an earlier contradiction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntEquality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">addIntEquality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L324-L324","name":"Lean.Elab.Tactic.Omega.MetaProblem.instInhabitedMetaProblem","line":324,"kind":"instance","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.instInhabitedMetaProblem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.instInhabitedMetaProblem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">instInhabitedMetaProblem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L321-L322","name":"Lean.Elab.Tactic.Omega.MetaProblem.trivial","line":321,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.trivial","doc":"The trivial `MetaProblem`, with no facts to processs and a trivial `Problem`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.trivial\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">trivial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L287-L315","name":"Lean.Elab.Tactic.Omega.asLinearComboImpl.handleFinVal","line":287,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.handleFinVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.handleFinVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearComboImpl</span>.<span class=\"name\">handleFinVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Lean.Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L244-L286","name":"Lean.Elab.Tactic.Omega.asLinearComboImpl.handleNatCast","line":244,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.handleNatCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.handleNatCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearComboImpl</span>.<span class=\"name\">handleNatCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Lean.Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L236-L243","name":"Lean.Elab.Tactic.Omega.asLinearComboImpl.rewrite","line":236,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.rewrite","doc":"Apply a rewrite rule to an expression, and interpret the result as a `LinearCombo`.\n(We're not rewriting any subexpressions here, just the top level, for efficiency.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.rewrite\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearComboImpl</span>.<span class=\"name\">rewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rw : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Lean.Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L123-L315","name":"Lean.Elab.Tactic.Omega.asLinearComboImpl","line":123,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl","doc":"Translates an expression into a `LinearCombo`.\nAlso returns:\n* a proof that this linear combo evaluated at the atoms is equal to the original expression\n* a list of new facts which should be recorded:\n  * for each new atom `a` of the form `((x : Nat) : Int)`, the fact that `0 ≤ a`\n  * for each new atom `a` of the form `x / k`, for `k` a positive numeral, the facts that\n    `k * a ≤ x < (k + 1) * a`\n  * for each new atom of the form `((a - b : Nat) : Int)`, the fact:\n    `b ≤ a ∧ ((a - b : Nat) : Int) = a - b ∨ a < b ∧ ((a - b : Nat) : Int) = 0`\n\nWe also transform the expression as we descend into it:\n* pushing coercions: `↑(x + y)`, `↑(x * y)`, `↑(x / k)`, `↑(x % k)`, `↑k`\n* unfolding `emod`: `x % k` → `x - x / k`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearComboImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Lean.Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L97-L106","name":"Lean.Elab.Tactic.Omega.asLinearCombo","line":97,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearCombo","doc":"Wrapper for `asLinearComboImpl`,\nusing a cache for previously visited expressions.\n\nGives a small (10%) speedup in testing.\nI tried using a pointer based cache,\nbut there was never enough subexpression sharing to make it effective.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearCombo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearCombo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Lean.Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L83-L85","name":"Lean.Elab.Tactic.Omega.mkAtomLinearCombo","line":83,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkAtomLinearCombo","doc":"Construct the linear combination (and its associated proof and new facts) for an atom. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkAtomLinearCombo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkAtomLinearCombo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Lean.Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L69-L80","name":"Lean.Elab.Tactic.Omega.mkCoordinateEvalAtomsEq","line":69,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkCoordinateEvalAtomsEq","doc":"If `e : Expr` is the `n`-th atom, construct the proof that\n`e = (coordinate n).eval atoms`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkCoordinateEvalAtomsEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkCoordinateEvalAtomsEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L64-L65","name":"Lean.Elab.Tactic.Omega.mkEvalRflProof","line":64,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkEvalRflProof","doc":"Construct the `rfl` proof that `lc.eval atoms = e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkEvalRflProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkEvalRflProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lc : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Lean.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L61-L61","name":"Lean.Elab.Tactic.Omega.MetaProblem.processedFacts","line":61,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processedFacts","doc":"Facts which have already been processed; we keep these to avoid duplicates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processedFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">processedFacts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L59-L59","name":"Lean.Elab.Tactic.Omega.MetaProblem.disjunctions","line":59,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.disjunctions","doc":"Pending disjunctions, which we will case split one at a time if we can't get a contradiction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.disjunctions\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">disjunctions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L55-L55","name":"Lean.Elab.Tactic.Omega.MetaProblem.facts","line":55,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.facts","doc":"Pending facts which have not been processed yet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.facts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">facts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L53-L53","name":"Lean.Elab.Tactic.Omega.MetaProblem.problem","line":53,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.problem","doc":"An integer linear arithmetic problem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.problem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">problem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Lean.Elab.Tactic.Omega.Problem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L51-L51","name":"Lean.Elab.Tactic.Omega.MetaProblem.mk","line":51,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(problem : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Lean.Elab.Tactic.Omega.Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(facts : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(disjunctions : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(processedFacts : <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">Lean.Elab.Tactic.Omega.MetaProblem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L51-L61","name":"Lean.Elab.Tactic.Omega.MetaProblem","line":51,"kind":"structure","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem","doc":"A partially processed `omega` context.\n\nWe have:\n* a `Problem` representing the integer linear constraints extracted so far, and their proofs\n* the unprocessed `facts : List Expr` taken from the local context,\n* the unprocessed `disjunctions : List Expr`,\n  which will only be split one at a time if we can't otherwise find a contradiction.\n\nWe begin with `facts := ← getLocalHyps` and `problem := .trivial`,\nand progressively process the facts.\n\nAs we process the facts, we may generate additional facts\n(e.g. about coercions and integer divisions).\nTo avoid duplicates, we maintain a `HashSet` of previously processed facts.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L28-L33","name":"Lean.Elab.Tactic.Omega.succ?","line":28,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.succ?","doc":"Match on the two defeq expressions for successor: `n+1`, `n.succ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.succ?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">succ?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/Frontend.lean#L22-L25","name":"Lean.Elab.Tactic.Omega.elabOmegaConfig","line":22,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.elabOmegaConfig","doc":"Allow elaboration of `OmegaConfig` arguments to tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.elabOmegaConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">elabOmegaConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a></span></span></div></div>"}]}