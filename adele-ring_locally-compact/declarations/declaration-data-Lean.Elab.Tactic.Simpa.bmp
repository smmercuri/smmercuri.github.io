{"name":"Lean.Elab.Tactic.Simpa","instances":[{"typeNames":["Lean.Elab.Term.UseImplicitLambdaResult"],"name":"Std.Tactic.Simpa.instReprUseImplicitLambdaResult","className":"Repr"}],"imports":["Lean.Meta.Tactic.Assumption","Lean.Meta.Tactic.TryThis","Lean.Elab.Tactic.Simp","Lean.Linter.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Simpa.lean#L31-L88","name":"Std.Tactic.Simpa.evalSimpa","line":31,"kind":"def","docLink":"./Lean/Elab/Tactic/Simpa.html#Std.Tactic.Simpa.evalSimpa","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simpa.html#Std.Tactic.Simpa.evalSimpa\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simpa</span>.<span class=\"name\">evalSimpa</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Simpa.lean#L29-L29","name":"Std.Tactic.Simpa.instReprUseImplicitLambdaResult","line":29,"kind":"instance","docLink":"./Lean/Elab/Tactic/Simpa.html#Std.Tactic.Simpa.instReprUseImplicitLambdaResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simpa.html#Std.Tactic.Simpa.instReprUseImplicitLambdaResult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simpa</span>.<span class=\"name\">instReprUseImplicitLambdaResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult\">Lean.Elab.Term.UseImplicitLambdaResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Simpa.lean#L26-L27","name":"Std.Tactic.Simpa.getLinterUnnecessarySimpa","line":26,"kind":"def","docLink":"./Lean/Elab/Tactic/Simpa.html#Std.Tactic.Simpa.getLinterUnnecessarySimpa","doc":"Gets the value of the `linter.unnecessarySimpa` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simpa.html#Std.Tactic.Simpa.getLinterUnnecessarySimpa\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simpa</span>.<span class=\"name\">getLinterUnnecessarySimpa</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Simpa.lean#L12-L19","name":"linter.unnecessarySimpa","line":12,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Simpa.html#linter.unnecessarySimpa","doc":"Enables the 'unnecessary `simpa`' linter. This will report if a use of\n`simpa` could be proven using `simp` or `simp at h` instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simpa.html#linter.unnecessarySimpa\"><span class=\"name\">linter</span>.<span class=\"name\">unnecessarySimpa</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}