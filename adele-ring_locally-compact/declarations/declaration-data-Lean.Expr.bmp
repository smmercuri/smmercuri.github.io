{"name":"Lean.Expr","instances":[{"typeNames":["Lean.Literal"],"name":"Lean.instInhabitedLiteral","className":"Inhabited"},{"typeNames":["Lean.Literal"],"name":"Lean.instBEqLiteral","className":"BEq"},{"typeNames":["Lean.Literal"],"name":"Lean.instReprLiteral","className":"Repr"},{"typeNames":["Lean.Literal"],"name":"Lean.instHashableLiteral","className":"Hashable"},{"typeNames":["Lean.Literal"],"name":"Lean.instLTLiteral","className":"LT"},{"typeNames":["LT.lt"],"name":"Lean.instDecidableLtLiteral","className":"Decidable"},{"typeNames":["Lean.BinderInfo"],"name":"Lean.instInhabitedBinderInfo","className":"Inhabited"},{"typeNames":["Lean.BinderInfo"],"name":"Lean.instBEqBinderInfo","className":"BEq"},{"typeNames":["Lean.BinderInfo"],"name":"Lean.instReprBinderInfo","className":"Repr"},{"typeNames":["Lean.BinderInfo"],"name":"Lean.instHashableBinderInfo","className":"Hashable"},{"typeNames":["Lean.Expr.Data"],"name":"Lean.instInhabitedData_1","className":"Inhabited"},{"typeNames":["Lean.Expr.Data"],"name":"Lean.instBEqData_1","className":"BEq"},{"typeNames":["Lean.Expr.Data"],"name":"Lean.instReprData_1","className":"Repr"},{"typeNames":["Lean.FVarId"],"name":"Lean.instInhabitedFVarId","className":"Inhabited"},{"typeNames":["Lean.FVarId"],"name":"Lean.instBEqFVarId","className":"BEq"},{"typeNames":["Lean.FVarId"],"name":"Lean.instHashableFVarId","className":"Hashable"},{"typeNames":["Lean.FVarId"],"name":"Lean.instReprFVarId","className":"Repr"},{"typeNames":["Lean.FVarIdSet","Lean.FVarId"],"name":"Lean.instForInFVarIdSetFVarId","className":"ForIn"},{"typeNames":["Lean.FVarIdMap"],"name":"Lean.instEmptyCollectionFVarIdMap","className":"EmptyCollection"},{"typeNames":["Lean.FVarIdMap"],"name":"Lean.instInhabitedFVarIdMap","className":"Inhabited"},{"typeNames":["Lean.MVarId"],"name":"Lean.instInhabitedMVarId","className":"Inhabited"},{"typeNames":["Lean.MVarId"],"name":"Lean.instBEqMVarId","className":"BEq"},{"typeNames":["Lean.MVarId"],"name":"Lean.instHashableMVarId","className":"Hashable"},{"typeNames":["Lean.MVarId"],"name":"Lean.instReprMVarId","className":"Repr"},{"typeNames":["Lean.MVarId"],"name":"Lean.instReprMVarId_1","className":"Repr"},{"typeNames":["Lean.MVarIdSet","Lean.MVarId"],"name":"Lean.instForInMVarIdSetMVarId","className":"ForIn"},{"typeNames":["Lean.MVarIdMap"],"name":"Lean.instEmptyCollectionMVarIdMap","className":"EmptyCollection"},{"typeNames":["Lean.MVarIdMap","Prod"],"name":"Lean.instForInMVarIdMapProdMVarId","className":"ForIn"},{"typeNames":["Lean.MVarIdMap"],"name":"Lean.instInhabitedMVarIdMap","className":"Inhabited"},{"typeNames":["Lean.Expr"],"name":"Lean.instInhabitedExpr","className":"Inhabited"},{"typeNames":["Lean.Expr"],"name":"Lean.instReprExpr","className":"Repr"},{"typeNames":["Lean.Expr"],"name":"Lean.Expr.instHashable","className":"Hashable"},{"typeNames":["Lean.Expr"],"name":"Lean.Expr.instBEq","className":"BEq"},{"typeNames":["Lean.Expr"],"name":"Lean.Expr.instToString","className":"ToString"},{"typeNames":["Lean.ExprStructEq"],"name":"Lean.instInhabitedExprStructEq","className":"Inhabited"},{"typeNames":["Lean.Expr","Lean.ExprStructEq"],"name":"Lean.instCoeExprExprStructEq","className":"Coe"},{"typeNames":["Lean.ExprStructEq"],"name":"Lean.ExprStructEq.instBEq","className":"BEq"},{"typeNames":["Lean.ExprStructEq"],"name":"Lean.ExprStructEq.instHashable","className":"Hashable"},{"typeNames":["Lean.ExprStructEq"],"name":"Lean.ExprStructEq.instToString","className":"ToString"}],"imports":["Init.Data.Hashable","Lean.Data.KVMap","Lean.Data.SMap","Lean.Level"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2093-L2094","name":"Lean.mkNatEq","line":2093,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkNatEq","doc":"Given `a b : Nat`, return `a = b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkNatEq\"><span class=\"name\">Lean</span>.<span class=\"name\">mkNatEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2086-L2087","name":"Lean.mkNatLE","line":2086,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkNatLE","doc":"Given `a b : Nat`, return `a ≤ b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkNatLE\"><span class=\"name\">Lean</span>.<span class=\"name\">mkNatLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2079-L2080","name":"Lean.mkNatMul","line":2079,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkNatMul","doc":"Given `a b : Nat`, returns `a * b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkNatMul\"><span class=\"name\">Lean</span>.<span class=\"name\">mkNatMul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2075-L2076","name":"Lean.mkNatSub","line":2075,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkNatSub","doc":"Given `a b : Nat`, returns `a - b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkNatSub\"><span class=\"name\">Lean</span>.<span class=\"name\">mkNatSub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2071-L2072","name":"Lean.mkNatAdd","line":2071,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkNatAdd","doc":"Given `a b : Nat`, returns `a + b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkNatAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">mkNatAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2067-L2068","name":"Lean.mkNatSucc","line":2067,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkNatSucc","doc":"Given `a : Nat`, returns `Nat.succ a` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkNatSucc\"><span class=\"name\">Lean</span>.<span class=\"name\">mkNatSucc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2050-L2050","name":"Lean.Nat.mkInstLE","line":2050,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstLE\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2049-L2049","name":"Lean.Nat.mkInstLT","line":2049,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstLT\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2047-L2047","name":"Lean.Nat.mkInstHPow","line":2047,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstHPow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstHPow\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstHPow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2046-L2046","name":"Lean.Nat.mkInstPow","line":2046,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstPow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstPow\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstPow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2045-L2045","name":"Lean.Nat.mkInstNatPow","line":2045,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstNatPow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstNatPow\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstNatPow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2043-L2043","name":"Lean.Nat.mkInstHMod","line":2043,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstHMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstHMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstHMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2042-L2042","name":"Lean.Nat.mkInstMod","line":2042,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2040-L2040","name":"Lean.Nat.mkInstHDiv","line":2040,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstHDiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstHDiv\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstHDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2039-L2039","name":"Lean.Nat.mkInstDiv","line":2039,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstDiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstDiv\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2037-L2037","name":"Lean.Nat.mkInstHMul","line":2037,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstHMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstHMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstHMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2036-L2036","name":"Lean.Nat.mkInstMul","line":2036,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2034-L2034","name":"Lean.Nat.mkInstHSub","line":2034,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstHSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstHSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstHSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2033-L2033","name":"Lean.Nat.mkInstSub","line":2033,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2031-L2031","name":"Lean.Nat.mkInstHAdd","line":2031,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstHAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2030-L2030","name":"Lean.Nat.mkInstAdd","line":2030,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkInstAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkInstAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkInstAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2028-L2028","name":"Lean.Nat.mkType","line":2028,"kind":"def","docLink":"./Lean/Expr.html#Lean.Nat.mkType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Nat.mkType\"><span class=\"name\">Lean</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mkType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2023-L2023","name":"Lean.mkIff","line":2023,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkIff","doc":"Return `p ↔ q` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkIff\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2021-L2021","name":"Lean.mkEM","line":2021,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkEM","doc":"Return `Classical.em p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkEM\"><span class=\"name\">Lean</span>.<span class=\"name\">mkEM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2016-L2019","name":"Lean.mkAndN","line":2016,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkAndN","doc":"Make an n-ary `And` application. `mkAndN []` returns `True`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkAndN\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAndN</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2014-L2014","name":"Lean.mkAnd","line":2014,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkAnd","doc":"Return `p ∧ q` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkAnd\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2012-L2012","name":"Lean.mkOr","line":2012,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkOr","doc":"Return `p ∨ q` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkOr\"><span class=\"name\">Lean</span>.<span class=\"name\">mkOr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2010-L2010","name":"Lean.mkNot","line":2010,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkNot","doc":"Return `Not p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkNot\"><span class=\"name\">Lean</span>.<span class=\"name\">mkNot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L2006-L2007","name":"Lean.mkFreshLMVarId","line":2006,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkFreshLMVarId","doc":"Polymorphic operation for generating unique/fresh universe metavariable identifiers.\nIt is available in any monad `m` that implements the interface `MonadNameGenerator`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkFreshLMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">mkFreshLMVarId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1999-L2000","name":"Lean.mkFreshMVarId","line":1999,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkFreshMVarId","doc":"Polymorphic operation for generating unique/fresh metavariable identifiers.\nIt is available in any monad `m` that implements the interface `MonadNameGenerator`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkFreshMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">mkFreshMVarId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1992-L1993","name":"Lean.mkFreshFVarId","line":1992,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkFreshFVarId","doc":"Polymorphic operation for generating unique/fresh free variable identifiers.\nIt is available in any monad `m` that implements the interface `MonadNameGenerator`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkFreshFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">mkFreshFVarId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1979-L1986","name":"Lean.isLHSGoal?","line":1979,"kind":"def","docLink":"./Lean/Expr.html#Lean.isLHSGoal?","doc":"Return `some lhs` if `e = mkLHSGoal e'`, where `e'` is of the form `lhs = rhs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.isLHSGoal?\"><span class=\"name\">Lean</span>.<span class=\"name\">isLHSGoal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1975-L1976","name":"Lean.mkLHSGoalRaw","line":1975,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkLHSGoalRaw","doc":"Annotate `e` with the LHS annotation. The delaborator displays\nexpressions of the form `lhs = rhs` as `lhs` when they have this annotation.\nThis is used to implement the infoview for the `conv` mode.\n\nThis version of `mkLHSGoal` does not check that the argument is an equality.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkLHSGoalRaw\"><span class=\"name\">Lean</span>.<span class=\"name\">mkLHSGoalRaw</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1960-L1966","name":"Lean.patternAnnotation?","line":1960,"kind":"def","docLink":"./Lean/Expr.html#Lean.patternAnnotation?","doc":"Return `some p` if `e` is an annotated pattern (`inaccessible?` or `patternWithRef?`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.patternAnnotation?\"><span class=\"name\">Lean</span>.<span class=\"name\">patternAnnotation?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1953-L1957","name":"Lean.mkPatternWithRef","line":1953,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkPatternWithRef","doc":"Annotate the pattern `p` with `stx`. This is an auxiliary annotation\nfor producing better hover information.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkPatternWithRef\"><span class=\"name\">Lean</span>.<span class=\"name\">mkPatternWithRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1946-L1947","name":"Lean.isPatternWithRef","line":1946,"kind":"def","docLink":"./Lean/Expr.html#Lean.isPatternWithRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.isPatternWithRef\"><span class=\"name\">Lean</span>.<span class=\"name\">isPatternWithRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1938-L1944","name":"Lean.patternWithRef?","line":1938,"kind":"def","docLink":"./Lean/Expr.html#Lean.patternWithRef?","doc":"During elaboration expressions corresponding to pattern matching terms\nare annotated with `Syntax` objects. This function returns `some (stx, p')` if\n`p` is the pattern `p'` annotated with `stx`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.patternWithRef?\"><span class=\"name\">Lean</span>.<span class=\"name\">patternWithRef?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1928-L1929","name":"Lean.inaccessible?","line":1928,"kind":"def","docLink":"./Lean/Expr.html#Lean.inaccessible?","doc":"Return `some e'` if `e = mkInaccessible e'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.inaccessible?\"><span class=\"name\">Lean</span>.<span class=\"name\">inaccessible?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1924-L1925","name":"Lean.mkInaccessible","line":1924,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkInaccessible","doc":"Auxiliary annotation used to mark terms marked with the \"inaccessible\" annotation `.(t)` and\n`_` in patterns.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkInaccessible\"><span class=\"name\">Lean</span>.<span class=\"name\">mkInaccessible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1915-L1918","name":"Lean.annotation?","line":1915,"kind":"def","docLink":"./Lean/Expr.html#Lean.annotation?","doc":"Return `some e'` if `e = mkAnnotation kind e'`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.annotation?\"><span class=\"name\">Lean</span>.<span class=\"name\">annotation?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1909-L1910","name":"Lean.mkAnnotation","line":1909,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkAnnotation","doc":"Annotate `e` with the given annotation name `kind`.\nIt uses metadata to store the annotation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkAnnotation\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAnnotation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1900-L1901","name":"Lean.Expr.foldlM","line":1900,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.foldlM","doc":"`e.foldlM f a` folds the monadic function `f` over the subterms of the expression `e`,\nwith initial value `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.foldlM\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1889-L1896","name":"Lean.Expr.traverseChildren","line":1889,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.traverseChildren","doc":"Maps `f` on each immediate child of the given expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.traverseChildren\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">traverseChildren</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1875-L1885","name":"Lean.Expr.letFunAppArgs?","line":1875,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.letFunAppArgs?","doc":"Like `Lean.Expr.letFun?`, but handles the case when the `let_fun` expression is possibly applied to additional arguments.\nReturns those arguments in addition to the values returned by `letFun?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.letFunAppArgs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">letFunAppArgs?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1863-L1869","name":"Lean.Expr.letFun?","line":1863,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.letFun?","doc":"Recognizes a `let_fun` expression.\nFor `let_fun n : t := v; b`, returns `some (n, t, v, b)`, which are the first four arguments to `Lean.Expr.letE`.\nWarning: if the `let_fun` is applied to additional arguments (such as in `(let_fun f := id; id) 1`), this function returns `none`.\n\n`let_fun` expressions are encoded as `letFun v (fun (n : t) => b)`.\nThey can be created using `Lean.Meta.mkLetFun`.\n\nIf in the encoding of `let_fun` the last argument to `letFun` is eta reduced, this returns `Name.anonymous` for the binder name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.letFun?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">letFun?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1851-L1851","name":"Lean.Expr.isLetFun","line":1851,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isLetFun","doc":"Returns true if `e` is a `let_fun` expression, which is an expression of the form `letFun v f`.\nIdeally `f` is a lambda, but we do not require that here.\nWarning: if the `let_fun` is applied to additional arguments (such as in `(let_fun f := id; id) 1`), this function returns `false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isLetFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isLetFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1838-L1844","name":"Lean.Expr.setAppPPExplicitForExposingMVars","line":1838,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.setAppPPExplicitForExposingMVars","doc":"Similar for `setAppPPExplicit`, but only annotate children with `pp.explicit := false` if\n`e` does not contain metavariables.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.setAppPPExplicitForExposingMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">setAppPPExplicitForExposingMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1826-L1832","name":"Lean.Expr.setAppPPExplicit","line":1826,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.setAppPPExplicit","doc":"If `e` is an application `f a_1 ... a_n` annotate `f`, `a_1` ... `a_n` with `pp.explicit := false`,\nand annotate `e` with `pp.explicit := true`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.setAppPPExplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">setAppPPExplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1819-L1820","name":"Lean.Expr.setPPUniverses","line":1819,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.setPPUniverses","doc":"Annotate `e` with `pp.universes := flag`\nThe delaborator uses `pp` options.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.setPPUniverses\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">setPPUniverses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(flag : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1812-L1813","name":"Lean.Expr.setPPExplicit","line":1812,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.setPPExplicit","doc":"Annotate `e` with `pp.explicit := flag`\nThe delaborator uses `pp` options.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.setPPExplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">setPPExplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(flag : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1805-L1806","name":"Lean.Expr.setOption","line":1805,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.setOption","doc":"Annotate `e` with the given option.\nThe information is stored using metadata around `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.setOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">setOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(optionName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/KVMap.html#Lean.KVMap.Value\">Lean.KVMap.Value</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1788-L1799","name":"Lean.Expr.eta","line":1788,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.eta","doc":"Eta reduction. If `e` is of the form `(fun x => f x)`, then return `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.eta\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1781-L1783","name":"Lean.Expr.updateFn","line":1781,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1776-L1779","name":"Lean.Expr.updateLet!","line":1776,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateLet!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateLet!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateLet!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newVal : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newBody : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1761-L1764","name":"Lean.Expr.updateLambdaE!","line":1761,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateLambdaE!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateLambdaE!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateLambdaE!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newDomain : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newBody : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1756-L1759","name":"Lean.Expr.updateLambda!","line":1756,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateLambda!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateLambda!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateLambda!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newBinfo : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newDomain : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newBody : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1741-L1744","name":"Lean.Expr.updateForallE!","line":1741,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateForallE!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateForallE!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateForallE!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newDomain : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newBody : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1736-L1739","name":"Lean.Expr.updateForall!","line":1736,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateForall!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateForall!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateForall!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newBinfo : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newDomain : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newBody : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1721-L1724","name":"Lean.Expr.updateProj!","line":1721,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateProj!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateProj!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateProj!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newExpr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1710-L1713","name":"Lean.Expr.updateMData!","line":1710,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateMData!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateMData!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateMData!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newExpr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1699-L1702","name":"Lean.Expr.updateSort!","line":1699,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateSort!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateSort!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateSort!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newLevel : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1688-L1691","name":"Lean.Expr.updateConst!","line":1688,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateConst!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateConst!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateConst!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newLevels : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1677-L1680","name":"Lean.Expr.updateFVar!","line":1677,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateFVar!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateFVar!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateFVar!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarIdNew : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1672-L1675","name":"Lean.Expr.updateApp!","line":1672,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.updateApp!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.updateApp!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">updateApp!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newFn : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newArg : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1657-L1658","name":"Lean.Expr.containsFVar","line":1657,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.containsFVar","doc":"Return `true` if `e` contains the given free variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.containsFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">containsFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1644-L1653","name":"Lean.Expr.hasAnyFVar.visit","line":1644,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasAnyFVar.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasAnyFVar.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasAnyFVar</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1643-L1654","name":"Lean.Expr.hasAnyFVar","line":1643,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasAnyFVar","doc":"Return true iff `e` contains a free variable which satisfies `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasAnyFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasAnyFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1635-L1640","name":"Lean.Expr.int?","line":1635,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.int?","doc":"Checks if an expression is an \"integer numeral in normal form\",\ni.e. of type `Nat` or `Int`, and either a natural number numeral in normal form (as specified by `nat?`),\nor the negation of a positive natural number numberal in normal form,\nand if so returns the integer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.int?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">int?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1624-L1627","name":"Lean.Expr.nat?","line":1624,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.nat?","doc":"Checks if an expression is a \"natural number numeral in normal form\",\ni.e. of type `Nat`, and explicitly of the form `OfNat.ofNat n`\nwhere `n` matches `.lit (.natVal n)` for some literal natural number `n`.\nand if so returns `n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.nat?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">nat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1614-L1615","name":"Lean.Expr.isTrue","line":1614,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isTrue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1611-L1612","name":"Lean.Expr.isFalse","line":1611,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isFalse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1607-L1609","name":"Lean.Expr.appFnCleanup","line":1607,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.appFnCleanup","doc":"Similar to `appFn`, but also applies `cleanupAnnotations` to resulting function.\nThis function is used compile the `match_expr` term.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.appFnCleanup\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">appFnCleanup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.isApp</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1599-L1601","name":"Lean.Expr.cleanupAnnotations","line":1599,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.cleanupAnnotations","doc":"Remove metadata annotations and `outParam`, `optParam`, and `autoParam` applications/annotations from `e`.\nNote that it does not remove nested annotations.\nExamples:\n- Given `e` of the form `outParam (optParam Nat b)`, `cleanupAnnotations e = b`.\n- Given `e` of the form `Nat → outParam (optParam Nat b)`, `cleanupAnnotations e = e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.cleanupAnnotations\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">cleanupAnnotations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1584-L1590","name":"Lean.Expr.consumeTypeAnnotations","line":1584,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.consumeTypeAnnotations","doc":"Remove `outParam`, `optParam`, and `autoParam` applications/annotations from `e`.\nNote that it does not remove nested annotations.\nExamples:\n- Given `e` of the form `outParam (optParam Nat b)`, `consumeTypeAnnotations e = b`.\n- Given `e` of the form `Nat → outParam (optParam Nat b)`, `consumeTypeAnnotations e = e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.consumeTypeAnnotations\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">consumeTypeAnnotations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1573-L1574","name":"Lean.Expr.isAutoParam","line":1573,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isAutoParam","doc":"Return `true` if `e` is of the form `autoParam _ _` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isAutoParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isAutoParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1569-L1570","name":"Lean.Expr.isOptParam","line":1569,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isOptParam","doc":"Return `true` if `e` is of the form `optParam _ _` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isOptParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isOptParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1565-L1566","name":"Lean.Expr.isSemiOutParam","line":1565,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isSemiOutParam","doc":"Return `true` if `e` is of the form `semiOutParam _` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isSemiOutParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isSemiOutParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1561-L1562","name":"Lean.Expr.isOutParam","line":1561,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isOutParam","doc":"Return `true` if `e` is of the form `outParam _` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isOutParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isOutParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1553-L1557","name":"Lean.Expr.getAutoParamTactic?","line":1553,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getAutoParamTactic?","doc":"Return `some e'` if `e` is of the form `autoParam _ e'` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getAutoParamTactic?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAutoParamTactic?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1546-L1550","name":"Lean.Expr.getOptParamDefault?","line":1546,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getOptParamDefault?","doc":"Return `some e'` if `e` is of the form `optParam _ e'` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getOptParamDefault?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getOptParamDefault?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1541-L1543","name":"Lean.Expr.etaExpandedStrict?","line":1541,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.etaExpandedStrict?","doc":"Similar to `etaExpanded?`, but only succeeds if `ₙ ≥ 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.etaExpandedStrict?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">etaExpandedStrict?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1537-L1538","name":"Lean.Expr.etaExpanded?","line":1537,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.etaExpanded?","doc":"If `e` is of the form `(fun x₁ ... xₙ => f x₁ ... xₙ)` and `f` does not contain `x₁`, ..., `xₙ`,\nthen return `some f`. Otherwise, return `none`.\n\nIt assumes `e` does not have loose bound variables.\n\nRemark: `ₙ` may be 0\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.etaExpanded?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">etaExpanded?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1517-L1518","name":"Lean.Expr.isHeadBetaTarget","line":1517,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isHeadBetaTarget","doc":"Return true if the given expression is a target for (head) beta reduction.\nIf `useZeta = true`, then `let`-expressions are visited. That is, it assumes\nthat zeta-reduction (aka let-expansion) is going to be used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isHeadBetaTarget\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isHeadBetaTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useZeta : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1508-L1510","name":"Lean.Expr.headBeta","line":1508,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.headBeta","doc":"`(fun x => e) a` ==> `e[x/a]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.headBeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">headBeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1501-L1505","name":"Lean.Expr.isHeadBetaTargetFn","line":1501,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isHeadBetaTargetFn","doc":"Return true if the given expression is the function of an expression that is target for (head) beta reduction.\nIf `useZeta = true`, then `let`-expressions are visited. That is, it assumes\nthat zeta-reduction (aka let-expansion) is going to be used.\n\nSee `isHeadBetaTarget`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isHeadBetaTargetFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isHeadBetaTargetFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(useZeta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1489-L1492","name":"Lean.Expr.getNumHeadLambdas","line":1489,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getNumHeadLambdas","doc":"Count the number of lambdas at the head of the given expression.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getNumHeadLambdas\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getNumHeadLambdas</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1483-L1484","name":"Lean.Expr.beta","line":1483,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.beta","doc":"Apply the given arguments to `f`, beta-reducing if `f` is a\nlambda expression. See docstring for `betaRev` for examples.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1454-L1476","name":"Lean.Expr.betaRev.go","line":1454,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.betaRev.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.betaRev.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">betaRev</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(revArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useZeta : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(preserveMData : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sz : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1450-L1477","name":"Lean.Expr.betaRev","line":1450,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.betaRev","doc":"If `f` is a lambda expression, than \"beta-reduce\" it using `revArgs`.\nThis function is often used with `getAppRev` or `withAppRev`.\nExamples:\n- `betaRev (fun x y => t x y) #[]` ==> `fun x y => t x y`\n- `betaRev (fun x y => t x y) #[a]` ==> `fun y => t a y`\n- `betaRev (fun x y => t x y) #[a, b]` ==> `t b a`\n- `betaRev (fun x y => t x y) #[a, b, c, d]` ==> `t d c b a`\nSuppose `t` is `(fun x y => t x y) a b c d`, then\n`args := t.getAppRev` is `#[d, c, b, a]`,\nand `betaRev (fun x y => t x y) #[d, c, b, a]` is `t a b c d`.\n\nIf `useZeta` is true, the function also performs zeta-reduction (reduction of let binders) to create further\nopportunities for beta reduction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.betaRev\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">betaRev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(revArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useZeta : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(preserveMData : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1432-L1433","name":"Lean.Expr.mkAppRevRange","line":1432,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.mkAppRevRange","doc":"`mkAppRevRange f b e args == mkAppRev f (revArgs.extract b e)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.mkAppRevRange\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mkAppRevRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(beginIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(endIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(revArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1421-L1421","name":"Lean.PersistentExprStructMap","line":1421,"kind":"def","docLink":"./Lean/Expr.html#Lean.PersistentExprStructMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.PersistentExprStructMap\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentExprStructMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1420-L1420","name":"Lean.ExprStructMap","line":1420,"kind":"def","docLink":"./Lean/Expr.html#Lean.ExprStructMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprStructMap\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprStructMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1416-L1416","name":"Lean.ExprStructEq.instToString","line":1416,"kind":"instance","docLink":"./Lean/Expr.html#Lean.ExprStructEq.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprStructEq.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprStructEq</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">Lean.ExprStructEq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1415-L1415","name":"Lean.ExprStructEq.instHashable","line":1415,"kind":"instance","docLink":"./Lean/Expr.html#Lean.ExprStructEq.instHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprStructEq.instHashable\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprStructEq</span>.<span class=\"name\">instHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">Lean.ExprStructEq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1414-L1414","name":"Lean.ExprStructEq.instBEq","line":1414,"kind":"instance","docLink":"./Lean/Expr.html#Lean.ExprStructEq.instBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprStructEq.instBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprStructEq</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">Lean.ExprStructEq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1411-L1412","name":"Lean.ExprStructEq.hash","line":1411,"kind":"def","docLink":"./Lean/Expr.html#Lean.ExprStructEq.hash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprStructEq.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprStructEq</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprStructEq\">Lean.ExprStructEq</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1408-L1409","name":"Lean.ExprStructEq.beq","line":1408,"kind":"def","docLink":"./Lean/Expr.html#Lean.ExprStructEq.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprStructEq.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprStructEq</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprStructEq\">Lean.ExprStructEq</a> → <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">Lean.ExprStructEq</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1404-L1404","name":"Lean.instCoeExprExprStructEq","line":1404,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instCoeExprExprStructEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instCoeExprExprStructEq\"><span class=\"name\">Lean</span>.<span class=\"name\">instCoeExprExprStructEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">Lean.ExprStructEq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1402-L1402","name":"Lean.instInhabitedExprStructEq","line":1402,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instInhabitedExprStructEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instInhabitedExprStructEq\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedExprStructEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">Lean.ExprStructEq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1401-L1401","name":"Lean.ExprStructEq.val","line":1401,"kind":"def","docLink":"./Lean/Expr.html#Lean.ExprStructEq.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprStructEq.val\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprStructEq</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">Lean.ExprStructEq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1400-L1400","name":"Lean.ExprStructEq.mk","line":1400,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.ExprStructEq.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprStructEq.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprStructEq</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.ExprStructEq\">Lean.ExprStructEq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1400-L1402","name":"Lean.ExprStructEq","line":1400,"kind":"structure","docLink":"./Lean/Expr.html#Lean.ExprStructEq","doc":"Auxiliary type for forcing `==` to be structural equality for `Expr` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprStructEq\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprStructEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1397-L1397","name":"Lean.PExprSet","line":1397,"kind":"def","docLink":"./Lean/Expr.html#Lean.PExprSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.PExprSet\"><span class=\"name\">Lean</span>.<span class=\"name\">PExprSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1396-L1396","name":"Lean.PersistentExprSet","line":1396,"kind":"def","docLink":"./Lean/Expr.html#Lean.PersistentExprSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.PersistentExprSet\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentExprSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1395-L1395","name":"Lean.ExprSet","line":1395,"kind":"def","docLink":"./Lean/Expr.html#Lean.ExprSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprSet\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1393-L1393","name":"Lean.SExprMap","line":1393,"kind":"def","docLink":"./Lean/Expr.html#Lean.SExprMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.SExprMap\"><span class=\"name\">Lean</span>.<span class=\"name\">SExprMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1392-L1392","name":"Lean.PersistentExprMap","line":1392,"kind":"def","docLink":"./Lean/Expr.html#Lean.PersistentExprMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.PersistentExprMap\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentExprMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1391-L1391","name":"Lean.ExprMap","line":1391,"kind":"def","docLink":"./Lean/Expr.html#Lean.ExprMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.ExprMap\"><span class=\"name\">Lean</span>.<span class=\"name\">ExprMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1388-L1389","name":"Lean.mkDecIsFalse","line":1388,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkDecIsFalse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkDecIsFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">mkDecIsFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pred : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1385-L1386","name":"Lean.mkDecIsTrue","line":1385,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkDecIsTrue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkDecIsTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">mkDecIsTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pred : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1374-L1381","name":"Lean.Expr.isAtomic","line":1374,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isAtomic","doc":"Returns true when the expression does not have any sub-expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isAtomic\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isAtomic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1370-L1371","name":"Lean.Expr.instToString","line":1370,"kind":"instance","docLink":"./Lean/Expr.html#Lean.Expr.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1367-L1368","name":"Lean.Expr.replaceFVars","line":1367,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.replaceFVars","doc":"Replace occurrences of the free variables `fvars` in `e` with `vs` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.replaceFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">replaceFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1363-L1364","name":"Lean.Expr.replaceFVarId","line":1363,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.replaceFVarId","doc":"Replace occurrences of the free variable `fvarId` in `e` with `v` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.replaceFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">replaceFVarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1359-L1360","name":"Lean.Expr.replaceFVar","line":1359,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.replaceFVar","doc":"Replace occurrences of the free variable `fvar` in `e` with `v` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.replaceFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">replaceFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1356-L1356","name":"Lean.Expr.abstractRange","line":1356,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.abstractRange","doc":"Similar to `abstract`, but consider only the first `min n xs.size` entries in `xs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.abstractRange\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">abstractRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1352-L1352","name":"Lean.Expr.abstract","line":1352,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.abstract","doc":"Replace free (or meta) variables `xs` with loose bound variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.abstract\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">abstract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1348-L1348","name":"Lean.Expr.instantiateRevRange","line":1348,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.instantiateRevRange","doc":"Similar to `Lean.Expr.instantiateRev`, but considers only the substitutions `subst` in the range `[beginIdx, endIdx)`.\nFunction panics if `beginIdx <= endIdx <= subst.size` does not hold.\n\nThis function is equivalent to `instantiateRev e (subst.extract beginIdx endIdx)`, but it does not allocate a new array.\n\nThis instantiates with the \"forwards\" indexing scheme (see the docstring for `Lean.Expr.instantiateRev` for an example).\nSee also `Lean.Expr.instantiateRange`, which instantiates with the \"backwards\" indexing scheme.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.instantiateRevRange\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">instantiateRevRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(beginIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(endIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subst : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1336-L1336","name":"Lean.Expr.instantiateRange","line":1336,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.instantiateRange","doc":"Similar to `Lean.Expr.instantiate`, but considers only the substitutions `subst` in the range `[beginIdx, endIdx)`.\nFunction panics if `beginIdx <= endIdx <= subst.size` does not hold.\n\nThis function is equivalent to `instantiate e (subst.extract beginIdx endIdx)`, but it does not allocate a new array.\n\nThis instantiates with the \"backwards\" indexing scheme.\nSee also `Lean.Expr.instantiateRevRange`, which instantiates with the \"forwards\" indexing scheme.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.instantiateRange\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">instantiateRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(beginIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(endIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subst : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1324-L1324","name":"Lean.Expr.instantiateRev","line":1324,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.instantiateRev","doc":"Instantiates the loose bound variables in `e` using the `subst` array.\nThis is equivalent to `Lean.Expr.instantiate e subst.reverse`, but it avoids reversing the array.\nIn particular, rather than instantiating `Expr.bvar i` with `subst[i - d]` it instantiates with `subst[subst.size - 1 - (i - d)]`,\nwhere `d` is the binding depth.\n\nThis function instantiates with the \"forwards\" indexing scheme.\nFor example, if `e` represents the expression `fun x y => x + y`,\nthen `instantiateRev e.bindingBody!.bindingBody! #[a, b]` yields `a + b`.\nThe `instantiate` function on the other hand would yield `b + a`, since de Bruijn indices count outwards.\n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.instantiateRev\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">instantiateRev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subst : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1310-L1310","name":"Lean.Expr.instantiate1","line":1310,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.instantiate1","doc":"Instantiates loose bound variable `0` in `e` using the expression `subst`,\nwhere in particular a loose `Expr.bvar i` at binding depth `d` is instantiated with `subst` if `i = d`,\nand otherwise it is replaced with `Expr.bvar (i - 1)`; non-loose bound variables are not touched.\n\nIf we imagine all expressions as being able to refer to the infinite list of loose bound variables ..., 3, 2, 1, 0 in that order,\nthen conceptually `instantiate1` is instantiating the last one of these and reindexing the remaining ones.\n\nThis function is equivalent to `instantiate e #[subst]`, but it avoids allocating an array.\n\nSee the documentation for `Lean.Expr.instantiate` for a description of instantiation.\nIn short, during instantiation the loose bound variables in `subst` have their own de Bruijn indices updated to account\nfor the binding depth of the replaced loose bound variable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.instantiate1\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">instantiate1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subst : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1293-L1293","name":"Lean.Expr.instantiate","line":1293,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.instantiate","doc":"Instantiates the loose bound variables in `e` using the `subst` array,\nwhere a loose `Expr.bvar i` at \"binding depth\" `d` is instantiated with `subst[i - d]` if `0 <= i - d < subst.size`,\nand otherwise it is replaced with `Expr.bvar (i - subst.size)`; non-loose bound variables are not touched.\n\nIf we imagine all expressions as being able to refer to the infinite list of loose bound variables ..., 3, 2, 1, 0 in that order,\nthen conceptually `instantiate` is instantiating the last `n` of these and reindexing the remaining ones.\nWarning: `instantiate` uses the de Bruijn indexing to index the `subst` array, which might be the reverse order from what you might expect.\nSee also `Lean.Expr.instantiateRev`.\n\n**Terminology.** The \"binding depth\" of a subexpression is the number of bound variables available to that subexpression\nby virtue of being in the bodies of `Expr.forallE`, `Expr.lam`, and `Expr.letE` expressions.\nA bound variable `Expr.bvar i` is \"loose\" if its de Bruijn index `i` is not less than its binding depth.)\n\n**About instantiation.** Instantiation isn't mere substitution.\nWhen an expression from `subst` is being instantiated, its internal loose bound variables have their de Bruijn indices incremented\nby the binding depth of the replaced loose bound variable.\nThis is necessary for the substituted expression to still refer to the correct binders after instantiation.\nSimilarly, the reason loose bound variables not instantiated using `subst` have their de Bruijn indices decremented like `Expr.bvar (i - subst.size)`\nis that `instantiate` can be used to eliminate binding expressions internal to a larger expression,\nand this adjustment keeps these bound variables referring to the same binders.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.instantiate\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">instantiate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subst : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1262-L1268","name":"Lean.Expr.inferImplicit","line":1262,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.inferImplicit","doc":"`inferImplicit e numParams considerRange` updates the first `numParams` parameter binder annotations of the `e` forall type.\nIt marks any parameter with an explicit binder annotation if there is another explicit arguments that depends on it or\nthe resulting type if `considerRange == true`.\n\nRemark: we use this function to infer the bind annotations of inductive datatype constructors, and structure projections.\nWhen the `{}` annotation is used in these commands, we set `considerRange == false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.inferImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">inferImplicit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1252-L1252","name":"Lean.Expr.liftLooseBVars","line":1252,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.liftLooseBVars","doc":"Lift loose bound variables `>= s` in `e` by `d`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.liftLooseBVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">liftLooseBVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1247-L1247","name":"Lean.Expr.lowerLooseBVars","line":1247,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.lowerLooseBVars","doc":"Lower the loose bound variables `>= s` in `e` by `d`.\nThat is, a loose bound variable `bvar i` with `i >= s` is mapped to `bvar (i-d)`.\n\nRemark: if `s < d`, then the result is `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.lowerLooseBVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">lowerLooseBVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1235-L1238","name":"Lean.Expr.hasLooseBVarInExplicitDomain","line":1235,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasLooseBVarInExplicitDomain","doc":"Return true if `e` contains the loose bound variable `bvarIdx` in an explicit parameter, or in the range if `tryRange == true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasLooseBVarInExplicitDomain\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasLooseBVarInExplicitDomain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1232-L1232","name":"Lean.Expr.hasLooseBVar","line":1232,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.hasLooseBVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasLooseBVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasLooseBVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bvarIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1226-L1229","name":"Lean.Expr.isArrow","line":1226,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isArrow","doc":"Return `true` if `e` is a non-dependent arrow.\nRemark: the following function assumes `e` does not have loose bound variables.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isArrow\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isArrow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1219-L1220","name":"Lean.Expr.hasLooseBVars","line":1219,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasLooseBVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasLooseBVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasLooseBVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1216-L1217","name":"Lean.Expr.getArgD","line":1216,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getArgD","doc":"Given `f a₀ a₁ ... aₙ`, returns the `i`th argument or returns `v₀` if out of bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getArgD\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getArgD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₀ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\"><span class=\"fn\">e</span>.getAppNumArgs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1212-L1213","name":"Lean.Expr.getArg!'","line":1212,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getArg!'","doc":"Similar to `getArg!`, but skips mdata "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getArg!'\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getArg!'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\"><span class=\"fn\">e</span>.getAppNumArgs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1208-L1209","name":"Lean.Expr.getArg!","line":1208,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getArg!","doc":"Given `f a₀ a₁ ... aₙ`, returns the `i`th argument or panics if out of bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getArg!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getArg!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\"><span class=\"fn\">e</span>.getAppNumArgs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1201-L1205","name":"Lean.Expr.getRevArg!'","line":1201,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getRevArg!'","doc":"Similar to `getRevArg!` but skips `mdata` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getRevArg!'\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getRevArg!'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1195-L1198","name":"Lean.Expr.getRevArg!","line":1195,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getRevArg!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getRevArg!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getRevArg!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1190-L1193","name":"Lean.Expr.getRevArgD","line":1190,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getRevArgD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getRevArgD\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getRevArgD</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1187-L1188","name":"Lean.Expr.withAppRev","line":1187,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.withAppRev","doc":"Same as `withApp` but with arguments reversed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.withAppRev\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">withAppRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1178-L1180","name":"Lean.Expr.traverseApp","line":1178,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.traverseApp","doc":"Given `e = fn a₁ ... aₙ`, runs `f` on `fn` and each of the arguments `aᵢ` and\nmakes a new function application with the results. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.traverseApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">traverseApp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1173-L1174","name":"Lean.Expr.getAppPrefix","line":1173,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getAppPrefix","doc":"Given `e` of the form `f a_1 ... a_n ... a_m`, return `f a_1 ... a_n`.\nIf `n` is greater than the arity, then return `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getAppPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1163-L1167","name":"Lean.Expr.stripArgsN","line":1163,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.stripArgsN","doc":"Given `e` of the form `f a_1 ... a_n`, return `f`.\nIf `n` is greater than the number of arguments, then return `e.getAppFn`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.stripArgsN\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">stripArgsN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1154-L1157","name":"Lean.Expr.getAppArgsN.loop","line":1154,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getAppArgsN.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getAppArgsN.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppArgsN</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1150-L1157","name":"Lean.Expr.getAppArgsN","line":1150,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getAppArgsN","doc":"Given `f a_1 ... a_n`, returns `#[a_1, ..., a_n]`.\nNote that `f` may be an application.\nThe resulting array has size `n` even if `f.getAppNumArgs < n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getAppArgsN\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppArgsN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1142-L1143","name":"Lean.Expr.getAppFnArgs","line":1142,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getAppFnArgs","doc":"Return the function (name) and arguments of an application. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getAppFnArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppFnArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1136-L1139","name":"Lean.Expr.withApp","line":1136,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.withApp","doc":"Given `e = f a₁ a₂ ... aₙ`, returns `k f #[a₁, ..., aₙ]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.withApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">withApp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1131-L1133","name":"Lean.Expr.withAppAux","line":1131,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.withAppAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.withAppAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">withAppAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1128-L1129","name":"Lean.Expr.getAppRevArgs","line":1128,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getAppRevArgs","doc":"Same as `getAppArgs` but reverse the output array. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getAppRevArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppRevArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1118-L1121","name":"Lean.Expr.getBoundedAppArgs","line":1118,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getBoundedAppArgs","doc":"Like `Lean.Expr.getAppArgs` but returns up to `maxArgs` arguments.\n\nIn particular, given `f a₁ a₂ ... aₙ`, returns `#[aₖ₊₁, ..., aₙ]`\nwhere `k` is minimal such that the size of this array is at most `maxArgs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getBoundedAppArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getBoundedAppArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(maxArgs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1103-L1106","name":"Lean.Expr.getAppArgs","line":1103,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getAppArgs","doc":"Given `f a₁ a₂ ... aₙ`, returns `#[a₁, ..., aₙ]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getAppArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1094-L1096","name":"Lean.Expr.getBoundedAppFn","line":1094,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getBoundedAppFn","doc":"Like `Lean.Expr.getAppFn` but assumes the application has up to `maxArgs` arguments.\nIf there are any more arguments than this, then they are returned by `getAppFn` as part of the function.\n\nIn particular, if the given expression is a sequence of function applications `f a₁ .. aₙ`,\nreturns `f a₁ .. aₖ` where `k` is minimal such that `n - k ≤ maxArgs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getBoundedAppFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getBoundedAppFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(maxArgs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1084-L1085","name":"Lean.Expr.getAppNumArgs","line":1084,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getAppNumArgs","doc":"Counts the number `n` of arguments for an expression `f a₁ .. aₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getAppNumArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppNumArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1073-L1077","name":"Lean.Expr.isAppOfArity'","line":1073,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isAppOfArity'","doc":"Similar to `isAppOfArity` but skips `Expr.mdata`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isAppOfArity'\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isAppOfArity'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1067-L1070","name":"Lean.Expr.isAppOfArity","line":1067,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isAppOfArity","doc":"Given `f a₁ ... aᵢ`, returns true if `f` is a constant\nwith name `n` and has the correct number of arguments.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isAppOfArity\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isAppOfArity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1058-L1061","name":"Lean.Expr.isAppOf","line":1058,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isAppOf","doc":"Given `f a₀ a₁ ... aₙ`, returns true if `f` is a constant with name `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isAppOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isAppOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1052-L1055","name":"Lean.Expr.getAppFn'","line":1052,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getAppFn'","doc":"Similar to `getAppFn`, but skips `mdata`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getAppFn'\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppFn'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1045-L1047","name":"Lean.Expr.getAppFn","line":1045,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getAppFn","doc":"If the given expression is a sequence of\nfunction applications `f a₁ .. aₙ`, return `f`.\nOtherwise return the input expression.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getAppFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1036-L1038","name":"Lean.Expr.getForallBinderNames","line":1036,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getForallBinderNames","doc":"Given a sequence of nested foralls `(a₁ : α₁) → ... → (aₙ : αₙ) → _`,\nreturns the names `[a₁, ... aₙ]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getForallBinderNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getForallBinderNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1029-L1032","name":"Lean.Expr.getForallBodyMaxDepth","line":1029,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getForallBodyMaxDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getForallBodyMaxDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getForallBodyMaxDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(maxDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1025-L1027","name":"Lean.Expr.getForallBody","line":1025,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.getForallBody","doc":"Return the \"body\" of a forall expression.\nExample: let `e` be the representation for `forall (p : Prop) (q : Prop), p ∧ q`, then\n`getForallBody e` returns ``.app (.app (.const `And []) (.bvar 1)) (.bvar 0)``\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.getForallBody\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getForallBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1016-L1018","name":"Lean.Expr.projIdx!","line":1016,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.projIdx!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.projIdx!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">projIdx!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1012-L1014","name":"Lean.Expr.projExpr!","line":1012,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.projExpr!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.projExpr!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">projExpr!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1008-L1010","name":"Lean.Expr.mdataExpr!","line":1008,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.mdataExpr!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.mdataExpr!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mdataExpr!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1004-L1006","name":"Lean.Expr.consumeMData","line":1004,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.consumeMData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.consumeMData\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">consumeMData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L1000-L1002","name":"Lean.Expr.letBody!","line":1000,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.letBody!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.letBody!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">letBody!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L996-L998","name":"Lean.Expr.letValue!","line":996,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.letValue!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.letValue!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">letValue!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L992-L994","name":"Lean.Expr.letType!","line":992,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.letType!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.letType!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">letType!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L988-L990","name":"Lean.Expr.letName!","line":988,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.letName!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.letName!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">letName!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L983-L986","name":"Lean.Expr.bindingInfo!","line":983,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.bindingInfo!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.bindingInfo!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">bindingInfo!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L978-L981","name":"Lean.Expr.bindingBody!","line":978,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.bindingBody!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.bindingBody!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">bindingBody!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L973-L976","name":"Lean.Expr.bindingDomain!","line":973,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.bindingDomain!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.bindingDomain!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">bindingDomain!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L968-L971","name":"Lean.Expr.bindingName!","line":968,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.bindingName!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.bindingName!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">bindingName!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L964-L966","name":"Lean.Expr.mvarId!","line":964,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.mvarId!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.mvarId!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mvarId!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L960-L962","name":"Lean.Expr.fvarId!","line":960,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.fvarId!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.fvarId!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">fvarId!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L956-L958","name":"Lean.Expr.bvarIdx!","line":956,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.bvarIdx!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.bvarIdx!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">bvarIdx!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L952-L954","name":"Lean.Expr.constLevels!","line":952,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.constLevels!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.constLevels!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">constLevels!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L949-L950","name":"Lean.Expr.constName","line":949,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.constName","doc":"If the expression is a constant, return that name. Otherwise return `Name.anonymous`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.constName\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">constName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L944-L946","name":"Lean.Expr.constName?","line":944,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.constName?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.constName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">constName?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L940-L942","name":"Lean.Expr.constName!","line":940,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.constName!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.constName!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">constName!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L936-L938","name":"Lean.Expr.isCharLit","line":936,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isCharLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isCharLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isCharLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L932-L934","name":"Lean.Expr.isStringLit","line":932,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isStringLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isStringLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isStringLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L928-L930","name":"Lean.Expr.rawNatLit?","line":928,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.rawNatLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.rawNatLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">rawNatLit?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L924-L926","name":"Lean.Expr.isRawNatLit","line":924,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isRawNatLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isRawNatLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isRawNatLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L920-L922","name":"Lean.Expr.litValue!","line":920,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.litValue!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.litValue!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">litValue!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L916-L918","name":"Lean.Expr.sortLevel!","line":916,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.sortLevel!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.sortLevel!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sortLevel!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L912-L914","name":"Lean.Expr.appFn","line":912,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.appFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.appFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">appFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.isApp</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L908-L910","name":"Lean.Expr.appArg","line":908,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.appArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.appArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">appArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.isApp</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L903-L906","name":"Lean.Expr.appArg!'","line":903,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.appArg!'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.appArg!'\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">appArg!'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L898-L901","name":"Lean.Expr.appFn!'","line":898,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.appFn!'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.appFn!'\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">appFn!'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L894-L896","name":"Lean.Expr.appArg!","line":894,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.appArg!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.appArg!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">appArg!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L890-L892","name":"Lean.Expr.appFn!","line":890,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.appFn!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.appFn!\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">appFn!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L886-L888","name":"Lean.Expr.isLit","line":886,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isLit","doc":"Return `true` if the given expression is a literal value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L881-L883","name":"Lean.Expr.isMData","line":881,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isMData","doc":"Return `true` if the given expression is a metadata. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isMData\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isMData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L876-L878","name":"Lean.Expr.isLet","line":876,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isLet","doc":"Return `true` if the given expression is a let-expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isLet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L870-L873","name":"Lean.Expr.isBinding","line":870,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isBinding","doc":"Return `true` if the given expression is a forall or lambda expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isBinding\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isBinding</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L865-L867","name":"Lean.Expr.isLambda","line":865,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isLambda","doc":"Return `true` if the given expression is a lambda abstraction aka anonymous function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isLambda</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L860-L862","name":"Lean.Expr.isForall","line":860,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isForall","doc":"Return `true` if the given expression is a forall-expression aka (dependent) arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isForall\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isForall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L855-L857","name":"Lean.Expr.isFVarOf","line":855,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isFVarOf","doc":"Return `true` if the given expression is a free variable with the given id.\nExamples:\n- `isFVarOf (.fvar id) id` is `true`\n- ``isFVarOf (.fvar id) id'`` is `false`\n- ``isFVarOf (.sort levelZero) id`` is `false`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isFVarOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isFVarOf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L844-L846","name":"Lean.Expr.isConstOf","line":844,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isConstOf","doc":"Return `true` if the given expression is a constant of the given name.\nExamples:\n- `` (.const `Nat []).isConstOf `Nat `` is `true`\n- `` (.const `Nat []).isConstOf `False `` is `false`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isConstOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isConstOf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L834-L836","name":"Lean.Expr.isConst","line":834,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isConst","doc":"Return `true` if the given expression is a constant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isConst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L829-L831","name":"Lean.Expr.isProj","line":829,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isProj","doc":"Return `true` if the given expression is a projection `.proj ..` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isProj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L824-L826","name":"Lean.Expr.isApp","line":824,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isApp","doc":"Return `true` if the given expression is an application. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isApp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L819-L821","name":"Lean.Expr.isFVar","line":819,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isFVar","doc":"Return `true` if the given expression is a free variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isFVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L814-L816","name":"Lean.Expr.isMVar","line":814,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isMVar","doc":"Return `true` if the given expression is a metavariable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isMVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L809-L811","name":"Lean.Expr.isBVar","line":809,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isBVar","doc":"Return `true` if the given expression is a bound variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isBVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isBVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L804-L806","name":"Lean.Expr.isProp","line":804,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isProp","doc":"Return `true` if the given expression is `.sort .zero` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isProp\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isProp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L799-L801","name":"Lean.Expr.isType0","line":799,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isType0","doc":"Return `true` if the given expression is of the form `.sort (.succ .zero)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isType0\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isType0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L794-L796","name":"Lean.Expr.isType","line":794,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isType","doc":"Return `true` if the given expression is of the form `.sort (.succ ..)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isType\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L789-L791","name":"Lean.Expr.isSort","line":789,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.isSort","doc":"Return `true` if the given expression is a `.sort ..` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.isSort\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isSort</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L786-L786","name":"Lean.Expr.equal","line":786,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.equal","doc":"Return `true` iff `a` and `b` are equal.\nBinder names and annotations are taken into account.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.equal\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">equal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L778-L779","name":"Lean.Expr.instBEq","line":778,"kind":"instance","docLink":"./Lean/Expr.html#Lean.Expr.instBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.instBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L776-L776","name":"Lean.Expr.eqv","line":776,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.eqv","doc":"Return true iff `a` and `b` are alpha equivalent.\nBinder annotations are ignored.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.eqv\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">eqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L769-L769","name":"Lean.Expr.lt","line":769,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.lt","doc":"A total order for expressions that takes the structure into account (e.g., variable names). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L765-L765","name":"Lean.Expr.quickLt","line":765,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.quickLt","doc":"A total order for expressions. We say it is quick because it first compares the hashcodes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.quickLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">quickLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L761-L761","name":"Lean.Expr.dbgToString","line":761,"kind":"opaque","docLink":"./Lean/Expr.html#Lean.Expr.dbgToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.dbgToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">dbgToString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L755-L756","name":"Lean.mkAppRev","line":755,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkAppRev","doc":"Same as `mkApp f args` but reversing `args`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkAppRev\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAppRev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(revArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L751-L752","name":"Lean.mkAppRange","line":751,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkAppRange","doc":"`mkAppRange f i j #[a_1, ..., a_i, ..., a_j, ... ]` ==> the expression `f a_i ... a_{j-1}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkAppRange\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAppRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L744-L745","name":"Lean.mkAppN","line":744,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkAppN","doc":"`mkAppN f #[a₀, ..., aₙ]` constructs the application `f a₀ a₁ ... aₙ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkAppN\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAppN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L739-L739","name":"Lean.mkProjEx","line":739,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkProjEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkProjEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkProjEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L738-L738","name":"Lean.mkMDataEx","line":738,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkMDataEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkMDataEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkMDataEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MData\">Lean.MData</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L737-L737","name":"Lean.mkLitEx","line":737,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkLitEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkLitEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkLitEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L736-L736","name":"Lean.mkLetEx","line":736,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkLetEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkLetEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkLetEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L735-L735","name":"Lean.mkForallEx","line":735,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkForallEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkForallEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkForallEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bi : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L734-L734","name":"Lean.mkLambdaEx","line":734,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkLambdaEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkLambdaEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkLambdaEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bi : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L733-L733","name":"Lean.mkAppEx","line":733,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkAppEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkAppEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAppEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L732-L732","name":"Lean.mkConstEx","line":732,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkConstEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkConstEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkConstEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lvls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L731-L731","name":"Lean.mkSortEx","line":731,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkSortEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkSortEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkSortEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L730-L730","name":"Lean.mkMVarEx","line":730,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkMVarEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkMVarEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkMVarEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L729-L729","name":"Lean.mkFVarEx","line":729,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkFVarEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkFVarEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkFVarEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L728-L728","name":"Lean.mkBVarEx","line":728,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkBVarEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkBVarEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkBVarEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L725-L726","name":"Lean.mkStrLit","line":725,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkStrLit","doc":"Return the string literal `.lit (.strVal s)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkStrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">mkStrLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L720-L722","name":"Lean.mkNatLit","line":720,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkNatLit","doc":"Return a natural number literal used in the frontend. It is a `OfNat.ofNat` application.\nRecall that all theorems and definitions containing numeric literals are encoded using\n`OfNat.ofNat` applications in the frontend.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkNatLit\"><span class=\"name\">Lean</span>.<span class=\"name\">mkNatLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L712-L713","name":"Lean.mkRawNatLit","line":712,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkRawNatLit","doc":"Return the \"raw\" natural number `.lit (.natVal n)`.\nThis is not the default representation used by the Lean frontend.\nSee `mkNatLit`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkRawNatLit\"><span class=\"name\">Lean</span>.<span class=\"name\">mkRawNatLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L704-L705","name":"Lean.mkLit","line":704,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkLit","doc":"`.lit l` is now the preferred form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkLit\"><span class=\"name\">Lean</span>.<span class=\"name\">mkLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L699-L699","name":"Lean.mkApp10","line":699,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkApp10","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkApp10\"><span class=\"name\">Lean</span>.<span class=\"name\">mkApp10</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₃ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₄ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₅ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₆ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L698-L698","name":"Lean.mkApp9","line":698,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkApp9","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkApp9\"><span class=\"name\">Lean</span>.<span class=\"name\">mkApp9</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₃ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₄ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₅ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L697-L697","name":"Lean.mkApp8","line":697,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkApp8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkApp8\"><span class=\"name\">Lean</span>.<span class=\"name\">mkApp8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₃ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₄ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L696-L696","name":"Lean.mkApp7","line":696,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkApp7","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkApp7\"><span class=\"name\">Lean</span>.<span class=\"name\">mkApp7</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₃ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L695-L695","name":"Lean.mkApp6","line":695,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkApp6","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkApp6\"><span class=\"name\">Lean</span>.<span class=\"name\">mkApp6</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L694-L694","name":"Lean.mkApp5","line":694,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkApp5","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkApp5\"><span class=\"name\">Lean</span>.<span class=\"name\">mkApp5</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L693-L693","name":"Lean.mkApp4","line":693,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkApp4","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkApp4\"><span class=\"name\">Lean</span>.<span class=\"name\">mkApp4</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L692-L692","name":"Lean.mkApp3","line":692,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkApp3","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkApp3\"><span class=\"name\">Lean</span>.<span class=\"name\">mkApp3</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L691-L691","name":"Lean.mkApp2","line":691,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkApp2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkApp2\"><span class=\"name\">Lean</span>.<span class=\"name\">mkApp2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L690-L690","name":"Lean.mkAppB","line":690,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkAppB","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkAppB\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAppB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L687-L688","name":"Lean.mkLet","line":687,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkLet","doc":"`.letE x t v b nonDep` is now the preferred form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkLet\"><span class=\"name\">Lean</span>.<span class=\"name\">mkLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonDep : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L681-L682","name":"Lean.mkSimpleThunk","line":681,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkSimpleThunk","doc":"Return `fun (_ : Unit), e` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkSimpleThunk\"><span class=\"name\">Lean</span>.<span class=\"name\">mkSimpleThunk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L677-L678","name":"Lean.mkSimpleThunkType","line":677,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkSimpleThunkType","doc":"Return `Unit -> type`. Do not confuse with `Thunk type` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkSimpleThunkType\"><span class=\"name\">Lean</span>.<span class=\"name\">mkSimpleThunkType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L673-L674","name":"Lean.mkForall","line":673,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkForall","doc":"`.forallE x t b bi` is now the preferred form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkForall\"><span class=\"name\">Lean</span>.<span class=\"name\">mkForall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bi : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L667-L668","name":"Lean.mkLambda","line":667,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkLambda","doc":"`.lam x t b bi` is now the preferred form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">mkLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bi : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L661-L662","name":"Lean.mkApp","line":661,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkApp","doc":"`.app f a` is now the preferred form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkApp\"><span class=\"name\">Lean</span>.<span class=\"name\">mkApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L655-L656","name":"Lean.mkProj","line":655,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkProj","doc":"`.proj structName idx struct` is now the preferred form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkProj\"><span class=\"name\">Lean</span>.<span class=\"name\">mkProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L649-L650","name":"Lean.mkMData","line":649,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkMData","doc":"`.mdata m e` is now the preferred form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkMData\"><span class=\"name\">Lean</span>.<span class=\"name\">mkMData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Expr.html#Lean.MData\">Lean.MData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L643-L644","name":"Lean.mkMVar","line":643,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkMVar","doc":"`.mvar mvarId` is now the preferred form.\nThis function is seldom used, metavariables are often created using functions such\nas `mkFresheExprMVar` at `MetaM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">mkMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L635-L636","name":"Lean.mkFVar","line":635,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkFVar","doc":"`.fvar fvarId` is now the preferred form.\nThis function is seldom used, free variables are often automatically created using the\ntelescope functions (e.g., `forallTelescope` and `lambdaTelescope`) at `MetaM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">mkFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L627-L628","name":"Lean.mkSort","line":627,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkSort","doc":"`.sort u` is now the preferred form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkSort\"><span class=\"name\">Lean</span>.<span class=\"name\">mkSort</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L623-L624","name":"Lean.mkBVar","line":623,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkBVar","doc":"`.bvar idx` is now the preferred form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkBVar\"><span class=\"name\">Lean</span>.<span class=\"name\">mkBVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L620-L620","name":"Lean.Literal.typeEx","line":620,"kind":"def","docLink":"./Lean/Expr.html#Lean.Literal.typeEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Literal.typeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Literal</span>.<span class=\"name\">typeEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L615-L617","name":"Lean.Literal.type","line":615,"kind":"def","docLink":"./Lean/Expr.html#Lean.Literal.type","doc":"Return the type of a literal value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Literal.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Literal</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L611-L612","name":"Lean.mkConst","line":611,"kind":"def","docLink":"./Lean/Expr.html#Lean.mkConst","doc":"`mkConst declName us` return `.const declName us`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.mkConst\"><span class=\"name\">Lean</span>.<span class=\"name\">mkConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L606-L606","name":"Lean.Expr.binderInfoEx","line":606,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.binderInfoEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.binderInfoEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">binderInfoEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L605-L605","name":"Lean.Expr.looseBVarRangeEx","line":605,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.looseBVarRangeEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.looseBVarRangeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">looseBVarRangeEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L604-L604","name":"Lean.Expr.hasLevelParamEx","line":604,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasLevelParamEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasLevelParamEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasLevelParamEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L603-L603","name":"Lean.Expr.hasMVarEx","line":603,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasMVarEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasMVarEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasMVarEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L602-L602","name":"Lean.Expr.hasLevelMVarEx","line":602,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasLevelMVarEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasLevelMVarEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasLevelMVarEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L601-L601","name":"Lean.Expr.hasExprMVarEx","line":601,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasExprMVarEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasExprMVarEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasExprMVarEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L600-L600","name":"Lean.Expr.hasFVarEx","line":600,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasFVarEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasFVarEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasFVarEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L599-L599","name":"Lean.Expr.hashEx","line":599,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hashEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hashEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hashEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L590-L594","name":"Lean.Expr.binderInfo","line":590,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.binderInfo","doc":"Return the binder information if `e` is a lambda or forall expression, and `.default` otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.binderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">binderInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L584-L585","name":"Lean.Expr.looseBVarRange","line":584,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.looseBVarRange","doc":"The range of de-Bruijn variables that are loose.\nThat is, bvars that are not bound by a binder.\nFor example, `bvar i` has range `i + 1` and\nan expression with no loose bvars has range `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.looseBVarRange\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">looseBVarRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L575-L576","name":"Lean.Expr.approxDepth","line":575,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.approxDepth","doc":"Return the approximated depth of an expression. This information is used to compute\nthe expression hash code, and speedup comparisons.\nThis is a constant time operation. We say it is approximate because it maxes out at `255`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.approxDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">approxDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L567-L568","name":"Lean.Expr.hasLevelParam","line":567,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasLevelParam","doc":"Return true if `e` contains universe level parameters.\nThis is a constant time operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasLevelParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasLevelParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L559-L561","name":"Lean.Expr.hasMVar","line":559,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasMVar","doc":"Does the expression contain level (aka universe) or expression metavariables?\nThis is a constant time operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L552-L553","name":"Lean.Expr.hasLevelMVar","line":552,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasLevelMVar","doc":"Return `true` if `e` contains universe (aka `Level`) metavariables.\nThis is a constant time operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasLevelMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasLevelMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L545-L546","name":"Lean.Expr.hasExprMVar","line":545,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasExprMVar","doc":"Return `true` if `e` contains expression metavariables.\nThis is a constant time operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasExprMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasExprMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L538-L539","name":"Lean.Expr.hasFVar","line":538,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hasFVar","doc":"Return `true` if `e` contains free variables.\nThis is a constant time operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hasFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hasFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L532-L532","name":"Lean.Expr.instHashable","line":532,"kind":"instance","docLink":"./Lean/Expr.html#Lean.Expr.instHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.instHashable\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">instHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L529-L530","name":"Lean.Expr.hash","line":529,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.hash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L515-L527","name":"Lean.Expr.ctorName","line":515,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.ctorName","doc":"The constructor name for the given expression. This is used for debugging purposes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.ctorName\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ctorName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L510-L510","name":"Lean.instReprExpr","line":510,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instReprExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instReprExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L510-L510","name":"Lean.instInhabitedExpr","line":510,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instInhabitedExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instInhabitedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L450-L465","name":"Lean.Expr.proj","line":450,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.proj","doc":"Projection-expressions. They are redundant, but are used to create more compact\nterms, speedup reduction, and implement eta for structures.\nThe type of `struct` must be an structure-like inductive type. That is, it has only one\nconstructor, is not recursive, and it is not an inductive predicate. The kernel and elaborators\ncheck whether the `typeName` matches the type of `struct`, and whether the (zero-based) index\nis valid (i.e., it is smaller than the number of constructor fields).\nWhen exporting Lean developments to other systems, `proj` can be replaced with `typeName`.`rec`\napplications.\n\nExample, given `a : Nat × Bool`, `a.1` is represented as\n```\n.proj `Prod 0 a\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(typeName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L438-L448","name":"Lean.Expr.mdata","line":438,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.mdata","doc":"Metadata (aka annotations).\n\nWe use annotations to provide hints to the pretty-printer,\nstore references to `Syntax` nodes, position information, and save information for\nelaboration procedures (e.g., we use the `inaccessible` annotation during elaboration to\nmark `Expr`s that correspond to inaccessible patterns).\n\nNote that `Expr.mdata data e` is definitionally equal to `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.mdata\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mdata</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(data : <a href=\"./Lean/Expr.html#Lean.MData\">Lean.MData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L425-L436","name":"Lean.Expr.lit","line":425,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.lit","doc":"Natural number and string literal values.\n\nThey are not really needed, but provide a more compact representation in memory\nfor these two kinds of literals, and are used to implement efficient reduction\nin the elaborator and kernel. The \"raw\" natural number `2` can be represented\nas `Expr.lit (.natVal 2)`. Note that, it is definitionally equal to:\n```lean\nExpr.app (.const `Nat.succ []) (.app (.const `Nat.succ []) (.const `Nat.zero []))\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.lit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">lit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L405-L423","name":"Lean.Expr.letE","line":405,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.letE","doc":"Let-expressions.\n\n**IMPORTANT**: The `nonDep` flag is for \"local\" use only. That is, a module should not \"trust\" its value for any purpose.\nIn the intended use-case, the compiler will set this flag, and be responsible for maintaining it.\nOther modules may not preserve its value while applying transformations.\n\nGiven an environment, a metavariable context, and a local context,\nwe say a let-expression `let x : t := v; e` is non-dependent when it is equivalent\nto `(fun x : t => e) v`. In contrast, the dependent let-expression\n`let n : Nat := 2; fun (a : Array Nat n) (b : Array Nat 2) => a = b` is type correct,\nbut `(fun (n : Nat) (a : Array Nat n) (b : Array Nat 2) => a = b) 2` is not.\n\nThe let-expression `let x : Nat := 2; Nat.succ x` is represented as\n```\nExpr.letE `x (.const `Nat []) (.lit (.natVal 2)) (.app (.const `Nat.succ []) (.bvar 0)) true\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.letE\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">letE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonDep : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L386-L403","name":"Lean.Expr.forallE","line":386,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.forallE","doc":"A dependent arrow `(a : α) → β)` (aka forall-expression) where `β` may dependent\non `a`. Note that this constructor is also used to represent non-dependent arrows\nwhere `β` does not depend on `a`.\n\nFor example:\n- `forall x : Prop, x ∧ x`:\n  ```lean\n  Expr.forallE `x (.sort .zero)\n    (.app (.app (.const `And []) (.bvar 0)) (.bvar 0)) .default\n  ```\n- `Nat → Bool`:\n  ```lean\n  Expr.forallE `a (.const `Nat [])\n    (.const `Bool []) .default\n  ```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.forallE\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">forallE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(binderName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(binderType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(binderInfo : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L375-L384","name":"Lean.Expr.lam","line":375,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.lam","doc":"A lambda abstraction (aka anonymous functions). It introduces a new binder for\nvariable `x` in scope for the lambda body.\n\nFor example, the expression `fun x : Nat => x` is represented as\n```\nExpr.lam `x (.const `Nat []) (.bvar 0) .default\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.lam\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">lam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(binderName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(binderType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(binderInfo : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L363-L373","name":"Lean.Expr.app","line":363,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.app","doc":"A function application.\n\nFor example, the natural number one, i.e. `Nat.succ Nat.zero` is represented as\n``Expr.app (.const `Nat.succ []) (.const .zero [])``.\nNote that multiple arguments are represented using partial application.\n\nFor example, the two argument application `f x y` is represented as\n`Expr.app (.app f x) y`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.app\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L355-L361","name":"Lean.Expr.const","line":355,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.const","doc":"A (universe polymorphic) constant that has been defined earlier in the module or\nby another imported module. For example, `@Eq.{1}` is represented\nas ``Expr.const `Eq [.succ .zero]``, and `@Array.map.{0, 0}` is represented\nas ``Expr.const `Array.map [.zero, .zero]``.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.const\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L347-L353","name":"Lean.Expr.sort","line":347,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.sort","doc":"Used for `Type u`, `Sort u`, and `Prop`:\n- `Prop` is represented as `.sort .zero`,\n- `Sort u` as ``.sort (.param `u)``, and\n- `Type u` as ``.sort (.succ (.param `u))``\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sort</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L339-L345","name":"Lean.Expr.mvar","line":339,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.mvar","doc":"Metavariables are used to represent \"holes\" in expressions, and goals in the\ntactic framework. Metavariable declarations are stored in the `MetavarContext`.\nMetavariables are used during elaboration, and are not allowed in the kernel,\nor in the code generator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.mvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L324-L337","name":"Lean.Expr.fvar","line":324,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.fvar","doc":"The `fvar` constructor represent free variables. These *free* variable\noccurrences are not bound by an earlier `lam`, `forallE`, or `letE`\nconstructor and its binder exists in a local context only.\n\nNote that Lean uses the *locally nameless approach*. See [McBride and McKinna](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.365.2479&rep=rep1&type=pdf)\nfor additional details.\n\nWhen \"visiting\" the body of a binding expression (i.e. `lam`, `forallE`, or `letE`),\nbound variables are converted into free variables using a unique identifier,\nand their user-facing name, type, value (for `LetE`), and binder annotation\nare stored in the `LocalContext`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.fvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L300-L322","name":"Lean.Expr.bvar","line":300,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Expr.bvar","doc":"The `bvar` constructor represents bound variables, i.e. occurrences\nof a variable in the expression where there is a variable binder\nabove it (i.e. introduced by a `lam`, `forallE`, or `letE`).\n\nThe `deBruijnIndex` parameter is the *de-Bruijn* index for the bound\nvariable. See [the Wikipedia page on de-Bruijn indices](https://en.wikipedia.org/wiki/De_Bruijn_index)\nfor additional information.\n\nFor example, consider the expression `fun x : Nat => forall y : Nat, x = y`.\nThe `x` and `y` variables in the equality expression are constructed\nusing `bvar` and bound to the binders introduced by the earlier\n`lam` and `forallE` constructors. Here is the corresponding `Expr` representation\nfor the same expression:\n```lean\n.lam `x (.const `Nat [])\n  (.forallE `y (.const `Nat [])\n    (.app (.app (.app (.const `Eq [.succ .zero]) (.const `Nat [])) (.bvar 1)) (.bvar 0))\n    .default)\n  .default\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.bvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">bvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(deBruijnIndex : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L299-L510","name":"Lean.Expr","line":299,"kind":"inductive","docLink":"./Lean/Expr.html#Lean.Expr","doc":"Lean expressions. This data structure is used in the kernel and\nelaborator. However, expressions sent to the kernel should not\ncontain metavariables.\n\nRemark: we use the `E` suffix (short for `Expr`) to avoid collision with keywords.\nWe considered using «...», but it is too inconvenient to use.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L291-L510","name":"Lean.Expr.data","line":291,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.data\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">data</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L288-L289","name":"Lean.instInhabitedMVarIdMap","line":288,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instInhabitedMVarIdMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instInhabitedMVarIdMap\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMVarIdMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarIdMap\">Lean.MVarIdMap</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L286-L286","name":"Lean.instForInMVarIdMapProdMVarId","line":286,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instForInMVarIdMapProdMVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instForInMVarIdMapProdMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instForInMVarIdMapProdMVarId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarIdMap\">Lean.MVarIdMap</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L284-L284","name":"Lean.instEmptyCollectionMVarIdMap","line":284,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instEmptyCollectionMVarIdMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instEmptyCollectionMVarIdMap\"><span class=\"name\">Lean</span>.<span class=\"name\">instEmptyCollectionMVarIdMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarIdMap\">Lean.MVarIdMap</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L281-L282","name":"Lean.MVarIdMap.insert","line":281,"kind":"def","docLink":"./Lean/Expr.html#Lean.MVarIdMap.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.MVarIdMap.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarIdMap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarIdMap\">Lean.MVarIdMap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarIdMap\">Lean.MVarIdMap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L279-L279","name":"Lean.MVarIdMap","line":279,"kind":"def","docLink":"./Lean/Expr.html#Lean.MVarIdMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.MVarIdMap\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarIdMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L277-L277","name":"Lean.instForInMVarIdSetMVarId","line":277,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instForInMVarIdSetMVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instForInMVarIdSetMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instForInMVarIdSetMVarId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.MVarIdSet\">Lean.MVarIdSet</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L274-L275","name":"Lean.MVarIdSet.insert","line":274,"kind":"def","docLink":"./Lean/Expr.html#Lean.MVarIdSet.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.MVarIdSet.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarIdSet</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Expr.html#Lean.MVarIdSet\">Lean.MVarIdSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarIdSet\">Lean.MVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L271-L272","name":"Lean.MVarIdSet","line":271,"kind":"def","docLink":"./Lean/Expr.html#Lean.MVarIdSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.MVarIdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarIdSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L268-L269","name":"Lean.instReprMVarId_1","line":268,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instReprMVarId_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instReprMVarId_1\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprMVarId_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L266-L266","name":"Lean.instReprMVarId","line":266,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instReprMVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instReprMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L266-L266","name":"Lean.instHashableMVarId","line":266,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instHashableMVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instHashableMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instHashableMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L266-L266","name":"Lean.instBEqMVarId","line":266,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instBEqMVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instBEqMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L266-L266","name":"Lean.instInhabitedMVarId","line":266,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instInhabitedMVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instInhabitedMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L265-L265","name":"Lean.MVarId.name","line":265,"kind":"def","docLink":"./Lean/Expr.html#Lean.MVarId.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.MVarId.name\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L264-L264","name":"Lean.MVarId.mk","line":264,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.MVarId.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.MVarId.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L264-L266","name":"Lean.MVarId","line":264,"kind":"structure","docLink":"./Lean/Expr.html#Lean.MVarId","doc":"Universe metavariable Id   "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.MVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L260-L261","name":"Lean.instInhabitedFVarIdMap","line":260,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instInhabitedFVarIdMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instInhabitedFVarIdMap\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedFVarIdMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">Lean.FVarIdMap</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L258-L258","name":"Lean.instEmptyCollectionFVarIdMap","line":258,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instEmptyCollectionFVarIdMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instEmptyCollectionFVarIdMap\"><span class=\"name\">Lean</span>.<span class=\"name\">instEmptyCollectionFVarIdMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">Lean.FVarIdMap</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L255-L256","name":"Lean.FVarIdMap.insert","line":255,"kind":"def","docLink":"./Lean/Expr.html#Lean.FVarIdMap.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.FVarIdMap.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">FVarIdMap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">Lean.FVarIdMap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">Lean.FVarIdMap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L253-L253","name":"Lean.FVarIdMap","line":253,"kind":"def","docLink":"./Lean/Expr.html#Lean.FVarIdMap","doc":"A mapping from free variable identifiers to values of type `α`.\nThis is a persistent data structure implemented using red-black trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.FVarIdMap\"><span class=\"name\">Lean</span>.<span class=\"name\">FVarIdMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L247-L248","name":"Lean.FVarIdHashSet","line":247,"kind":"def","docLink":"./Lean/Expr.html#Lean.FVarIdHashSet","doc":"A set of unique free variable identifiers implemented using hashtables.\nHashtables are faster than red-black trees if they are used linearly.\nThey are not persistent data-structures. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.FVarIdHashSet\"><span class=\"name\">Lean</span>.<span class=\"name\">FVarIdHashSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L240-L241","name":"Lean.FVarIdSet.insert","line":240,"kind":"def","docLink":"./Lean/Expr.html#Lean.FVarIdSet.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.FVarIdSet.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">FVarIdSet</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L238-L238","name":"Lean.instForInFVarIdSetFVarId","line":238,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instForInFVarIdSetFVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instForInFVarIdSetFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instForInFVarIdSetFVarId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L235-L236","name":"Lean.FVarIdSet","line":235,"kind":"def","docLink":"./Lean/Expr.html#Lean.FVarIdSet","doc":"A set of unique free variable identifiers.\nThis is a persistent data structure implemented using red-black trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.FVarIdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">FVarIdSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L229-L230","name":"Lean.instReprFVarId","line":229,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instReprFVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instReprFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprFVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L227-L227","name":"Lean.instHashableFVarId","line":227,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instHashableFVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instHashableFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instHashableFVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L227-L227","name":"Lean.instBEqFVarId","line":227,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instBEqFVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instBEqFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqFVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L227-L227","name":"Lean.instInhabitedFVarId","line":227,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instInhabitedFVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instInhabitedFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedFVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L226-L226","name":"Lean.FVarId.name","line":226,"kind":"def","docLink":"./Lean/Expr.html#Lean.FVarId.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.FVarId.name\"><span class=\"name\">Lean</span>.<span class=\"name\">FVarId</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L225-L225","name":"Lean.FVarId.mk","line":225,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.FVarId.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.FVarId.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">FVarId</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L225-L227","name":"Lean.FVarId","line":225,"kind":"structure","docLink":"./Lean/Expr.html#Lean.FVarId","doc":"The unique free variable identifier. It is just a hierarchical name,\nbut we wrap it in `FVarId` to make sure they don't get mixed up with `MVarId`.\n\nThis is not the user-facing name for a free variable. This information is stored\nin the local context (`LocalContext`). The unique identifiers are generated using\na `NameGenerator`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.FVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">FVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L200-L213","name":"Lean.instReprData_1","line":200,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instReprData_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instReprData_1\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprData_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L197-L198","name":"Lean.Expr.mkDataForLet","line":197,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.mkDataForLet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.mkDataForLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mkDataForLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(looseBVarRange : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(approxDepth : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasFVar : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasExprMVar : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasLevelMVar : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasLevelParam : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L194-L195","name":"Lean.Expr.mkDataForBinder","line":194,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.mkDataForBinder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.mkDataForBinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mkDataForBinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(looseBVarRange : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(approxDepth : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasFVar : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasExprMVar : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasLevelMVar : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasLevelParam : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L184-L192","name":"Lean.Expr.mkAppData","line":184,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.mkAppData","doc":"Optimized version of `Expr.mkData` for applications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.mkAppData\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mkAppData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(aData : <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L167-L181","name":"Lean.Expr.mkData","line":167,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.mkData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.mkData\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mkData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(looseBVarRange : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(approxDepth : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasFVar : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasExprMVar : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasLevelMVar : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasLevelParam : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L161-L165","name":"Lean.BinderInfo.toUInt64","line":161,"kind":"def","docLink":"./Lean/Expr.html#Lean.BinderInfo.toUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo.toUInt64\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L155-L156","name":"Lean.Expr.Data.hasLevelParam","line":155,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.Data.hasLevelParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.Data.hasLevelParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">Data</span>.<span class=\"name\">hasLevelParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L152-L153","name":"Lean.Expr.Data.hasLevelMVar","line":152,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.Data.hasLevelMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.Data.hasLevelMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">Data</span>.<span class=\"name\">hasLevelMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L149-L150","name":"Lean.Expr.Data.hasExprMVar","line":149,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.Data.hasExprMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.Data.hasExprMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">Data</span>.<span class=\"name\">hasExprMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L146-L147","name":"Lean.Expr.Data.hasFVar","line":146,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.Data.hasFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.Data.hasFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">Data</span>.<span class=\"name\">hasFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L143-L144","name":"Lean.Expr.Data.looseBVarRange","line":143,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.Data.looseBVarRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.Data.looseBVarRange\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">Data</span>.<span class=\"name\">looseBVarRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L140-L141","name":"Lean.Expr.Data.approxDepth","line":140,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.Data.approxDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.Data.approxDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">Data</span>.<span class=\"name\">approxDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L137-L138","name":"Lean.instBEqData_1","line":137,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instBEqData_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instBEqData_1\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqData_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L134-L135","name":"Lean.Expr.Data.hash","line":134,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.Data.hash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.Data.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">Data</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L131-L132","name":"Lean.instInhabitedData_1","line":131,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instInhabitedData_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instInhabitedData_1\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedData_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Expr.html#Lean.Expr.Data\">Lean.Expr.Data</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L129-L129","name":"Lean.Expr.Data","line":129,"kind":"def","docLink":"./Lean/Expr.html#Lean.Expr.Data","doc":"Cached hash code, cached results, and other data for `Expr`.\n-  hash           : 32-bits\n-  approxDepth    : 8-bits -- the approximate depth is used to minimize the number of hash collisions\n-  hasFVar        : 1-bit -- does it contain free variables?\n-  hasExprMVar    : 1-bit -- does it contain metavariables?\n-  hasLevelMVar   : 1-bit -- does it contain level metavariables?\n-  hasLevelParam  : 1-bit -- does it contain level parameters?\n-  looseBVarRange : 20-bits\n\nRemark: this is mostly an internal datastructure used to implement `Expr`,\nmost will never have to use it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Expr.Data\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">Data</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L114-L114","name":"Lean.MData.empty","line":114,"kind":"def","docLink":"./Lean/Expr.html#Lean.MData.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.MData.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">MData</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MData\">Lean.MData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L113-L113","name":"Lean.MData","line":113,"kind":"def","docLink":"./Lean/Expr.html#Lean.MData","doc":"Expression metadata. Used with the `Expr.mdata` constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.MData\"><span class=\"name\">Lean</span>.<span class=\"name\">MData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L108-L110","name":"Lean.BinderInfo.isStrictImplicit","line":108,"kind":"def","docLink":"./Lean/Expr.html#Lean.BinderInfo.isStrictImplicit","doc":"Return `true` if the given `BinderInfo` is a strict implicit annotation (e.g., `{{α : Type u}}`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo.isStrictImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">isStrictImplicit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L103-L105","name":"Lean.BinderInfo.isImplicit","line":103,"kind":"def","docLink":"./Lean/Expr.html#Lean.BinderInfo.isImplicit","doc":"Return `true` if the given `BinderInfo` is a regular implicit annotation (e.g., `{α : Type u}`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo.isImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">isImplicit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L98-L100","name":"Lean.BinderInfo.isInstImplicit","line":98,"kind":"def","docLink":"./Lean/Expr.html#Lean.BinderInfo.isInstImplicit","doc":"Return `true` if the given `BinderInfo` is an instance implicit annotation (e.g., `[Decidable α]`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo.isInstImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">isInstImplicit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L95-L95","name":"Lean.instHashableBinderInfo","line":95,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instHashableBinderInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instHashableBinderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instHashableBinderInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L89-L93","name":"Lean.BinderInfo.isExplicit","line":89,"kind":"def","docLink":"./Lean/Expr.html#Lean.BinderInfo.isExplicit","doc":"Return `true` if the given `BinderInfo` does not correspond to an implicit binder annotation\n(i.e., `implicit`, `strictImplicit`, or `instImplicit`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo.isExplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">isExplicit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L79-L83","name":"Lean.BinderInfo.hash","line":79,"kind":"def","docLink":"./Lean/Expr.html#Lean.BinderInfo.hash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L77-L77","name":"Lean.instReprBinderInfo","line":77,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instReprBinderInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instReprBinderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprBinderInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L77-L77","name":"Lean.instBEqBinderInfo","line":77,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instBEqBinderInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instBEqBinderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqBinderInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L77-L77","name":"Lean.instInhabitedBinderInfo","line":77,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instInhabitedBinderInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instInhabitedBinderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedBinderInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L75-L76","name":"Lean.BinderInfo.instImplicit","line":75,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.BinderInfo.instImplicit","doc":"Local instance binder annotataion, e.g., `[Decidable α]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo.instImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">instImplicit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L73-L74","name":"Lean.BinderInfo.strictImplicit","line":73,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.BinderInfo.strictImplicit","doc":"Strict implicit binder annotation, e.g., `{{ x : α }}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo.strictImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">strictImplicit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L71-L72","name":"Lean.BinderInfo.implicit","line":71,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.BinderInfo.implicit","doc":"Implicit binder annotation, e.g., `{x : α}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo.implicit\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">implicit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L69-L70","name":"Lean.BinderInfo.default","line":69,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.BinderInfo.default","doc":"Default binder annotation, e.g. `(x : α)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L68-L77","name":"Lean.BinderInfo","line":68,"kind":"inductive","docLink":"./Lean/Expr.html#Lean.BinderInfo","doc":"Arguments in forallE binders can be labelled as implicit or explicit.\n\nEach `lam` or `forallE` binder comes with a `binderInfo` argument (stored in ExprData).\nThis can be set to\n- `default` -- `(x : α)`\n- `implicit` --  `{x : α}`\n- `strict_implicit` -- `⦃x : α⦄`\n- `inst_implicit` -- `[x : α]`.\n- `aux_decl` -- Auxiliary definitions are helper methods that\n  Lean generates. `aux_decl` is used for `_match`, `_fun_match`,\n  `_let_match` and the self reference that appears in recursive pattern matching.\n\nThe difference between implicit `{}` and strict-implicit `⦃⦄` is how\nimplicit arguments are treated that are *not* followed by explicit arguments.\n`{}` arguments are applied eagerly, while `⦃⦄` arguments are left partially applied:\n```\ndef foo {x : Nat} : Nat := x\ndef bar ⦃x : Nat⦄ : Nat := x\n#check foo -- foo : Nat\n#check bar -- bar : ⦃x : Nat⦄ → Nat\n```\n\nSee also [the Lean manual](https://lean-lang.org/lean4/doc/expressions.html#implicit-arguments).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.BinderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L40-L41","name":"Lean.instDecidableLtLiteral","line":40,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instDecidableLtLiteral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instDecidableLtLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">instDecidableLtLiteral</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L38-L38","name":"Lean.instLTLiteral","line":38,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instLTLiteral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instLTLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">instLTLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L32-L36","name":"Lean.Literal.lt","line":32,"kind":"def","docLink":"./Lean/Expr.html#Lean.Literal.lt","doc":"Total order on `Expr` literal values.\nNatural number values are smaller than string literal values.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Literal.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Literal</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L26-L26","name":"Lean.instHashableLiteral","line":26,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instHashableLiteral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instHashableLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">instHashableLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L22-L24","name":"Lean.Literal.hash","line":22,"kind":"def","docLink":"./Lean/Expr.html#Lean.Literal.hash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Literal.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Literal</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L20-L20","name":"Lean.instReprLiteral","line":20,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instReprLiteral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instReprLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L20-L20","name":"Lean.instBEqLiteral","line":20,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instBEqLiteral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instBEqLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L20-L20","name":"Lean.instInhabitedLiteral","line":20,"kind":"instance","docLink":"./Lean/Expr.html#Lean.instInhabitedLiteral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.instInhabitedLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L18-L19","name":"Lean.Literal.strVal","line":18,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Literal.strVal","doc":"String literal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Literal.strVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Literal</span>.<span class=\"name\">strVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L16-L17","name":"Lean.Literal.natVal","line":16,"kind":"ctor","docLink":"./Lean/Expr.html#Lean.Literal.natVal","doc":"Natural number literal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Literal.natVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Literal</span>.<span class=\"name\">natVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Expr.lean#L15-L20","name":"Lean.Literal","line":15,"kind":"inductive","docLink":"./Lean/Expr.html#Lean.Literal","doc":"Literal values for `Expr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Expr.html#Lean.Literal\"><span class=\"name\">Lean</span>.<span class=\"name\">Literal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}