{"name":"Lean.Language.Basic","instances":[{"typeNames":["Lean.Language.Snapshot.Diagnostics"],"name":"Lean.Language.Snapshot.instInhabitedDiagnostics","className":"Inhabited"},{"typeNames":["Lean.Language.Snapshot"],"name":"Lean.Language.instInhabitedSnapshot","className":"Inhabited"},{"typeNames":["Lean.Language.SnapshotTask"],"name":"Lean.Language.instNonemptySnapshotTask","className":"Nonempty"},{"typeNames":["Lean.Language.SnapshotTree"],"name":"Lean.Language.instInhabitedSnapshotTree","className":"Inhabited"},{"typeNames":["Option"],"name":"Lean.Language.instToSnapshotTreeOption","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Language.SnapshotLeaf"],"name":"Lean.Language.instNonemptySnapshotLeaf","className":"Nonempty"},{"typeNames":["Lean.Language.SnapshotLeaf"],"name":"Lean.Language.instTypeNameSnapshotLeaf","className":"TypeName"},{"typeNames":["Lean.Language.SnapshotLeaf"],"name":"Lean.Language.instToSnapshotTreeSnapshotLeaf","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Language.DynamicSnapshot"],"name":"Lean.Language.instToSnapshotTreeDynamicSnapshot","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Language.DynamicSnapshot"],"name":"Lean.Language.instInhabitedDynamicSnapshot","className":"Inhabited"},{"typeNames":["Lean.Language.ProcessingM","Lean.Language.ProcessingT"],"name":"Lean.Language.instMonadLiftProcessingMProcessingTIO","className":"MonadLift"}],"imports":["Init.System.Promise","Lean.Message","Lean.Parser.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L337-L343","name":"Lean.Language.mkIncrementalProcessor","line":337,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.mkIncrementalProcessor","doc":"Builds a function for processing a language using incremental snapshots by passing the previous\nsnapshot to `Language.process` on subsequent invocations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.mkIncrementalProcessor\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">mkIncrementalProcessor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{InitSnap : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(process : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">InitSnap</span></span> → <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\">Lean.Language.ProcessingM</a> <span class=\"fn\">InitSnap</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Lean.Parser.InputContext</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">InitSnap</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L327-L330","name":"Lean.Language.withHeaderExceptions","line":327,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.withHeaderExceptions","doc":"Adds unexpected exceptions from header processing to the message log as a last resort; standard\nerrors should already have been caught earlier. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.withHeaderExceptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">withHeaderExceptions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ex : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">Lean.Language.ProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\">Lean.Language.ProcessingM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L315-L322","name":"Lean.Language.diagnosticsOfHeaderError","line":315,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.diagnosticsOfHeaderError","doc":"Creates diagnostics from a single error message that should span the whole file. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.diagnosticsOfHeaderError\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">diagnosticsOfHeaderError</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\">Lean.Language.ProcessingM</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics\">Lean.Language.Snapshot.Diagnostics</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L310-L312","name":"Lean.Language.Snapshot.Diagnostics.ofMessageLog","line":310,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics.ofMessageLog","doc":"Creates snapshot message log from non-interactive message log, also allocating a mutable cell\nthat can be used by the server to memorize interactive diagnostics derived from the log.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics.ofMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">ofMessageLog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msgLog : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics\">Lean.Language.Snapshot.Diagnostics</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L303-L304","name":"Lean.Language.instMonadLiftProcessingMProcessingTIO","line":303,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.instMonadLiftProcessingMProcessingTIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.instMonadLiftProcessingMProcessingTIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">instMonadLiftProcessingMProcessingTIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\">Lean.Language.ProcessingM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">Lean.Language.ProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L301-L301","name":"Lean.Language.ProcessingM","line":301,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.ProcessingM","doc":"Monad holding all relevant data for processing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">ProcessingM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L299-L299","name":"Lean.Language.ProcessingT","line":299,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.ProcessingT","doc":"Monad transformer holding all relevant data for processing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">ProcessingT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L296-L296","name":"Lean.Language.ProcessingContext.mk","line":296,"kind":"ctor","docLink":"./Lean/Language/Basic.html#Lean.Language.ProcessingContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">ProcessingContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toInputContext : <a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Lean.Parser.InputContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext\">Lean.Language.ProcessingContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L296-L296","name":"Lean.Language.ProcessingContext","line":296,"kind":"structure","docLink":"./Lean/Language/Basic.html#Lean.Language.ProcessingContext","doc":"Context of an input processing invocation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">ProcessingContext</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InputContext</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L292-L293","name":"Lean.Language.SnapshotTree.getAll","line":292,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.getAll","doc":"Waits on and returns all snapshots in the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.getAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTree</span>.<span class=\"name\">getAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L288-L289","name":"Lean.Language.SnapshotTree.runAndReport","line":288,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.runAndReport","doc":"Runs a tree of snapshots to conclusion and incrementally report messages on stdout. Messages are\nreported in tree preorder.\nThis function is used by the cmdline driver; see `Lean.Server.FileWorker.reportSnapshots` for how\nthe language server reports snapshots asynchronously.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.runAndReport\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTree</span>.<span class=\"name\">runAndReport</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(json : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L277-L281","name":"Lean.Language.reportMessages","line":277,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.reportMessages","doc":"Reports messages on stdout. If `json` is true, prints messages as JSON (one per line). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.reportMessages\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">reportMessages</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msgLog : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(json : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L269-L274","name":"Lean.Language.printMessageEndPos","line":269,"kind":"opaque","docLink":"./Lean/Language/Basic.html#Lean.Language.printMessageEndPos","doc":"Option for printing end position of each message in addition to start position. Used for testing\nmessage ranges in the test suite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.printMessageEndPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">printMessageEndPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L262-L267","name":"Lean.Language.SnapshotTree.forM","line":262,"kind":"opaque","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.forM","doc":"Runs a tree of snapshots to conclusion, incrementally performing `f` on each snapshot in tree\npreorder. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.forM\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTree</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L256-L257","name":"Lean.Language.instInhabitedDynamicSnapshot","line":256,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.instInhabitedDynamicSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.instInhabitedDynamicSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">instInhabitedDynamicSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Lean.Language.DynamicSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L252-L254","name":"Lean.Language.DynamicSnapshot.toTyped?","line":252,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot.toTyped?","doc":"Returns the original snapshot value if it is of the given type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot.toTyped?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">DynamicSnapshot</span>.<span class=\"name\">toTyped?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(snap : <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Lean.Language.DynamicSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L247-L249","name":"Lean.Language.DynamicSnapshot.ofTyped","line":247,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot.ofTyped","doc":"Creates a `DynamicSnapshot` from a typed snapshot value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot.ofTyped\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">DynamicSnapshot</span>.<span class=\"name\">ofTyped</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Lean.Language.ToSnapshotTree</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Lean.Language.DynamicSnapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L243-L244","name":"Lean.Language.instToSnapshotTreeDynamicSnapshot","line":243,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.instToSnapshotTreeDynamicSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.instToSnapshotTreeDynamicSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">instToSnapshotTreeDynamicSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Lean.Language.ToSnapshotTree</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Lean.Language.DynamicSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L241-L241","name":"Lean.Language.DynamicSnapshot.tree","line":241,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot.tree","doc":"Snapshot tree retrieved from `val` before erasure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot.tree\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">DynamicSnapshot</span>.<span class=\"name\">tree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Lean.Language.DynamicSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L239-L239","name":"Lean.Language.DynamicSnapshot.val","line":239,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot.val","doc":"Concrete snapshot value as `Dynamic`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">DynamicSnapshot</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Lean.Language.DynamicSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L237-L237","name":"Lean.Language.DynamicSnapshot.mk","line":237,"kind":"ctor","docLink":"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">DynamicSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tree : <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Lean.Language.DynamicSnapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L237-L241","name":"Lean.Language.DynamicSnapshot","line":237,"kind":"structure","docLink":"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot","doc":"Arbitrary snapshot type, used for extensibility. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">DynamicSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L233-L234","name":"Lean.Language.instToSnapshotTreeSnapshotLeaf","line":233,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.instToSnapshotTreeSnapshotLeaf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.instToSnapshotTreeSnapshotLeaf\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">instToSnapshotTreeSnapshotLeaf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Lean.Language.ToSnapshotTree</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotLeaf\">Lean.Language.SnapshotLeaf</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L231-L231","name":"Lean.Language.instTypeNameSnapshotLeaf","line":231,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.instTypeNameSnapshotLeaf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.instTypeNameSnapshotLeaf\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">instTypeNameSnapshotLeaf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotLeaf\">Lean.Language.SnapshotLeaf</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L231-L231","name":"Lean.Language.instNonemptySnapshotLeaf","line":231,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.instNonemptySnapshotLeaf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.instNonemptySnapshotLeaf\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">instNonemptySnapshotLeaf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotLeaf\">Lean.Language.SnapshotLeaf</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L230-L230","name":"Lean.Language.SnapshotLeaf.mk","line":230,"kind":"ctor","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotLeaf.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotLeaf.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotLeaf</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toSnapshot : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotLeaf\">Lean.Language.SnapshotLeaf</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L230-L231","name":"Lean.Language.SnapshotLeaf","line":230,"kind":"structure","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotLeaf","doc":"Snapshot type without child nodes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotLeaf\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotLeaf</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L224-L227","name":"Lean.Language.instToSnapshotTreeOption","line":224,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.instToSnapshotTreeOption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.instToSnapshotTreeOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">instToSnapshotTreeOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Lean.Language.ToSnapshotTree</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Lean.Language.ToSnapshotTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L221-L221","name":"Lean.Language.ToSnapshotTree.toSnapshotTree","line":221,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree.toSnapshotTree","doc":"Transforms a language-specific snapshot to a homogeneous snapshot tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree.toSnapshotTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">ToSnapshotTree</span>.<span class=\"name\">toSnapshotTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Lean.Language.ToSnapshotTree</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L219-L219","name":"Lean.Language.ToSnapshotTree.mk","line":219,"kind":"ctor","docLink":"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">ToSnapshotTree</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toSnapshotTree : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Lean.Language.ToSnapshotTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L219-L221","name":"Lean.Language.ToSnapshotTree","line":219,"kind":"class","docLink":"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree","doc":"Helper class for projecting a heterogeneous hierarchy of snapshot classes to a homogeneous\nrepresentation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">ToSnapshotTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L207-L214","name":"Lean.Language.SnapshotTree.format.go","line":207,"kind":"opaque","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.format.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.format.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTree</span>.<span class=\"name\">format</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(range? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L206-L214","name":"Lean.Language.SnapshotTree.format","line":206,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.format","doc":"Produces debug tree format of given snapshot tree, synchronously waiting on all children. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTree</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L202-L203","name":"Lean.Language.SnapshotTree.children","line":202,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.children","doc":"The asynchronously available children of the snapshot tree node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.children\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTree</span>.<span class=\"name\">children</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L199-L200","name":"Lean.Language.SnapshotTree.element","line":199,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.element","doc":"The immediately available element of the snapshot tree node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.element\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTree</span>.<span class=\"name\">element</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a> → <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L196-L196","name":"Lean.Language.instInhabitedSnapshotTree","line":196,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.instInhabitedSnapshotTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.instInhabitedSnapshotTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">instInhabitedSnapshotTree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L194-L195","name":"Lean.Language.SnapshotTree.mk","line":194,"kind":"ctor","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.mk","doc":"Creates a snapshot tree node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTree</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(element : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(children : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Lean.Language.SnapshotTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L193-L196","name":"Lean.Language.SnapshotTree","line":193,"kind":"inductive","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTree","doc":"Tree of snapshots where each snapshot comes with an array of asynchronous further subtrees. Used\nfor asynchronously collecting information about the entirety of snapshots in the language server.\nThe involved tasks may form a DAG on the `Task` dependency level but this is not captured by this\ndata structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L179-L186","name":"Lean.Language.withAlwaysResolvedPromises","line":179,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.withAlwaysResolvedPromises","doc":"Runs `act` with `count` newly created promises and finally resolves them to `default` if not done by\n`act`.\n\nAlways resolving promises involved in the snapshot tree is important to avoid deadlocking the\nlanguage server.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.withAlwaysResolvedPromises\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">withAlwaysResolvedPromises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(count : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">α</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L164-L170","name":"Lean.Language.withAlwaysResolvedPromise","line":164,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.withAlwaysResolvedPromise","doc":"Runs `act` with a newly created promise and finally resolves it to `default` if not done by `act`.\n\nAlways resolving promises involved in the snapshot tree is important to avoid deadlocking the\nlanguage server.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.withAlwaysResolvedPromise\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">withAlwaysResolvedPromise</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L156-L156","name":"Lean.Language.SnapshotBundle.new","line":156,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle.new","doc":"Promise of snapshot value for the current document. When resolved, the language server will\nreport its result even before the current elaborator invocation has finished.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle.new\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotBundle</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Lean.Language.SnapshotBundle</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L151-L151","name":"Lean.Language.SnapshotBundle.old?","line":151,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle.old?","doc":"Snapshot task of corresponding elaboration in previous document version if any, paired with its\nold syntax to be considered for reuse. Should be set to `none` as soon as reuse can be ruled out.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle.old?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotBundle</span>.<span class=\"name\">old?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Lean.Language.SnapshotBundle</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded\">Lean.Language.SyntaxGuarded</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L146-L146","name":"Lean.Language.SnapshotBundle.mk","line":146,"kind":"ctor","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotBundle</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(old? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded\">Lean.Language.SyntaxGuarded</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(new : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Lean.Language.SnapshotBundle</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L146-L156","name":"Lean.Language.SnapshotBundle","line":146,"kind":"structure","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle","doc":"Pair of (optional) old snapshot task usable for incremental reuse and new snapshot promise for\nincremental reporting. Inside the elaborator, we build snapshots by carrying such bundles and then\nchecking if we can reuse `old?` if set or else redoing the corresponding elaboration step. In either\ncase, we derive new bundles for nested snapshots, if any, and finally `resolve` `new` to the result.\n\nNote that failing to `resolve` a created promise will block the language server indefinitely!\nWe use `withAlwaysResolvedPromise`/`withAlwaysResolvedPromises` to ensure this doesn't happen.\n\nIn the future, the 1-element history `old?` may be replaced with a global cache indexed by strong\nhashes but the promise will still need to be passed through the elaborator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotBundle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L132-L132","name":"Lean.Language.SyntaxGuarded.val","line":132,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded.val","doc":"Potentially reusable value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SyntaxGuarded</span>.<span class=\"name\">val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded\">Lean.Language.SyntaxGuarded</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L130-L130","name":"Lean.Language.SyntaxGuarded.stx","line":130,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded.stx","doc":"Syntax to be inspected for reuse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SyntaxGuarded</span>.<span class=\"name\">stx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded\">Lean.Language.SyntaxGuarded</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L128-L128","name":"Lean.Language.SyntaxGuarded.mk","line":128,"kind":"ctor","docLink":"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SyntaxGuarded</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded\">Lean.Language.SyntaxGuarded</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L128-L132","name":"Lean.Language.SyntaxGuarded","line":128,"kind":"structure","docLink":"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded","doc":"Arbitrary value paired with a syntax that should be inspected when considering the value for reuse.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SyntaxGuarded\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SyntaxGuarded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L122-L123","name":"Lean.Language.SnapshotTask.get?","line":122,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.get?","doc":"Returns task result if already finished or else `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.get?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L118-L119","name":"Lean.Language.SnapshotTask.get","line":118,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.get","doc":"Synchronously waits on the result of the task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.get\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L110-L115","name":"Lean.Language.SnapshotTask.bindIO","line":110,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.bindIO","doc":"Chains two snapshot tasks. The range is taken from the first task if not specified; the range of\nthe second task is discarded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.bindIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">bindIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">β</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(range? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.range?</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sync : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L103-L105","name":"Lean.Language.SnapshotTask.bind","line":103,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.bind","doc":"Chains two snapshot tasks. The range is taken from the first task if not specified; the range of\nthe second task is discarded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.bind\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(range? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.range?</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sync : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L96-L98","name":"Lean.Language.SnapshotTask.map","line":96,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.map","doc":"Transforms a task's output without changing the reporting range. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.map\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(range? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.range?</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sync : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L92-L93","name":"Lean.Language.SnapshotTask.cancel","line":92,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.cancel","doc":"Explicitly cancels a tasks. Like with basic `Tasks`s, cancellation happens implicitly when the\nlast reference to the task is dropped *if* it is not an I/O task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.cancel\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L84-L87","name":"Lean.Language.SnapshotTask.pure","line":84,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.pure","doc":"Creates a finished snapshot task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.pure\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L77-L81","name":"Lean.Language.SnapshotTask.ofIO","line":77,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.ofIO","doc":"Creates a snapshot task from a reporting range and a `BaseIO` action. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.ofIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">ofIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(range? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L74-L74","name":"Lean.Language.instNonemptySnapshotTask","line":74,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.instNonemptySnapshotTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.instNonemptySnapshotTask\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">instNonemptySnapshotTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>], <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L73-L73","name":"Lean.Language.SnapshotTask.task","line":73,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.task","doc":"Underlying task producing the snapshot. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.task\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">task</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L71-L71","name":"Lean.Language.SnapshotTask.range?","line":71,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.range?","doc":"Range that is marked as being processed by the server while the task is running. If `none`,\nthe range of the outer task if some or else the entire file is reported.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.range?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">range?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L66-L66","name":"Lean.Language.SnapshotTask.mk","line":66,"kind":"ctor","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(range? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(task : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L66-L74","name":"Lean.Language.SnapshotTask","line":66,"kind":"structure","docLink":"./Lean/Language/Basic.html#Lean.Language.SnapshotTask","doc":"A task producing some snapshot type (usually a subclass of `Snapshot`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">SnapshotTask</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L60-L60","name":"Lean.Language.instInhabitedSnapshot","line":60,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.instInhabitedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.instInhabitedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">instInhabitedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L59-L59","name":"Lean.Language.Snapshot.isFatal","line":59,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot.isFatal","doc":"Whether it should be indicated to the user that a fatal error (which should be part of\n`diagnostics`) occurred that prevents processing of the remainder of the file.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.isFatal\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">isFatal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L54-L54","name":"Lean.Language.Snapshot.infoTree?","line":54,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot.infoTree?","doc":"General elaboration metadata produced by this step. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.infoTree?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">infoTree?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L52-L52","name":"Lean.Language.Snapshot.diagnostics","line":52,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot.diagnostics","doc":"The messages produced by this step. The union of message logs of all finished snapshots is\nreported to the user. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.diagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">diagnostics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics\">Lean.Language.Snapshot.Diagnostics</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L48-L48","name":"Lean.Language.Snapshot.mk","line":48,"kind":"ctor","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(diagnostics : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics\">Lean.Language.Snapshot.Diagnostics</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(infoTree? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isFatal : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L48-L60","name":"Lean.Language.Snapshot","line":48,"kind":"structure","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot","doc":"The base class of all snapshots: all the generic information the language server needs about a\nsnapshot. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L40-L43","name":"Lean.Language.Snapshot.Diagnostics.empty","line":40,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics.empty","doc":"The empty set of diagnostics. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics\">Lean.Language.Snapshot.Diagnostics</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L37-L37","name":"Lean.Language.Snapshot.instInhabitedDiagnostics","line":37,"kind":"instance","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot.instInhabitedDiagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.instInhabitedDiagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">instInhabitedDiagnostics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics\">Lean.Language.Snapshot.Diagnostics</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L36-L36","name":"Lean.Language.Snapshot.Diagnostics.interactiveDiagsRef?","line":36,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics.interactiveDiagsRef?","doc":"Dynamic mutable slot usable by the language server for memorizing interactive diagnostics. If\n`none`, interactive diagnostics are not remembered, which should only be used for messages not\ncontaining any interactive elements as client-side state will be lost on recreating a diagnostic.\n\nSee also section \"Communication\" in Lean/Server/README.md.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics.interactiveDiagsRef?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">interactiveDiagsRef?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics\">Lean.Language.Snapshot.Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L28-L28","name":"Lean.Language.Snapshot.Diagnostics.msgLog","line":28,"kind":"def","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics.msgLog","doc":"Non-interactive message log. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics.msgLog\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">msgLog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics\">Lean.Language.Snapshot.Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Language/Basic.lean#L25-L37","name":"Lean.Language.Snapshot.Diagnostics","line":25,"kind":"structure","docLink":"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics","doc":"`MessageLog` with interactive diagnostics.\n\nCan be created using `Diagnostics.empty` or `Diagnostics.ofMessageLog`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot.Diagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">Diagnostics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}