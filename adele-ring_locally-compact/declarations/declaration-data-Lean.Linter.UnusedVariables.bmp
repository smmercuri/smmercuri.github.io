{"name":"Lean.Linter.UnusedVariables","instances":[],"imports":["Lean.Elab.Command","Lean.Linter.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L515-L516","name":"Lean.MessageData.isUnusedVariableWarning","line":515,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.MessageData.isUnusedVariableWarning","doc":"Returns true if this is a message produced by the unused variable linter.\nThis is used to give these messages an additional \"faded\" style in the editor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.MessageData.isUnusedVariableWarning\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">isUnusedVariableWarning</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L421-L506","name":"Lean.Linter.UnusedVariables.unusedVariables","line":421,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.unusedVariables","doc":"Reports unused variable warnings on each command. Use `linter.unusedVariables` to disable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.unusedVariables\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">unusedVariables</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L414-L418","name":"Lean.Linter.UnusedVariables.collectReferences.skipDeclIdIfPresent","line":414,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.collectReferences.skipDeclIdIfPresent","doc":"Since declarations attach the declaration info to the `declId`,\nwe skip that to get to the `.ident` if possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.collectReferences.skipDeclIdIfPresent\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">collectReferences</span>.<span class=\"name\">skipDeclIdIfPresent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L363-L418","name":"Lean.Linter.UnusedVariables.collectReferences","line":363,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.collectReferences","doc":"Collect information from the `infoTrees` into `References`.\nSee `References` for more information about the return value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.collectReferences\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">collectReferences</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(infoTrees : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmdStxRange : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References\">Lean.Linter.UnusedVariables.References</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L359-L359","name":"Lean.Linter.UnusedVariables.References.assignments","line":359,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.assignments","doc":"Collection of all `MetavarContext`s following the execution of a tactic. We trawl these\nif needed to find additional `fvarUses`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.assignments\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">References</span>.<span class=\"name\">assignments</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References\">Lean.Linter.UnusedVariables.References</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">Lean.PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L356-L356","name":"Lean.Linter.UnusedVariables.References.fvarAliases","line":356,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.fvarAliases","doc":"A mapping from alias to original FVarId. We don't guarantee that the value is not itself\nan alias, but we use `followAliases` when adding new elements to try to avoid long chains. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.fvarAliases\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">References</span>.<span class=\"name\">fvarAliases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References\">Lean.Linter.UnusedVariables.References</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L352-L352","name":"Lean.Linter.UnusedVariables.References.fvarUses","line":352,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.fvarUses","doc":"The set of `FVarId`s that are used directly. These may or may not be aliases. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.fvarUses\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">References</span>.<span class=\"name\">fvarUses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References\">Lean.Linter.UnusedVariables.References</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L350-L350","name":"Lean.Linter.UnusedVariables.References.fvarDefs","line":350,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.fvarDefs","doc":"The collection of all local declarations, organized by the span of the declaration.\nWe collapse all declarations declared at the same position into a single record using\n`FVarDefinition.aliases`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.fvarDefs\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">References</span>.<span class=\"name\">fvarDefs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References\">Lean.Linter.UnusedVariables.References</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a> <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition\">Lean.Linter.UnusedVariables.FVarDefinition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L346-L346","name":"Lean.Linter.UnusedVariables.References.constDecls","line":346,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.constDecls","doc":"The set of all (ranges corresponding to) global definitions that are made in the syntax.\nFor example in `mutual def foo := ...  def bar := ... where baz := ... end` this would be\nthe spans for `foo`, `bar`, and `baz`. Global definitions are always treated as used.\n(It would be nice to be able to detect unused global definitions but this requires more\ninformation than the linter framework can provide.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.constDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">References</span>.<span class=\"name\">constDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References\">Lean.Linter.UnusedVariables.References</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L340-L340","name":"Lean.Linter.UnusedVariables.References.mk","line":340,"kind":"ctor","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">References</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constDecls : <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarDefs : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a> <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition\">Lean.Linter.UnusedVariables.FVarDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarUses : <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarAliases : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">Lean.PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References\">Lean.Linter.UnusedVariables.References</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L340-L359","name":"Lean.Linter.UnusedVariables.References","line":340,"kind":"structure","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References","doc":"The main data structure used to collect information from the info tree regarding unused\nvariables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.References\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">References</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L336-L336","name":"Lean.Linter.UnusedVariables.FVarDefinition.aliases","line":336,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition.aliases","doc":"The list of all `FVarId`s that are considered as being defined at this position.\nThis can have more than one element if multiple variables are declared by the same\nsyntax, such as the `h` in `if h : c then ... else ...`. We only report an unused variable\nat this span if all variables in `aliases` are unused. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition.aliases\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">FVarDefinition</span>.<span class=\"name\">aliases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition\">Lean.Linter.UnusedVariables.FVarDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L331-L331","name":"Lean.Linter.UnusedVariables.FVarDefinition.opts","line":331,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition.opts","doc":"The options set locally to this part of the syntax (used by `IgnoreFn`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition.opts\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">FVarDefinition</span>.<span class=\"name\">opts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition\">Lean.Linter.UnusedVariables.FVarDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L329-L329","name":"Lean.Linter.UnusedVariables.FVarDefinition.stx","line":329,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition.stx","doc":"A (usually `.ident`) syntax for the defined variable "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">FVarDefinition</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition\">Lean.Linter.UnusedVariables.FVarDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L327-L327","name":"Lean.Linter.UnusedVariables.FVarDefinition.userName","line":327,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition.userName","doc":"The user-provided name of the `FVarId` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition.userName\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">FVarDefinition</span>.<span class=\"name\">userName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition\">Lean.Linter.UnusedVariables.FVarDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L325-L325","name":"Lean.Linter.UnusedVariables.FVarDefinition.mk","line":325,"kind":"ctor","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">FVarDefinition</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(userName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(aliases : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition\">Lean.Linter.UnusedVariables.FVarDefinition</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L325-L336","name":"Lean.Linter.UnusedVariables.FVarDefinition","line":325,"kind":"structure","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition","doc":"Information regarding an `FVarId` definition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.FVarDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">FVarDefinition</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L319-L322","name":"Lean.Linter.UnusedVariables.followAliases","line":319,"kind":"opaque","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.followAliases","doc":"Given `aliases` as a map from an alias to what it aliases, we get the original\nterm by recursion. This has no cycle detection, so if `aliases` contains a loop\nthen this function will recurse infinitely. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.followAliases\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">followAliases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(aliases : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L309-L314","name":"Lean.Linter.UnusedVariables.visitAssignments.visitExpr","line":309,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.visitAssignments.visitExpr","doc":"Visit an `Expr`, collecting all fvars in it into `fvarUses` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.visitAssignments.visitExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">visitAssignments</span>.<span class=\"name\">visitExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(set : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarUses : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadCache.html#Lean.MonadCacheT\">Lean.MonadCacheT</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L302-L307","name":"Lean.Linter.UnusedVariables.visitAssignments.visitEntry","line":302,"kind":"opaque","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.visitAssignments.visitEntry","doc":"Visit a `PersistentHashMap.Entry`, collecting all fvars in it into `fvarUses` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.visitAssignments.visitEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">visitAssignments</span>.<span class=\"name\">visitEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(set : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarUses : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Entry\">Lean.PersistentHashMap.Entry</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node\">Lean.PersistentHashMap.Node</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadCache.html#Lean.MonadCacheT\">Lean.MonadCacheT</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L296-L300","name":"Lean.Linter.UnusedVariables.visitAssignments.visitNode","line":296,"kind":"opaque","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.visitAssignments.visitNode","doc":"Visit a `PersistentHashMap.Node`, collecting all fvars in it into `fvarUses` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.visitAssignments.visitNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">visitAssignments</span>.<span class=\"name\">visitNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(set : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarUses : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(node : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node\">Lean.PersistentHashMap.Node</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadCache.html#Lean.MonadCacheT\">Lean.MonadCacheT</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L288-L314","name":"Lean.Linter.UnusedVariables.visitAssignments","line":288,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.visitAssignments","doc":"Collects into `fvarUses` all `fvar`s occurring in the `Expr`s in `assignments`.\nThis implementation respects subterm sharing in both the `PersistentHashMap` and the `Expr`\nto ensure that pointer-equal subobjects are not visited multiple times, which is important\nin practice because these expressions are very frequently highly shared.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.visitAssignments\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">visitAssignments</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(set : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarUses : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">Lean.PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L280-L280","name":"Lean.Linter.UnusedVariables.insertObj","line":280,"kind":"opaque","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.insertObj","doc":"Collect into a heterogeneous collection of objects with external storage. This uses\npointer identity and does not store the objects, so it is important not to store the last\npointer to an object in the map, or it can be freed and reused, resulting in incorrect behavior.\n\nReturns `true` if the object was not already in the set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.insertObj\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">insertObj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(set : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L273-L277","name":"Lean.Linter.UnusedVariables.insertObjImpl","line":273,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.insertObjImpl","doc":"Collect into a heterogeneous collection of objects with external storage. This uses\npointer identity and does not store the objects, so it is important not to store the last\npointer to an object in the map, or it can be freed and reused, resulting in incorrect behavior.\n\nReturns `true` if the object was not already in the set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.UnusedVariables.insertObjImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedVariables</span>.<span class=\"name\">insertObjImpl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(set : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L263-L264","name":"Lean.Linter.getUnusedVariablesIgnoreFns","line":263,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.getUnusedVariablesIgnoreFns","doc":"Get the current list of `IgnoreFunction`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.getUnusedVariablesIgnoreFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">getUnusedVariablesIgnoreFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.IgnoreFunction\">Lean.Linter.IgnoreFunction</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L127-L138","name":"Lean.Linter.unusedVariablesIgnoreFnsExt","line":127,"kind":"opaque","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.unusedVariablesIgnoreFnsExt","doc":"An extension which keeps track of registered `IgnoreFunction`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.unusedVariablesIgnoreFnsExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">unusedVariablesIgnoreFnsExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.IgnoreFunction\">Lean.Linter.IgnoreFunction</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.IgnoreFunction\">Lean.Linter.IgnoreFunction</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L124-L125","name":"Lean.Linter.addBuiltinUnusedVariablesIgnoreFn","line":124,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.addBuiltinUnusedVariablesIgnoreFn","doc":"Adds a new builtin `IgnoreFunction`.\nThis function should only be used from within the `Lean` package. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.addBuiltinUnusedVariablesIgnoreFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">addBuiltinUnusedVariablesIgnoreFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.IgnoreFunction\">Lean.Linter.IgnoreFunction</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L119-L120","name":"Lean.Linter.builtinUnusedVariablesIgnoreFnsRef","line":119,"kind":"opaque","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.builtinUnusedVariablesIgnoreFnsRef","doc":"The list of builtin `IgnoreFunction`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.builtinUnusedVariablesIgnoreFnsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">builtinUnusedVariablesIgnoreFnsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.IgnoreFunction\">Lean.Linter.IgnoreFunction</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L117-L117","name":"Lean.Linter.mkIgnoreFn","line":117,"kind":"opaque","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.mkIgnoreFn","doc":"Interpret an `IgnoreFunction` from the environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.mkIgnoreFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">mkIgnoreFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.IgnoreFunction\">Lean.Linter.IgnoreFunction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L107-L114","name":"Lean.Linter.mkIgnoreFnImpl","line":107,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.mkIgnoreFnImpl","doc":"Interpret an `IgnoreFunction` from the environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.mkIgnoreFnImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">mkIgnoreFnImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.IgnoreFunction\">Lean.Linter.IgnoreFunction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L104-L104","name":"Lean.Linter.IgnoreFunction","line":104,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.IgnoreFunction","doc":"An `IgnoreFunction` receives:\n\n* a `Syntax.ident` for the unused variable\n* a `Syntax.Stack` with the location of this piece of syntax in the command\n* The `Options` set locally to this syntax\n\nand should return `true` to indicate that the lint should be suppressed,\nor `false` to proceed with linting as usual (other `IgnoreFunction`s may still\nsay it is ignored). A variable is only linted if it is unused and no\n`IgnoreFunction` returns `true` on this syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.IgnoreFunction\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">IgnoreFunction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L90-L91","name":"Lean.Linter.getLinterUnusedVariablesPatternVars","line":90,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.getLinterUnusedVariablesPatternVars","doc":"Gets the status of `linter.unusedVariables.patternVars` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.getLinterUnusedVariablesPatternVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">getLinterUnusedVariablesPatternVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L86-L87","name":"Lean.Linter.getLinterUnusedVariablesFunArgs","line":86,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.getLinterUnusedVariablesFunArgs","doc":"Gets the status of `linter.unusedVariables.funArgs` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.getLinterUnusedVariablesFunArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">getLinterUnusedVariablesFunArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L82-L83","name":"Lean.Linter.getLinterUnusedVariables","line":82,"kind":"def","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.getLinterUnusedVariables","doc":"Gets the status of `linter.unusedVariables` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.getLinterUnusedVariables\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">getLinterUnusedVariables</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L75-L79","name":"Lean.Linter.linter.unusedVariables.patternVars","line":75,"kind":"opaque","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.linter.unusedVariables.patternVars","doc":"Enables or disables unused variable linter warnings in patterns "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.linter.unusedVariables.patternVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">unusedVariables</span>.<span class=\"name\">patternVars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L70-L74","name":"Lean.Linter.linter.unusedVariables.funArgs","line":70,"kind":"opaque","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.linter.unusedVariables.funArgs","doc":"Enables or disables unused variable linter warnings in function arguments "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.linter.unusedVariables.funArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">unusedVariables</span>.<span class=\"name\">funArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Linter/UnusedVariables.lean#L65-L69","name":"Lean.Linter.linter.unusedVariables","line":65,"kind":"opaque","docLink":"./Lean/Linter/UnusedVariables.html#Lean.Linter.linter.unusedVariables","doc":"Enables or disables all unused variable linter warnings "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.linter.unusedVariables\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">unusedVariables</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}