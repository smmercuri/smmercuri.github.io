{"name":"Lean.Message","instances":[{"typeNames":["Lean.MessageSeverity"],"name":"Lean.instInhabitedMessageSeverity","className":"Inhabited"},{"typeNames":["Lean.MessageSeverity"],"name":"Lean.instBEqMessageSeverity","className":"BEq"},{"typeNames":["Lean.MessageSeverity"],"name":"Lean.instToJsonMessageSeverity","className":"Lean.ToJson"},{"typeNames":["Lean.MessageSeverity"],"name":"Lean.instFromJsonMessageSeverity","className":"Lean.FromJson"},{"typeNames":["Lean.MessageData"],"name":"Lean.instInhabitedMessageData","className":"Inhabited"},{"typeNames":["Lean.MessageData"],"name":"Lean.instTypeNameMessageData","className":"TypeName"},{"typeNames":["Lean.MessageData"],"name":"Lean.MessageData.instAppend","className":"Append"},{"typeNames":["String","Lean.MessageData"],"name":"Lean.MessageData.instCoeString","className":"Coe"},{"typeNames":["Std.Format","Lean.MessageData"],"name":"Lean.MessageData.instCoeFormat","className":"Coe"},{"typeNames":["Lean.Level","Lean.MessageData"],"name":"Lean.MessageData.instCoeLevel","className":"Coe"},{"typeNames":["Lean.Expr","Lean.MessageData"],"name":"Lean.MessageData.instCoeExpr","className":"Coe"},{"typeNames":["Lean.Name","Lean.MessageData"],"name":"Lean.MessageData.instCoeName","className":"Coe"},{"typeNames":["Lean.Syntax","Lean.MessageData"],"name":"Lean.MessageData.instCoeSyntax","className":"Coe"},{"typeNames":["Lean.MVarId","Lean.MessageData"],"name":"Lean.MessageData.instCoeMVarId","className":"Coe"},{"typeNames":["Option","Lean.MessageData"],"name":"Lean.MessageData.instCoeOptionExpr","className":"Coe"},{"typeNames":["Array","Lean.MessageData"],"name":"Lean.MessageData.instCoeArrayExpr","className":"Coe"},{"typeNames":["List","Lean.MessageData"],"name":"Lean.MessageData.instCoeList","className":"Coe"},{"typeNames":["List","Lean.MessageData"],"name":"Lean.MessageData.instCoeListExpr","className":"Coe"},{"typeNames":["Lean.BaseMessage"],"name":"Lean.instInhabitedBaseMessage","className":"Inhabited"},{"typeNames":["Lean.BaseMessage"],"name":"Lean.instToJsonBaseMessage","className":"Lean.ToJson"},{"typeNames":["Lean.BaseMessage"],"name":"Lean.instFromJsonBaseMessage","className":"Lean.FromJson"},{"typeNames":["Lean.SerialMessage"],"name":"Lean.SerialMessage.instToString","className":"ToString"},{"typeNames":["Lean.MessageLog"],"name":"Lean.instInhabitedMessageLog","className":"Inhabited"},{"typeNames":["Lean.MessageLog"],"name":"Lean.MessageLog.instAppend","className":"Append"},{"typeNames":[],"name":"Lean.instAddMessageContextOfMonadLift","className":"Lean.AddMessageContext"},{"typeNames":[],"name":"Lean.instToMessageDataOfToFormat","className":"Lean.ToMessageData"},{"typeNames":["Lean.Expr"],"name":"Lean.instToMessageDataExpr","className":"Lean.ToMessageData"},{"typeNames":["Lean.Level"],"name":"Lean.instToMessageDataLevel","className":"Lean.ToMessageData"},{"typeNames":["Lean.Name"],"name":"Lean.instToMessageDataName","className":"Lean.ToMessageData"},{"typeNames":["String"],"name":"Lean.instToMessageDataString","className":"Lean.ToMessageData"},{"typeNames":["Lean.Syntax"],"name":"Lean.instToMessageDataSyntax","className":"Lean.ToMessageData"},{"typeNames":["Lean.TSyntax"],"name":"Lean.instToMessageDataTSyntax","className":"Lean.ToMessageData"},{"typeNames":["Std.Format"],"name":"Lean.instToMessageDataFormat","className":"Lean.ToMessageData"},{"typeNames":["Lean.MVarId"],"name":"Lean.instToMessageDataMVarId","className":"Lean.ToMessageData"},{"typeNames":["Lean.MessageData"],"name":"Lean.instToMessageDataMessageData","className":"Lean.ToMessageData"},{"typeNames":["List"],"name":"Lean.instToMessageDataList","className":"Lean.ToMessageData"},{"typeNames":["Array"],"name":"Lean.instToMessageDataArray","className":"Lean.ToMessageData"},{"typeNames":["Subarray"],"name":"Lean.instToMessageDataSubarray","className":"Lean.ToMessageData"},{"typeNames":["Option"],"name":"Lean.instToMessageDataOption","className":"Lean.ToMessageData"},{"typeNames":["Prod"],"name":"Lean.instToMessageDataProd","className":"Lean.ToMessageData"},{"typeNames":["Option"],"name":"Lean.instToMessageDataOptionExpr","className":"Lean.ToMessageData"}],"imports":["Lean.Data.Position","Lean.Data.OpenDecl","Lean.MetavarContext","Lean.Environment","Lean.Util.PPExt","Lean.Util.Sorry"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L473-L499","name":"Lean.KernelException.toMessageData","line":473,"kind":"def","docLink":"./Lean/Message.html#Lean.KernelException.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.KernelException.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">KernelException</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Environment.html#Lean.KernelException\">Lean.KernelException</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L465-L466","name":"Lean.toMessageList","line":465,"kind":"def","docLink":"./Lean/Message.html#Lean.toMessageList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.toMessageList\"><span class=\"name\">Lean</span>.<span class=\"name\">toMessageList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L460-L460","name":"Lean.termM!_","line":460,"kind":"def","docLink":"./Lean/Message.html#Lean.termM!_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.termM!_\"><span class=\"name\">Lean</span>.<span class=\"name\">termM!_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L458-L458","name":"Lean.instToMessageDataOptionExpr","line":458,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataOptionExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataOptionExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataOptionExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L456-L457","name":"Lean.instToMessageDataProd","line":456,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataProd\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L455-L455","name":"Lean.instToMessageDataOption","line":455,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataOption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataOption\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L454-L454","name":"Lean.instToMessageDataSubarray","line":454,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataSubarray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataSubarray\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L453-L453","name":"Lean.instToMessageDataArray","line":453,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataArray\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L452-L452","name":"Lean.instToMessageDataList","line":452,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataList\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L451-L451","name":"Lean.instToMessageDataMessageData","line":451,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L450-L450","name":"Lean.instToMessageDataMVarId","line":450,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataMVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L449-L449","name":"Lean.instToMessageDataFormat","line":449,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L448-L448","name":"Lean.instToMessageDataTSyntax","line":448,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataTSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L447-L447","name":"Lean.instToMessageDataSyntax","line":447,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L446-L446","name":"Lean.instToMessageDataString","line":446,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataString\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L445-L445","name":"Lean.instToMessageDataName","line":445,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataName\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L444-L444","name":"Lean.instToMessageDataLevel","line":444,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L443-L443","name":"Lean.instToMessageDataExpr","line":443,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L442-L442","name":"Lean.instToMessageDataOfToFormat","line":442,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataOfToFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataOfToFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataOfToFormat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L437-L440","name":"Lean.stringToMessageData","line":437,"kind":"def","docLink":"./Lean/Message.html#Lean.stringToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.stringToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">stringToMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(str : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L433-L433","name":"Lean.ToMessageData.toMessageData","line":433,"kind":"def","docLink":"./Lean/Message.html#Lean.ToMessageData.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.ToMessageData.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">ToMessageData</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L432-L432","name":"Lean.ToMessageData.mk","line":432,"kind":"ctor","docLink":"./Lean/Message.html#Lean.ToMessageData.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.ToMessageData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ToMessageData</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toMessageData : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L432-L433","name":"Lean.ToMessageData","line":432,"kind":"class","docLink":"./Lean/Message.html#Lean.ToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.ToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">ToMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L425-L430","name":"Lean.addMessageContextFull","line":425,"kind":"def","docLink":"./Lean/Message.html#Lean.addMessageContextFull","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.addMessageContextFull\"><span class=\"name\">Lean</span>.<span class=\"name\">addMessageContextFull</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">Lean.MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msgData : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L420-L423","name":"Lean.addMessageContextPartial","line":420,"kind":"def","docLink":"./Lean/Message.html#Lean.addMessageContextPartial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.addMessageContextPartial\"><span class=\"name\">Lean</span>.<span class=\"name\">addMessageContextPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msgData : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L417-L418","name":"Lean.instAddMessageContextOfMonadLift","line":417,"kind":"instance","docLink":"./Lean/Message.html#Lean.instAddMessageContextOfMonadLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instAddMessageContextOfMonadLift\"><span class=\"name\">Lean</span>.<span class=\"name\">instAddMessageContextOfMonadLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">Lean.AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">Lean.AddMessageContext</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L413-L413","name":"Lean.AddMessageContext.addMessageContext","line":413,"kind":"def","docLink":"./Lean/Message.html#Lean.AddMessageContext.addMessageContext","doc":"Without context, a `MessageData` object may be be missing information\n(e.g. hover info) for pretty printing, or may print an error. Hence,\n`addMessageContext` should be called on all constructed `MessageData`\n(e.g. via `m!`) before taking it out of context (e.g. leaving `MetaM` or\n`CoreM`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.AddMessageContext.addMessageContext\"><span class=\"name\">Lean</span>.<span class=\"name\">AddMessageContext</span>.<span class=\"name\">addMessageContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">Lean.AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L405-L405","name":"Lean.AddMessageContext.mk","line":405,"kind":"ctor","docLink":"./Lean/Message.html#Lean.AddMessageContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.AddMessageContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">AddMessageContext</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(addMessageContext : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">Lean.AddMessageContext</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L405-L413","name":"Lean.AddMessageContext","line":405,"kind":"class","docLink":"./Lean/Message.html#Lean.AddMessageContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.AddMessageContext\"><span class=\"name\">Lean</span>.<span class=\"name\">AddMessageContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L402-L403","name":"Lean.indentExpr","line":402,"kind":"def","docLink":"./Lean/Message.html#Lean.indentExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.indentExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">indentExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L399-L400","name":"Lean.indentD","line":399,"kind":"def","docLink":"./Lean/Message.html#Lean.indentD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.indentD\"><span class=\"name\">Lean</span>.<span class=\"name\">indentD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L396-L397","name":"Lean.MessageData.nestD","line":396,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.nestD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.nestD\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">nestD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L391-L392","name":"Lean.MessageLog.toArray","line":391,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.toArray","doc":"Converts the unreported messages to an array, oldest message first. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.toArray\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">toArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L387-L388","name":"Lean.MessageLog.toList","line":387,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.toList","doc":"Converts the unreported messages to a list, oldest message first. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.toList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L383-L384","name":"Lean.MessageLog.forM","line":383,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.forM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.forM\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L380-L381","name":"Lean.MessageLog.getInfoMessages","line":380,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.getInfoMessages","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.getInfoMessages\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">getInfoMessages</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L377-L378","name":"Lean.MessageLog.errorsToWarnings","line":377,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.errorsToWarnings","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.errorsToWarnings\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">errorsToWarnings</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L374-L375","name":"Lean.MessageLog.hasErrors","line":374,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.hasErrors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.hasErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">hasErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L371-L372","name":"Lean.MessageLog.instAppend","line":371,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageLog.instAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.instAppend\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L368-L369","name":"Lean.MessageLog.append","line":368,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.append\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L365-L366","name":"Lean.MessageLog.add","line":365,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.add\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L362-L363","name":"Lean.MessageLog.hasUnreported","line":362,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.hasUnreported","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.hasUnreported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">hasUnreported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L360-L360","name":"Lean.MessageLog.msgs","line":360,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.msgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.msgs\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">msgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a> → <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L356-L356","name":"Lean.MessageLog.empty","line":356,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L353-L353","name":"Lean.instInhabitedMessageLog","line":353,"kind":"instance","docLink":"./Lean/Message.html#Lean.instInhabitedMessageLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L352-L352","name":"Lean.MessageLog.unreported","line":352,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.unreported","doc":"The list of messages not already reported, in insertion order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.unreported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">unreported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L350-L350","name":"Lean.MessageLog.hadErrors","line":350,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.hadErrors","doc":"If true, there was an error in the log previously that has already been reported to the user and\nremoved from the log. Thus we say that in the current context (usually the current command), we\n\"have errors\" if either this flag is set or there is an error in `msgs`; see\n`MessageLog.hasErrors`. If we have errors, we suppress some error messages that are often the\nresult of a previous error.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.hadErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">hadErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L337-L337","name":"Lean.MessageLog.mk","line":337,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageLog.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hadErrors : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unreported : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L337-L353","name":"Lean.MessageLog","line":337,"kind":"structure","docLink":"./Lean/Message.html#Lean.MessageLog","doc":"A persistent array of messages.\n\nIn the Lean elaborator, we use a fresh message log per command but may also report diagnostics at\nvarious points inside a command, which will empty `unreported` and updated `hadErrors` accordingly\n(see `CoreM.getAndEmptyMessageLog`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L324-L326","name":"Lean.Message.toJson","line":324,"kind":"def","docLink":"./Lean/Message.html#Lean.Message.toJson","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.toJson\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">toJson</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L320-L322","name":"Lean.Message.toString","line":320,"kind":"def","docLink":"./Lean/Message.html#Lean.Message.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(includeEndPos : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L317-L318","name":"Lean.Message.serialize","line":317,"kind":"def","docLink":"./Lean/Message.html#Lean.Message.serialize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.serialize\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">serialize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">Lean.SerialMessage</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L311-L311","name":"Lean.SerialMessage.instToString","line":311,"kind":"instance","docLink":"./Lean/Message.html#Lean.SerialMessage.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">Lean.SerialMessage</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L298-L309","name":"Lean.SerialMessage.toString","line":298,"kind":"def","docLink":"./Lean/Message.html#Lean.SerialMessage.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.SerialMessage\">Lean.SerialMessage</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(includeEndPos : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L295-L296","name":"Lean.SerialMessage.toMessage","line":295,"kind":"def","docLink":"./Lean/Message.html#Lean.SerialMessage.toMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.toMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">toMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.SerialMessage\">Lean.SerialMessage</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L291-L291","name":"Lean.SerialMessage","line":291,"kind":"def","docLink":"./Lean/Message.html#Lean.SerialMessage","doc":"A `SerialMessage` is a `Message` whose `MessageData` has been eagerly\nserialized and is thus appropriate for use in pure contexts where the effectful\n`MessageData.toString` cannot be used. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L286-L286","name":"Lean.Message","line":286,"kind":"def","docLink":"./Lean/Message.html#Lean.Message","doc":"A `Message` is a richly formatted piece of information emitted by Lean.\nThey are rendered by client editors in the infoview and in diagnostic windows. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L282-L282","name":"Lean.instFromJsonBaseMessage","line":282,"kind":"instance","docLink":"./Lean/Message.html#Lean.instFromJsonBaseMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonBaseMessage</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L282-L282","name":"Lean.instToJsonBaseMessage","line":282,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToJsonBaseMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonBaseMessage</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L282-L282","name":"Lean.instInhabitedBaseMessage","line":282,"kind":"instance","docLink":"./Lean/Message.html#Lean.instInhabitedBaseMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedBaseMessage</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L281-L281","name":"Lean.BaseMessage.data","line":281,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.data","doc":"The content of the message. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.data\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L279-L279","name":"Lean.BaseMessage.caption","line":279,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.caption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.caption\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">caption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L278-L278","name":"Lean.BaseMessage.severity","line":278,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.severity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.severity\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">severity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L277-L277","name":"Lean.BaseMessage.keepFullRange","line":277,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.keepFullRange","doc":"If `true`, report range as given; see `msgToInteractiveDiagnostic`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.keepFullRange\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">keepFullRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L275-L275","name":"Lean.BaseMessage.endPos","line":275,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.endPos\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Position.html#Lean.Position\">Lean.Position</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L274-L274","name":"Lean.BaseMessage.pos","line":274,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.pos\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Position.html#Lean.Position\">Lean.Position</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L273-L273","name":"Lean.BaseMessage.fileName","line":273,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.fileName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.fileName\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">fileName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L272-L272","name":"Lean.BaseMessage.mk","line":272,"kind":"ctor","docLink":"./Lean/Message.html#Lean.BaseMessage.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fileName : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Lean/Data/Position.html#Lean.Position\">Lean.Position</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(endPos : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Position.html#Lean.Position\">Lean.Position</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(keepFullRange : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(severity : <a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(caption : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(data : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L272-L282","name":"Lean.BaseMessage","line":272,"kind":"structure","docLink":"./Lean/Message.html#Lean.BaseMessage","doc":"A `BaseMessage` is a richly formatted piece of information emitted by Lean.\nThey are rendered by client editors in the infoview and in diagnostic windows.\nThere are two varieties in the Lean core:\n* `Message`: Uses structured, effectful `MessageData` for formatting content.\n* `SerialMessage`: Stores pure `String` data. Obtained by running the effectful\n`Message.serialize`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L260-L260","name":"Lean.MessageData.instCoeListExpr","line":260,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeListExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeListExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeListExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L259-L259","name":"Lean.MessageData.instCoeList","line":259,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L256-L257","name":"Lean.MessageData.ofArray","line":256,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofArray","doc":"See `MessageData.ofList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofArray\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L251-L253","name":"Lean.MessageData.ofList","line":251,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofList","doc":"Write the given list of messages as a list, separating each item with `,\\n` and surrounding with square brackets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L245-L248","name":"Lean.MessageData.joinSep","line":245,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.joinSep","doc":"Append the given list of messages with the given separator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.joinSep\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">joinSep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L243-L243","name":"Lean.MessageData.sbracket","line":243,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.sbracket","doc":"Wrap the given message in square brackets `[]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.sbracket\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">sbracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L241-L241","name":"Lean.MessageData.paren","line":241,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.paren","doc":"Wrap the given message in parentheses `()`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.paren\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">paren</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L239-L239","name":"Lean.MessageData.bracket","line":239,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.bracket","doc":"Wrap the given message in `l` and `r`. See also `Format.bracket`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.bracket\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">bracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L236-L236","name":"Lean.MessageData.instCoeArrayExpr","line":236,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeArrayExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeArrayExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeArrayExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L228-L234","name":"Lean.MessageData.arrayExpr.toMessageData","line":228,"kind":"opaque","docLink":"./Lean/Message.html#Lean.MessageData.arrayExpr.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.arrayExpr.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">arrayExpr</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(es : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L226-L226","name":"Lean.MessageData.instCoeOptionExpr","line":226,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeOptionExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeOptionExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeOptionExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L225-L225","name":"Lean.MessageData.instCoeMVarId","line":225,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeMVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L224-L224","name":"Lean.MessageData.instCoeSyntax","line":224,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L223-L223","name":"Lean.MessageData.instCoeName","line":223,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeName\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L222-L222","name":"Lean.MessageData.instCoeExpr","line":222,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L221-L221","name":"Lean.MessageData.instCoeLevel","line":221,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L220-L220","name":"Lean.MessageData.instCoeFormat","line":220,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L219-L219","name":"Lean.MessageData.instCoeString","line":219,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeString\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L217-L217","name":"Lean.MessageData.instAppend","line":217,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instAppend\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L214-L215","name":"Lean.MessageData.toString","line":214,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msgData : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L211-L212","name":"Lean.MessageData.format","line":211,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.format\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msgData : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L187-L209","name":"Lean.MessageData.formatAux","line":187,"kind":"opaque","docLink":"./Lean/Message.html#Lean.MessageData.formatAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.formatAux\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">formatAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.NamingContext\">Lean.NamingContext</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageDataContext\">Lean.MessageDataContext</a></span> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L176-L185","name":"Lean.MessageData.hasSyntheticSorry.visit","line":176,"kind":"opaque","docLink":"./Lean/Message.html#Lean.MessageData.hasSyntheticSorry.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.hasSyntheticSorry.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hasSyntheticSorry</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L173-L185","name":"Lean.MessageData.hasSyntheticSorry","line":173,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.hasSyntheticSorry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.hasSyntheticSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hasSyntheticSorry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L171-L171","name":"Lean.MessageData.ofName","line":171,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofName\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L162-L169","name":"Lean.MessageData.ofLevel","line":162,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L153-L160","name":"Lean.MessageData.ofExpr","line":153,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L142-L151","name":"Lean.MessageData.ofSyntax","line":142,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L137-L140","name":"Lean.MessageData.mkPPContext","line":137,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.mkPPContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.mkPPContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">mkPPContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(nCtx : <a href=\"./Lean/Message.html#Lean.NamingContext\">Lean.NamingContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">Lean.MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">Lean.PPContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L134-L135","name":"Lean.MessageData.nil","line":134,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.nil","doc":"An empty message. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.nil\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L123-L131","name":"Lean.MessageData.hasTag","line":123,"kind":"opaque","docLink":"./Lean/Message.html#Lean.MessageData.hasTag","doc":"Returns true when the message contains a `MessageData.tagged tag ..` constructor where `p tag`\nis true.\n\nThis does not descend into lazily generated subtress (`.ofLazy`); message tags\nof interest (like those added by `logLinter`) are expected to be near the root\nof the `MessageData`, and not hidden inside `.ofLazy`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.hasTag\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hasTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L106-L113","name":"Lean.MessageData.lazy","line":106,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.lazy","doc":"Lazy message data production, with access to the context as given by\na surrounding `MessageData.withContext` (which is expected to exist).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.lazy\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">lazy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">Lean.PPContext</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasSyntheticSorry : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L100-L100","name":"Lean.MessageData.ofFormat","line":100,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofFormat","doc":"Eagerly formatted text. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fmt : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L95-L95","name":"Lean.instTypeNameMessageData","line":95,"kind":"instance","docLink":"./Lean/Message.html#Lean.instTypeNameMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instTypeNameMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">instTypeNameMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L95-L95","name":"Lean.instInhabitedMessageData","line":95,"kind":"instance","docLink":"./Lean/Message.html#Lean.instInhabitedMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L84-L94","name":"Lean.MessageData.ofLazy","line":84,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.ofLazy","doc":"A lazy message.\nThe provided thunk will not be run until it is about to be displayed.\nThis can save computation in cases where the message may never be seen.\n\nThe `Dynamic` value is expected to be a `MessageData`,\nwhich is a workaround for the positivity restriction.\n\nIf the thunked message is produced for a term that contains a synthetic sorry,\n`hasSyntheticSorry` should return `true`.\nThis is used to filter out certain messages. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofLazy\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofLazy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">Lean.PPContext</a></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasSyntheticSorry : <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L83-L83","name":"Lean.MessageData.trace","line":83,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.trace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(data : <a href=\"./Lean/Message.html#Lean.TraceData\">Lean.TraceData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(children : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L80-L82","name":"Lean.MessageData.tagged","line":80,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.tagged","doc":"Tagged sections. `Name` should be viewed as a \"kind\", and is used by `MessageData` inspector functions.\nExample: an inspector that tries to find \"definitional equality failures\" may look for the tag \"DefEqFailure\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.tagged\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">tagged</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L78-L79","name":"Lean.MessageData.compose","line":78,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.compose","doc":"Lifted `Format.compose` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.compose\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">compose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L76-L77","name":"Lean.MessageData.group","line":76,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.group","doc":"Lifted `Format.group` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.group\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">group</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L74-L75","name":"Lean.MessageData.nest","line":74,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.nest","doc":"Lifted `Format.nest` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.nest\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">nest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L73-L73","name":"Lean.MessageData.withNamingContext","line":73,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.withNamingContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.withNamingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">withNamingContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.NamingContext\">Lean.NamingContext</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L71-L72","name":"Lean.MessageData.withContext","line":71,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.withContext","doc":"`withContext ctx d` specifies the pretty printing context `(env, mctx, lctx, opts)` for the nested expressions in `d`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.withContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">withContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageDataContext\">Lean.MessageDataContext</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L60-L70","name":"Lean.MessageData.ofWidget","line":60,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.ofWidget","doc":"A widget instance.\n\nIn `ofWidget wi alt`,\nthe nested message `alt` should approximate the contents of the widget\nwithout itself using `ofWidget wi _`.\nThis is used as fallback in environments that cannot display user widgets.\n`alt` may nest any structured message,\nfor example `ofGoal` to approximate a tactic state widget,\nand, if necessary, even other widget instances\n(for which approximations are computed recursively). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofWidget\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofWidget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Widget/Types.html#Lean.Widget.WidgetInstance\">Lean.Widget.WidgetInstance</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L59-L59","name":"Lean.MessageData.ofGoal","line":59,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.ofGoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofGoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L56-L58","name":"Lean.MessageData.ofFormatWithInfos","line":56,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.ofFormatWithInfos","doc":"Eagerly formatted text with info annotations.\nThis constructor is inspected in various hacks. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofFormatWithInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofFormatWithInfos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/PPExt.html#Lean.FormatWithInfos\">Lean.FormatWithInfos</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L55-L95","name":"Lean.MessageData","line":55,"kind":"inductive","docLink":"./Lean/Message.html#Lean.MessageData","doc":"Structured message data. We use it for reporting errors, trace messages, etc. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L52-L52","name":"Lean.TraceData.tag","line":52,"kind":"def","docLink":"./Lean/Message.html#Lean.TraceData.tag","doc":"Optional tag shown in `trace.profiler.output` output after the trace class name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.tag\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">tag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.TraceData\">Lean.TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L50-L50","name":"Lean.TraceData.collapsed","line":50,"kind":"def","docLink":"./Lean/Message.html#Lean.TraceData.collapsed","doc":"Whether trace node defaults to collapsed in the infoview. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.collapsed\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">collapsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.TraceData\">Lean.TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L48-L48","name":"Lean.TraceData.stopTime","line":48,"kind":"def","docLink":"./Lean/Message.html#Lean.TraceData.stopTime","doc":"Stop time in seconds; 0 if unknown to avoid `Option` allocation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.stopTime\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">stopTime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.TraceData\">Lean.TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L46-L46","name":"Lean.TraceData.startTime","line":46,"kind":"def","docLink":"./Lean/Message.html#Lean.TraceData.startTime","doc":"Start time in seconds; 0 if unknown to avoid `Option` allocation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.startTime\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">startTime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.TraceData\">Lean.TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L44-L44","name":"Lean.TraceData.cls","line":44,"kind":"def","docLink":"./Lean/Message.html#Lean.TraceData.cls","doc":"Trace class, e.g. `Elab.step`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.cls\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">cls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.TraceData\">Lean.TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L42-L42","name":"Lean.TraceData.mk","line":42,"kind":"ctor","docLink":"./Lean/Message.html#Lean.TraceData.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cls : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(startTime : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopTime : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(collapsed : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tag : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.TraceData\">Lean.TraceData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L42-L52","name":"Lean.TraceData","line":42,"kind":"structure","docLink":"./Lean/Message.html#Lean.TraceData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L40-L40","name":"Lean.NamingContext.openDecls","line":40,"kind":"def","docLink":"./Lean/Message.html#Lean.NamingContext.openDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.NamingContext\">Lean.NamingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">Lean.OpenDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L39-L39","name":"Lean.NamingContext.currNamespace","line":39,"kind":"def","docLink":"./Lean/Message.html#Lean.NamingContext.currNamespace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext.currNamespace\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span>.<span class=\"name\">currNamespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.NamingContext\">Lean.NamingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L38-L38","name":"Lean.NamingContext.mk","line":38,"kind":"ctor","docLink":"./Lean/Message.html#Lean.NamingContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(currNamespace : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(openDecls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">Lean.OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.NamingContext\">Lean.NamingContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L38-L40","name":"Lean.NamingContext","line":38,"kind":"structure","docLink":"./Lean/Message.html#Lean.NamingContext","doc":"A naming context is the information needed to shorten names in pretty printing.\n\nIt gives the current namespace and the list of open declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L32-L32","name":"Lean.MessageDataContext.opts","line":32,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageDataContext.opts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.opts\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">opts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">Lean.MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L31-L31","name":"Lean.MessageDataContext.lctx","line":31,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageDataContext.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">Lean.MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L30-L30","name":"Lean.MessageDataContext.mctx","line":30,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageDataContext.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">Lean.MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L29-L29","name":"Lean.MessageDataContext.env","line":29,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageDataContext.env","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.env\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">Lean.MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L28-L28","name":"Lean.MessageDataContext.mk","line":28,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageDataContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageDataContext\">Lean.MessageDataContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L28-L32","name":"Lean.MessageDataContext","line":28,"kind":"structure","docLink":"./Lean/Message.html#Lean.MessageDataContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L26-L26","name":"Lean.instFromJsonMessageSeverity","line":26,"kind":"instance","docLink":"./Lean/Message.html#Lean.instFromJsonMessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L26-L26","name":"Lean.instToJsonMessageSeverity","line":26,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToJsonMessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L26-L26","name":"Lean.instBEqMessageSeverity","line":26,"kind":"instance","docLink":"./Lean/Message.html#Lean.instBEqMessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instBEqMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L26-L26","name":"Lean.instInhabitedMessageSeverity","line":26,"kind":"instance","docLink":"./Lean/Message.html#Lean.instInhabitedMessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L25-L25","name":"Lean.MessageSeverity.error","line":25,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageSeverity.error","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity.error\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span>.<span class=\"name\">error</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L25-L25","name":"Lean.MessageSeverity.warning","line":25,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageSeverity.warning","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity.warning\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span>.<span class=\"name\">warning</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L25-L25","name":"Lean.MessageSeverity.information","line":25,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageSeverity.information","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity.information\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span>.<span class=\"name\">information</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L24-L26","name":"Lean.MessageSeverity","line":24,"kind":"inductive","docLink":"./Lean/Message.html#Lean.MessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Message.lean#L18-L22","name":"Lean.mkErrorStringWithPos","line":18,"kind":"def","docLink":"./Lean/Message.html#Lean.mkErrorStringWithPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.mkErrorStringWithPos\"><span class=\"name\">Lean</span>.<span class=\"name\">mkErrorStringWithPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fileName : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Lean/Data/Position.html#Lean.Position\">Lean.Position</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(endPos : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Position.html#Lean.Position\">Lean.Position</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"}]}