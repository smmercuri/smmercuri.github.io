{"name":"Lean.Meta.Constructions.BRecOn","instances":[],"imports":["Lean.Meta.InferType","Lean.AuxRecursor","Lean.AddDecl","Lean.Meta.CompletionName"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Meta/Constructions/BRecOn.lean#L393-L393","name":"Lean.mkBInductionOn","line":393,"kind":"def","docLink":"./Lean/Meta/Constructions/BRecOn.html#Lean.mkBInductionOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Constructions/BRecOn.html#Lean.mkBInductionOn\"><span class=\"name\">Lean</span>.<span class=\"name\">mkBInductionOn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Meta/Constructions/BRecOn.lean#L392-L392","name":"Lean.mkBRecOn","line":392,"kind":"def","docLink":"./Lean/Meta/Constructions/BRecOn.html#Lean.mkBRecOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Constructions/BRecOn.html#Lean.mkBRecOn\"><span class=\"name\">Lean</span>.<span class=\"name\">mkBRecOn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Meta/Constructions/BRecOn.lean#L280-L390","name":"Lean.mkBRecOnOrBInductionOn","line":280,"kind":"def","docLink":"./Lean/Meta/Constructions/BRecOn.html#Lean.mkBRecOnOrBInductionOn","doc":"Constructs the `.brecon` or `.binductionon` definition for a inductive predicate.\n\nFor example for the `List` type, it constructs,\n```\n@[reducible] protected def List.brecOn.{u_1, u} : {α : Type u} → {motive : List α → Sort u_1} →\n  (t : List α) → ((t : List α) → List.below t → motive t) → motive t :=\nfun {α} {motive} t (F_1 : (t : List α) → List.below t → motive t) => (\n  @List.rec α (fun t => PProd (motive t) (@List.below α motive t))\n    ⟨F_1 [] PUnit.unit, PUnit.unit⟩\n    (fun head tail tail_ih => ⟨F_1 (head :: tail) ⟨tail_ih, PUnit.unit⟩, ⟨tail_ih, PUnit.unit⟩⟩)\n    t\n  ).1\n```\nand\n```\n@[reducible] protected def List.binductionOn.{u} : ∀ {α : Type u} {motive : List α → Prop}\n  (t : List α), (∀ (t : List α), List.ibelow t → motive t) → motive t :=\nfun {α} {motive} t F_1 => (\n  @List.rec α (fun t => And (motive t) (@List.ibelow α motive t))\n    ⟨F_1 [] True.intro, True.intro⟩\n    (fun head tail tail_ih => ⟨F_1 (head :: tail) ⟨tail_ih, True.intro⟩, ⟨tail_ih, True.intro⟩⟩)\n    t\n  ).1\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Constructions/BRecOn.html#Lean.mkBRecOnOrBInductionOn\"><span class=\"name\">Lean</span>.<span class=\"name\">mkBRecOnOrBInductionOn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(indName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ind : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Meta/Constructions/BRecOn.lean#L203-L203","name":"Lean.mkIBelow","line":203,"kind":"def","docLink":"./Lean/Meta/Constructions/BRecOn.html#Lean.mkIBelow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Constructions/BRecOn.html#Lean.mkIBelow\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIBelow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/Meta/Constructions/BRecOn.lean#L202-L202","name":"Lean.mkBelow","line":202,"kind":"def","docLink":"./Lean/Meta/Constructions/BRecOn.html#Lean.mkBelow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Constructions/BRecOn.html#Lean.mkBelow\"><span class=\"name\">Lean</span>.<span class=\"name\">mkBelow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}