{"name":"Lean.Meta.Tactic.LibrarySearch","instances":[{"typeNames":["Eq"],"name":"Lean.Meta.LibrarySearch.instDecidableEqDeclMod","className":"Decidable"},{"typeNames":["Lean.Meta.LibrarySearch.DeclMod"],"name":"Lean.Meta.LibrarySearch.instInhabitedDeclMod","className":"Inhabited"},{"typeNames":["Lean.Meta.LibrarySearch.DeclMod"],"name":"Lean.Meta.LibrarySearch.instOrdDeclMod","className":"Ord"}],"imports":["Init.Data.Nat.MinMax","Lean.Meta.LazyDiscrTree","Lean.Meta.Tactic.SolveByElim","Lean.Util.Heartbeats"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L413-L420","name":"Lean.Meta.LibrarySearch.librarySearch","line":413,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.librarySearch","doc":"Tries to solve the goal either by:\n* calling `tactic true`\n* or applying a library lemma then calling `tactic false` on the resulting goals.\n\nTypically here `tactic` is `solveByElim`,\nwith the `Bool` flag indicating whether it may retry with `exfalso`.\n\nIf it successfully closes the goal, returns `none`.\nOtherwise, it returns `some a`, where `a : Array (List MVarId × MetavarContext)`,\nwith an entry for each library lemma which was successfully applied,\ncontaining a list of the subsidiary goals, and the metavariable context after the application.\n\n(Always succeeds, and the metavariable context stored in the monad is reverted,\nunless the goal was completely solved.)\n\n(Note that if `solveByElim` solves some but not all subsidiary goals,\nthis is not currently tracked.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.librarySearch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">librarySearch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tactic : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">initial</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.solveByElim\">Lean.Meta.LibrarySearch.solveByElim</a> <span class=\"fn\">[]</span> <span class=\"fn\">initial</span> <span class=\"fn\">g</span> <span class=\"fn\">6</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowFailure : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(leavePercentHeartbeats : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">10</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L345-L363","name":"Lean.Meta.LibrarySearch.tryOnEach","line":345,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.tryOnEach","doc":"Sequentially invokes a tactic `act` on each value in candidates on the current state.\n\nThe tactic `act` should return a list of meta-variables that still need to be resolved.\nIf this list is empty, then no variables remain to be solved, and `tryOnEach` returns\n`none` with the environment set so each goal is resolved.\n\nIf the action throws an internal exception with the `abortSpeculationId` id then\nfurther computation is stopped and intermediate results returned. If any other\nexception is thrown, then it is silently discarded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.tryOnEach\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">tryOnEach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.Candidate\">Lean.Meta.LibrarySearch.Candidate</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(candidates : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.Candidate\">Lean.Meta.LibrarySearch.Candidate</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L281-L286","name":"Lean.Meta.LibrarySearch.mkLibrarySearchLemma","line":281,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.mkLibrarySearchLemma","doc":"Create lemma from name and mod. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.mkLibrarySearchLemma\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">mkLibrarySearchLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lem : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mod : <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L263-L276","name":"Lean.Meta.LibrarySearch.librarySearchSymm","line":263,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.librarySearchSymm","doc":"Run `searchFn` on both the goal and `symm` applied to the goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.librarySearchSymm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">librarySearchSymm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(searchFn : <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.CandidateFinder\">Lean.Meta.LibrarySearch.CandidateFinder</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.Candidate\">Lean.Meta.LibrarySearch.Candidate</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L258-L258","name":"Lean.Meta.LibrarySearch.Candidate","line":258,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.Candidate","doc":"A library search candidate using symmetry includes the goal to solve, the metavar\ncontext for that goal, and the name and orientation of a rule to try using with goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.Candidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">Candidate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L247-L249","name":"Lean.Meta.LibrarySearch.isAbortSpeculation","line":247,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.isAbortSpeculation","doc":"Returns true if this is an abort speculation exception. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.isAbortSpeculation\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">isAbortSpeculation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L243-L244","name":"Lean.Meta.LibrarySearch.abortSpeculation","line":243,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.abortSpeculation","doc":"Called to abort speculative execution in library search.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.abortSpeculation\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">abortSpeculation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L215-L230","name":"Lean.Meta.LibrarySearch.interleaveWith","line":215,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.interleaveWith","doc":"Interleave x y interleaves the elements of x and y until one is empty and then returns\nfinal elements in other list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.interleaveWith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">interleaveWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L196-L204","name":"Lean.Meta.LibrarySearch.mkHeartbeatCheck","line":196,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.mkHeartbeatCheck","doc":"Return an action that returns true when  the remaining heartbeats is less\nthan the currently remaining heartbeats * leavePercent / 100.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.mkHeartbeatCheck\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">mkHeartbeatCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(leavePercent : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L189-L190","name":"Lean.Meta.LibrarySearch.setDefaultCandidateFinder","line":189,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.setDefaultCandidateFinder","doc":"Update the candidate finder used by library search.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.setDefaultCandidateFinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">setDefaultCandidateFinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cf : <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.CandidateFinder\">Lean.Meta.LibrarySearch.CandidateFinder</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L180-L184","name":"Lean.Meta.LibrarySearch.defaultCandidateFinder","line":180,"kind":"opaque","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.defaultCandidateFinder","doc":"The preferred candidate finding function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.defaultCandidateFinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">defaultCandidateFinder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.CandidateFinder\">Lean.Meta.LibrarySearch.CandidateFinder</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L150-L161","name":"Lean.Meta.LibrarySearch.IncDiscrTreeFinder.mkImportFinder","line":150,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.IncDiscrTreeFinder.mkImportFinder","doc":"Candidate-finding function that uses a strict discrimination tree for resolution.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.IncDiscrTreeFinder.mkImportFinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">IncDiscrTreeFinder</span>.<span class=\"name\">mkImportFinder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.CandidateFinder\">Lean.Meta.LibrarySearch.CandidateFinder</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L116-L118","name":"Lean.Meta.LibrarySearch.DiscrTreeFinder.mkImportFinder","line":116,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DiscrTreeFinder.mkImportFinder","doc":"Candidate-finding function that uses a strict discrimination tree for resolution.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DiscrTreeFinder.mkImportFinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DiscrTreeFinder</span>.<span class=\"name\">mkImportFinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(importTree : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L109-L111","name":"Lean.Meta.LibrarySearch.DiscrTreeFinder.localMatches","line":109,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DiscrTreeFinder.localMatches","doc":"Returns matches from local constants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DiscrTreeFinder.localMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DiscrTreeFinder</span>.<span class=\"name\">localMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L94-L100","name":"Lean.Meta.LibrarySearch.DiscrTreeFinder.buildImportCache","line":94,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DiscrTreeFinder.buildImportCache","doc":"Constructs an discrimination tree from the current environment.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DiscrTreeFinder.buildImportCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DiscrTreeFinder</span>.<span class=\"name\">buildImportCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L65-L65","name":"Lean.Meta.LibrarySearch.CandidateFinder","line":65,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.CandidateFinder","doc":"LibrarySearch has an extension mechanism for replacing the function used\nto find candidate lemmas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.CandidateFinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">CandidateFinder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L58-L58","name":"Lean.Meta.LibrarySearch.instOrdDeclMod","line":58,"kind":"instance","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instOrdDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instOrdDeclMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instOrdDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L58-L58","name":"Lean.Meta.LibrarySearch.instInhabitedDeclMod","line":58,"kind":"instance","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instInhabitedDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instInhabitedDeclMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instInhabitedDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L58-L58","name":"Lean.Meta.LibrarySearch.instDecidableEqDeclMod","line":58,"kind":"instance","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instDecidableEqDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instDecidableEqDeclMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instDecidableEqDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L57-L57","name":"Lean.Meta.LibrarySearch.DeclMod.mpr","line":57,"kind":"ctor","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.mpr","doc":"the backward direction of an `iff` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.mpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span>.<span class=\"name\">mpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L56-L56","name":"Lean.Meta.LibrarySearch.DeclMod.mp","line":56,"kind":"ctor","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.mp","doc":"the forward direction of an `iff` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.mp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span>.<span class=\"name\">mp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L55-L55","name":"Lean.Meta.LibrarySearch.DeclMod.none","line":55,"kind":"ctor","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.none","doc":"the original declaration "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">Lean.Meta.LibrarySearch.DeclMod</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L54-L58","name":"Lean.Meta.LibrarySearch.DeclMod","line":54,"kind":"inductive","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod","doc":"A \"modifier\" for a declaration.\n* `none` indicates the original declaration,\n* `mp` indicates that (possibly after binders) the declaration is an `↔`,\n  and we want to consider the forward direction,\n* `mpr` similarly, but for the backward direction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/LibrarySearch.lean#L37-L45","name":"Lean.Meta.LibrarySearch.solveByElim","line":37,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.solveByElim","doc":"Wrapper for calling `Lean.Meta.SolveByElim.solveByElim with\nappropriate arguments for library search.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.solveByElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">solveByElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(required : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exfalso : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></div></div>"}]}