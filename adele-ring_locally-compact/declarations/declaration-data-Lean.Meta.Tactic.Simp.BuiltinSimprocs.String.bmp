{"name":"Lean.Meta.Tactic.Simp.BuiltinSimprocs.String","instances":[],"imports":["Lean.ToExpr","Lean.Meta.Tactic.Simp.BuiltinSimprocs.Char"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/String.lean#L32-L34","name":"String.reduceMk","line":32,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/String.html#String.reduceMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/String.html#String.reduceMk\"><span class=\"name\">String</span>.<span class=\"name\">reduceMk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/String.lean#L16-L20","name":"String.reduceAppend","line":16,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/String.html#String.reduceAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/String.html#String.reduceAppend\"><span class=\"name\">String</span>.<span class=\"name\">reduceAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/String.lean#L13-L14","name":"String.fromExpr?","line":13,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/String.html#String.fromExpr?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/String.html#String.fromExpr?\"><span class=\"name\">String</span>.<span class=\"name\">fromExpr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span></div></div>"}]}