{"name":"Lean.ParserCompiler","instances":[],"imports":["Lean.Meta.ReduceEval","Lean.KeyedDeclsAttribute","Lean.ParserCompiler.Attribute","Lean.Parser.Extension"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L145-L157","name":"Lean.ParserCompiler.registerParserCompiler","line":145,"kind":"def","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.registerParserCompiler","doc":"Precondition: `α` must match `ctx.tyName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.registerParserCompiler\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">registerParserCompiler</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context\">Lean.ParserCompiler.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L130-L142","name":"Lean.ParserCompiler.compileEmbeddedParsers","line":130,"kind":"def","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.compileEmbeddedParsers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.compileEmbeddedParsers\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">compileEmbeddedParsers</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context\">Lean.ParserCompiler.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(builtin : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L60-L126","name":"Lean.ParserCompiler.compileParserExpr","line":60,"kind":"opaque","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.compileParserExpr","doc":"Translate an expression of type `Parser` into one of type `tyName`, tagging intermediary constants with\n`ctx.combinatorAttr`. If `force` is `false`, refuse to do so for imported constants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.compileParserExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">compileParserExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context\">Lean.ParserCompiler.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(builtin : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(force : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L35-L51","name":"Lean.ParserCompiler.parserNodeKind?","line":35,"kind":"opaque","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.parserNodeKind?","doc":"Takes an expression of type `Parser`, and determines the syntax kind of the root node it produces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.parserNodeKind?\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">parserNodeKind?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L27-L31","name":"Lean.ParserCompiler.replaceParserTy","line":27,"kind":"def","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.replaceParserTy","doc":"Replace all references of `Parser` with `tyName` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.replaceParserTy\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">replaceParserTy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context\">Lean.ParserCompiler.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L24-L24","name":"Lean.ParserCompiler.Context.tyName","line":24,"kind":"def","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context.tyName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context.tyName\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">Context</span>.<span class=\"name\">tyName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context\">Lean.ParserCompiler.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L22-L22","name":"Lean.ParserCompiler.Context.combinatorAttr","line":22,"kind":"def","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context.combinatorAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context.combinatorAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">Context</span>.<span class=\"name\">combinatorAttr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context\">Lean.ParserCompiler.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/ParserCompiler/Attribute.html#Lean.ParserCompiler.CombinatorAttribute\">Lean.ParserCompiler.CombinatorAttribute</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L21-L21","name":"Lean.ParserCompiler.Context.categoryAttr","line":21,"kind":"def","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context.categoryAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context.categoryAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">Context</span>.<span class=\"name\">categoryAttr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context\">Lean.ParserCompiler.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/KeyedDeclsAttribute.html#Lean.KeyedDeclsAttribute\">Lean.KeyedDeclsAttribute</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L20-L20","name":"Lean.ParserCompiler.Context.varName","line":20,"kind":"def","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context.varName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context.varName\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">Context</span>.<span class=\"name\">varName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context\">Lean.ParserCompiler.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L19-L19","name":"Lean.ParserCompiler.Context.mk","line":19,"kind":"ctor","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(varName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(categoryAttr : <span class=\"fn\"><a href=\"./Lean/KeyedDeclsAttribute.html#Lean.KeyedDeclsAttribute\">Lean.KeyedDeclsAttribute</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(combinatorAttr : <a href=\"./Lean/ParserCompiler/Attribute.html#Lean.ParserCompiler.CombinatorAttribute\">Lean.ParserCompiler.CombinatorAttribute</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context\">Lean.ParserCompiler.Context</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/ParserCompiler.lean#L19-L22","name":"Lean.ParserCompiler.Context","line":19,"kind":"structure","docLink":"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ParserCompiler.html#Lean.ParserCompiler.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">ParserCompiler</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}