{"name":"Lean.PrettyPrinter.Delaborator.FieldNotation","instances":[],"imports":["Lean.Meta.InferType","Lean.PrettyPrinter.Delaborator.Attributes","Lean.PrettyPrinter.Delaborator.Options","Lean.Structure"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter/Delaborator/FieldNotation.lean#L124-L125","name":"Lean.PrettyPrinter.Delaborator.isParentProj","line":124,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.isParentProj","doc":"Returns `true` if `e` is an application that is a projection to a parent structure.\nIf `explicit` is `true`, then requires that the structure have no parameters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.isParentProj\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">isParentProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(explicit : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter/Delaborator/FieldNotation.lean#L108-L118","name":"Lean.PrettyPrinter.Delaborator.parentProj?","line":108,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.parentProj?","doc":"Returns the field name of the projection if `e` is an application that is a projection to a parent structure.\nIf `explicit` is `true`, then requires that the structure have no parameters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.parentProj?\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">parentProj?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(explicit : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter/Delaborator/FieldNotation.lean#L82-L102","name":"Lean.PrettyPrinter.Delaborator.fieldNotationCandidate?","line":82,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.fieldNotationCandidate?","doc":"If `f` is a function that can be used for field notation,\nreturns the field name to use and the argument index for the object of the field notation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.fieldNotationCandidate?\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">fieldNotationCandidate?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useGeneralizedFieldNotation : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span></div></div>"}]}