{"name":"Lean.PrettyPrinter","instances":[],"imports":["Lean.PrettyPrinter.Delaborator","Lean.PrettyPrinter.Parenthesizer","Lean.PrettyPrinter.Formatter","Lean.Parser.Module","Lean.ParserCompiler"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L145-L146","name":"Lean.MessageData.signature","line":145,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.MessageData.signature","doc":"Generates `MessageData` for a declaration `c` as `c.{<levels>} <params> : <type>`, with terminfo. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.MessageData.signature\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">signature</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L138-L142","name":"Lean.MessageData.ofConst","line":138,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.MessageData.ofConst","doc":"Pretty print a const expression using `delabConst` and generate terminfo.\nThis function avoids inserting `@` if the constant is for a function whose first\nargument is implicit, which is what the default `toMessageData` for `Expr` does.\nPanics if `e` is not a constant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.MessageData.ofConst\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L127-L132","name":"Lean.MessageData.ofLazyM","line":127,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.MessageData.ofLazyM","doc":"Turns a `MetaM MessageData` into a `MessageData.lazy` which will run the monadic value.\nThe optional array of expressions is used to set the `hasSyntheticSorry` fields, and should\ncomprise the expressions that are included in the message data.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.MessageData.ofLazyM\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofLazyM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(es : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span> <span class=\"fn\">#[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L117-L120","name":"Lean.MessageData.ofFormatWithInfosM","line":117,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.MessageData.ofFormatWithInfosM","doc":"Turns a `MetaM FormatWithInfos` into a `MessageData.lazy` which will run the monadic value.\nUses the `pp.tagAppFns` option to annotate constants with terminfo,\nwhich is necessary for seeing the type on mouse hover.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.MessageData.ofFormatWithInfosM\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofFormatWithInfosM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fmt : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Util/PPExt.html#Lean.FormatWithInfos\">Lean.FormatWithInfos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L102-L104","name":"Lean.PrettyPrinter.registerParserCompilers","line":102,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.registerParserCompilers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.registerParserCompilers\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">registerParserCompilers</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L67-L71","name":"Lean.PrettyPrinter.ppSignature","line":67,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppSignature","doc":"Pretty-prints a declaration `c` as `c.{<levels>} <params> : <type>`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppSignature\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">ppSignature</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Util/PPExt.html#Lean.FormatWithInfos\">Lean.FormatWithInfos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L62-L63","name":"Lean.PrettyPrinter.ppModule","line":62,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppModule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppModule\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">ppModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Module.module</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L60-L60","name":"Lean.PrettyPrinter.ppCommand","line":60,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppCommand","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppCommand\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">ppCommand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Meta.html#Lean.Syntax.Command\">Lean.Command</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L58-L58","name":"Lean.PrettyPrinter.ppTactic","line":58,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppTactic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">ppTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L53-L56","name":"Lean.PrettyPrinter.ppExprLegacy","line":53,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppExprLegacy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppExprLegacy\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">ppExprLegacy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L44-L50","name":"Lean.PrettyPrinter.ppExprWithInfos","line":44,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppExprWithInfos","doc":"Return a `fmt` representing pretty-printed `e` together with a map from tags in `fmt`\nto `Elab.Info` nodes produced by the delaborator at various subexpressions of `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppExprWithInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">ppExprWithInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(optsPerPos : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">Lean.PrettyPrinter.Delaborator.OptionsPerPos</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(delab : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.delab\">Lean.PrettyPrinter.Delaborator.delab</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Util/PPExt.html#Lean.FormatWithInfos\">Lean.FormatWithInfos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L39-L40","name":"Lean.PrettyPrinter.ppExpr","line":39,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">ppExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L34-L37","name":"Lean.PrettyPrinter.ppUsing","line":34,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppUsing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppUsing\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">ppUsing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(delab : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L32-L32","name":"Lean.PrettyPrinter.ppTerm","line":32,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">ppTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L27-L30","name":"Lean.PrettyPrinter.ppCategory","line":27,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PrettyPrinter.ppCategory\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">ppCategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cat : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L22-L23","name":"Lean.PPContext.runMetaM","line":22,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PPContext.runMetaM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PPContext.runMetaM\"><span class=\"name\">Lean</span>.<span class=\"name\">PPContext</span>.<span class=\"name\">runMetaM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ppCtx : <a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">Lean.PPContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/702c31b8071269f0052fd1e0fb3891a079a655bd/src/Lean/PrettyPrinter.lean#L15-L20","name":"Lean.PPContext.runCoreM","line":15,"kind":"def","docLink":"./Lean/PrettyPrinter.html#Lean.PPContext.runCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter.html#Lean.PPContext.runCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">PPContext</span>.<span class=\"name\">runCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ppCtx : <a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">Lean.PPContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>"}]}