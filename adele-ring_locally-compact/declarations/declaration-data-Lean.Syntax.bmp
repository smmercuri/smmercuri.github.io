{"name":"Lean.Syntax","instances":[{"typeNames":["String.Range"],"name":"String.instInhabitedRange","className":"Inhabited"},{"typeNames":["String.Range"],"name":"String.instReprRange","className":"Repr"},{"typeNames":["String.Range"],"name":"String.instBEqRange","className":"BEq"},{"typeNames":["String.Range"],"name":"String.instHashableRange","className":"Hashable"},{"typeNames":["Lean.Syntax.TopDown","Lean.Syntax"],"name":"Lean.Syntax.instForInTopDownSyntax","className":"ForIn"}],"imports":["Init.Data.Range","Init.Data.Hashable","Lean.Data.Name","Lean.Data.Format"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L533-L537","name":"Lean.Syntax.Stack.matches","line":533,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Stack.matches","doc":"Compare the `SyntaxNodeKind`s in `pattern` to those of the `Syntax`\nelements in `stack`. Return `false` if `stack` is shorter than `pattern`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Stack.matches\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Stack</span>.<span class=\"name\">matches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stack : <a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Lean.Syntax.Stack</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pattern : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L522-L529","name":"Lean.Syntax.findStack?.go","line":522,"kind":"opaque","docLink":"./Lean/Syntax.html#Lean.Syntax.findStack?.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.findStack?.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">findStack?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(visit : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(accept : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.hasArgs\">Lean.Syntax.hasArgs</a> <span class=\"fn\">stx</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stack : <a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Lean.Syntax.Stack</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Lean.Syntax.Stack</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L519-L529","name":"Lean.Syntax.findStack?","line":519,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.findStack?","doc":"Return stack of syntax nodes satisfying `visit`, starting with such a node that also fulfills `accept` (default \"is leaf\"), and ending with the root. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.findStack?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">findStack?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(root : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(visit : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(accept : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.hasArgs\">Lean.Syntax.hasArgs</a> <span class=\"fn\">stx</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Lean.Syntax.Stack</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L516-L516","name":"Lean.Syntax.Stack","line":516,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Stack","doc":"List of `Syntax` nodes in which each succeeding element is the parent of\nthe current. The associated index is the index of the preceding element in the\nlist of children of the current element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Stack\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Stack</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L510-L511","name":"Lean.Syntax.isAnyAntiquot","line":510,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.isAnyAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.isAnyAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isAnyAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L507-L508","name":"Lean.Syntax.isTokenAntiquot","line":507,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.isTokenAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.isTokenAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isTokenAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L504-L505","name":"Lean.Syntax.mkAntiquotSuffixSpliceNode","line":504,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.mkAntiquotSuffixSpliceNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.mkAntiquotSuffixSpliceNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkAntiquotSuffixSpliceNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inner : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suffix : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L501-L502","name":"Lean.Syntax.getAntiquotSuffixSpliceInner","line":501,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.getAntiquotSuffixSpliceInner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.getAntiquotSuffixSpliceInner\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getAntiquotSuffixSpliceInner</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L497-L498","name":"Lean.Syntax.isAntiquotSuffixSplice","line":497,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.isAntiquotSuffixSplice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.isAntiquotSuffixSplice\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isAntiquotSuffixSplice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L493-L495","name":"Lean.Syntax.antiquotSuffixSplice?","line":493,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.antiquotSuffixSplice?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.antiquotSuffixSplice?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">antiquotSuffixSplice?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L488-L490","name":"Lean.Syntax.mkAntiquotSpliceNode","line":488,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.mkAntiquotSpliceNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.mkAntiquotSpliceNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkAntiquotSpliceNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(contents : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suffix : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nesting : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L482-L486","name":"Lean.Syntax.getAntiquotSpliceSuffix","line":482,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.getAntiquotSpliceSuffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.getAntiquotSpliceSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getAntiquotSpliceSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L478-L479","name":"Lean.Syntax.getAntiquotSpliceContents","line":478,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.getAntiquotSpliceContents","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.getAntiquotSpliceContents\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getAntiquotSpliceContents</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L475-L476","name":"Lean.Syntax.isAntiquotSplice","line":475,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.isAntiquotSplice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.isAntiquotSplice\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isAntiquotSplice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L471-L473","name":"Lean.Syntax.antiquotSpliceKind?","line":471,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.antiquotSpliceKind?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.antiquotSpliceKind?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">antiquotSpliceKind?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L462-L468","name":"Lean.Syntax.antiquotKinds","line":462,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.antiquotKinds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.antiquotKinds\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">antiquotKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L457-L460","name":"Lean.Syntax.antiquotKind?","line":457,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.antiquotKind?","doc":"Return kind of parser expected at this antiquotation, and whether it is a \"pseudo\" kind (see `mkAntiquot`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.antiquotKind?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">antiquotKind?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L448-L454","name":"Lean.Syntax.getAntiquotTerm","line":448,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.getAntiquotTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.getAntiquotTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getAntiquotTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L441-L445","name":"Lean.Syntax.unescapeAntiquot","line":441,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.unescapeAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.unescapeAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">unescapeAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L437-L438","name":"Lean.Syntax.isEscapedAntiquot","line":437,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.isEscapedAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.isEscapedAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isEscapedAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L425-L434","name":"Lean.Syntax.mkAntiquotNode","line":425,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.mkAntiquotNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.mkAntiquotNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkAntiquotNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(term : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nesting : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(name : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isPseudoKind : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L419-L423","name":"Lean.Syntax.getCanonicalAntiquot","line":419,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.getCanonicalAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.getCanonicalAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getCanonicalAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L416-L417","name":"Lean.Syntax.isAntiquots","line":416,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.isAntiquots","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.isAntiquots\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isAntiquots</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L412-L414","name":"Lean.Syntax.isAntiquot","line":412,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.isAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.isAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L404-L409","name":"Lean.Syntax.getQuotContent","line":404,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.getQuotContent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.getQuotContent\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getQuotContent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L399-L402","name":"Lean.Syntax.isQuot","line":399,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.isQuot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.isQuot\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isQuot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L393-L394","name":"Lean.mkListNode","line":393,"kind":"def","docLink":"./Lean/Syntax.html#Lean.mkListNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.mkListNode\"><span class=\"name\">Lean</span>.<span class=\"name\">mkListNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L388-L389","name":"Lean.SyntaxNode.getIdAt","line":388,"kind":"def","docLink":"./Lean/Syntax.html#Lean.SyntaxNode.getIdAt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.SyntaxNode.getIdAt\"><span class=\"name\">Lean</span>.<span class=\"name\">SyntaxNode</span>.<span class=\"name\">getIdAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Syntax.html#Lean.SyntaxNode\">Lean.SyntaxNode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L379-L381","name":"Lean.Syntax.MonadTraverser.getIdx","line":379,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.getIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.getIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">MonadTraverser</span>.<span class=\"name\">getIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[t : <span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser\">Lean.Syntax.MonadTraverser</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L377-L377","name":"Lean.Syntax.MonadTraverser.goRight","line":377,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.goRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.goRight\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">MonadTraverser</span>.<span class=\"name\">goRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[t : <span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser\">Lean.Syntax.MonadTraverser</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L376-L376","name":"Lean.Syntax.MonadTraverser.goLeft","line":376,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.goLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.goLeft\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">MonadTraverser</span>.<span class=\"name\">goLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[t : <span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser\">Lean.Syntax.MonadTraverser</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L375-L375","name":"Lean.Syntax.MonadTraverser.goUp","line":375,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.goUp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.goUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">MonadTraverser</span>.<span class=\"name\">goUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[t : <span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser\">Lean.Syntax.MonadTraverser</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L374-L374","name":"Lean.Syntax.MonadTraverser.goDown","line":374,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.goDown","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.goDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">MonadTraverser</span>.<span class=\"name\">goDown</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[t : <span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser\">Lean.Syntax.MonadTraverser</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L373-L373","name":"Lean.Syntax.MonadTraverser.setCur","line":373,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.setCur","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.setCur\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">MonadTraverser</span>.<span class=\"name\">setCur</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[t : <span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser\">Lean.Syntax.MonadTraverser</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L372-L372","name":"Lean.Syntax.MonadTraverser.getCur","line":372,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.getCur","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.getCur\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">MonadTraverser</span>.<span class=\"name\">getCur</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[t : <span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser\">Lean.Syntax.MonadTraverser</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L366-L366","name":"Lean.Syntax.MonadTraverser.st","line":366,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.st","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.st\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">MonadTraverser</span>.<span class=\"name\">st</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser\">Lean.Syntax.MonadTraverser</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState\">MonadState</a> <a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L365-L365","name":"Lean.Syntax.MonadTraverser.mk","line":365,"kind":"ctor","docLink":"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">MonadTraverser</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(st : <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState\">MonadState</a> <a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser\">Lean.Syntax.MonadTraverser</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L365-L366","name":"Lean.Syntax.MonadTraverser","line":365,"kind":"class","docLink":"./Lean/Syntax.html#Lean.Syntax.MonadTraverser","doc":"Monad class that gives read/write access to a `Traverser`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.MonadTraverser\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">MonadTraverser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L356-L360","name":"Lean.Syntax.Traverser.right","line":356,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser.right","doc":"Advance to the right sibling of the current node, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser.right\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span>.<span class=\"name\">right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L349-L353","name":"Lean.Syntax.Traverser.left","line":349,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser.left","doc":"Advance to the left sibling of the current node, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser.left\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span>.<span class=\"name\">left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L341-L346","name":"Lean.Syntax.Traverser.up","line":341,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser.up","doc":"Advance to the parent of the current node, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser.up\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span>.<span class=\"name\">up</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L334-L338","name":"Lean.Syntax.Traverser.down","line":334,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser.down","doc":"Advance to the `idx`-th child of the current node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser.down\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span>.<span class=\"name\">down</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L330-L331","name":"Lean.Syntax.Traverser.setCur","line":330,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser.setCur","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser.setCur\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span>.<span class=\"name\">setCur</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L327-L328","name":"Lean.Syntax.Traverser.fromSyntax","line":327,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser.fromSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser.fromSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span>.<span class=\"name\">fromSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L323-L323","name":"Lean.Syntax.Traverser.idxs","line":323,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser.idxs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser.idxs\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span>.<span class=\"name\">idxs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L322-L322","name":"Lean.Syntax.Traverser.parents","line":322,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser.parents","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser.parents\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span>.<span class=\"name\">parents</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L321-L321","name":"Lean.Syntax.Traverser.cur","line":321,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser.cur","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser.cur\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span>.<span class=\"name\">cur</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L320-L320","name":"Lean.Syntax.Traverser.mk","line":320,"kind":"ctor","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cur : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parents : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idxs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\">Lean.Syntax.Traverser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L320-L323","name":"Lean.Syntax.Traverser","line":320,"kind":"structure","docLink":"./Lean/Syntax.html#Lean.Syntax.Traverser","doc":"Represents a cursor into a syntax tree that can be read, written, and advanced down/up/left/right.\nIndices are allowed to be out-of-bound, in which case `cur` is `Syntax.missing`.\nIf the `Traverser` is used linearly, updates are linear in the `Syntax` object as well.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.Traverser\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Traverser</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L312-L313","name":"Lean.Syntax.ofRange","line":312,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.ofRange","doc":"Returns a synthetic Syntax which has the specified `String.Range`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.ofRange\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">ofRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(range : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L306-L309","name":"Lean.Syntax.getRange?","line":306,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.getRange?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.getRange?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getRange?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonicalOnly : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L300-L304","name":"Lean.Syntax.hasMissing","line":300,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.hasMissing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.hasMissing\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">hasMissing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L291-L298","name":"Lean.Syntax.reprint.reprintLeaf","line":291,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.reprint.reprintLeaf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.reprint.reprintLeaf\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">reprint</span>.<span class=\"name\">reprintLeaf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L274-L298","name":"Lean.Syntax.reprint","line":274,"kind":"opaque","docLink":"./Lean/Syntax.html#Lean.Syntax.reprint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.reprint\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">reprint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L256-L269","name":"Lean.Syntax.instForInTopDownSyntax.loop","line":256,"kind":"opaque","docLink":"./Lean/Syntax.html#Lean.Syntax.instForInTopDownSyntax.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.instForInTopDownSyntax.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instForInTopDownSyntax</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1} →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>] →\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>)</span></span></span></span>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>)</span></span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L254-L272","name":"Lean.Syntax.instForInTopDownSyntax","line":254,"kind":"instance","docLink":"./Lean/Syntax.html#Lean.Syntax.instForInTopDownSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.instForInTopDownSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instForInTopDownSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <a href=\"./Lean/Syntax.html#Lean.Syntax.TopDown\">Lean.Syntax.TopDown</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L252-L252","name":"Lean.Syntax.topDown","line":252,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.topDown","doc":"`for _ in stx.topDown` iterates through each node and leaf in `stx` top-down, left-to-right.\nIf `firstChoiceOnly` is `true`, only visit the first argument of each choice node.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.topDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">topDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(firstChoiceOnly : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Syntax.html#Lean.Syntax.TopDown\">Lean.Syntax.TopDown</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L246-L246","name":"Lean.Syntax.TopDown.stx","line":246,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.TopDown.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.TopDown.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TopDown</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Syntax.html#Lean.Syntax.TopDown\">Lean.Syntax.TopDown</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L245-L245","name":"Lean.Syntax.TopDown.firstChoiceOnly","line":245,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.TopDown.firstChoiceOnly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.TopDown.firstChoiceOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TopDown</span>.<span class=\"name\">firstChoiceOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Syntax.html#Lean.Syntax.TopDown\">Lean.Syntax.TopDown</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L244-L244","name":"Lean.Syntax.TopDown.mk","line":244,"kind":"ctor","docLink":"./Lean/Syntax.html#Lean.Syntax.TopDown.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.TopDown.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TopDown</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(firstChoiceOnly : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Syntax.html#Lean.Syntax.TopDown\">Lean.Syntax.TopDown</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L244-L246","name":"Lean.Syntax.TopDown","line":244,"kind":"structure","docLink":"./Lean/Syntax.html#Lean.Syntax.TopDown","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.TopDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TopDown</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L235-L242","name":"Lean.Syntax.identComponents.nameComps","line":235,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.identComponents.nameComps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.identComponents.nameComps\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">identComponents</span>.<span class=\"name\">nameComps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nFields? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L202-L242","name":"Lean.Syntax.identComponents","line":202,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.identComponents","doc":"Split an `ident` into its dot-separated components while preserving source info.\nMacro scopes are first erased.  For example, `` `foo.bla.boo._@._hyg.4 `` ↦ `` [`foo, `bla, `boo] ``.\nIf `nFields` is set, we take that many fields from the end and keep the remaining components\nas one name. For example, `` `foo.bla.boo `` with `(nFields := 1)` ↦ `` [`foo.bla, `boo] ``. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.identComponents\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">identComponents</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nFields? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L190-L195","name":"Lean.Syntax.getTailWithPos","line":190,"kind":"opaque","docLink":"./Lean/Syntax.html#Lean.Syntax.getTailWithPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.getTailWithPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTailWithPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L178-L188","name":"Lean.Syntax.updateTrailing","line":178,"kind":"opaque","docLink":"./Lean/Syntax.html#Lean.Syntax.updateTrailing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.updateTrailing\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">updateTrailing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(trailing : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L175-L176","name":"Lean.Syntax.updateLeading","line":175,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.updateLeading","doc":"Set `SourceInfo.leading` according to the trailing stop of the preceding token.\nThe result is a round-tripping syntax tree IF, in the input syntax tree,\n* all leading stops, atom contents, and trailing starts are correct\n* trailing stops are between the trailing start and the next leading stop.\n\nRemark: after parsing, all `SourceInfo.leading` fields are empty.\nThe `Syntax` argument is the output produced by the parser for `source`.\nThis function \"fixes\" the `source.leading` field.\n\nAdditionally, we try to choose \"nicer\" splits between leading and trailing stops\naccording to some heuristics so that e.g. comments are associated to the (intuitively)\ncorrect token.\n\nNote that the `SourceInfo.trailing` fields must be correct.\nThe implementation of this Function relies on this property. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.updateLeading\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">updateLeading</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L133-L134","name":"Lean.Syntax.rewriteBottomUp","line":133,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.rewriteBottomUp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.rewriteBottomUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">rewriteBottomUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L127-L131","name":"Lean.Syntax.rewriteBottomUpM","line":127,"kind":"opaque","docLink":"./Lean/Syntax.html#Lean.Syntax.rewriteBottomUpM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.rewriteBottomUpM\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">rewriteBottomUpM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L118-L125","name":"Lean.Syntax.replaceM","line":118,"kind":"opaque","docLink":"./Lean/Syntax.html#Lean.Syntax.replaceM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.replaceM\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">replaceM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L113-L116","name":"Lean.Syntax.modifyArg","line":113,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.modifyArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.modifyArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">modifyArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L108-L111","name":"Lean.Syntax.modifyArgs","line":108,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.modifyArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.modifyArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">modifyArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L105-L106","name":"Lean.Syntax.getIdAt","line":105,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.getIdAt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.getIdAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getIdAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L101-L103","name":"Lean.Syntax.asNode","line":101,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.asNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.asNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">asNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Lean/Syntax.html#Lean.SyntaxNode\">Lean.SyntaxNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L96-L99","name":"Lean.Syntax.ifNodeKind","line":96,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.ifNodeKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.ifNodeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">ifNodeKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyes : <span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.SyntaxNode\">Lean.SyntaxNode</a> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hno : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L91-L94","name":"Lean.Syntax.ifNode","line":91,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.ifNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.ifNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">ifNode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyes : <span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.SyntaxNode\">Lean.SyntaxNode</a> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hno : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L87-L89","name":"Lean.Syntax.setAtomVal","line":87,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.setAtomVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.setAtomVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setAtomVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L83-L85","name":"Lean.Syntax.getAtomVal","line":83,"kind":"def","docLink":"./Lean/Syntax.html#Lean.Syntax.getAtomVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.Syntax.getAtomVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getAtomVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L72-L77","name":"Lean.SyntaxNode.modifyArgs","line":72,"kind":"def","docLink":"./Lean/Syntax.html#Lean.SyntaxNode.modifyArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.SyntaxNode.modifyArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">SyntaxNode</span>.<span class=\"name\">modifyArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Syntax.html#Lean.SyntaxNode\">Lean.SyntaxNode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L69-L70","name":"Lean.SyntaxNode.getArgs","line":69,"kind":"def","docLink":"./Lean/Syntax.html#Lean.SyntaxNode.getArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.SyntaxNode.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">SyntaxNode</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Syntax.html#Lean.SyntaxNode\">Lean.SyntaxNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L66-L67","name":"Lean.SyntaxNode.getArg","line":66,"kind":"def","docLink":"./Lean/Syntax.html#Lean.SyntaxNode.getArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.SyntaxNode.getArg\"><span class=\"name\">Lean</span>.<span class=\"name\">SyntaxNode</span>.<span class=\"name\">getArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Syntax.html#Lean.SyntaxNode\">Lean.SyntaxNode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L63-L64","name":"Lean.SyntaxNode.getNumArgs","line":63,"kind":"def","docLink":"./Lean/Syntax.html#Lean.SyntaxNode.getNumArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.SyntaxNode.getNumArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">SyntaxNode</span>.<span class=\"name\">getNumArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Syntax.html#Lean.SyntaxNode\">Lean.SyntaxNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L56-L61","name":"Lean.SyntaxNode.withArgs","line":56,"kind":"def","docLink":"./Lean/Syntax.html#Lean.SyntaxNode.withArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.SyntaxNode.withArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">SyntaxNode</span>.<span class=\"name\">withArgs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Syntax.html#Lean.SyntaxNode\">Lean.SyntaxNode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L49-L54","name":"Lean.SyntaxNode.getKind","line":49,"kind":"def","docLink":"./Lean/Syntax.html#Lean.SyntaxNode.getKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.SyntaxNode.getKind\"><span class=\"name\">Lean</span>.<span class=\"name\">SyntaxNode</span>.<span class=\"name\">getKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Syntax.html#Lean.SyntaxNode\">Lean.SyntaxNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L44-L45","name":"Lean.isLitKind","line":44,"kind":"def","docLink":"./Lean/Syntax.html#Lean.isLitKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.isLitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">isLitKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L42-L42","name":"Lean.unreachIsNodeIdent","line":42,"kind":"def","docLink":"./Lean/Syntax.html#Lean.unreachIsNodeIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.unreachIsNodeIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">unreachIsNodeIdent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rawVal : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{val : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{preresolved : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Lean.Syntax.Preresolved</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.IsNode\">Lean.IsNode</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.ident\">Lean.Syntax.ident</a> <span class=\"fn\">info</span> <span class=\"fn\">rawVal</span> <span class=\"fn\">val</span> <span class=\"fn\">preresolved</span></span>)</span></span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L41-L41","name":"Lean.unreachIsNodeAtom","line":41,"kind":"def","docLink":"./Lean/Syntax.html#Lean.unreachIsNodeAtom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.unreachIsNodeAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">unreachIsNodeAtom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{val : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.IsNode\">Lean.IsNode</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.atom\">Lean.Syntax.atom</a> <span class=\"fn\">info</span> <span class=\"fn\">val</span></span>)</span></span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L40-L40","name":"Lean.unreachIsNodeMissing","line":40,"kind":"def","docLink":"./Lean/Syntax.html#Lean.unreachIsNodeMissing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.unreachIsNodeMissing\"><span class=\"name\">Lean</span>.<span class=\"name\">unreachIsNodeMissing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.IsNode\">Lean.IsNode</a> <a href=\"./Init/Prelude.html#Lean.Syntax.missing\">Lean.Syntax.missing</a></span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L38-L38","name":"Lean.SyntaxNode","line":38,"kind":"def","docLink":"./Lean/Syntax.html#Lean.SyntaxNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.SyntaxNode\"><span class=\"name\">Lean</span>.<span class=\"name\">SyntaxNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L36-L36","name":"Lean.IsNode.mk","line":36,"kind":"ctor","docLink":"./Lean/Syntax.html#Lean.IsNode.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.IsNode.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IsNode</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.IsNode\">Lean.IsNode</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.node\">Lean.Syntax.node</a> <span class=\"fn\">info</span> <span class=\"fn\">kind</span> <span class=\"fn\">args</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L35-L36","name":"Lean.IsNode","line":35,"kind":"inductive","docLink":"./Lean/Syntax.html#Lean.IsNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.IsNode\"><span class=\"name\">Lean</span>.<span class=\"name\">IsNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L29-L31","name":"Lean.SourceInfo.updateTrailing","line":29,"kind":"def","docLink":"./Lean/Syntax.html#Lean.SourceInfo.updateTrailing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#Lean.SourceInfo.updateTrailing\"><span class=\"name\">Lean</span>.<span class=\"name\">SourceInfo</span>.<span class=\"name\">updateTrailing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(trailing : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> → <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L24-L25","name":"String.Range.includes","line":24,"kind":"def","docLink":"./Lean/Syntax.html#String.Range.includes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#String.Range.includes\"><span class=\"name\">String</span>.<span class=\"name\">Range</span>.<span class=\"name\">includes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(super : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sub : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L21-L22","name":"String.Range.contains","line":21,"kind":"def","docLink":"./Lean/Syntax.html#String.Range.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#String.Range.contains\"><span class=\"name\">String</span>.<span class=\"name\">Range</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(includeStop : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L19-L19","name":"String.instHashableRange","line":19,"kind":"instance","docLink":"./Lean/Syntax.html#String.instHashableRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#String.instHashableRange\"><span class=\"name\">String</span>.<span class=\"name\">instHashableRange</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L19-L19","name":"String.instBEqRange","line":19,"kind":"instance","docLink":"./Lean/Syntax.html#String.instBEqRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#String.instBEqRange\"><span class=\"name\">String</span>.<span class=\"name\">instBEqRange</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L19-L19","name":"String.instReprRange","line":19,"kind":"instance","docLink":"./Lean/Syntax.html#String.instReprRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#String.instReprRange\"><span class=\"name\">String</span>.<span class=\"name\">instReprRange</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L19-L19","name":"String.instInhabitedRange","line":19,"kind":"instance","docLink":"./Lean/Syntax.html#String.instInhabitedRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#String.instInhabitedRange\"><span class=\"name\">String</span>.<span class=\"name\">instInhabitedRange</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L18-L18","name":"String.Range.stop","line":18,"kind":"def","docLink":"./Lean/Syntax.html#String.Range.stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#String.Range.stop\"><span class=\"name\">String</span>.<span class=\"name\">Range</span>.<span class=\"name\">stop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L17-L17","name":"String.Range.start","line":17,"kind":"def","docLink":"./Lean/Syntax.html#String.Range.start","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#String.Range.start\"><span class=\"name\">String</span>.<span class=\"name\">Range</span>.<span class=\"name\">start</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L16-L16","name":"String.Range.mk","line":16,"kind":"ctor","docLink":"./Lean/Syntax.html#String.Range.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#String.Range.mk\"><span class=\"name\">String</span>.<span class=\"name\">Range</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stop : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Syntax.lean#L16-L19","name":"String.Range","line":16,"kind":"structure","docLink":"./Lean/Syntax.html#String.Range","doc":"A position range inside a string. This type is mostly in combination with syntax trees,\nas there might not be a single underlying string in this case that could be used for a `Substring`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Syntax.html#String.Range\"><span class=\"name\">String</span>.<span class=\"name\">Range</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}