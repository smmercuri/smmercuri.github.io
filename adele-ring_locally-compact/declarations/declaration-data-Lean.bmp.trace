{"log":
 [{"message":
   ".> ELAN_HOME=/home/smercuri/.elan ELAN_TOOLCHAIN=leanprover/lean4:v4.10.0-rc2 LAKE=/home/smercuri/.elan/toolchains/leanprover--lean4---v4.10.0-rc2/bin/lake LAKE_HOME=/home/smercuri/.elan/toolchains/leanprover--lean4---v4.10.0-rc2 LAKE_PKG_URL_MAP={} LEAN_GITHASH=702c31b8071269f0052fd1e0fb3891a079a655bd LEAN_SYSROOT=/home/smercuri/.elan/toolchains/leanprover--lean4---v4.10.0-rc2 LEAN_AR=/home/smercuri/.elan/toolchains/leanprover--lean4---v4.10.0-rc2/bin/llvm-ar LEAN_CC= LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/MD4Lean/.lake/build/lib:././.lake/packages/UnicodeBasic/.lake/build/lib:././.lake/packages/doc-gen4/.lake/build/lib:././.lake/build/lib:/home/smercuri/.elan/toolchains/leanprover--lean4---v4.10.0-rc2/lib/lean LEAN_SRC_PATH=././.lake/packages/batteries/./.:././.lake/packages/Qq/./.:././.lake/packages/aesop/./.:././.lake/packages/aesop/./.:././.lake/packages/proofwidgets/./.:././.lake/packages/proofwidgets/./.:././.lake/packages/Cli/./.:././.lake/packages/importGraph/./.:././.lake/packages/mathlib/./.:././.lake/packages/mathlib/./.:././.lake/packages/mathlib/./.:././.lake/packages/mathlib/./.:././.lake/packages/mathlib/./.:././.lake/packages/mathlib/./.:././.lake/packages/MD4Lean/./.:././.lake/packages/UnicodeBasic/./.:././.lake/packages/doc-gen4/./.:./././.:/home/smercuri/.elan/toolchains/leanprover--lean4---v4.10.0-rc2/src/lean/lake PATH LD_LIBRARY_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/MD4Lean/.lake/build/lib:././.lake/packages/UnicodeBasic/.lake/build/lib:././.lake/packages/doc-gen4/.lake/build/lib:././.lake/build/lib:/home/smercuri/.elan/toolchains/leanprover--lean4---v4.10.0-rc2/lib/lean:/home/smercuri/.elan/toolchains/leanprover--lean4---v4.10.0-rc2/lib ././.lake/packages/doc-gen4/.lake/build/bin/doc-gen4 genCore",
   "level": "trace"},
  {"message":
   "stdout:\nWARNING: Failed to calculate equational lemmata for Lean.Level.substParams.go: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Expr.replaceNoCache: (deterministic) timeout at `isDefEq`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.RBNode.appendTrees: (deterministic) timeout at `delab`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Expr.find?: tactic 'simp' failed, nested error:\n(deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.ForEachExpr.visit: tactic 'simp' failed, nested error:\n(deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Eqns.removeUnusedEqnHypotheses.go: tactic 'simp' failed, nested error:\n(deterministic) timeout at `simp`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Meta.caseValues.loop: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Level.normLtAux: tactic 'simp' failed, nested error:\n(deterministic) timeout at `isDefEq`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Expr.stripArgsN: tactic 'simp' failed, nested error:\n(deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.PrettyPrinter.Delaborator.SubExpr.withBoundedAppFnArgs: failed to generate equational theorem for 'Lean.PrettyPrinter.Delaborator.SubExpr.withBoundedAppFnArgs'\ncase succ\nα : Type\nm : Type → Type\ninst : Monad m\ninst_1 : MonadReaderOf Lean.SubExpr m\ninst_2 : MonadWithReaderOf Lean.SubExpr m\nxf : m α\nxa : α → m α\nn : Nat\n⊢ (do\n      let __do_lift ← Lean.PrettyPrinter.Delaborator.SubExpr.getExpr\n      (match (motive :=\n            (maxArgs : Nat) →\n              Lean.Expr →\n                Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => PProd (PProd (m α → (α → m α) → m α) n_ih) PUnit)\n                    maxArgs →\n                  m α)\n            n.succ, __do_lift with\n          | maxArgs'.succ, fn.app arg =>\n            fun\n              (x :\n                PProd\n                  (PProd (m α → (α → m α) → m α)\n                    (Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => PProd (PProd (m α → (α → m α) → m α) n_ih) PUnit)\n                      maxArgs'))\n                  PUnit) =>\n            do\n            let acc ← Lean.PrettyPrinter.Delaborator.SubExpr.withAppFn (x.fst.fst xf xa)\n            Lean.PrettyPrinter.Delaborator.SubExpr.withAppArg (xa acc)\n          | x, x_1 =>\n            fun\n              (x : Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => PProd (PProd (m α → (α → m α) → m α) n_ih) PUnit) x) =>\n            xf)\n          ⟨Nat.rec\n              ⟨fun (xf : m α) (xa : α → m α) => do\n                let _ ← Lean.PrettyPrinter.Delaborator.SubExpr.getExpr\n                xf, PUnit.unit⟩\n              (fun (n : Nat)\n                  (n_ih :\n                    PProd (m α → (α → m α) → m α)\n                      (Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => PProd (PProd (m α → (α → m α) → m α) n_ih) PUnit)\n                        n)) =>\n                ⟨fun (xf : m α) (xa : α → m α) => do\n                  let __do_lift ← Lean.PrettyPrinter.Delaborator.SubExpr.getExpr\n                  (match (motive :=\n                        (maxArgs : Nat) →\n                          Lean.Expr →\n                            Nat.rec PUnit\n                                (fun (n : Nat) (n_ih : Type) => PProd (PProd (m α → (α → m α) → m α) n_ih) PUnit)\n                                maxArgs →\n                              m α)\n                        n.succ, __do_lift with\n                      | maxArgs'.succ, fn.app arg =>\n                        fun\n                          (x :\n                            PProd\n                              (PProd (m α → (α → m α) → m α)\n                                (Nat.rec PUnit\n                                  (fun (n : Nat) (n_ih : Type) => PProd (PProd (m α → (α → m α) → m α) n_ih) PUnit)\n                                  maxArgs'))\n                              PUnit) =>\n                        do\n                        let acc ← Lean.PrettyPrinter.Delaborator.SubExpr.withAppFn (x.fst.fst xf xa)\n                        Lean.PrettyPrinter.Delaborator.SubExpr.withAppArg (xa acc)\n                      | x, x_1 =>\n                        fun\n                          (x :\n                            Nat.rec PUnit\n                              (fun (n : Nat) (n_ih : Type) => PProd (PProd (m α → (α → m α) → m α) n_ih) PUnit) x) =>\n                        xf)\n                      ⟨n_ih, PUnit.unit⟩,\n                  ⟨n_ih, PUnit.unit⟩⟩)\n              n,\n            PUnit.unit⟩) =\n    do\n    let __do_lift ← Lean.PrettyPrinter.Delaborator.SubExpr.getExpr\n    match n.succ, __do_lift with\n      | maxArgs'.succ, fn.app arg => do\n        let acc ←\n          Lean.PrettyPrinter.Delaborator.SubExpr.withAppFn\n              (Lean.PrettyPrinter.Delaborator.SubExpr.withBoundedAppFnArgs maxArgs' xf xa)\n        Lean.PrettyPrinter.Delaborator.SubExpr.withAppArg (xa acc)\n      | x, x_1 => xf\nWARNING: Failed to calculate equational lemmata for Lean.Expr.hasAnyFVar.visit: tactic 'simp' failed, nested error:\n(deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Expr.inferImplicit: tactic 'simp' failed, nested error:\n(deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Command.accLevel.go: tactic 'simp' failed, nested error:\n(deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Meta.kabstract.visit: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Meta.AC.toACExpr.toPreExpr: tactic 'simp' failed, nested error:\n(deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.PrettyPrinter.Delaborator.reifyName: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Meta.isAbstractedUnassignedMVar: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Compiler.LCNF.AlphaEqv.eqvType: tactic 'simp' failed, nested error:\n(deterministic) timeout at `simp`, maximum number of heartbeats (5000) has been reached\nuse `set_option maxHeartbeats <num>` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\n",
   "level": "info"}],
 "depHash": "3949109113414290719"}