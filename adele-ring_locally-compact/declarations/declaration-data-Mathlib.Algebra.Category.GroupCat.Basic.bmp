{"name":"Mathlib.Algebra.Category.GroupCat.Basic","instances":[{"typeNames":[],"name":"AddGroupCat.instParentProjectionTypeAddMonoidAddGroupToAddMonoidToSubNegAddMonoid","className":"CategoryTheory.BundledHom.ParentProjection"},{"typeNames":[],"name":"GroupCat.instParentProjectionTypeMonoidGroupToMonoidToDivInvMonoid","className":"CategoryTheory.BundledHom.ParentProjection"},{"typeNames":["AddGroupCat"],"name":"instAddGroupCatLargeCategory","className":"CategoryTheory.Category"},{"typeNames":["AddGroupCat"],"name":"AddGroupCat.concreteCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["GroupCat"],"name":"GroupCat.concreteCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["AddGroupCat","_builtin_typeu"],"name":"AddGroupCat.instCoeSortAddGroupCatType","className":"CoeSort"},{"typeNames":["GroupCat","_builtin_typeu"],"name":"GroupCat.instCoeSortGroupCatType","className":"CoeSort"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"AddGroupCat.instGroupα","className":"AddGroup"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"GroupCat.instGroupα","className":"Group"},{"typeNames":["Quiver.Hom"],"name":"AddGroupCat.instCoeFunHomAddGroupCatToQuiverToCategoryStructInstAddGroupCatLargeCategoryForAllαAddGroup","className":"CoeFun"},{"typeNames":["Quiver.Hom"],"name":"GroupCat.instCoeFunHomGroupCatToQuiverToCategoryStructInstGroupCatLargeCategoryForAllαGroup","className":"CoeFun"},{"typeNames":["Quiver.Hom","CategoryTheory.Bundled.α","CategoryTheory.Bundled.α"],"name":"AddGroupCat.instFunLike","className":"DFunLike"},{"typeNames":["Quiver.Hom","CategoryTheory.Bundled.α","CategoryTheory.Bundled.α"],"name":"GroupCat.instFunLike","className":"DFunLike"},{"typeNames":["AddGroupCat"],"name":"AddGroupCat.instInhabitedAddGroupCat","className":"Inhabited"},{"typeNames":["GroupCat"],"name":"GroupCat.instInhabitedGroupCat","className":"Inhabited"},{"typeNames":["AddGroupCat","AddMonCat"],"name":"AddGroupCat.hasForgetToAddMonCat","className":"CategoryTheory.HasForget₂"},{"typeNames":["GroupCat","MonCat"],"name":"GroupCat.hasForgetToMonCat","className":"CategoryTheory.HasForget₂"},{"typeNames":["AddGroupCat","AddMonCat"],"name":"AddGroupCat.instCoeAddGroupCatMonCat","className":"Coe"},{"typeNames":["GroupCat","MonCat"],"name":"GroupCat.instCoeGroupCatMonCat","className":"Coe"},{"typeNames":["Quiver.Hom"],"name":"AddGroupCat.instZeroHomAddGroupCatToQuiverToCategoryStructInstAddGroupCatLargeCategory","className":"Zero"},{"typeNames":["Quiver.Hom"],"name":"GroupCat.instOneHomGroupCatToQuiverToCategoryStructInstGroupCatLargeCategory","className":"One"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"AddGroupCat.ofUnique","className":"Unique"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"GroupCat.ofUnique","className":"Unique"},{"typeNames":["AddCommGroup.toAddGroup"],"name":"AddCommGroupCat.instParentProjectionTypeAddGroupAddCommGroupToAddGroup","className":"CategoryTheory.BundledHom.ParentProjection"},{"typeNames":["CommGroup.toGroup"],"name":"CommGroupCat.instParentProjectionTypeGroupCommGroupToGroup","className":"CategoryTheory.BundledHom.ParentProjection"},{"typeNames":["AddCommGroupCat"],"name":"instAddCommGroupCatLargeCategory","className":"CategoryTheory.Category"},{"typeNames":["AddCommGroupCat"],"name":"AddCommGroupCat.concreteCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["CommGroupCat"],"name":"CommGroupCat.concreteCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["AddCommGroupCat","_builtin_typeu"],"name":"AddCommGroupCat.instCoeSortAddCommGroupCatType","className":"CoeSort"},{"typeNames":["CommGroupCat","_builtin_typeu"],"name":"CommGroupCat.instCoeSortCommGroupCatType","className":"CoeSort"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"AddCommGroupCat.addCommGroupInstance","className":"AddCommGroup"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"CommGroupCat.commGroupInstance","className":"CommGroup"},{"typeNames":["Quiver.Hom"],"name":"AddCommGroupCat.instCoeFunHomAddCommGroupCatToQuiverToCategoryStructInstAddCommGroupCatLargeCategoryForAllαAddCommGroup","className":"CoeFun"},{"typeNames":["Quiver.Hom"],"name":"CommGroupCat.instCoeFunHomCommGroupCatToQuiverToCategoryStructInstCommGroupCatLargeCategoryForAllαCommGroup","className":"CoeFun"},{"typeNames":["Quiver.Hom","CategoryTheory.Bundled.α","CategoryTheory.Bundled.α"],"name":"AddCommGroupCat.instFunLike","className":"DFunLike"},{"typeNames":["Quiver.Hom","CategoryTheory.Bundled.α","CategoryTheory.Bundled.α"],"name":"CommGroupCat.instFunLike","className":"DFunLike"},{"typeNames":["AddCommGroupCat"],"name":"AddCommGroupCat.instInhabitedAddCommGroupCat","className":"Inhabited"},{"typeNames":["CommGroupCat"],"name":"CommGroupCat.instInhabitedCommGroupCat","className":"Inhabited"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"AddCommGroupCat.ofUnique","className":"Unique"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"CommGroupCat.ofUnique","className":"Unique"},{"typeNames":["AddCommGroupCat","AddGroupCat"],"name":"AddCommGroupCat.hasForgetToAddGroup","className":"CategoryTheory.HasForget₂"},{"typeNames":["CommGroupCat","GroupCat"],"name":"CommGroupCat.hasForgetToGroup","className":"CategoryTheory.HasForget₂"},{"typeNames":["AddCommGroupCat","AddGroupCat"],"name":"AddCommGroupCat.instCoeAddCommGroupCatAddGroupCat","className":"Coe"},{"typeNames":["CommGroupCat","GroupCat"],"name":"CommGroupCat.instCoeCommGroupCatGroupCat","className":"Coe"},{"typeNames":["AddCommGroupCat","AddCommMonCat"],"name":"AddCommGroupCat.hasForgetToAddCommMonCat","className":"CategoryTheory.HasForget₂"},{"typeNames":["CommGroupCat","CommMonCat"],"name":"CommGroupCat.hasForgetToCommMonCat","className":"CategoryTheory.HasForget₂"},{"typeNames":["AddCommGroupCat","AddCommMonCat"],"name":"AddCommGroupCat.instCoeAddCommGroupCatCommMonCat","className":"Coe"},{"typeNames":["CommGroupCat","CommMonCat"],"name":"CommGroupCat.instCoeCommGroupCatCommMonCat","className":"Coe"},{"typeNames":["Quiver.Hom"],"name":"AddCommGroupCat.instZeroHomAddCommGroupCatToQuiverToCategoryStructInstAddCommGroupCatLargeCategory","className":"Zero"},{"typeNames":["Quiver.Hom"],"name":"CommGroupCat.instOneHomCommGroupCatToQuiverToCategoryStructInstCommGroupCatLargeCategory","className":"One"},{"typeNames":["CategoryTheory.forget"],"name":"AddGroupCat.forget_reflects_isos","className":"CategoryTheory.ReflectsIsomorphisms"},{"typeNames":["CategoryTheory.forget"],"name":"GroupCat.forget_reflects_isos","className":"CategoryTheory.ReflectsIsomorphisms"},{"typeNames":["CategoryTheory.forget"],"name":"AddCommGroupCat.forget_reflects_isos","className":"CategoryTheory.ReflectsIsomorphisms"},{"typeNames":["CategoryTheory.forget"],"name":"CommGroupCat.forget_reflects_isos","className":"CategoryTheory.ReflectsIsomorphisms"}],"imports":["Init","Mathlib.Algebra.Category.MonCat.Basic","Mathlib.CategoryTheory.Endomorphism"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L527-L527","name":"AddCommGroupCatMax","line":527,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCatMax","doc":"An alias for `AddCommGroupCat.{max u v}`, to deal around unification issues. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCatMax\"><span class=\"name\">AddCommGroupCatMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> ((max u1 u2) + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L524-L524","name":"CommGroupCatMax","line":524,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCatMax","doc":"An alias for `CommGroupCat.{max u v}`, to deal around unification issues. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCatMax\"><span class=\"name\">CommGroupCatMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> ((max u1 u2) + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L522-L523","name":"AddCommGroupCatMaxAux","line":522,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCatMaxAux","doc":"An alias for `AddCommGroupCat.{max u v}`, to deal around unification issues."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCatMaxAux\"><span class=\"name\">AddCommGroupCatMaxAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> ((max u1 u2) + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L519-L519","name":"AddGroupCatMax","line":519,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCatMax","doc":"An alias for `AddGroupCat.{max u v}`, to deal around unification issues. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCatMax\"><span class=\"name\">AddGroupCatMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> ((max u1 u2) + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L516-L516","name":"GroupCatMax","line":516,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCatMax","doc":"An alias for `GroupCat.{max u v}`, to deal around unification issues. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCatMax\"><span class=\"name\">GroupCatMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> ((max u1 u2) + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L514-L515","name":"GroupCatMaxAux","line":514,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCatMaxAux","doc":"An alias for `AddGroupCat.{max u v}`, to deal around unification issues."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCatMaxAux\"><span class=\"name\">GroupCatMaxAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> ((max u1 u2) + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L499-L503","name":"CommGroupCat.forget_reflects_isos","line":499,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.forget_reflects_isos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.forget_reflects_isos\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">forget_reflects_isos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/ReflectsIso.html#CategoryTheory.ReflectsIsomorphisms\">CategoryTheory.ReflectsIsomorphisms</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L498-L498","name":"AddCommGroupCat.forget_reflects_isos","line":498,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.forget_reflects_isos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.forget_reflects_isos\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">forget_reflects_isos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/ReflectsIso.html#CategoryTheory.ReflectsIsomorphisms\">CategoryTheory.ReflectsIsomorphisms</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L488-L492","name":"GroupCat.forget_reflects_isos","line":488,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.forget_reflects_isos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.forget_reflects_isos\"><span class=\"name\">GroupCat</span>.<span class=\"name\">forget_reflects_isos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/ReflectsIso.html#CategoryTheory.ReflectsIsomorphisms\">CategoryTheory.ReflectsIsomorphisms</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L487-L487","name":"AddGroupCat.forget_reflects_isos","line":487,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.forget_reflects_isos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.forget_reflects_isos\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">forget_reflects_isos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/ReflectsIso.html#CategoryTheory.ReflectsIsomorphisms\">CategoryTheory.ReflectsIsomorphisms</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L480-L481","name":"CategoryTheory.Aut.mulEquivPerm","line":480,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Aut.mulEquivPerm","doc":"The (unbundled) group of automorphisms of a type is `mul_equiv` to the (unbundled) group\nof permutations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Aut.mulEquivPerm\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Aut</span>.<span class=\"name\">mulEquivPerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Endomorphism.html#CategoryTheory.Aut\">CategoryTheory.Aut</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Equiv.Perm</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L466-L474","name":"CategoryTheory.Aut.isoPerm","line":466,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Aut.isoPerm","doc":"The (bundled) group of automorphisms of a type is isomorphic to the (bundled) group\nof permutations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Aut.isoPerm\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Aut</span>.<span class=\"name\">isoPerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of\">GroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Endomorphism.html#CategoryTheory.Aut\">CategoryTheory.Aut</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of\">GroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Equiv.Perm</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L450-L452","name":"mulEquivIsoCommGroupIso","line":450,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#mulEquivIsoCommGroupIso","doc":"multiplicative equivalences between `comm_group`s are the same as (isomorphic to) isomorphisms\nin `CommGroup` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#mulEquivIsoCommGroupIso\"><span class=\"name\">mulEquivIsoCommGroupIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L449-L449","name":"addEquivIsoAddCommGroupIso.proof_1","line":449,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddCommGroupIso.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddCommGroupIso.proof_1\"><span class=\"name\">addEquivIsoAddCommGroupIso</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso\">AddEquiv.toAddCommGroupCatIso</a> <span class=\"fn\">e</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv\">CategoryTheory.Iso.addCommGroupIsoToAddEquiv</a> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso\">AddEquiv.toAddCommGroupCatIso</a> <span class=\"fn\">e</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv\">CategoryTheory.Iso.addCommGroupIsoToAddEquiv</a> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L449-L449","name":"addEquivIsoAddCommGroupIso","line":449,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddCommGroupIso","doc":"additive equivalences between `AddCommGroup`s are\nthe same as (isomorphic to) isomorphisms in `AddCommGroup` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddCommGroupIso\"><span class=\"name\">addEquivIsoAddCommGroupIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L449-L449","name":"addEquivIsoAddCommGroupIso.proof_2","line":449,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddCommGroupIso.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddCommGroupIso.proof_2\"><span class=\"name\">addEquivIsoAddCommGroupIso</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv\">CategoryTheory.Iso.addCommGroupIsoToAddEquiv</a> <span class=\"fn\">i</span></span></span>)</span>\n    <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso\">AddEquiv.toAddCommGroupCatIso</a> <span class=\"fn\">e</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv\">CategoryTheory.Iso.addCommGroupIsoToAddEquiv</a> <span class=\"fn\">i</span></span></span>)</span>\n    <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso\">AddEquiv.toAddCommGroupCatIso</a> <span class=\"fn\">e</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L435-L437","name":"mulEquivIsoGroupIso","line":435,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#mulEquivIsoGroupIso","doc":"multiplicative equivalences between `Group`s are the same as (isomorphic to) isomorphisms\nin `GroupCat` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#mulEquivIsoGroupIso\"><span class=\"name\">mulEquivIsoGroupIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L434-L434","name":"addEquivIsoAddGroupIso","line":434,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddGroupIso","doc":"\"additive equivalences between `add_group`s are the same\nas (isomorphic to) isomorphisms in `AddGroup` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddGroupIso\"><span class=\"name\">addEquivIsoAddGroupIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L434-L434","name":"addEquivIsoAddGroupIso.proof_2","line":434,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddGroupIso.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddGroupIso.proof_2\"><span class=\"name\">addEquivIsoAddGroupIso</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addGroupIsoToAddEquiv\">CategoryTheory.Iso.addGroupIsoToAddEquiv</a> <span class=\"fn\">i</span></span></span>)</span>\n    <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso\">AddEquiv.toAddGroupCatIso</a> <span class=\"fn\">e</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L434-L434","name":"addEquivIsoAddGroupIso.proof_1","line":434,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddGroupIso.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#addEquivIsoAddGroupIso.proof_1\"><span class=\"name\">addEquivIsoAddGroupIso</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso\">AddEquiv.toAddGroupCatIso</a> <span class=\"fn\">e</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addGroupIsoToAddEquiv\">CategoryTheory.Iso.addGroupIsoToAddEquiv</a> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L420-L421","name":"CategoryTheory.Iso.commGroupIsoToMulEquiv","line":420,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.commGroupIsoToMulEquiv","doc":"Build a `MulEquiv` from an isomorphism in the category `CommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.commGroupIsoToMulEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Iso</span>.<span class=\"name\">commGroupIsoToMulEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L419-L419","name":"CategoryTheory.Iso.addCommGroupIsoToAddEquiv_apply","line":419,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Iso</span>.<span class=\"name\">addCommGroupIsoToAddEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv\">CategoryTheory.Iso.addCommGroupIsoToAddEquiv</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.hom</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L419-L419","name":"CategoryTheory.Iso.commGroupIsoToMulEquiv_apply","line":419,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.commGroupIsoToMulEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.commGroupIsoToMulEquiv_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Iso</span>.<span class=\"name\">commGroupIsoToMulEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.commGroupIsoToMulEquiv\">CategoryTheory.Iso.commGroupIsoToMulEquiv</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.hom</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L419-L419","name":"CategoryTheory.Iso.commGroupIsoToMulEquiv_symm_apply","line":419,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.commGroupIsoToMulEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.commGroupIsoToMulEquiv_symm_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Iso</span>.<span class=\"name\">commGroupIsoToMulEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.symm\">MulEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.commGroupIsoToMulEquiv\">CategoryTheory.Iso.commGroupIsoToMulEquiv</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.inv</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L419-L419","name":"CategoryTheory.Iso.addCommGroupIsoToAddEquiv_symm_apply","line":419,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv_symm_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Iso</span>.<span class=\"name\">addCommGroupIsoToAddEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv\">CategoryTheory.Iso.addCommGroupIsoToAddEquiv</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.inv</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L419-L419","name":"CategoryTheory.Iso.addCommGroupIsoToAddEquiv","line":419,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv","doc":"Build an `AddEquiv` from an isomorphism in the category `AddCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addCommGroupIsoToAddEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Iso</span>.<span class=\"name\">addCommGroupIsoToAddEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L408-L409","name":"CategoryTheory.Iso.groupIsoToMulEquiv","line":408,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.groupIsoToMulEquiv","doc":"Build a `MulEquiv` from an isomorphism in the category `GroupCat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.groupIsoToMulEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Iso</span>.<span class=\"name\">groupIsoToMulEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L407-L407","name":"CategoryTheory.Iso.addGroupIsoToAddEquiv","line":407,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addGroupIsoToAddEquiv","doc":"Build an `addEquiv` from an isomorphism in the category `AddGroup` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CategoryTheory.Iso.addGroupIsoToAddEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Iso</span>.<span class=\"name\">addGroupIsoToAddEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L392-L394","name":"MulEquiv.toCommGroupCatIso","line":392,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toCommGroupCatIso","doc":"Build an isomorphism in the category `CommGroupCat` from a `MulEquiv`\nbetween `CommGroup`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toCommGroupCatIso\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">toCommGroupCatIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L391-L391","name":"AddEquiv.toAddCommGroupCatIso_inv","line":391,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso_inv\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">toAddCommGroupCatIso_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso\">AddEquiv.toAddCommGroupCatIso</a> <span class=\"fn\">e</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">e</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L391-L391","name":"MulEquiv.toCommGroupCatIso_hom","line":391,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toCommGroupCatIso_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toCommGroupCatIso_hom\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">toCommGroupCatIso_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toCommGroupCatIso\">MulEquiv.toCommGroupCatIso</a> <span class=\"fn\">e</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.toMonoidHom\">MulEquiv.toMonoidHom</a> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L391-L391","name":"AddEquiv.toAddCommGroupCatIso_hom","line":391,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso_hom\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">toAddCommGroupCatIso_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso\">AddEquiv.toAddCommGroupCatIso</a> <span class=\"fn\">e</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L391-L391","name":"MulEquiv.toCommGroupCatIso_inv","line":391,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toCommGroupCatIso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toCommGroupCatIso_inv\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">toCommGroupCatIso_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toCommGroupCatIso\">MulEquiv.toCommGroupCatIso</a> <span class=\"fn\">e</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.toMonoidHom\">MulEquiv.toMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.symm\">MulEquiv.symm</a> <span class=\"fn\">e</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L391-L391","name":"AddEquiv.toAddCommGroupCatIso","line":391,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso","doc":"Build an isomorphism in the category `AddCommGroupCat` from an `AddEquiv`\nbetween `AddCommGroup`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">toAddCommGroupCatIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L391-L391","name":"AddEquiv.toAddCommGroupCatIso.proof_2","line":391,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso.proof_2\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">toAddCommGroupCatIso</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">e</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L391-L391","name":"AddEquiv.toAddCommGroupCatIso.proof_1","line":391,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddCommGroupCatIso.proof_1\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">toAddCommGroupCatIso</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">e</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">e</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L378-L380","name":"MulEquiv.toGroupCatIso","line":378,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toGroupCatIso","doc":"Build an isomorphism in the category `GroupCat` from a `MulEquiv` between `Group`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toGroupCatIso\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">toGroupCatIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L377-L377","name":"MulEquiv.toGroupCatIso_inv","line":377,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toGroupCatIso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toGroupCatIso_inv\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">toGroupCatIso_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toGroupCatIso\">MulEquiv.toGroupCatIso</a> <span class=\"fn\">e</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.toMonoidHom\">MulEquiv.toMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.symm\">MulEquiv.symm</a> <span class=\"fn\">e</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L377-L377","name":"MulEquiv.toGroupCatIso_hom","line":377,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toGroupCatIso_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toGroupCatIso_hom\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">toGroupCatIso_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#MulEquiv.toGroupCatIso\">MulEquiv.toGroupCatIso</a> <span class=\"fn\">e</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.toMonoidHom\">MulEquiv.toMonoidHom</a> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L377-L377","name":"AddEquiv.toAddGroupCatIso_hom","line":377,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso_hom\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">toAddGroupCatIso_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso\">AddEquiv.toAddGroupCatIso</a> <span class=\"fn\">e</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L377-L377","name":"AddEquiv.toAddGroupCatIso_inv","line":377,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso_inv\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">toAddGroupCatIso_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso\">AddEquiv.toAddGroupCatIso</a> <span class=\"fn\">e</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">e</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L377-L377","name":"AddEquiv.toAddGroupCatIso.proof_2","line":377,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso.proof_2\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">toAddGroupCatIso</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">e</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L377-L377","name":"AddEquiv.toAddGroupCatIso","line":377,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso","doc":"Build an isomorphism in the category `AddGroup` from an `AddEquiv` between `AddGroup`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">toAddGroupCatIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L377-L377","name":"AddEquiv.toAddGroupCatIso.proof_1","line":377,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddEquiv.toAddGroupCatIso.proof_1\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">toAddGroupCatIso</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">e</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">e</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L366-L370","name":"AddCommGroupCat.injective_of_mono","line":366,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.injective_of_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.injective_of_mono\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">injective_of_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L358-L360","name":"AddCommGroupCat.int_hom_ext","line":358,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.int_hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.int_hom_ext\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">int_hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L352-L353","name":"AddCommGroupCat.asHom_injective","line":352,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.asHom_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.asHom_injective\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">asHom_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">AddCommGroupCat.asHom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L347-L348","name":"AddCommGroupCat.asHom_apply","line":347,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.asHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.asHom_apply\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">asHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.asHom\">AddCommGroupCat.asHom</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L341-L342","name":"AddCommGroupCat.asHom","line":341,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.asHom","doc":"Any element of an abelian group gives a unique morphism from `ℤ` sending\n`1` to that element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.asHom\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">asHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L320-L322","name":"CommGroupCat.ofHom_apply","line":320,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.ofHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.ofHom_apply\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">ofHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.ofHom\">CommGroupCat.ofHom</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L319-L319","name":"AddCommGroupCat.ofHom_apply","line":319,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.ofHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.ofHom_apply\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">ofHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.ofHom\">AddCommGroupCat.ofHom</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L309-L310","name":"CommGroupCat.ofHom","line":309,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.ofHom","doc":"Typecheck a `MonoidHom` as a morphism in `CommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.ofHom\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">ofHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.of\">CommGroupCat.of</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.of\">CommGroupCat.of</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L308-L308","name":"AddCommGroupCat.ofHom","line":308,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.ofHom","doc":"Typecheck an `AddMonoidHom` as a morphism in `AddCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.ofHom\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">ofHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L300-L301","name":"CommGroupCat.one_apply","line":300,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.one_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.one_apply\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">one_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L299-L299","name":"AddCommGroupCat.zero_apply","line":299,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.zero_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.zero_apply\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">zero_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L297-L297","name":"CommGroupCat.instOneHomCommGroupCatToQuiverToCategoryStructInstCommGroupCatLargeCategory","line":297,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instOneHomCommGroupCatToQuiverToCategoryStructInstCommGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instOneHomCommGroupCatToQuiverToCategoryStructInstCommGroupCatLargeCategory\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">instOneHomCommGroupCatToQuiverToCategoryStructInstCommGroupCatLargeCategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">H</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L296-L296","name":"AddCommGroupCat.instZeroHomAddCommGroupCatToQuiverToCategoryStructInstAddCommGroupCatLargeCategory","line":296,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instZeroHomAddCommGroupCatToQuiverToCategoryStructInstAddCommGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instZeroHomAddCommGroupCatToQuiverToCategoryStructInstAddCommGroupCatLargeCategory\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">instZeroHomAddCommGroupCatToQuiverToCategoryStructInstAddCommGroupCatLargeCategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">H</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L293-L293","name":"CommGroupCat.instCoeCommGroupCatCommMonCat","line":293,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instCoeCommGroupCatCommMonCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instCoeCommGroupCatCommMonCat\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">instCoeCommGroupCatCommMonCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#CommMonCat\">CommMonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L292-L292","name":"AddCommGroupCat.instCoeAddCommGroupCatCommMonCat","line":292,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instCoeAddCommGroupCatCommMonCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instCoeAddCommGroupCatCommMonCat\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">instCoeAddCommGroupCatCommMonCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#AddCommMonCat\">AddCommMonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L285-L286","name":"CommGroupCat.hasForgetToCommMonCat","line":285,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.hasForgetToCommMonCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.hasForgetToCommMonCat\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">hasForgetToCommMonCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#CommMonCat\">CommMonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L284-L284","name":"AddCommGroupCat.hasForgetToAddCommMonCat","line":284,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.hasForgetToAddCommMonCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.hasForgetToAddCommMonCat\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">hasForgetToAddCommMonCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#AddCommMonCat\">AddCommMonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L282-L282","name":"CommGroupCat.instCoeCommGroupCatGroupCat","line":282,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instCoeCommGroupCatGroupCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instCoeCommGroupCatGroupCat\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">instCoeCommGroupCatGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L281-L281","name":"AddCommGroupCat.instCoeAddCommGroupCatAddGroupCat","line":281,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instCoeAddCommGroupCatAddGroupCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instCoeAddCommGroupCatAddGroupCat\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">instCoeAddCommGroupCatAddGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L274-L275","name":"CommGroupCat.hasForgetToGroup","line":274,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.hasForgetToGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.hasForgetToGroup\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">hasForgetToGroup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L273-L273","name":"AddCommGroupCat.hasForgetToAddGroup","line":273,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.hasForgetToAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.hasForgetToAddGroup\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">hasForgetToAddGroup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L266-L267","name":"CommGroupCat.ofUnique","line":266,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.ofUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.ofUnique\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">ofUnique</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[i : <span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.of\">CommGroupCat.of</a> <span class=\"fn\">G</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L265-L265","name":"AddCommGroupCat.ofUnique","line":265,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.ofUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.ofUnique\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">ofUnique</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[i : <span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <span class=\"fn\">G</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L258-L259","name":"CommGroupCat.coe_of","line":258,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.coe_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.coe_of\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">coe_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.of\">CommGroupCat.of</a> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L257-L257","name":"AddCommGroupCat.coe_of","line":257,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.coe_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.coe_of\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">coe_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L251-L252","name":"CommGroupCat.instInhabitedCommGroupCat","line":251,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instInhabitedCommGroupCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instInhabitedCommGroupCat\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">instInhabitedCommGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L250-L250","name":"AddCommGroupCat.instInhabitedAddCommGroupCat","line":250,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instInhabitedAddCommGroupCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instInhabitedAddCommGroupCat\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">instInhabitedAddCommGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L240-L241","name":"CommGroupCat.of","line":240,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.of","doc":"Construct a bundled `CommGroup` from the underlying type and typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.of\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L239-L239","name":"AddCommGroupCat.of","line":239,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of","doc":"Construct a bundled `AddCommGroup` from the underlying type and typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L235-L236","name":"CommGroupCat.ext","line":235,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.ext\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L234-L234","name":"AddCommGroupCat.ext","line":234,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.ext\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L230-L232","name":"CommGroupCat.forget_map","line":230,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.forget_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.forget_map\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">forget_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L229-L229","name":"AddCommGroupCat.forget_map","line":229,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.forget_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.forget_map\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">forget_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L226-L226","name":"CommGroupCat.comp_def","line":226,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.comp_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.comp_def\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">comp_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom.comp\">MonoidHom.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L225-L225","name":"AddCommGroupCat.comp_def","line":225,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.comp_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.comp_def\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">comp_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L223-L223","name":"CommGroupCat.coe_comp","line":223,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.coe_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.coe_comp\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">coe_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L222-L222","name":"AddCommGroupCat.coe_comp","line":222,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.coe_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.coe_comp\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">coe_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L219-L219","name":"CommGroupCat.coe_id","line":219,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.coe_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.coe_id\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">coe_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L218-L218","name":"AddCommGroupCat.coe_id","line":218,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.coe_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.coe_id\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">coe_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L214-L215","name":"CommGroupCat.instFunLike","line":214,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instFunLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instFunLike\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">instFunLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">X</span></span> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L213-L213","name":"AddCommGroupCat.instFunLike","line":213,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instFunLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instFunLike\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">instFunLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">X</span></span> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L210-L211","name":"CommGroupCat.instCoeFunHomCommGroupCatToQuiverToCategoryStructInstCommGroupCatLargeCategoryForAllαCommGroup","line":210,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instCoeFunHomCommGroupCatToQuiverToCategoryStructInstCommGroupCatLargeCategoryForAllαCommGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instCoeFunHomCommGroupCatToQuiverToCategoryStructInstCommGroupCatLargeCategoryForAllαCommGroup\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">instCoeFunHomCommGroupCatToQuiverToCategoryStructInstCommGroupCatLargeCategoryForAllαCommGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> → <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L209-L209","name":"AddCommGroupCat.instCoeFunHomAddCommGroupCatToQuiverToCategoryStructInstAddCommGroupCatLargeCategoryForAllαAddCommGroup","line":209,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instCoeFunHomAddCommGroupCatToQuiverToCategoryStructInstAddCommGroupCatLargeCategoryForAllαAddCommGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instCoeFunHomAddCommGroupCatToQuiverToCategoryStructInstAddCommGroupCatLargeCategoryForAllαAddCommGroup\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">instCoeFunHomAddCommGroupCatToQuiverToCategoryStructInstAddCommGroupCatLargeCategoryForAllαAddCommGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> → <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L202-L202","name":"CommGroupCat.commGroupInstance","line":202,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.commGroupInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.commGroupInstance\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">commGroupInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L201-L201","name":"AddCommGroupCat.addCommGroupInstance","line":201,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.addCommGroupInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.addCommGroupInstance\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">addCommGroupInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L198-L199","name":"CommGroupCat.instCoeSortCommGroupCatType","line":198,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instCoeSortCommGroupCatType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instCoeSortCommGroupCatType\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">instCoeSortCommGroupCatType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u_1)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L197-L197","name":"AddCommGroupCat.instCoeSortAddCommGroupCatType","line":197,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instCoeSortAddCommGroupCatType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instCoeSortAddCommGroupCatType\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">instCoeSortAddCommGroupCatType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u_1)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L193-L195","name":"CommGroupCat.concreteCategory","line":193,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.concreteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.concreteCategory\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">concreteCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L192-L192","name":"AddCommGroupCat.concreteCategory","line":192,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.concreteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.concreteCategory\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">concreteCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L190-L190","name":"instAddCommGroupCatLargeCategory","line":190,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#instAddCommGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#instAddCommGroupCatLargeCategory\"><span class=\"name\">instAddCommGroupCatLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.LargeCategory\">CategoryTheory.LargeCategory</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L187-L187","name":"CommGroupCat.instParentProjectionTypeGroupCommGroupToGroup","line":187,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instParentProjectionTypeGroupCommGroupToGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.instParentProjectionTypeGroupCommGroupToGroup\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">instParentProjectionTypeGroupCommGroupToGroup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/BundledHom.html#CategoryTheory.BundledHom.ParentProjection\">CategoryTheory.BundledHom.ParentProjection</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup.toGroup\">@<a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup.toGroup\">CommGroup.toGroup</a></a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L186-L186","name":"AddCommGroupCat.instParentProjectionTypeAddGroupAddCommGroupToAddGroup","line":186,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instParentProjectionTypeAddGroupAddCommGroupToAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.instParentProjectionTypeAddGroupAddCommGroupToAddGroup\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">instParentProjectionTypeAddGroupAddCommGroupToAddGroup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/BundledHom.html#CategoryTheory.BundledHom.ParentProjection\">CategoryTheory.BundledHom.ParentProjection</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup.toAddGroup\">@<a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup.toAddGroup\">AddCommGroup.toAddGroup</a></a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L180-L180","name":"Ab","line":180,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#Ab","doc":"`Ab` is an abbreviation for `AddCommGroup`, for the sake of mathematicians' sanity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#Ab\"><span class=\"name\">Ab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L169-L170","name":"CommGroupCat","line":169,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat","doc":"The category of commutative groups and group morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\"><span class=\"name\">CommGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L168-L168","name":"AddCommGroupCat","line":168,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat","doc":"The category of additive commutative groups and group morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\"><span class=\"name\">AddCommGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L155-L155","name":"GroupCat.ofUnique","line":155,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.ofUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.ofUnique\"><span class=\"name\">GroupCat</span>.<span class=\"name\">ofUnique</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[i : <span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of\">GroupCat.of</a> <span class=\"fn\">G</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L154-L154","name":"AddGroupCat.ofUnique","line":154,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.ofUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.ofUnique\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">ofUnique</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[i : <span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.of\">AddGroupCat.of</a> <span class=\"fn\">G</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L146-L148","name":"GroupCat.ofHom_apply","line":146,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.ofHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.ofHom_apply\"><span class=\"name\">GroupCat</span>.<span class=\"name\">ofHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.ofHom\">GroupCat.ofHom</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L145-L145","name":"AddGroupCat.ofHom_apply","line":145,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.ofHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.ofHom_apply\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">ofHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.ofHom\">AddGroupCat.ofHom</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L135-L136","name":"GroupCat.ofHom","line":135,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.ofHom","doc":"Typecheck a `MonoidHom` as a morphism in `GroupCat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.ofHom\"><span class=\"name\">GroupCat</span>.<span class=\"name\">ofHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of\">GroupCat.of</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of\">GroupCat.of</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L134-L134","name":"AddGroupCat.ofHom","line":134,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.ofHom","doc":"Typecheck an `AddMonoidHom` as a morphism in `AddGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.ofHom\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">ofHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.of\">AddGroupCat.of</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.of\">AddGroupCat.of</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L126-L127","name":"GroupCat.one_apply","line":126,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.one_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.one_apply\"><span class=\"name\">GroupCat</span>.<span class=\"name\">one_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L125-L125","name":"AddGroupCat.zero_apply","line":125,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.zero_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.zero_apply\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">zero_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L123-L123","name":"GroupCat.instOneHomGroupCatToQuiverToCategoryStructInstGroupCatLargeCategory","line":123,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instOneHomGroupCatToQuiverToCategoryStructInstGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instOneHomGroupCatToQuiverToCategoryStructInstGroupCatLargeCategory\"><span class=\"name\">GroupCat</span>.<span class=\"name\">instOneHomGroupCatToQuiverToCategoryStructInstGroupCatLargeCategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">H</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L122-L122","name":"AddGroupCat.instZeroHomAddGroupCatToQuiverToCategoryStructInstAddGroupCatLargeCategory","line":122,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instZeroHomAddGroupCatToQuiverToCategoryStructInstAddGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instZeroHomAddGroupCatToQuiverToCategoryStructInstAddGroupCatLargeCategory\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">instZeroHomAddGroupCatToQuiverToCategoryStructInstAddGroupCatLargeCategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">H</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L119-L119","name":"GroupCat.instCoeGroupCatMonCat","line":119,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instCoeGroupCatMonCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instCoeGroupCatMonCat\"><span class=\"name\">GroupCat</span>.<span class=\"name\">instCoeGroupCatMonCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat\">MonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L118-L118","name":"AddGroupCat.instCoeAddGroupCatMonCat","line":118,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instCoeAddGroupCatMonCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instCoeAddGroupCatMonCat\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">instCoeAddGroupCatMonCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#AddMonCat\">AddMonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L111-L112","name":"GroupCat.hasForgetToMonCat","line":111,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.hasForgetToMonCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.hasForgetToMonCat\"><span class=\"name\">GroupCat</span>.<span class=\"name\">hasForgetToMonCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat\">MonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L110-L110","name":"AddGroupCat.hasForgetToAddMonCat","line":110,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.hasForgetToAddMonCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.hasForgetToAddMonCat\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">hasForgetToAddMonCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#AddMonCat\">AddMonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L107-L108","name":"GroupCat.instInhabitedGroupCat","line":107,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instInhabitedGroupCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instInhabitedGroupCat\"><span class=\"name\">GroupCat</span>.<span class=\"name\">instInhabitedGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L106-L106","name":"AddGroupCat.instInhabitedAddGroupCat","line":106,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instInhabitedAddGroupCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instInhabitedAddGroupCat\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">instInhabitedAddGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L99-L100","name":"GroupCat.coe_of","line":99,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.coe_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.coe_of\"><span class=\"name\">GroupCat</span>.<span class=\"name\">coe_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of\">GroupCat.of</a> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L98-L98","name":"AddGroupCat.coe_of","line":98,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.coe_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.coe_of\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">coe_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.of\">AddGroupCat.of</a> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L88-L89","name":"GroupCat.of","line":88,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of","doc":"Construct a bundled `Group` from the underlying type and typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of\"><span class=\"name\">GroupCat</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L87-L87","name":"AddGroupCat.of","line":87,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.of","doc":"Construct a bundled `AddGroup` from the underlying type and typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.of\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L83-L84","name":"GroupCat.ext","line":83,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.ext\"><span class=\"name\">GroupCat</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L82-L82","name":"AddGroupCat.ext","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.ext\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L80-L80","name":"GroupCat.forget_map","line":80,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.forget_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.forget_map\"><span class=\"name\">GroupCat</span>.<span class=\"name\">forget_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L77-L77","name":"GroupCat.comp_def","line":77,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.comp_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.comp_def\"><span class=\"name\">GroupCat</span>.<span class=\"name\">comp_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom.comp\">MonoidHom.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L76-L76","name":"AddGroupCat.comp_def","line":76,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.comp_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.comp_def\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">comp_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L74-L74","name":"GroupCat.coe_comp","line":74,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.coe_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.coe_comp\"><span class=\"name\">GroupCat</span>.<span class=\"name\">coe_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L73-L73","name":"AddGroupCat.coe_comp","line":73,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.coe_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.coe_comp\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">coe_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L70-L70","name":"GroupCat.coe_id","line":70,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.coe_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.coe_id\"><span class=\"name\">GroupCat</span>.<span class=\"name\">coe_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L69-L69","name":"AddGroupCat.coe_id","line":69,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.coe_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.coe_id\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">coe_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L65-L66","name":"GroupCat.instFunLike","line":65,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instFunLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instFunLike\"><span class=\"name\">GroupCat</span>.<span class=\"name\">instFunLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">X</span></span> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L64-L64","name":"AddGroupCat.instFunLike","line":64,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instFunLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instFunLike\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">instFunLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">X</span></span> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L61-L62","name":"GroupCat.instCoeFunHomGroupCatToQuiverToCategoryStructInstGroupCatLargeCategoryForAllαGroup","line":61,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instCoeFunHomGroupCatToQuiverToCategoryStructInstGroupCatLargeCategoryForAllαGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instCoeFunHomGroupCatToQuiverToCategoryStructInstGroupCatLargeCategoryForAllαGroup\"><span class=\"name\">GroupCat</span>.<span class=\"name\">instCoeFunHomGroupCatToQuiverToCategoryStructInstGroupCatLargeCategoryForAllαGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> → <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L60-L60","name":"AddGroupCat.instCoeFunHomAddGroupCatToQuiverToCategoryStructInstAddGroupCatLargeCategoryForAllαAddGroup","line":60,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instCoeFunHomAddGroupCatToQuiverToCategoryStructInstAddGroupCatLargeCategoryForAllαAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instCoeFunHomAddGroupCatToQuiverToCategoryStructInstAddGroupCatLargeCategoryForAllαAddGroup\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">instCoeFunHomAddGroupCatToQuiverToCategoryStructInstAddGroupCatLargeCategoryForAllαAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> → <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L57-L57","name":"GroupCat.instGroupα","line":57,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instGroupα","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instGroupα\"><span class=\"name\">GroupCat</span>.<span class=\"name\">instGroupα</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L56-L56","name":"AddGroupCat.instGroupα","line":56,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instGroupα","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instGroupα\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">instGroupα</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L53-L54","name":"GroupCat.instCoeSortGroupCatType","line":53,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instCoeSortGroupCatType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instCoeSortGroupCatType\"><span class=\"name\">GroupCat</span>.<span class=\"name\">instCoeSortGroupCatType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u_1)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L52-L52","name":"AddGroupCat.instCoeSortAddGroupCatType","line":52,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instCoeSortAddGroupCatType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instCoeSortAddGroupCatType\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">instCoeSortAddGroupCatType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u_1)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L48-L50","name":"GroupCat.concreteCategory","line":48,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.concreteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.concreteCategory\"><span class=\"name\">GroupCat</span>.<span class=\"name\">concreteCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L47-L47","name":"AddGroupCat.concreteCategory","line":47,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.concreteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.concreteCategory\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">concreteCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L45-L45","name":"instAddGroupCatLargeCategory","line":45,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#instAddGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#instAddGroupCatLargeCategory\"><span class=\"name\">instAddGroupCatLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.LargeCategory\">CategoryTheory.LargeCategory</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L41-L42","name":"GroupCat.instParentProjectionTypeMonoidGroupToMonoidToDivInvMonoid","line":41,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instParentProjectionTypeMonoidGroupToMonoidToDivInvMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.instParentProjectionTypeMonoidGroupToMonoidToDivInvMonoid\"><span class=\"name\">GroupCat</span>.<span class=\"name\">instParentProjectionTypeMonoidGroupToMonoidToDivInvMonoid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/BundledHom.html#CategoryTheory.BundledHom.ParentProjection\">CategoryTheory.BundledHom.ParentProjection</a> <span class=\"fn\">fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} (<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">DivInvMonoid.toMonoid</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L40-L40","name":"AddGroupCat.instParentProjectionTypeAddMonoidAddGroupToAddMonoidToSubNegAddMonoid","line":40,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instParentProjectionTypeAddMonoidAddGroupToAddMonoidToSubNegAddMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.instParentProjectionTypeAddMonoidAddGroupToAddMonoidToSubNegAddMonoid\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">instParentProjectionTypeAddMonoidAddGroupToAddMonoidToSubNegAddMonoid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/BundledHom.html#CategoryTheory.BundledHom.ParentProjection\">CategoryTheory.BundledHom.ParentProjection</a> <span class=\"fn\">fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} (<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">SubNegMonoid.toAddMonoid</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L28-L29","name":"GroupCat","line":28,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat","doc":"The category of groups and group morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\"><span class=\"name\">GroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Category/GroupCat/Basic.lean#L27-L27","name":"AddGroupCat","line":27,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat","doc":"The category of additive groups and group morphisms "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\"><span class=\"name\">AddGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}