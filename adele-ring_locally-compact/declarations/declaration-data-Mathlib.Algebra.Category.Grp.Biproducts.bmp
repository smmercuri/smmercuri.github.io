{"name":"Mathlib.Algebra.Category.Grp.Biproducts","instances":[{"typeNames":["AddCommGrp"],"name":"AddCommGrp.instHasBinaryBiproducts","className":"CategoryTheory.Limits.HasBinaryBiproducts"},{"typeNames":["AddCommGrp"],"name":"AddCommGrp.instHasFiniteBiproducts","className":"CategoryTheory.Limits.HasFiniteBiproducts"}],"imports":["Init","Mathlib.Algebra.Group.Pi.Lemmas","Mathlib.Algebra.Category.Grp.Preadditive","Mathlib.CategoryTheory.Preadditive.Biproducts","Mathlib.Algebra.Category.Grp.Limits","Mathlib.Tactic.CategoryTheory.Elementwise"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L139-L141","name":"AddCommGrp.biproductIsoPi_inv_comp_π","line":139,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi_inv_comp_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi_inv_comp_π\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">biproductIsoPi_inv_comp_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi\">AddCommGrp.biproductIsoPi</a> <span class=\"fn\">f</span></span>)</span>.inv</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct.π\">CategoryTheory.Limits.biproduct.π</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Pi/Lemmas.html#Pi.evalAddMonoidHom\">Pi.evalAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L138-L138","name":"AddCommGrp.biproductIsoPi_inv_comp_π_apply","line":138,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi_inv_comp_π_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi_inv_comp_π_apply\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">biproductIsoPi_inv_comp_π_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp.of\">AddCommGrp.of</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct.π\">CategoryTheory.Limits.biproduct.π</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi\">AddCommGrp.biproductIsoPi</a> <span class=\"fn\">f</span></span>)</span>.inv</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Pi/Lemmas.html#Pi.evalAddMonoidHom\">Pi.evalAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L131-L133","name":"AddCommGrp.biproductIsoPi","line":131,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi","doc":"We verify that the biproduct we've just defined is isomorphic to the `AddCommGrp` structure\non the dependent function type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">biproductIsoPi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct\">⨁</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp.of\">AddCommGrp.of</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L130-L130","name":"AddCommGrp.biproductIsoPi_hom_apply","line":130,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi_hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi_hom_apply\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">biproductIsoPi_hom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct.bicone\">CategoryTheory.Limits.biproduct.bicone</a> <span class=\"fn\">f</span></span>)</span>.toCone</span>.pt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biproductIsoPi\">AddCommGrp.biproductIsoPi</a> <span class=\"fn\">f</span></span>)</span>.hom</span> <span class=\"fn\">x</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct.π\">CategoryTheory.Limits.biproduct.π</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L109-L119","name":"AddCommGrp.HasLimit.productLimitCone","line":109,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone","doc":"Construct limit data for a product in `AddCommGrp`, using\n`AddCommGrp.of (∀ j, F.obj j)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">productLimitCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.LimitCone\">CategoryTheory.Limits.LimitCone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.functor\">CategoryTheory.Discrete.functor</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L108-L108","name":"AddCommGrp.HasLimit.productLimitCone_cone_pt","line":108,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone_cone_pt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone_cone_pt\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">productLimitCone_cone_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone\">AddCommGrp.HasLimit.productLimitCone</a> <span class=\"fn\">f</span></span>)</span>.cone</span>.pt</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp.of\">AddCommGrp.of</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L108-L108","name":"AddCommGrp.HasLimit.productLimitCone_cone_π","line":108,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone_cone_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone_cone_π\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">productLimitCone_cone_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone\">AddCommGrp.HasLimit.productLimitCone</a> <span class=\"fn\">f</span></span>)</span>.cone</span>.π</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.natTrans\">CategoryTheory.Discrete.natTrans</a> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">J</span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Pi/Lemmas.html#Pi.evalAddMonoidHom\">Pi.evalAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">j</span>.as</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L108-L108","name":"AddCommGrp.HasLimit.productLimitCone_isLimit_lift","line":108,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone_isLimit_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone_isLimit_lift\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">productLimitCone_isLimit_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Fan\">CategoryTheory.Limits.Fan</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.productLimitCone\">AddCommGrp.HasLimit.productLimitCone</a> <span class=\"fn\">f</span></span>)</span>.isLimit</span>.lift</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.lift\">AddCommGrp.HasLimit.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L96-L103","name":"AddCommGrp.HasLimit.lift","line":96,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.lift","doc":"The map from an arbitrary cone over an indexed family of abelian groups\nto the cartesian product of those groups.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.HasLimit.lift\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Fan\">CategoryTheory.Limits.Fan</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.pt</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp.of\">AddCommGrp.of</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L80-L82","name":"AddCommGrp.biprodIsoProd_inv_comp_snd","line":80,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd_inv_comp_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd_inv_comp_snd\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">biprodIsoProd_inv_comp_snd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.biprodIsoProd</span> <span class=\"fn\">H</span></span>)</span>.inv</span> <span class=\"fn\">CategoryTheory.Limits.biprod.snd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Prod.html#AddMonoidHom.snd\">AddMonoidHom.snd</a> <span class=\"fn\">↑<span class=\"fn\">G</span></span> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L79-L79","name":"AddCommGrp.biprodIsoProd_inv_comp_snd_apply","line":79,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd_inv_comp_snd_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd_inv_comp_snd_apply\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">biprodIsoProd_inv_comp_snd_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp.of\">AddCommGrp.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.Limits.biprod.snd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.biprodIsoProd</span> <span class=\"fn\">H</span></span>)</span>.inv</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Prod.html#AddMonoidHom.snd\">AddMonoidHom.snd</a> <span class=\"fn\">↑<span class=\"fn\">G</span></span> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L75-L77","name":"AddCommGrp.biprodIsoProd_inv_comp_fst","line":75,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd_inv_comp_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd_inv_comp_fst\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">biprodIsoProd_inv_comp_fst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.biprodIsoProd</span> <span class=\"fn\">H</span></span>)</span>.inv</span> <span class=\"fn\">CategoryTheory.Limits.biprod.fst</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Prod.html#AddMonoidHom.fst\">AddMonoidHom.fst</a> <span class=\"fn\">↑<span class=\"fn\">G</span></span> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L74-L74","name":"AddCommGrp.biprodIsoProd_inv_comp_fst_apply","line":74,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd_inv_comp_fst_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd_inv_comp_fst_apply\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">biprodIsoProd_inv_comp_fst_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span>)</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp.of\">AddCommGrp.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.Limits.biprod.fst</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.biprodIsoProd</span> <span class=\"fn\">H</span></span>)</span>.inv</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Prod.html#AddMonoidHom.fst\">AddMonoidHom.fst</a> <span class=\"fn\">↑<span class=\"fn\">G</span></span> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L67-L69","name":"AddCommGrp.biprodIsoProd","line":67,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd","doc":"We verify that the biproduct in `AddCommGrp` is isomorphic to\nthe cartesian product of the underlying types:\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">biprodIsoProd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biprod\">⊞</a> <span class=\"fn\">H</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp.of\">AddCommGrp.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L66-L66","name":"AddCommGrp.biprodIsoProd_hom_apply","line":66,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd_hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.biprodIsoProd_hom_apply\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">biprodIsoProd_hom_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.BinaryBiproduct.bicone\">CategoryTheory.Limits.BinaryBiproduct.bicone</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>)</span>.toCone</span>.pt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.biprodIsoProd</span> <span class=\"fn\">H</span></span>)</span>.hom</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.Limits.biprod.fst</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">CategoryTheory.Limits.biprod.snd</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L59-L61","name":"AddCommGrp.binaryProductLimitCone_cone_π_app_right","line":59,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.binaryProductLimitCone_cone_π_app_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.binaryProductLimitCone_cone_π_app_right\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">binaryProductLimitCone_cone_π_app_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.binaryProductLimitCone</span> <span class=\"fn\">H</span></span>)</span>.cone</span>.π</span>.app</span> <span class=\"fn\">{ <span class=\"fn\">as</span> := <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.WalkingPair.right\">CategoryTheory.Limits.WalkingPair.right</a> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Prod.html#AddMonoidHom.snd\">AddMonoidHom.snd</a> <span class=\"fn\">↑<span class=\"fn\">G</span></span> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L54-L56","name":"AddCommGrp.binaryProductLimitCone_cone_π_app_left","line":54,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.binaryProductLimitCone_cone_π_app_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.binaryProductLimitCone_cone_π_app_left\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">binaryProductLimitCone_cone_π_app_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.binaryProductLimitCone</span> <span class=\"fn\">H</span></span>)</span>.cone</span>.π</span>.app</span> <span class=\"fn\">{ <span class=\"fn\">as</span> := <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.WalkingPair.left\">CategoryTheory.Limits.WalkingPair.left</a> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Prod.html#AddMonoidHom.fst\">AddMonoidHom.fst</a> <span class=\"fn\">↑<span class=\"fn\">G</span></span> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L38-L51","name":"AddCommGrp.binaryProductLimitCone","line":38,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.binaryProductLimitCone","doc":"Construct limit data for a binary product in `AddCommGrp`, using\n`AddCommGrp.of (G × H)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.binaryProductLimitCone\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">binaryProductLimitCone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.LimitCone\">CategoryTheory.Limits.LimitCone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.pair\">CategoryTheory.Limits.pair</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L37-L37","name":"AddCommGrp.binaryProductLimitCone_cone_pt","line":37,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.binaryProductLimitCone_cone_pt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.binaryProductLimitCone_cone_pt\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">binaryProductLimitCone_cone_pt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.binaryProductLimitCone</span> <span class=\"fn\">H</span></span>)</span>.cone</span>.pt</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp.of\">AddCommGrp.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L37-L37","name":"AddCommGrp.binaryProductLimitCone_isLimit_lift","line":37,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.binaryProductLimitCone_isLimit_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.binaryProductLimitCone_isLimit_lift\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">binaryProductLimitCone_isLimit_lift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.pair\">CategoryTheory.Limits.pair</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.binaryProductLimitCone</span> <span class=\"fn\">H</span></span>)</span>.isLimit</span>.lift</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Prod.html#AddMonoidHom.prod\">AddMonoidHom.prod</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.π</span>.app</span> <span class=\"fn\">{ <span class=\"fn\">as</span> := <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.WalkingPair.left\">CategoryTheory.Limits.WalkingPair.left</a> }</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.π</span>.app</span> <span class=\"fn\">{ <span class=\"fn\">as</span> := <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.WalkingPair.right\">CategoryTheory.Limits.WalkingPair.right</a> }</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L29-L30","name":"AddCommGrp.instHasFiniteBiproducts","line":29,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.instHasFiniteBiproducts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.instHasFiniteBiproducts\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">instHasFiniteBiproducts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.HasFiniteBiproducts\">CategoryTheory.Limits.HasFiniteBiproducts</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Category/Grp/Biproducts.lean#L26-L27","name":"AddCommGrp.instHasBinaryBiproducts","line":26,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.instHasBinaryBiproducts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/Biproducts.html#AddCommGrp.instHasBinaryBiproducts\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">instHasBinaryBiproducts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.HasBinaryBiproducts\">CategoryTheory.Limits.HasBinaryBiproducts</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span></div></div>"}]}