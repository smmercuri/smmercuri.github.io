{"name":"Mathlib.Algebra.ContinuedFractions.Basic","instances":[{"typeNames":["GenContFract.Pair"],"name":"GenContFract.instInhabitedPair","className":"Inhabited"},{"typeNames":["GenContFract.Pair"],"name":"GenContFract.Pair.instRepr","className":"Repr"},{"typeNames":["GenContFract.Pair","GenContFract.Pair"],"name":"GenContFract.Pair.instCoe","className":"Coe"},{"typeNames":["GenContFract"],"name":"GenContFract.instInhabited","className":"Inhabited"},{"typeNames":["GenContFract.TerminatedAt"],"name":"GenContFract.terminatedAtDecidable","className":"Decidable"},{"typeNames":["GenContFract","GenContFract"],"name":"GenContFract.instCoe","className":"Coe"},{"typeNames":["SimpContFract"],"name":"SimpContFract.instInhabited","className":"Inhabited"},{"typeNames":["SimpContFract","GenContFract"],"name":"SimpContFract.instCoeGenContFract","className":"Coe"},{"typeNames":["ContFract"],"name":"ContFract.instInhabited","className":"Inhabited"},{"typeNames":["ContFract","SimpContFract"],"name":"ContFract.instCoeSimpContFract","className":"Coe"},{"typeNames":["ContFract","GenContFract"],"name":"ContFract.instCoeGenContFract","className":"Coe"}],"imports":["Init","Mathlib.Data.Seq.Seq","Mathlib.Algebra.Field.Defs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L364-L365","name":"GenContFract.convs'","line":364,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs'","doc":"Returns the convergents of `g` by evaluating the fraction described by `g` up to a given\nposition `n`. For example, `convs' [9; (1, 2), (3, 4), (5, 6)] 2 = 9 + 1 / (2 + 3 / 4)` and\n`convs' [9; (1, 2), (3, 4), (5, 6)] 0 = 9`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs'\"><span class=\"name\">GenContFract</span>.<span class=\"name\">convs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">K</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L353-L358","name":"GenContFract.convs'Aux","line":353,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs'Aux","doc":"Returns the approximation of the fraction described by the given sequence up to a given position n.\nFor example, `convs'Aux [(1, 2), (3, 4), (5, 6)] 2 = 1 / (2 + 3 / 4)` and\n`convs'Aux [(1, 2), (3, 4), (5, 6)] 0 = 0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs'Aux\"><span class=\"name\">GenContFract</span>.<span class=\"name\">convs'Aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">K</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">K</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L345-L346","name":"GenContFract.convs","line":345,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs","doc":"Returns the convergents `Aₙ / Bₙ` of `g`, where `Aₙ, Bₙ` are the nth continuants of `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs\"><span class=\"name\">GenContFract</span>.<span class=\"name\">convs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L341-L342","name":"GenContFract.dens","line":341,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.dens","doc":"Returns the denominators `Bₙ` of `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.dens\"><span class=\"name\">GenContFract</span>.<span class=\"name\">dens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L337-L338","name":"GenContFract.nums","line":337,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.nums","doc":"Returns the numerators `Aₙ` of `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.nums\"><span class=\"name\">GenContFract</span>.<span class=\"name\">nums</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L333-L334","name":"GenContFract.conts","line":333,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.conts","doc":"Returns the continuants `⟨Aₙ, Bₙ⟩` of `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.conts\"><span class=\"name\">GenContFract</span>.<span class=\"name\">conts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">K</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L324-L330","name":"GenContFract.contsAux","line":324,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.contsAux","doc":"Returns the continuants `⟨Aₙ₋₁, Bₙ₋₁⟩` of `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.contsAux\"><span class=\"name\">GenContFract</span>.<span class=\"name\">contsAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">K</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L320-L321","name":"GenContFract.nextConts","line":320,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.nextConts","doc":"Returns the next continuants `⟨Aₙ, Bₙ⟩` using `nextNum` and `nextDen`, where `pred`\nis `⟨Aₙ₋₁, Bₙ₋₁⟩`, `ppred` is `⟨Aₙ₋₂, Bₙ₋₂⟩`, `a` is `aₙ₋₁`, and `b` is `bₙ₋₁`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.nextConts\"><span class=\"name\">GenContFract</span>.<span class=\"name\">nextConts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ppred : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pred : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L313-L314","name":"GenContFract.nextDen","line":313,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.nextDen","doc":"Returns the next denominator `Bₙ = bₙ₋₁ * Bₙ₋₁ + aₙ₋₁ * Bₙ₋₂`, where `predB` is `Bₙ₋₁` and\n`ppredB` is `Bₙ₋₂`, `a` is `aₙ₋₁`, and `b` is `bₙ₋₁`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.nextDen\"><span class=\"name\">GenContFract</span>.<span class=\"name\">nextDen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aₙ : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bₙ : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ppredB : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(predB : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">K</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L307-L308","name":"GenContFract.nextNum","line":307,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.nextNum","doc":"Returns the next numerator `Aₙ = bₙ₋₁ * Aₙ₋₁ + aₙ₋₁ * Aₙ₋₂`, where `predA` is `Aₙ₋₁`,\n`ppredA` is `Aₙ₋₂`, `a` is `aₙ₋₁`, and `b` is `bₙ₋₁`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.nextNum\"><span class=\"name\">GenContFract</span>.<span class=\"name\">nextNum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ppredA : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(predA : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">K</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L271-L272","name":"ContFract.instCoeGenContFract","line":271,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract.instCoeGenContFract","doc":"Lift a cf to a scf using the inclusion map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract.instCoeGenContFract\"><span class=\"name\">ContFract</span>.<span class=\"name\">instCoeGenContFract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract\">ContFract</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L262-L264","name":"ContFract.instCoeSimpContFract","line":262,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract.instCoeSimpContFract","doc":"Lift a cf to a scf using the inclusion map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract.instCoeSimpContFract\"><span class=\"name\">ContFract</span>.<span class=\"name\">instCoeSimpContFract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract\">ContFract</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract\">SimpContFract</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L258-L259","name":"ContFract.instInhabited","line":258,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract.instInhabited\"><span class=\"name\">ContFract</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract\">ContFract</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L255-L256","name":"ContFract.ofInteger","line":255,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract.ofInteger","doc":"Constructs a continued fraction without fractional part. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract.ofInteger\"><span class=\"name\">ContFract</span>.<span class=\"name\">ofInteger</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract\">ContFract</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L243-L244","name":"ContFract","line":243,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract","doc":"A *(regular) continued fraction* ((r)cf) is a simple continued fraction (scf) whose partial\ndenominators are all positive. It is the subtype of scfs that satisfy `SimpContFract.IsContFract`.\n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract\"><span class=\"name\">ContFract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L233-L236","name":"SimpContFract.IsContFract","line":233,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract.IsContFract","doc":"A simple continued fraction is a *(regular) continued fraction* ((r)cf) if all partial denominators\n`bᵢ` are positive, i.e. `0 < bᵢ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract.IsContFract\"><span class=\"name\">SimpContFract</span>.<span class=\"name\">IsContFract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract\">SimpContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L219-L221","name":"SimpContFract.instCoeGenContFract","line":219,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract.instCoeGenContFract","doc":"Lift a scf to a gcf using the inclusion map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract.instCoeGenContFract\"><span class=\"name\">SimpContFract</span>.<span class=\"name\">instCoeGenContFract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract\">SimpContFract</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L215-L216","name":"SimpContFract.instInhabited","line":215,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract.instInhabited\"><span class=\"name\">SimpContFract</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract\">SimpContFract</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L212-L213","name":"SimpContFract.ofInteger","line":212,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract.ofInteger","doc":"Constructs a simple continued fraction without fractional part. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract.ofInteger\"><span class=\"name\">SimpContFract</span>.<span class=\"name\">ofInteger</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract\">SimpContFract</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L201-L202","name":"SimpContFract","line":201,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract","doc":"A *simple continued fraction* (scf) is a generalized continued fraction (gcf) whose partial\nnumerators are equal to one.\n$$\n  h + \\dfrac{1}\n            {b_0 + \\dfrac{1}\n                         {b_1 + \\dfrac{1}\n                                      {b_2 + \\dfrac{1}\n                                                   {b_3 + \\dots}}}}\n$$\nFor convenience, one often writes `[h; b₀, b₁, b₂,...]`.\nIt is encoded as the subtype of gcfs that satisfy `GenContFract.IsSimpContFract`.\n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#SimpContFract\"><span class=\"name\">SimpContFract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L183-L185","name":"GenContFract.IsSimpContFract","line":183,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.IsSimpContFract","doc":"A generalized continued fraction is a *simple continued fraction* if all partial numerators are\nequal to one.\n$$\n  h + \\dfrac{1}\n            {b_0 + \\dfrac{1}\n                         {b_1 + \\dfrac{1}\n                                      {b_2 + \\dfrac{1}\n                                                   {b_3 + \\dots}}}}\n$$\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.IsSimpContFract\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IsSimpContFract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L165-L167","name":"GenContFract.coe_toGenContFract","line":165,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.coe_toGenContFract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.coe_toGenContFract\"><span class=\"name\">GenContFract</span>.<span class=\"name\">coe_toGenContFract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">h</span> := <span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\"><span class=\"fn\">g</span>.h</span></span>, <span class=\"fn\">s</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">GenContFract.Pair.coeFn</span> <span class=\"fn\"><span class=\"fn\">g</span>.s</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L161-L162","name":"GenContFract.instCoe","line":161,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.instCoe","doc":"Coerce a gcf by elementwise coercion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.instCoe\"><span class=\"name\">GenContFract</span>.<span class=\"name\">instCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L157-L158","name":"GenContFract.coeFn","line":157,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.coeFn","doc":"The coercion between `GenContFract` happens on the head term\nand all numerator-denominator pairs componentwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.coeFn\"><span class=\"name\">GenContFract</span>.<span class=\"name\">coeFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L143-L144","name":"GenContFract.Terminates","line":143,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Terminates","doc":"A gcf terminates if its sequence terminates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Terminates\"><span class=\"name\">GenContFract</span>.<span class=\"name\">Terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L137-L140","name":"GenContFract.terminatedAtDecidable","line":137,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.terminatedAtDecidable","doc":"It is decidable whether a gcf terminated at a given position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.terminatedAtDecidable\"><span class=\"name\">GenContFract</span>.<span class=\"name\">terminatedAtDecidable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.TerminatedAt</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L133-L134","name":"GenContFract.TerminatedAt","line":133,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.TerminatedAt","doc":"A gcf terminated at position `n` if its sequence terminates at position `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.TerminatedAt\"><span class=\"name\">GenContFract</span>.<span class=\"name\">TerminatedAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L129-L130","name":"GenContFract.partDens","line":129,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.partDens","doc":"Returns the sequence of partial denominators `bᵢ` of `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.partDens\"><span class=\"name\">GenContFract</span>.<span class=\"name\">partDens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L125-L126","name":"GenContFract.partNums","line":125,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.partNums","doc":"Returns the sequence of partial numerators `aᵢ` of `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.partNums\"><span class=\"name\">GenContFract</span>.<span class=\"name\">partNums</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L121-L122","name":"GenContFract.instInhabited","line":121,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.instInhabited\"><span class=\"name\">GenContFract</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L118-L119","name":"GenContFract.ofInteger","line":118,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.ofInteger","doc":"Constructs a generalized continued fraction without fractional part. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.ofInteger\"><span class=\"name\">GenContFract</span>.<span class=\"name\">ofInteger</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L111-L111","name":"GenContFract.s","line":111,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.s","doc":"Sequence of partial numerator and denominator pairs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.s\"><span class=\"name\">GenContFract</span>.<span class=\"name\">s</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L109-L109","name":"GenContFract.h","line":109,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.h","doc":"Head term "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.h\"><span class=\"name\">GenContFract</span>.<span class=\"name\">h</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L107-L107","name":"GenContFract.mk","line":107,"kind":"ctor","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.mk\"><span class=\"name\">GenContFract</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L107-L111","name":"GenContFract","line":107,"kind":"structure","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract","doc":"A *generalised continued fraction* (gcf) is a potentially infinite expression of the form\n$$\n  h + \\dfrac{a_0}\n            {b_0 + \\dfrac{a_1}\n                         {b_1 + \\dfrac{a_2}\n                                      {b_2 + \\dfrac{a_3}\n                                                   {b_3 + \\dots}}}}\n$$\nwhere `h` is called the *head term* or *integer part*, the `aᵢ` are called the\n*partial numerators* and the `bᵢ` the *partial denominators* of the gcf.\nWe store the sequence of partial numerators and denominators in a sequence of `GenContFract.Pair`s\n`s`.\nFor convenience, one often writes `[h; (a₀, b₀), (a₁, b₁), (a₂, b₂),...]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\"><span class=\"name\">GenContFract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L106-L106","name":"GenContFract.ext","line":106,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.ext\"><span class=\"name\">GenContFract</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.h</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.h</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L106-L106","name":"GenContFract.ext_iff","line":106,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.ext_iff\"><span class=\"name\">GenContFract</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.h</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.h</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L86-L86","name":"GenContFract.Pair.coe_toPair","line":86,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.coe_toPair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.coe_toPair\"><span class=\"name\">GenContFract</span>.<span class=\"name\">Pair</span>.<span class=\"name\">coe_toPair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">{ <span class=\"fn\">a</span> := <span class=\"fn\">a</span>, <span class=\"fn\">b</span> := <span class=\"fn\">b</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">a</span> := <span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">b</span> := <span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">b</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L82-L83","name":"GenContFract.Pair.instCoe","line":82,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.instCoe","doc":"Coerce a pair by elementwise coercion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.instCoe\"><span class=\"name\">GenContFract</span>.<span class=\"name\">Pair</span>.<span class=\"name\">instCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L79-L79","name":"GenContFract.Pair.coeFn","line":79,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.coeFn","doc":"The coercion between numerator-denominator pairs happens componentwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.coeFn\"><span class=\"name\">GenContFract</span>.<span class=\"name\">Pair</span>.<span class=\"name\">coeFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L68-L69","name":"GenContFract.Pair.map","line":68,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.map","doc":"Maps a function `f` on both components of a given pair. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.map\"><span class=\"name\">GenContFract</span>.<span class=\"name\">Pair</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(gp : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L64-L65","name":"GenContFract.Pair.instRepr","line":64,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.instRepr","doc":"Make a `GenContFract.Pair` printable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.instRepr\"><span class=\"name\">GenContFract</span>.<span class=\"name\">Pair</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L53-L53","name":"GenContFract.instInhabitedPair","line":53,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.instInhabitedPair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.instInhabitedPair\"><span class=\"name\">GenContFract</span>.<span class=\"name\">instInhabitedPair</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a> u_2} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L52-L52","name":"GenContFract.Pair.b","line":52,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.b","doc":"Partial denominator "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.b\"><span class=\"name\">GenContFract</span>.<span class=\"name\">Pair</span>.<span class=\"name\">b</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L50-L50","name":"GenContFract.Pair.a","line":50,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.a","doc":"Partial numerator "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.a\"><span class=\"name\">GenContFract</span>.<span class=\"name\">Pair</span>.<span class=\"name\">a</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L48-L48","name":"GenContFract.Pair.mk","line":48,"kind":"ctor","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.mk\"><span class=\"name\">GenContFract</span>.<span class=\"name\">Pair</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">GenContFract.Pair</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ContinuedFractions/Basic.lean#L48-L53","name":"GenContFract.Pair","line":48,"kind":"structure","docLink":"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair","doc":"We collect a partial numerator `aᵢ` and partial denominator `bᵢ` in a pair `⟨aᵢ, bᵢ⟩`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\"><span class=\"name\">GenContFract</span>.<span class=\"name\">Pair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}