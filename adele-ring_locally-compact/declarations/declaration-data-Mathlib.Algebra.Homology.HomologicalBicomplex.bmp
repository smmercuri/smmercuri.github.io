{"name":"Mathlib.Algebra.Homology.HomologicalBicomplex","instances":[{"typeNames":["HomologicalComplex₂.toGradedObjectFunctor"],"name":"HomologicalComplex₂.instFaithfulGradedObjectProdToGradedObjectFunctor","className":"CategoryTheory.Functor.Faithful"}],"imports":["Init","Mathlib.Algebra.Homology.HomologicalComplex"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L207-L208","name":"HomologicalComplex₂.XXIsoOfEq_rfl","line":207,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.XXIsoOfEq_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.XXIsoOfEq_rfl\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">XXIsoOfEq_rfl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.XXIsoOfEq\">HomologicalComplex₂.XXIsoOfEq</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span> <span class=\"fn\">K</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">i₁</span></span>)</span>.X</span> <span class=\"fn\">i₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L202-L204","name":"HomologicalComplex₂.XXIsoOfEq","line":202,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.XXIsoOfEq","doc":"The obvious isomorphism `(K.X x₁).X x₂ ≅ (K.X y₁).X y₂` when `x₁ = y₁` and `x₂ = y₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.XXIsoOfEq\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">XXIsoOfEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <span class=\"fn\">I₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <span class=\"fn\">I₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y₁</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <span class=\"fn\">I₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <span class=\"fn\">I₂</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">x₁</span></span>)</span>.X</span> <span class=\"fn\">x₂</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">y₁</span></span>)</span>.X</span> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L192-L197","name":"HomologicalComplex₂.flipEquivalence","line":192,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence","doc":"Flipping a complex of complexes over the diagonal, as an equivalence of categories. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₂</span> <span class=\"fn\">c₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L191-L191","name":"HomologicalComplex₂.flipEquivalence_unitIso","line":191,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence_unitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence_unitIso\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalence_unitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence\">HomologicalComplex₂.flipEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.unitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceUnitIso\">HomologicalComplex₂.flipEquivalenceUnitIso</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L191-L191","name":"HomologicalComplex₂.flipEquivalence_functor","line":191,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence_functor\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalence_functor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence\">HomologicalComplex₂.flipEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.functor</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor\">HomologicalComplex₂.flipFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L191-L191","name":"HomologicalComplex₂.flipEquivalence_inverse","line":191,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence_inverse\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalence_inverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence\">HomologicalComplex₂.flipEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.inverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor\">HomologicalComplex₂.flipFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₂</span> <span class=\"fn\">c₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L191-L191","name":"HomologicalComplex₂.flipEquivalence_counitIso","line":191,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence_counitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence_counitIso\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalence_counitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalence\">HomologicalComplex₂.flipEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.counitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceCounitIso\">HomologicalComplex₂.flipEquivalenceCounitIso</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L184-L188","name":"HomologicalComplex₂.flipEquivalenceCounitIso","line":184,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceCounitIso","doc":"Auxiliary definition for `HomologicalComplex₂.flipEquivalence`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceCounitIso\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalenceCounitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor\">HomologicalComplex₂.flipFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₂</span> <span class=\"fn\">c₁</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor\">HomologicalComplex₂.flipFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₂</span> <span class=\"fn\">c₁</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L183-L183","name":"HomologicalComplex₂.flipEquivalenceCounitIso_inv_app_f_f","line":183,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceCounitIso_inv_app_f_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceCounitIso_inv_app_f_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalenceCounitIso_inv_app_f_f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₂</span> <span class=\"fn\">c₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceCounitIso\">HomologicalComplex₂.flipEquivalenceCounitIso</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span>)</span>.f</span> <span class=\"fn\">i✝</span></span>)</span>.f</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.X</span> <span class=\"fn\">i✝</span></span>)</span>.X</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L183-L183","name":"HomologicalComplex₂.flipEquivalenceCounitIso_hom_app_f_f","line":183,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceCounitIso_hom_app_f_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceCounitIso_hom_app_f_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalenceCounitIso_hom_app_f_f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₂</span> <span class=\"fn\">c₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceCounitIso\">HomologicalComplex₂.flipEquivalenceCounitIso</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span>)</span>.f</span> <span class=\"fn\">i✝</span></span>)</span>.f</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.X</span> <span class=\"fn\">i✝</span></span>)</span>.X</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L176-L180","name":"HomologicalComplex₂.flipEquivalenceUnitIso","line":176,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceUnitIso","doc":"Auxiliary definition for `HomologicalComplex₂.flipEquivalence`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceUnitIso\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalenceUnitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor\">HomologicalComplex₂.flipFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor\">HomologicalComplex₂.flipFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₂</span> <span class=\"fn\">c₁</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L175-L175","name":"HomologicalComplex₂.flipEquivalenceUnitIso_inv_app_f_f","line":175,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceUnitIso_inv_app_f_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceUnitIso_inv_app_f_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalenceUnitIso_inv_app_f_f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceUnitIso\">HomologicalComplex₂.flipEquivalenceUnitIso</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span>)</span>.f</span> <span class=\"fn\">i✝</span></span>)</span>.f</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.X</span> <span class=\"fn\">i✝</span></span>)</span>.X</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L175-L175","name":"HomologicalComplex₂.flipEquivalenceUnitIso_hom_app_f_f","line":175,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceUnitIso_hom_app_f_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceUnitIso_hom_app_f_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipEquivalenceUnitIso_hom_app_f_f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipEquivalenceUnitIso\">HomologicalComplex₂.flipEquivalenceUnitIso</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span>)</span>.f</span> <span class=\"fn\">i✝</span></span>)</span>.f</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.X</span> <span class=\"fn\">i✝</span></span>)</span>.X</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L165-L172","name":"HomologicalComplex₂.flipFunctor","line":165,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor","doc":"Flipping a complex of complexes over the diagonal, as a functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipFunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₂</span> <span class=\"fn\">c₁</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L164-L164","name":"HomologicalComplex₂.flipFunctor_obj","line":164,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor_obj\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipFunctor_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor\">HomologicalComplex₂.flipFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.obj</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">K</span>.flip</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L164-L164","name":"HomologicalComplex₂.flipFunctor_map_f_f","line":164,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor_map_f_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor_map_f_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flipFunctor_map_f_f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flipFunctor\">HomologicalComplex₂.flipFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.map</span> <span class=\"fn\">f</span></span>)</span>.f</span> <span class=\"fn\">i</span></span>)</span>.f</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.f</span> <span class=\"fn\">j</span></span>)</span>.f</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L159-L159","name":"HomologicalComplex₂.flip_flip","line":159,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flip_flip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flip_flip\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flip_flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.flip</span>.flip</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L148-L156","name":"HomologicalComplex₂.flip","line":148,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flip","doc":"Flip a complex of complexes over the diagonal,\nexchanging the horizontal and vertical directions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flip\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₂</span> <span class=\"fn\">c₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L147-L147","name":"HomologicalComplex₂.flip_d_f","line":147,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flip_d_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flip_d_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flip_d_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i' : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.flip</span>.d</span> <span class=\"fn\">i</span> <span class=\"fn\">i'</span></span>)</span>.f</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">j</span></span>)</span>.d</span> <span class=\"fn\">i</span> <span class=\"fn\">i'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L147-L147","name":"HomologicalComplex₂.flip_X_d","line":147,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flip_X_d","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flip_X_d\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flip_X_d</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.flip</span>.X</span> <span class=\"fn\">i</span></span>)</span>.d</span> <span class=\"fn\">j</span> <span class=\"fn\">j'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">j</span> <span class=\"fn\">j'</span></span>)</span>.f</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L147-L147","name":"HomologicalComplex₂.flip_X_X","line":147,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flip_X_X","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.flip_X_X\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">flip_X_X</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.flip</span>.X</span> <span class=\"fn\">i</span></span>)</span>.X</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">j</span></span>)</span>.X</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L140-L142","name":"HomologicalComplex₂.comm_f","line":140,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.comm_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.comm_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">comm_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.f</span> <span class=\"fn\">i₁</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.f</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L139-L139","name":"HomologicalComplex₂.comm_f_assoc","line":139,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.comm_f_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.comm_f_assoc\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">comm_f_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.X</span> <span class=\"fn\">i₁'</span></span>)</span>.X</span> <span class=\"fn\">i₂</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.f</span> <span class=\"fn\">i₁</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.f</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L135-L137","name":"HomologicalComplex₂.d_comm","line":135,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.d_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.d_comm\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">d_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂' : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">i₁'</span></span>)</span>.d</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">i₁</span></span>)</span>.d</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L134-L134","name":"HomologicalComplex₂.d_comm_assoc","line":134,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.d_comm_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.d_comm_assoc\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">d_comm_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂' : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">i₁'</span></span>)</span>.X</span> <span class=\"fn\">i₂'</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">i₁'</span></span>)</span>.d</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">i₁</span></span>)</span>.d</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L129-L132","name":"HomologicalComplex₂.d_f_comp_d_f","line":129,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.d_f_comp_d_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.d_f_comp_d_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">d_f_comp_d_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁'' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₁''</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L128-L128","name":"HomologicalComplex₂.d_f_comp_d_f_assoc","line":128,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.d_f_comp_d_f_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.d_f_comp_d_f_assoc\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">d_f_comp_d_f_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁'' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">i₁''</span></span>)</span>.X</span> <span class=\"fn\">i₂</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₁''</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L124-L126","name":"HomologicalComplex₂.shape_f","line":124,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.shape_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.shape_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">shape_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Rel</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L111-L122","name":"HomologicalComplex₂.homMk","line":111,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.homMk","doc":"Constructor for a morphism `K ⟶ L` in the category `HomologicalComplex₂ C c₁ c₂` which\ntakes as inputs a morphism `f : K.toGradedObject ⟶ L.toGradedObject` and\nthe compatibilites with both horizontal and vertical differentials. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.homMk\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">homMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.toGradedObject</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">L</span>.toGradedObject</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Rel</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">i₁'</span>, <span class=\"fn\">i₂</span>)</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.Rel</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.X</span> <span class=\"fn\">i₁</span></span>)</span>.d</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">i₁</span></span>)</span>.d</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂'</span>)</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L110-L110","name":"HomologicalComplex₂.homMk_f_f","line":110,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.homMk_f_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.homMk_f_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">homMk_f_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.toGradedObject</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">L</span>.toGradedObject</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Rel</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">i₁'</span>, <span class=\"fn\">i₂</span>)</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.Rel</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.X</span> <span class=\"fn\">i₁</span></span>)</span>.d</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.X</span> <span class=\"fn\">i₁</span></span>)</span>.d</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂'</span>)</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.homMk\">HomologicalComplex₂.homMk</a> <span class=\"fn\">f</span> <span class=\"fn\">comm₁</span> <span class=\"fn\">comm₂</span></span>)</span>.f</span> <span class=\"fn\">i₁</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L101-L103","name":"HomologicalComplex₂.ofGradedObject_toGradedObject","line":101,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject_toGradedObject","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject_toGradedObject\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">ofGradedObject_toGradedObject</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/GradedObject.html#CategoryTheory.GradedObject\">CategoryTheory.GradedObject</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">I₂</span></span>)</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₁ : <span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) → <span class=\"fn\">(<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁'</span>, <span class=\"fn\">i₂</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₂ : <span class=\"fn\">(<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) → <span class=\"fn\">(<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂'</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(shape₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Rel</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(shape₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.Rel</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₁_comp_d₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁' </span><span class=\"fn\">i₁''</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₁''</span> <span class=\"fn\">i₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₂_comp_d₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂' </span><span class=\"fn\">i₂''</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂'</span> <span class=\"fn\">i₂''</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂'</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject\">HomologicalComplex₂.ofGradedObject</a> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span> <span class=\"fn\">X</span> <span class=\"fn\">d₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">shape₁</span> <span class=\"fn\">shape₂</span> <span class=\"fn\">d₁_comp_d₁</span> <span class=\"fn\">d₂_comp_d₂</span> <span class=\"fn\">comm</span></span>)</span>.toGradedObject</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L85-L98","name":"HomologicalComplex₂.ofGradedObject","line":85,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject","doc":"Constructor for bicomplexes taking as inputs a graded object, horizontal differentials\nand vertical differentials satisfying suitable relations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">ofGradedObject</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/GradedObject.html#CategoryTheory.GradedObject\">CategoryTheory.GradedObject</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">I₂</span></span>)</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₁ : <span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) → <span class=\"fn\">(<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁'</span>, <span class=\"fn\">i₂</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₂ : <span class=\"fn\">(<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) → <span class=\"fn\">(<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂'</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(shape₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Rel</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(shape₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.Rel</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₁_comp_d₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁' </span><span class=\"fn\">i₁''</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₁''</span> <span class=\"fn\">i₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₂_comp_d₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂' </span><span class=\"fn\">i₂''</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂'</span> <span class=\"fn\">i₂''</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂'</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L84-L84","name":"HomologicalComplex₂.ofGradedObject_X_X","line":84,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject_X_X","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject_X_X\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">ofGradedObject_X_X</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/GradedObject.html#CategoryTheory.GradedObject\">CategoryTheory.GradedObject</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">I₂</span></span>)</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₁ : <span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) → <span class=\"fn\">(<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁'</span>, <span class=\"fn\">i₂</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₂ : <span class=\"fn\">(<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) → <span class=\"fn\">(<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂'</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(shape₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Rel</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(shape₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.Rel</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₁_comp_d₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁' </span><span class=\"fn\">i₁''</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₁''</span> <span class=\"fn\">i₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₂_comp_d₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂' </span><span class=\"fn\">i₂''</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂'</span> <span class=\"fn\">i₂''</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂'</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject\">HomologicalComplex₂.ofGradedObject</a> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span> <span class=\"fn\">X</span> <span class=\"fn\">d₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">shape₁</span> <span class=\"fn\">shape₂</span> <span class=\"fn\">d₁_comp_d₁</span> <span class=\"fn\">d₂_comp_d₂</span> <span class=\"fn\">comm</span></span>)</span>.X</span> <span class=\"fn\">i₁</span></span>)</span>.X</span> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L84-L84","name":"HomologicalComplex₂.ofGradedObject_d_f","line":84,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject_d_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject_d_f\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">ofGradedObject_d_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/GradedObject.html#CategoryTheory.GradedObject\">CategoryTheory.GradedObject</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">I₂</span></span>)</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₁ : <span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) → <span class=\"fn\">(<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁'</span>, <span class=\"fn\">i₂</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₂ : <span class=\"fn\">(<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) → <span class=\"fn\">(<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂'</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(shape₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Rel</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(shape₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.Rel</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₁_comp_d₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁' </span><span class=\"fn\">i₁''</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₁''</span> <span class=\"fn\">i₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₂_comp_d₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂' </span><span class=\"fn\">i₂''</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂'</span> <span class=\"fn\">i₂''</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂'</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁' : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject\">HomologicalComplex₂.ofGradedObject</a> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span> <span class=\"fn\">X</span> <span class=\"fn\">d₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">shape₁</span> <span class=\"fn\">shape₂</span> <span class=\"fn\">d₁_comp_d₁</span> <span class=\"fn\">d₂_comp_d₂</span> <span class=\"fn\">comm</span></span>)</span>.d</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L84-L84","name":"HomologicalComplex₂.ofGradedObject_X_d","line":84,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject_X_d","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject_X_d\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">ofGradedObject_X_d</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/GradedObject.html#CategoryTheory.GradedObject\">CategoryTheory.GradedObject</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">I₂</span></span>)</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₁ : <span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) → <span class=\"fn\">(<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁'</span>, <span class=\"fn\">i₂</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₂ : <span class=\"fn\">(<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) → <span class=\"fn\">(<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂'</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(shape₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Rel</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span></span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(shape₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.Rel</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₁_comp_d₁ : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁' </span><span class=\"fn\">i₁''</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₁''</span> <span class=\"fn\">i₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d₂_comp_d₂ : <span class=\"fn\">∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂' </span><span class=\"fn\">i₂''</span> : <span class=\"fn\">I₂</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂'</span> <span class=\"fn\">i₂''</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm : <span class=\"fn\">∀ (<span class=\"fn\">i₁ </span><span class=\"fn\">i₁'</span> : <span class=\"fn\">I₁</span>) (<span class=\"fn\">i₂ </span><span class=\"fn\">i₂'</span> : <span class=\"fn\">I₂</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d₁</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₁'</span> <span class=\"fn\">i₂'</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂' : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.ofGradedObject\">HomologicalComplex₂.ofGradedObject</a> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span> <span class=\"fn\">X</span> <span class=\"fn\">d₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">shape₁</span> <span class=\"fn\">shape₂</span> <span class=\"fn\">d₁_comp_d₁</span> <span class=\"fn\">d₂_comp_d₂</span> <span class=\"fn\">comm</span></span>)</span>.X</span> <span class=\"fn\">i₁</span></span>)</span>.d</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">d₂</span> <span class=\"fn\">i₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">i₂'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L64-L67","name":"HomologicalComplex₂.instFaithfulGradedObjectProdToGradedObjectFunctor","line":64,"kind":"instance","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.instFaithfulGradedObjectProdToGradedObjectFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.instFaithfulGradedObjectProdToGradedObjectFunctor\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">instFaithfulGradedObjectProdToGradedObjectFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectFunctor\">HomologicalComplex₂.toGradedObjectFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.Faithful</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L60-L62","name":"HomologicalComplex₂.toGradedObjectFunctor","line":60,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectFunctor","doc":"The functor which sends a bicomplex to its associated graded object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectFunctor\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">toGradedObjectFunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/GradedObject.html#CategoryTheory.GradedObject\">CategoryTheory.GradedObject</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">I₂</span></span>)</span> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L59-L59","name":"HomologicalComplex₂.toGradedObjectFunctor_map","line":59,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectFunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectFunctor_map\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">toGradedObjectFunctor_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>} (<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">I₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">I₂</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectFunctor\">HomologicalComplex₂.toGradedObjectFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.map</span> <span class=\"fn\">φ</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectMap\">HomologicalComplex₂.toGradedObjectMap</a> <span class=\"fn\">φ</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L59-L59","name":"HomologicalComplex₂.toGradedObjectFunctor_obj","line":59,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectFunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectFunctor_obj\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">toGradedObjectFunctor_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectFunctor\">HomologicalComplex₂.toGradedObjectFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span>.obj</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">K</span>.toGradedObject</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L54-L55","name":"HomologicalComplex₂.toGradedObjectMap_apply","line":54,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectMap_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectMap_apply\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">toGradedObjectMap_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <span class=\"fn\">I₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <span class=\"fn\">I₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectMap\">HomologicalComplex₂.toGradedObjectMap</a> <span class=\"fn\">φ</span> <span class=\"fn\">(<span class=\"fn\">i₁</span>, <span class=\"fn\">i₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.f</span> <span class=\"fn\">i₁</span></span>)</span>.f</span> <span class=\"fn\">i₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L49-L51","name":"HomologicalComplex₂.toGradedObjectMap","line":49,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectMap","doc":"The morphism of graded objects induced by a morphism of bicomplexes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObjectMap\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">toGradedObjectMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.toGradedObject</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">L</span>.toGradedObject</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L44-L46","name":"HomologicalComplex₂.toGradedObject","line":44,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObject","doc":"The graded object indexed by `I₁ × I₂` induced by a bicomplex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂.toGradedObject\"><span class=\"name\">HomologicalComplex₂</span>.<span class=\"name\">toGradedObject</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\">HomologicalComplex₂</a> <span class=\"fn\">C</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/GradedObject.html#CategoryTheory.GradedObject\">CategoryTheory.GradedObject</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">I₂</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Homology/HomologicalBicomplex.lean#L34-L35","name":"HomologicalComplex₂","line":34,"kind":"def","docLink":"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂","doc":"Given a category `C` and two complex shapes `c₁` and `c₂` on types `I₁` and `I₂`,\nthe associated type of bicomplexes `HomologicalComplex₂ C c₁ c₂` is\n`K : HomologicalComplex (HomologicalComplex C c₂) c₁`. Then, the object in\nposition `⟨i₁, i₂⟩` can be obtained as `(K.X i₁).X i₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/HomologicalBicomplex.html#HomologicalComplex₂\"><span class=\"name\">HomologicalComplex₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape\">ComplexShape</a> <span class=\"fn\">I₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max (max (max u_3 u_1) u_4) u_2) u_3 u_4)</div></div>"}]}