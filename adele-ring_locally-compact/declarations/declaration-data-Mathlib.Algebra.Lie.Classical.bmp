{"name":"Mathlib.Algebra.Lie.Classical","instances":[{"typeNames":["LieAlgebra.Orthogonal.PD"],"name":"LieAlgebra.Orthogonal.invertiblePD","className":"Invertible"},{"typeNames":["LieAlgebra.Orthogonal.PB"],"name":"LieAlgebra.Orthogonal.invertiblePB","className":"Invertible"}],"imports":["Init","Mathlib.Data.Matrix.Basis","Mathlib.Data.Matrix.DMatrix","Mathlib.Algebra.Lie.Abelian","Mathlib.LinearAlgebra.Matrix.Trace","Mathlib.Algebra.Lie.SkewAdjoint","Mathlib.LinearAlgebra.SymplecticGroup"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L372-L382","name":"LieAlgebra.Orthogonal.typeBEquivSo'","line":372,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.typeBEquivSo'","doc":"An equivalence between two possible definitions of the classical Lie algebra of type B. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.typeBEquivSo'\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">typeBEquivSo'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible\">Invertible</a> <span class=\"fn\">2</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.typeB\">LieAlgebra.Orthogonal.typeB</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Lie/Basic.html#LieEquiv\">≃ₗ⁅</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieEquiv\">⁆</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.so'\">LieAlgebra.Orthogonal.so'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L356-L368","name":"LieAlgebra.Orthogonal.indefiniteDiagonal_assoc","line":356,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.indefiniteDiagonal_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.indefiniteDiagonal_assoc\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">indefiniteDiagonal_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.indefiniteDiagonal\">LieAlgebra.Orthogonal.indefiniteDiagonal</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Matrix.html#Matrix.reindexLieEquiv\">Matrix.reindexLieEquiv</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.sumAssoc\">Equiv.sumAssoc</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">l</span> <span class=\"fn\">l</span></span>)</span>.symm</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">1</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.indefiniteDiagonal\">LieAlgebra.Orthogonal.indefiniteDiagonal</a> <span class=\"fn\">l</span> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L351-L353","name":"LieAlgebra.Orthogonal.jb_transform","line":351,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.jb_transform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.jb_transform\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">jb_transform</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PB\">LieAlgebra.Orthogonal.PB</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.JB\">LieAlgebra.Orthogonal.JB</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PB\">LieAlgebra.Orthogonal.PB</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">1</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.S\">LieAlgebra.Orthogonal.S</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L347-L348","name":"LieAlgebra.Orthogonal.invertiblePB","line":347,"kind":"instance","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.invertiblePB","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.invertiblePB\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">invertiblePB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible\">Invertible</a> <span class=\"fn\">2</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible\">Invertible</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PB\">LieAlgebra.Orthogonal.PB</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L341-L344","name":"LieAlgebra.Orthogonal.pb_inv","line":341,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.pb_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.pb_inv\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">pb_inv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible\">Invertible</a> <span class=\"fn\">2</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PB\">LieAlgebra.Orthogonal.PB</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">1</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible.invOf\">⅟</a><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PD\">LieAlgebra.Orthogonal.PD</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L335-L336","name":"LieAlgebra.Orthogonal.PB","line":335,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PB","doc":"A matrix transforming the bilinear form defined by the matrix `JB` into an\nalmost-split-signature diagonal matrix.\n\nIt looks like this as a `(2l+1) x (2l+1)` matrix of blocks:\n\n   [ 1 0  0 ]\n   [ 0 1 -1 ]\n   [ 0 1  1 ]\n\nwhere sizes of the blocks are:\n\n   [`1 x 1` `1 x l` `1 x l`]\n   [`l x 1` `l x l` `l x l`]\n   [`l x 1` `l x l` `l x l`]\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PB\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">PB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span></span>)</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L316-L317","name":"LieAlgebra.Orthogonal.typeB","line":316,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.typeB","doc":"The classical Lie algebra of type B as a Lie subalgebra of matrices associated to the matrix\n`JB`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.typeB\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">typeB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Subalgebra.html#LieSubalgebra\">LieSubalgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span></span>)</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L310-L311","name":"LieAlgebra.Orthogonal.JB","line":310,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.JB","doc":"A matrix defining a canonical odd-rank symmetric bilinear form.\n\nIt looks like this as a `(2l+1) x (2l+1)` matrix of blocks:\n\n[ 2 0 0 ]\n[ 0 0 1 ]\n[ 0 1 0 ]\n\nwhere sizes of the blocks are:\n\n[`1 x 1` `1 x l` `1 x l`]\n[`l x 1` `l x l` `l x l`]\n[`l x 1` `l x l` `l x l`]\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.JB\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">JB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span></span>)</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L287-L293","name":"LieAlgebra.Orthogonal.typeDEquivSo'","line":287,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.typeDEquivSo'","doc":"An equivalence between two possible definitions of the classical Lie algebra of type D. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.typeDEquivSo'\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">typeDEquivSo'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible\">Invertible</a> <span class=\"fn\">2</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.typeD\">LieAlgebra.Orthogonal.typeD</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Lie/Basic.html#LieEquiv\">≃ₗ⁅</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieEquiv\">⁆</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.so'\">LieAlgebra.Orthogonal.so'</a> <span class=\"fn\">l</span> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L282-L283","name":"LieAlgebra.Orthogonal.invertiblePD","line":282,"kind":"instance","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.invertiblePD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.invertiblePD\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">invertiblePD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible\">Invertible</a> <span class=\"fn\">2</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible\">Invertible</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PD\">LieAlgebra.Orthogonal.PD</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L276-L279","name":"LieAlgebra.Orthogonal.pd_inv","line":276,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.pd_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.pd_inv\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">pd_inv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible\">Invertible</a> <span class=\"fn\">2</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PD\">LieAlgebra.Orthogonal.PD</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible.invOf\">⅟</a><span class=\"fn\">2</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PD\">LieAlgebra.Orthogonal.PD</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L269-L273","name":"LieAlgebra.Orthogonal.jd_transform","line":269,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.jd_transform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.jd_transform\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">jd_transform</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PD\">LieAlgebra.Orthogonal.PD</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.JD\">LieAlgebra.Orthogonal.JD</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PD\">LieAlgebra.Orthogonal.PD</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.S\">LieAlgebra.Orthogonal.S</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L264-L266","name":"LieAlgebra.Orthogonal.s_as_blocks","line":264,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.s_as_blocks","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.s_as_blocks\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">s_as_blocks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.S\">LieAlgebra.Orthogonal.S</a> <span class=\"fn\">l</span> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">1</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L260-L261","name":"LieAlgebra.Orthogonal.S","line":260,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.S","doc":"The split-signature diagonal matrix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.S\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">S</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L255-L256","name":"LieAlgebra.Orthogonal.PD","line":255,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PD","doc":"A matrix transforming the bilinear form defined by the matrix `JD` into a split-signature\ndiagonal matrix.\n\nIt looks like this as a `2l x 2l` matrix of `l x l` blocks:\n\n   [ 1 -1 ]\n   [ 1  1 ]\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.PD\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">PD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L243-L244","name":"LieAlgebra.Orthogonal.typeD","line":243,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.typeD","doc":"The classical Lie algebra of type D as a Lie subalgebra of matrices associated to the matrix\n`JD`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.typeD\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">typeD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Subalgebra.html#LieSubalgebra\">LieSubalgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L237-L238","name":"LieAlgebra.Orthogonal.JD","line":237,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.JD","doc":"A matrix defining a canonical even-rank symmetric bilinear form.\n\nIt looks like this as a `2l x 2l` matrix of `l x l` blocks:\n\n[ 0 1 ]\n[ 1 0 ]\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.JD\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">JD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L222-L227","name":"LieAlgebra.Orthogonal.soIndefiniteEquiv_apply","line":222,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.soIndefiniteEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.soIndefiniteEquiv_apply\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">soIndefiniteEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.so'\">LieAlgebra.Orthogonal.so'</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.soIndefiniteEquiv\">LieAlgebra.Orthogonal.soIndefiniteEquiv</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span> <span class=\"fn\">hi</span></span>)</span> <span class=\"fn\">A</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.Pso\">LieAlgebra.Orthogonal.Pso</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span> <span class=\"fn\">i</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">A</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.Pso\">LieAlgebra.Orthogonal.Pso</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L214-L219","name":"LieAlgebra.Orthogonal.soIndefiniteEquiv","line":214,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.soIndefiniteEquiv","doc":"An equivalence between the indefinite and definite orthogonal Lie algebras, over a ring\ncontaining a square root of -1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.soIndefiniteEquiv\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">soIndefiniteEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.so'\">LieAlgebra.Orthogonal.so'</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Lie/Basic.html#LieEquiv\">≃ₗ⁅</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieEquiv\">⁆</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.so\">LieAlgebra.Orthogonal.so</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">q</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L197-L209","name":"LieAlgebra.Orthogonal.indefiniteDiagonal_transform","line":197,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.indefiniteDiagonal_transform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.indefiniteDiagonal_transform\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">indefiniteDiagonal_transform</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.Pso\">LieAlgebra.Orthogonal.Pso</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.indefiniteDiagonal\">LieAlgebra.Orthogonal.indefiniteDiagonal</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>     <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.Pso\">LieAlgebra.Orthogonal.Pso</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L193-L194","name":"LieAlgebra.Orthogonal.invertiblePso","line":193,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.invertiblePso","doc":"There is a constructive inverse of `Pso p q R i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.invertiblePso\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">invertiblePso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Invertible/Defs.html#Invertible\">Invertible</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.Pso\">LieAlgebra.Orthogonal.Pso</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L178-L189","name":"LieAlgebra.Orthogonal.pso_inv","line":178,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.pso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.pso_inv\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">pso_inv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.Pso\">LieAlgebra.Orthogonal.Pso</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.Pso\">LieAlgebra.Orthogonal.Pso</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L172-L173","name":"LieAlgebra.Orthogonal.Pso","line":172,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.Pso","doc":"A matrix for transforming the indefinite diagonal bilinear form into the definite one, provided\nthe parameter `i` is a square root of -1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.Pso\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">Pso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">q</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">q</span></span>)</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L166-L167","name":"LieAlgebra.Orthogonal.so'","line":166,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.so'","doc":"The indefinite orthogonal Lie subalgebra: skew-adjoint matrices with respect to the symmetric\nbilinear form defined by the indefinite diagonal matrix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.so'\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">so'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Subalgebra.html#LieSubalgebra\">LieSubalgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">q</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">q</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L160-L161","name":"LieAlgebra.Orthogonal.indefiniteDiagonal","line":160,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.indefiniteDiagonal","doc":"The indefinite diagonal matrix with `p` 1s and `q` -1s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.indefiniteDiagonal\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">indefiniteDiagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">q</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">q</span></span>)</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L154-L156","name":"LieAlgebra.Orthogonal.mem_so","line":154,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.mem_so","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.mem_so\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">mem_so</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.so\">LieAlgebra.Orthogonal.so</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">A</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L149-L150","name":"LieAlgebra.Orthogonal.so","line":149,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.so","doc":"The definite orthogonal Lie subalgebra: skew-adjoint matrices with respect to the symmetric\nbilinear form defined by the identity matrix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Orthogonal.so\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Orthogonal</span>.<span class=\"name\">so</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Subalgebra.html#LieSubalgebra\">LieSubalgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L139-L140","name":"LieAlgebra.Symplectic.sp","line":139,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Symplectic.sp","doc":"The symplectic Lie algebra: skew-adjoint matrices with respect to the canonical skew-symmetric\nbilinear form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.Symplectic.sp\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">Symplectic</span>.<span class=\"name\">sp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Subalgebra.html#LieSubalgebra\">LieSubalgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L122-L130","name":"LieAlgebra.SpecialLinear.sl_non_abelian","line":122,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.sl_non_abelian","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.sl_non_abelian\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">SpecialLinear</span>.<span class=\"name\">sl_non_abelian</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.sl\">LieAlgebra.SpecialLinear.sl</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L116-L117","name":"LieAlgebra.SpecialLinear.eb_val","line":116,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.eb_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.eb_val\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">SpecialLinear</span>.<span class=\"name\">eb_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.Eb\">LieAlgebra.SpecialLinear.Eb</a> <span class=\"fn\">R</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basis.html#Matrix.stdBasisMatrix\">Matrix.stdBasisMatrix</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L109-L112","name":"LieAlgebra.SpecialLinear.Eb","line":109,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.Eb","doc":"When j ≠ i, the elementary matrices are elements of sl n R, in fact they are part of a natural\nbasis of `sl n R`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.Eb\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">SpecialLinear</span>.<span class=\"name\">Eb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.sl\">LieAlgebra.SpecialLinear.sl</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L99-L100","name":"LieAlgebra.SpecialLinear.sl_bracket","line":99,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.sl_bracket","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.sl_bracket\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">SpecialLinear</span>.<span class=\"name\">sl_bracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.sl\">LieAlgebra.SpecialLinear.sl</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.sl\">LieAlgebra.SpecialLinear.sl</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁅</a><span class=\"fn\">A</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">,</a> <span class=\"fn\">B</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁆</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">B</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">A</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L94-L96","name":"LieAlgebra.SpecialLinear.sl","line":94,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.sl","doc":"The special linear Lie algebra: square matrices of trace zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.SpecialLinear.sl\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">SpecialLinear</span>.<span class=\"name\">sl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Subalgebra.html#LieSubalgebra\">LieSubalgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Algebra/Lie/Classical.lean#L83-L88","name":"LieAlgebra.matrix_trace_commutator_zero","line":83,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.matrix_trace_commutator_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Classical.html#LieAlgebra.matrix_trace_commutator_zero\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">matrix_trace_commutator_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Trace.html#Matrix.trace\">Matrix.trace</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁅</a><span class=\"fn\">X</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">,</a> <span class=\"fn\">Y</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁆</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"}]}