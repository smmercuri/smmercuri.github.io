{"name":"Mathlib.Algebra.Lie.Derivation.Killing","instances":[{"typeNames":["Subtype"],"name":"LieDerivation.IsKilling.instIsKilling_range_ad","className":"LieAlgebra.IsKilling"}],"imports":["Init","Mathlib.Algebra.Lie.Derivation.AdjointAction","Mathlib.Algebra.Lie.Killing","Mathlib.LinearAlgebra.BilinearForm.Orthogonal"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/Derivation/Killing.lean#L100-L103","name":"LieDerivation.IsKilling.exists_eq_ad","line":100,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.exists_eq_ad","doc":"Every derivation of a finite-dimensional Killing Lie algebra is an inner derivation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.exists_eq_ad\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">IsKilling</span>.<span class=\"name\">exists_eq_ad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Killing.html#LieAlgebra.IsKilling\">LieAlgebra.IsKilling</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(D : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">L</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">D</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/Derivation/Killing.lean#L91-L96","name":"LieDerivation.IsKilling.range_ad_eq_top","line":91,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.range_ad_eq_top","doc":"The range of the adjoint action on a finite-dimensional Killing Lie algebra is full. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.range_ad_eq_top\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">IsKilling</span>.<span class=\"name\">range_ad_eq_top</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Killing.html#LieAlgebra.IsKilling\">LieAlgebra.IsKilling</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span>.range</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/Derivation/Killing.lean#L86-L87","name":"LieDerivation.IsKilling.killingForm_restrict_range_ad_nondegenerate","line":86,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.killingForm_restrict_range_ad_nondegenerate","doc":"The restriction of the Killing form of a finite-dimensional Killing Lie algebra to the range of\nthe adjoint action is nondegenerate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.killingForm_restrict_range_ad_nondegenerate\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">IsKilling</span>.<span class=\"name\">killingForm_restrict_range_ad_nondegenerate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Killing.html#LieAlgebra.IsKilling\">LieAlgebra.IsKilling</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/TraceForm.html#killingForm\">killingForm</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span>)</span>.restrict</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span>.range</span>.toSubmodule</span></span>)</span>.Nondegenerate</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/Derivation/Killing.lean#L81-L82","name":"LieDerivation.IsKilling.instIsKilling_range_ad","line":81,"kind":"instance","docLink":"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.instIsKilling_range_ad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.instIsKilling_range_ad\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">IsKilling</span>.<span class=\"name\">instIsKilling_range_ad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Killing.html#LieAlgebra.IsKilling\">LieAlgebra.IsKilling</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Killing.html#LieAlgebra.IsKilling\">LieAlgebra.IsKilling</a> <span class=\"fn\">R</span> <span class=\"fn\">↥<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span>.range</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/Derivation/Killing.lean#L76-L79","name":"LieDerivation.IsKilling.ad_apply_eq_zero_iff","line":76,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.ad_apply_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.ad_apply_eq_zero_iff\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">IsKilling</span>.<span class=\"name\">ad_apply_eq_zero_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Killing.html#LieAlgebra.IsKilling\">LieAlgebra.IsKilling</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/Derivation/Killing.lean#L66-L71","name":"LieDerivation.IsKilling.ad_mem_ker_killingForm_ad_range_of_mem_orthogonal","line":66,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.ad_mem_ker_killingForm_ad_range_of_mem_orthogonal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.ad_mem_ker_killingForm_ad_range_of_mem_orthogonal\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">IsKilling</span>.<span class=\"name\">ad_mem_ker_killingForm_ad_range_of_mem_orthogonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hD : <span class=\"fn\"><span class=\"fn\">D</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/TraceForm.html#killingForm\">killingForm</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span>)</span>.orthogonal</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span>.range</span>.toSubmodule</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Map.html#Submodule.map\">Submodule.map</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span>.range</span>.subtype</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Ker.html#LinearMap.ker\">LinearMap.ker</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/TraceForm.html#killingForm\">killingForm</a> <span class=\"fn\">R</span> <span class=\"fn\">↥<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span>.range</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/Derivation/Killing.lean#L61-L64","name":"LieDerivation.IsKilling.ad_mem_orthogonal_of_mem_orthogonal","line":61,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.ad_mem_orthogonal_of_mem_orthogonal","doc":"If a derivation `D` is in the Killing orthogonal of the range of the adjoint action, then, for\nany `x : L`, `ad (D x)` is also in this orthogonal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.ad_mem_orthogonal_of_mem_orthogonal\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">IsKilling</span>.<span class=\"name\">ad_mem_orthogonal_of_mem_orthogonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hD : <span class=\"fn\"><span class=\"fn\">D</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/TraceForm.html#killingForm\">killingForm</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span>)</span>.orthogonal</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span>.range</span>.toSubmodule</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/TraceForm.html#killingForm\">killingForm</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span>)</span>.orthogonal</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span>.range</span>.toSubmodule</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/Derivation/Killing.lean#L46-L55","name":"LieDerivation.IsKilling.rangeAdOrthogonal","line":46,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.rangeAdOrthogonal","doc":"The orthogonal complement of the inner derivations is a Lie submodule of all derivations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.rangeAdOrthogonal\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">IsKilling</span>.<span class=\"name\">rangeAdOrthogonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieSubmodule\">LieSubmodule</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/Derivation/Killing.lean#L46-L46","name":"LieDerivation.IsKilling.rangeAdOrthogonal_carrier","line":46,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.rangeAdOrthogonal_carrier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.rangeAdOrthogonal_carrier\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">IsKilling</span>.<span class=\"name\">rangeAdOrthogonal_carrier</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.rangeAdOrthogonal\">LieDerivation.IsKilling.rangeAdOrthogonal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span> | <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">L</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/TraceForm.html#killingForm\">killingForm</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span>)</span>.IsOrtho</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">m</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/Derivation/Killing.lean#L41-L43","name":"LieDerivation.IsKilling.killingForm_restrict_range_ad","line":41,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.killingForm_restrict_range_ad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/Killing.html#LieDerivation.IsKilling.killingForm_restrict_range_ad\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">IsKilling</span>.<span class=\"name\">killingForm_restrict_range_ad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/TraceForm.html#killingForm\">killingForm</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span>)</span>.restrict</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span>.range</span>.toSubmodule</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/TraceForm.html#killingForm\">killingForm</a> <span class=\"fn\">R</span> <span class=\"fn\">↥<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">LieDerivation.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span>.range</span></span></span></span></div></div>"}]}