{"name":"Mathlib.Algebra.Lie.InvariantForm","instances":[],"imports":["Init","Mathlib.Algebra.Lie.Semisimple.Defs","Mathlib.LinearAlgebra.BilinearForm.Orthogonal"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L186-L202","name":"LieAlgebra.InvariantForm.isSemisimple_of_nondegenerate","line":186,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.isSemisimple_of_nondegenerate","doc":"A finite-dimensional Lie algebra over a field is semisimple\nif it does not have non-trivial abelian ideals and it admits a\nnon-degenerate reflexive invariant bilinear form.\nHere a form is *invariant* if it is compatible with the Lie bracket: `Φ ⁅x, y⁆ z = Φ x ⁅y, z⁆`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.isSemisimple_of_nondegenerate\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">isSemisimple_of_nondegenerate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_nondeg : <span class=\"fn\"><span class=\"fn\">Φ</span>.Nondegenerate</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_refl : <span class=\"fn\"><span class=\"fn\">Φ</span>.IsRefl</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hL : <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">↑<span class=\"fn\">I</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSemisimple\">LieAlgebra.IsSemisimple</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L150-L177","name":"LieAlgebra.InvariantForm.atomistic","line":150,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.atomistic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.atomistic\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">atomistic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_nondeg : <span class=\"fn\"><span class=\"fn\">Φ</span>.Nondegenerate</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_refl : <span class=\"fn\"><span class=\"fn\">Φ</span>.IsRefl</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hL : <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">↑<span class=\"fn\">I</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#SupSet.sSup\">sSup</a> <span class=\"fn\">{<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span> | <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">J</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">I</span></span></span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L142-L147","name":"LieAlgebra.InvariantForm.restrict_orthogonal_nondegenerate","line":142,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.restrict_orthogonal_nondegenerate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.restrict_orthogonal_nondegenerate\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">restrict_orthogonal_nondegenerate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_nondeg : <span class=\"fn\"><span class=\"fn\">Φ</span>.Nondegenerate</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_refl : <span class=\"fn\"><span class=\"fn\">Φ</span>.IsRefl</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hL : <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">↑<span class=\"fn\">I</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hI : <span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ</span>.restrict</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#lieIdealSubalgebra\">lieIdealSubalgebra</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal\">LieAlgebra.InvariantForm.orthogonal</a> <span class=\"fn\">Φ</span> <span class=\"fn\">hΦ_inv</span> <span class=\"fn\">I</span></span>)</span></span>)</span>.toSubmodule</span></span>)</span>.Nondegenerate</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L137-L140","name":"LieAlgebra.InvariantForm.restrict_nondegenerate","line":137,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.restrict_nondegenerate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.restrict_nondegenerate\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">restrict_nondegenerate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_nondeg : <span class=\"fn\"><span class=\"fn\">Φ</span>.Nondegenerate</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_refl : <span class=\"fn\"><span class=\"fn\">Φ</span>.IsRefl</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hL : <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">↑<span class=\"fn\">I</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hI : <span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ</span>.restrict</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#lieIdealSubalgebra\">lieIdealSubalgebra</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">I</span></span>)</span>.toSubmodule</span></span>)</span>.Nondegenerate</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L132-L135","name":"LieAlgebra.InvariantForm.orthogonal_isCompl","line":132,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal_isCompl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal_isCompl\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">orthogonal_isCompl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_nondeg : <span class=\"fn\"><span class=\"fn\">Φ</span>.Nondegenerate</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_refl : <span class=\"fn\"><span class=\"fn\">Φ</span>.IsRefl</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hL : <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">↑<span class=\"fn\">I</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hI : <span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#IsCompl\">IsCompl</a> <span class=\"fn\">I</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal\">LieAlgebra.InvariantForm.orthogonal</a> <span class=\"fn\">Φ</span> <span class=\"fn\">hΦ_inv</span> <span class=\"fn\">I</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L125-L129","name":"LieAlgebra.InvariantForm.orthogonal_isCompl_coe_submodule","line":125,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal_isCompl_coe_submodule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal_isCompl_coe_submodule\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">orthogonal_isCompl_coe_submodule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_nondeg : <span class=\"fn\"><span class=\"fn\">Φ</span>.Nondegenerate</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_refl : <span class=\"fn\"><span class=\"fn\">Φ</span>.IsRefl</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hL : <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">↑<span class=\"fn\">I</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hI : <span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#IsCompl\">IsCompl</a> <span class=\"fn\">↑<span class=\"fn\">I</span></span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal\">LieAlgebra.InvariantForm.orthogonal</a> <span class=\"fn\">Φ</span> <span class=\"fn\">hΦ_inv</span> <span class=\"fn\">I</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L90-L108","name":"LieAlgebra.InvariantForm.orthogonal_disjoint","line":90,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal_disjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal_disjoint\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">orthogonal_disjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_nondeg : <span class=\"fn\"><span class=\"fn\">Φ</span>.Nondegenerate</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hL : <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">↑<span class=\"fn\">I</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hI : <span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">I</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal\">LieAlgebra.InvariantForm.orthogonal</a> <span class=\"fn\">Φ</span> <span class=\"fn\">hΦ_inv</span> <span class=\"fn\">I</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L86-L88","name":"LieAlgebra.InvariantForm.mem_orthogonal","line":86,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.mem_orthogonal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.mem_orthogonal\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">mem_orthogonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRingModule\">LieRingModule</a> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieSubmodule\">LieSubmodule</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal\">LieAlgebra.InvariantForm.orthogonal</a> <span class=\"fn\">Φ</span> <span class=\"fn\">hΦ_inv</span> <span class=\"fn\">N</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">N</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L83-L84","name":"LieAlgebra.InvariantForm.orthogonal_toSubmodule","line":83,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal_toSubmodule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal_toSubmodule\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">orthogonal_toSubmodule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRingModule\">LieRingModule</a> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieSubmodule\">LieSubmodule</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal\">LieAlgebra.InvariantForm.orthogonal</a> <span class=\"fn\">Φ</span> <span class=\"fn\">hΦ_inv</span> <span class=\"fn\">N</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ</span>.orthogonal</span> <span class=\"fn\">↑<span class=\"fn\">N</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L71-L80","name":"LieAlgebra.InvariantForm.orthogonal","line":71,"kind":"def","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal","doc":"The orthogonal complement of a Lie submodule `N` with respect to an invariant bilinear form `Φ` is\nthe Lie submodule of elements `y` such that `Φ x y = 0` for all `x ∈ N`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">orthogonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRingModule\">LieRingModule</a> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieSubmodule\">LieSubmodule</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieSubmodule\">LieSubmodule</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L70-L70","name":"LieAlgebra.InvariantForm.orthogonal_carrier","line":70,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal_carrier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal_carrier\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">InvariantForm</span>.<span class=\"name\">orthogonal_carrier</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRingModule\">LieRingModule</a> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hΦ_inv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieSubmodule\">LieSubmodule</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LieAlgebra.InvariantForm.orthogonal\">LieAlgebra.InvariantForm.orthogonal</a> <span class=\"fn\">Φ</span> <span class=\"fn\">hΦ_inv</span> <span class=\"fn\">N</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">M</span> | <span class=\"fn\">∀ <span class=\"fn\">n</span> ∈ <span class=\"fn\">N</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ</span>.IsOrtho</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L53-L62","name":"LinearMap.BilinForm.lieInvariant_iff","line":53,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant_iff\"><span class=\"name\">LinearMap</span>.<span class=\"name\">BilinForm</span>.<span class=\"name\">lieInvariant_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRingModule\">LieRingModule</a> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieModule\">LieModule</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\">LinearMap.BilinForm.lieInvariant</a> <span class=\"fn\">L</span> <span class=\"fn\">Φ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">Φ</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#LieModule.maxTrivSubmodule\">LieModule.maxTrivSubmodule</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/Lie/InvariantForm.lean#L50-L51","name":"LinearMap.BilinForm.lieInvariant","line":50,"kind":"def","docLink":"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant","doc":"A bilinear form on a Lie module `M` of a Lie algebra `L` is *invariant* if\nfor all `x : L` and `y z : M` the condition `Φ ⁅x, y⁆ z = -Φ y ⁅x, z⁆` holds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/InvariantForm.html#LinearMap.BilinForm.lieInvariant\"><span class=\"name\">LinearMap</span>.<span class=\"name\">BilinForm</span>.<span class=\"name\">lieInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRingModule\">LieRingModule</a> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}