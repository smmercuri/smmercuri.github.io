{"name":"Mathlib.Algebra.ModEq","instances":[{"typeNames":["AddCommGroup.ModEq"],"name":"AddCommGroup.instIsReflModEq","className":"IsRefl"}],"imports":["Init","Mathlib.Data.Int.ModEq","Mathlib.GroupTheory.QuotientGroup"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L278-L279","name":"AddCommGroup.div_modEq_div","line":278,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.div_modEq_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.div_modEq_div\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">div_modEq_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L271-L271","name":"AddCommGroup.ModEq.natCast","line":271,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.natCast","doc":"**Alias** of the reverse direction of `AddCommGroup.natCast_modEq_natCast`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.natCast\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">natCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">n</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L271-L271","name":"Nat.ModEq.of_natCast","line":271,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#Nat.ModEq.of_natCast","doc":"**Alias** of the forward direction of `AddCommGroup.natCast_modEq_natCast`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#Nat.ModEq.of_natCast\"><span class=\"name\">Nat</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_natCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">n</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L269-L269","name":"AddCommGroup.ModEq.of_intCast","line":269,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_intCast","doc":"**Alias** of the forward direction of `AddCommGroup.intCast_modEq_intCast`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_intCast\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">z</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L269-L269","name":"AddCommGroup.ModEq.intCast","line":269,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.intCast","doc":"**Alias** of the reverse direction of `AddCommGroup.intCast_modEq_intCast`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.intCast\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">z</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L265-L267","name":"AddCommGroup.natCast_modEq_natCast","line":265,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.natCast_modEq_natCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.natCast_modEq_natCast\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">natCast_modEq_natCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">n</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L261-L262","name":"AddCommGroup.intCast_modEq_intCast'","line":261,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.intCast_modEq_intCast'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.intCast_modEq_intCast'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">intCast_modEq_intCast'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L256-L258","name":"AddCommGroup.intCast_modEq_intCast","line":256,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.intCast_modEq_intCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.intCast_modEq_intCast\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">intCast_modEq_intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">z</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L248-L249","name":"AddCommGroup.modEq_iff_int_modEq","line":248,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_int_modEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_int_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_iff_int_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">[ZMOD</a> <span class=\"fn\">z</span><a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L241-L243","name":"AddCommGroup.not_modEq_iff_ne_mod_zmultiples","line":241,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.not_modEq_iff_ne_mod_zmultiples","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.not_modEq_iff_ne_mod_zmultiples\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">not_modEq_iff_ne_mod_zmultiples</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L237-L239","name":"AddCommGroup.modEq_iff_eq_mod_zmultiples","line":237,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_eq_mod_zmultiples","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_eq_mod_zmultiples\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_iff_eq_mod_zmultiples</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L234-L235","name":"AddCommGroup.not_modEq_iff_ne_add_zsmul","line":234,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.not_modEq_iff_ne_add_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.not_modEq_iff_ne_add_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">not_modEq_iff_ne_add_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L231-L232","name":"AddCommGroup.modEq_iff_eq_add_zsmul","line":231,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_eq_add_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_eq_add_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_iff_eq_add_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L229-L229","name":"AddCommGroup.add_modEq_right","line":229,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_modEq_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_modEq_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">add_modEq_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L226-L226","name":"AddCommGroup.add_modEq_left","line":226,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_modEq_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_modEq_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">add_modEq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L223-L223","name":"AddCommGroup.sub_modEq_zero","line":223,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_zero\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">sub_modEq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L219-L220","name":"AddCommGroup.sub_modEq_iff_modEq_add","line":219,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_iff_modEq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_iff_modEq_add\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">sub_modEq_iff_modEq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L216-L217","name":"AddCommGroup.sub_modEq_iff_modEq_add'","line":216,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_iff_modEq_add'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_iff_modEq_add'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">sub_modEq_iff_modEq_add'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L213-L214","name":"AddCommGroup.modEq_sub_iff_add_modEq","line":213,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub_iff_add_modEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub_iff_add_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_sub_iff_add_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L210-L211","name":"AddCommGroup.modEq_sub_iff_add_modEq'","line":210,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub_iff_add_modEq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub_iff_add_modEq'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_sub_iff_add_modEq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L205-L206","name":"AddCommGroup.ModEq.sub_right_cancel'","line":205,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right_cancel'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right_cancel'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_right_cancel'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L202-L203","name":"AddCommGroup.ModEq.sub_left_cancel'","line":202,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left_cancel'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left_cancel'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_left_cancel'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L199-L200","name":"AddCommGroup.ModEq.add_right_cancel'","line":199,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right_cancel'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right_cancel'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_right_cancel'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L196-L197","name":"AddCommGroup.ModEq.add_left_cancel'","line":196,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left_cancel'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left_cancel'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_left_cancel'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L193-L194","name":"AddCommGroup.ModEq.sub_right","line":193,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L190-L191","name":"AddCommGroup.ModEq.add_right","line":190,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L187-L188","name":"AddCommGroup.ModEq.sub_left","line":187,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L184-L185","name":"AddCommGroup.ModEq.add_left","line":184,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L179-L179","name":"AddCommGroup.ModEq.sub_right_cancel","line":179,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right_cancel","doc":"**Alias** of the forward direction of `AddCommGroup.ModEq.sub_iff_right`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_right_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L177-L177","name":"AddCommGroup.ModEq.sub_left_cancel","line":177,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left_cancel","doc":"**Alias** of the forward direction of `AddCommGroup.ModEq.sub_iff_left`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_left_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L177-L177","name":"AddCommGroup.ModEq.sub","line":177,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub","doc":"**Alias** of the reverse direction of `AddCommGroup.ModEq.sub_iff_left`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L175-L175","name":"AddCommGroup.ModEq.add_right_cancel","line":175,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right_cancel","doc":"**Alias** of the forward direction of `AddCommGroup.ModEq.add_iff_right`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_right_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L173-L173","name":"AddCommGroup.ModEq.add","line":173,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add","doc":"**Alias** of the reverse direction of `AddCommGroup.ModEq.add_iff_left`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L173-L173","name":"AddCommGroup.ModEq.add_left_cancel","line":173,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left_cancel","doc":"**Alias** of the forward direction of `AddCommGroup.ModEq.add_iff_left`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_left_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L169-L171","name":"AddCommGroup.ModEq.sub_iff_right","line":169,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_iff_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_iff_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_iff_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L164-L166","name":"AddCommGroup.ModEq.sub_iff_left","line":164,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_iff_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_iff_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_iff_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L159-L161","name":"AddCommGroup.ModEq.add_iff_right","line":159,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_iff_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_iff_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_iff_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L154-L156","name":"AddCommGroup.ModEq.add_iff_left","line":154,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_iff_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_iff_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_iff_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L149-L149","name":"AddCommGroup.ModEq.nsmul_cancel","line":149,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul_cancel","doc":"**Alias** of the forward direction of `AddCommGroup.nsmul_modEq_nsmul`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">nsmul_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L147-L147","name":"AddCommGroup.ModEq.zsmul_cancel","line":147,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul_cancel","doc":"**Alias** of the forward direction of `AddCommGroup.zsmul_modEq_zsmul`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">zsmul_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L143-L145","name":"AddCommGroup.nsmul_modEq_nsmul","line":143,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.nsmul_modEq_nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.nsmul_modEq_nsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">nsmul_modEq_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L138-L140","name":"AddCommGroup.zsmul_modEq_zsmul","line":138,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_modEq_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_modEq_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">zsmul_modEq_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L132-L133","name":"AddCommGroup.ModEq.nsmul","line":132,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L129-L130","name":"AddCommGroup.ModEq.zsmul","line":129,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L126-L127","name":"AddCommGroup.ModEq.of_nsmul","line":126,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_nsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L123-L124","name":"AddCommGroup.ModEq.of_zsmul","line":123,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L120-L121","name":"AddCommGroup.ModEq.nsmul_add","line":120,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul_add\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">nsmul_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L117-L118","name":"AddCommGroup.ModEq.add_nsmul","line":117,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_nsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L114-L115","name":"AddCommGroup.ModEq.zsmul_add","line":114,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul_add\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">zsmul_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L111-L112","name":"AddCommGroup.ModEq.add_zsmul","line":111,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L106-L107","name":"AddCommGroup.nsmul_add_modEq","line":106,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.nsmul_add_modEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.nsmul_add_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">nsmul_add_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L103-L104","name":"AddCommGroup.add_nsmul_modEq","line":103,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_nsmul_modEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_nsmul_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">add_nsmul_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L100-L101","name":"AddCommGroup.zsmul_add_modEq","line":100,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_add_modEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_add_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">zsmul_add_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L97-L98","name":"AddCommGroup.add_zsmul_modEq","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_zsmul_modEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_zsmul_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">add_zsmul_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L94-L95","name":"AddCommGroup.zsmul_modEq_zero","line":94,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_modEq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_modEq_zero\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">zsmul_modEq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L90-L91","name":"AddCommGroup.self_modEq_zero","line":90,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.self_modEq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.self_modEq_zero\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">self_modEq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L87-L87","name":"AddCommGroup.modEq_zero","line":87,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_zero\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">0</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L83-L84","name":"AddCommGroup.modEq_sub","line":83,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L81-L81","name":"AddCommGroup.ModEq.neg'","line":81,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.neg'","doc":"**Alias** of the reverse direction of `AddCommGroup.modEq_neg`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.neg'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">neg'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L81-L81","name":"AddCommGroup.ModEq.of_neg'","line":81,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_neg'","doc":"**Alias** of the forward direction of `AddCommGroup.modEq_neg`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_neg'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_neg'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L78-L79","name":"AddCommGroup.modEq_neg","line":78,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_neg\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">p</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L75-L75","name":"AddCommGroup.ModEq.neg","line":75,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.neg","doc":"**Alias** of the reverse direction of `AddCommGroup.neg_modEq_neg`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.neg\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L75-L75","name":"AddCommGroup.ModEq.of_neg","line":75,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_neg","doc":"**Alias** of the forward direction of `AddCommGroup.neg_modEq_neg`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_neg\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L72-L73","name":"AddCommGroup.neg_modEq_neg","line":72,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.neg_modEq_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.neg_modEq_neg\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">neg_modEq_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L68-L69","name":"AddCommGroup.instIsReflModEq","line":68,"kind":"instance","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.instIsReflModEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.instIsReflModEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">instIsReflModEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsRefl\">IsRefl</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">AddCommGroup.ModEq</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L65-L66","name":"AddCommGroup.ModEq.trans","line":65,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.trans\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L60-L60","name":"AddCommGroup.ModEq.symm","line":60,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.symm","doc":"**Alias** of the forward direction of `AddCommGroup.modEq_comm`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.symm\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L57-L58","name":"AddCommGroup.modEq_comm","line":57,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_comm\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L54-L55","name":"AddCommGroup.modEq_rfl","line":54,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_rfl\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L51-L52","name":"AddCommGroup.modEq_refl","line":51,"kind":"theorem","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_refl\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L47-L48","name":"AddCommGroup.«term_≡_[PMOD_]»","line":47,"kind":"def","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.«term_≡_[PMOD_]»","doc":"`a ≡ b [PMOD p]` means that `b` is congruent to `a` modulo `p`.\n\nEquivalently (as shown in `Algebra.Order.ToIntervalMod`), `b` does not lie in the open interval\n`(a, a + p)` modulo `p`, or `toIcoMod hp a` disagrees with `toIocMod hp a` at `b`, or\n`toIcoDiv hp a` disagrees with `toIocDiv hp a` at `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.«term_≡_[PMOD_]»\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">«term_≡_[PMOD_]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Algebra/ModEq.lean#L44-L45","name":"AddCommGroup.ModEq","line":44,"kind":"def","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq","doc":"`a ≡ b [PMOD p]` means that `b` is congruent to `a` modulo `p`.\n\nEquivalently (as shown in `Algebra.Order.ToIntervalMod`), `b` does not lie in the open interval\n`(a, a + p)` modulo `p`, or `toIcoMod hp a` disagrees with `toIocMod hp a` at `b`, or\n`toIcoDiv hp a` disagrees with `toIocDiv hp a` at `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}