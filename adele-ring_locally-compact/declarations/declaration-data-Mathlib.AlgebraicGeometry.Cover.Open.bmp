{"name":"Mathlib.AlgebraicGeometry.Cover.Open","instances":[{"typeNames":["AlgebraicGeometry.Scheme.OpenCover"],"name":"AlgebraicGeometry.Scheme.instInhabitedOpenCover","className":"Inhabited"},{"typeNames":["AlgebraicGeometry.Scheme.OpenCover.J"],"name":"AlgebraicGeometry.Scheme.instFintypeJFiniteSubcover","className":"Fintype"},{"typeNames":["AlgebraicGeometry.Scheme.OpenCover"],"name":"AlgebraicGeometry.Scheme.OpenCover.category","className":"CategoryTheory.Category"}],"imports":["Init","Mathlib.AlgebraicGeometry.OpenImmersion"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L491-L508","name":"AlgebraicGeometry.Scheme.affineBasisCover_is_basis","line":491,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCover_is_basis","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCover_is_basis\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">affineBasisCover_is_basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.IsTopologicalBasis\">TopologicalSpace.IsTopologicalBasis</a>\n  <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span></span> | <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.affineBasisCover</span>.J</span>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.affineBasisCover</span>.map</span> <span class=\"fn\">a</span></span>)</span>.val</span>.base</span></span></span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L482-L489","name":"AlgebraicGeometry.Scheme.affineBasisCover_map_range","line":482,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCover_map_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCover_map_range\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">affineBasisCover_map_range</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">⋯</span>.choose</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.affineBasisCover</span>.map</span> <span class=\"fn\">⟨<span class=\"fn\">x</span>, <span class=\"fn\">r</span>⟩</span></span>)</span>.val</span>.base</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.affineCover</span>.map</span> <span class=\"fn\">x</span></span>)</span>.val</span>.base</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/PrimeSpectrum/Basic.html#PrimeSpectrum.basicOpen\">PrimeSpectrum.basicOpen</a> <span class=\"fn\">r</span></span>)</span>.carrier</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L478-L480","name":"AlgebraicGeometry.Scheme.affineBasisCover_obj","line":478,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCover_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCover_obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">affineBasisCover_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.affineBasisCover</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.affineBasisCover</span>.obj</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Spec\">AlgebraicGeometry.Spec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.affineBasisCoverRing</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L475-L476","name":"AlgebraicGeometry.Scheme.affineBasisCoverRing","line":475,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCoverRing","doc":"The coordinate ring of a component in the `affine_basis_cover`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCoverRing\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">affineBasisCoverRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.affineBasisCover</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L471-L472","name":"AlgebraicGeometry.Scheme.affineBasisCover","line":471,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCover","doc":"We may bind the basic open sets of an open affine cover to form an affine cover that is also\na basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">affineBasisCover</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L455-L467","name":"AlgebraicGeometry.Scheme.affineBasisCoverOfAffine","line":455,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCoverOfAffine","doc":"The basic open sets form an affine open cover of `Spec R`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineBasisCoverOfAffine\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">affineBasisCoverOfAffine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Spec\">AlgebraicGeometry.Spec</a> <span class=\"fn\">R</span></span>)</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L438-L450","name":"AlgebraicGeometry.Scheme.isNilpotent_of_isNilpotent_cover","line":438,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.isNilpotent_of_isNilpotent_cover","doc":"If a global section is nilpotent on each member of a finite open cover, then `f` is\nnilpotent. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.isNilpotent_of_isNilpotent_cover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">isNilpotent_of_isNilpotent_cover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{U : <span class=\"fn\"><span class=\"fn\">X</span>.Opens</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.presheaf</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">U</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>), <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Nilpotent/Defs.html#IsNilpotent\">IsNilpotent</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme.Hom.app\">AlgebraicGeometry.Scheme.Hom.app</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">U</span></span>)</span> <span class=\"fn\">s</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Nilpotent/Defs.html#IsNilpotent\">IsNilpotent</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L432-L434","name":"AlgebraicGeometry.Scheme.zero_of_zero_cover","line":432,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.zero_of_zero_cover","doc":"If the restriction of a global section to each member of an open cover is zero, then it is\nglobally zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.zero_of_zero_cover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">zero_of_zero_cover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{U : <span class=\"fn\"><span class=\"fn\">X</span>.Opens</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.presheaf</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">U</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme.Hom.app\">AlgebraicGeometry.Scheme.Hom.app</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">U</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L416-L428","name":"AlgebraicGeometry.Scheme.OpenCover.ext_elem","line":416,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.ext_elem","doc":"If two global sections agree after restriction to each member of an open cover, then\nthey agree globally. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.ext_elem\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">ext_elem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{U : <span class=\"fn\"><span class=\"fn\">X</span>.Opens</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.presheaf</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">U</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.presheaf</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">U</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme.Hom.app\">AlgebraicGeometry.Scheme.Hom.app</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">U</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme.Hom.app\">AlgebraicGeometry.Scheme.Hom.app</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">U</span></span>)</span> <span class=\"fn\">g</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L409-L412","name":"AlgebraicGeometry.Scheme.OpenCover.fromAffineRefinement","line":409,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.fromAffineRefinement","doc":"Given any open cover `𝓤`, this is an affine open cover which refines it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.fromAffineRefinement\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">fromAffineRefinement</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.affineRefinement</span>.openCover</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">𝓤</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L402-L404","name":"AlgebraicGeometry.Scheme.OpenCover.comp_app","line":402,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.comp_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.comp_app\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">comp_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓥 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓦 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">𝓤</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">𝓥</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">𝓥</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">𝓦</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span>.app</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.app</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.app</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.idx</span> <span class=\"fn\">j</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L397-L399","name":"AlgebraicGeometry.Scheme.OpenCover.comp_idx_apply","line":397,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.comp_idx_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.comp_idx_apply\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">comp_idx_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓥 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓦 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">𝓤</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">𝓥</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">𝓥</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">𝓦</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span>.idx</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.idx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.idx</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L393-L394","name":"AlgebraicGeometry.Scheme.OpenCover.id_app","line":393,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.id_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.id_app\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">id_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">𝓤</span></span>)</span>.app</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.obj</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L389-L390","name":"AlgebraicGeometry.Scheme.OpenCover.id_idx_apply","line":389,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.id_idx_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.id_idx_apply\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">id_idx_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">𝓤</span></span>)</span>.idx</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L383-L386","name":"AlgebraicGeometry.Scheme.OpenCover.category","line":383,"kind":"instance","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.category","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.category\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">category</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{max u v, max (v + 1) (u + 1)}</a>                           <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L378-L381","name":"AlgebraicGeometry.Scheme.OpenCover.Hom.comp","line":378,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.comp","doc":"The composition of two morphisms in the category of open covers of a scheme. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.comp\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">Hom</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓥 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓦 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.Hom</span> <span class=\"fn\">𝓥</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓥</span>.Hom</span> <span class=\"fn\">𝓦</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.Hom</span> <span class=\"fn\">𝓦</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L373-L375","name":"AlgebraicGeometry.Scheme.OpenCover.Hom.id","line":373,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.id","doc":"The identity morphism in the category of open covers of a scheme. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.id\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">Hom</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.Hom</span> <span class=\"fn\">𝓤</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L369-L369","name":"AlgebraicGeometry.Scheme.OpenCover.Hom.w_assoc","line":369,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.w_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.w_assoc\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">Hom</span>.<span class=\"name\">w_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓥 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.Hom</span> <span class=\"fn\">𝓥</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.app</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓥</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.idx</span> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.map</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L367-L367","name":"AlgebraicGeometry.Scheme.OpenCover.Hom.w","line":367,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.w","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.w\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">Hom</span>.<span class=\"name\">w</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓥 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.Hom</span> <span class=\"fn\">𝓥</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.app</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓥</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.idx</span> <span class=\"fn\">j</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.map</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L366-L366","name":"AlgebraicGeometry.Scheme.OpenCover.Hom.isOpen","line":366,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.isOpen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.isOpen\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">Hom</span>.<span class=\"name\">isOpen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓥 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.Hom</span> <span class=\"fn\">𝓥</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.app</span> <span class=\"fn\">j</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L365-L365","name":"AlgebraicGeometry.Scheme.OpenCover.Hom.app","line":365,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.app","doc":"The morphism between open subsets associated to a morphism of open covers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.app\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">Hom</span>.<span class=\"name\">app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓥 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.Hom</span> <span class=\"fn\">𝓥</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.obj</span> <span class=\"fn\">j</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓥</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.idx</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L363-L363","name":"AlgebraicGeometry.Scheme.OpenCover.Hom.idx","line":363,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.idx","doc":"The map on indexing types associated to a morphism of open covers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.idx\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">Hom</span>.<span class=\"name\">idx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓥 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.Hom</span> <span class=\"fn\">𝓥</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span> → <span class=\"fn\"><span class=\"fn\">𝓥</span>.J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L361-L361","name":"AlgebraicGeometry.Scheme.OpenCover.Hom.mk","line":361,"kind":"ctor","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom.mk\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">Hom</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝓥 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(idx : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span> → <span class=\"fn\"><span class=\"fn\">𝓥</span>.J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(app : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.obj</span> <span class=\"fn\">j</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓥</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">idx</span> <span class=\"fn\">j</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isOpen : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>), <span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">app</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#_auto._@.Mathlib.AlgebraicGeometry.Cover.Open._hyg.4146\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">app</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓥</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">idx</span> <span class=\"fn\">j</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.map</span> <span class=\"fn\">j</span></span></span></span>)</span> <a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#_auto._@.Mathlib.AlgebraicGeometry.Cover.Open._hyg.4147\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.Hom</span> <span class=\"fn\">𝓥</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L361-L367","name":"AlgebraicGeometry.Scheme.OpenCover.Hom","line":361,"kind":"structure","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom","doc":"A morphism between open covers `𝓤 ⟶ 𝓥` indicates that `𝓤` is a refinement of `𝓥`.\nSince open covers of schemes are indexed, the definition also involves a map on the\nindexing types.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Hom\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">Hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝓥 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L342-L352","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_pullbackHom","line":342,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_pullbackHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_pullbackHom\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCoverAffineRefinementObjIso_inv_pullbackHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">Y</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso\">AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso</a> <span class=\"fn\">f</span> <span class=\"fn\">𝒰</span> <span class=\"fn\">i</span></span>)</span>.inv</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.pullbackHom</span> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span>.affineCover</span>.pullbackHom</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackHom</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span> <span class=\"fn\"><span class=\"fn\">i</span>.snd</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L341-L341","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_pullbackHom_assoc","line":341,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_pullbackHom_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_pullbackHom_assoc\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCoverAffineRefinementObjIso_inv_pullbackHom_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">Y</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.J</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso\">AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso</a> <span class=\"fn\">f</span> <span class=\"fn\">𝒰</span> <span class=\"fn\">i</span></span>)</span>.inv</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.pullbackHom</span> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span>.affineCover</span>.pullbackHom</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackHom</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span> <span class=\"fn\"><span class=\"fn\">i</span>.snd</span></span>)</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L328-L339","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_map","line":328,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCoverAffineRefinementObjIso_inv_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">Y</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso\">AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso</a> <span class=\"fn\">f</span> <span class=\"fn\">𝒰</span> <span class=\"fn\">i</span></span>)</span>.inv</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span>.affineCover</span>.pullbackCover</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackHom</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span></span>)</span>.map</span> <span class=\"fn\"><span class=\"fn\">i</span>.snd</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L327-L327","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_map_assoc","line":327,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_map_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso_inv_map_assoc\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCoverAffineRefinementObjIso_inv_map_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">Y</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.J</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso\">AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso</a> <span class=\"fn\">f</span> <span class=\"fn\">𝒰</span> <span class=\"fn\">i</span></span>)</span>.inv</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span>.affineCover</span>.pullbackCover</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackHom</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span></span>)</span>.map</span> <span class=\"fn\"><span class=\"fn\">i</span>.snd</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L320-L325","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso","line":320,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso","doc":"The pullback of the affine refinement is the pullback of the affine cover. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCoverAffineRefinementObjIso\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCoverAffineRefinementObjIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">Y</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.affineRefinement</span>.openCover</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span>.affineCover</span>.pullbackCover</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackHom</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.fst</span></span>)</span></span>)</span>.obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.snd</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L313-L317","name":"AlgebraicGeometry.Scheme.OpenCover.affineRefinement","line":313,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.affineRefinement","doc":"Given any open cover `𝓤`, this is an affine open cover which refines it.\nThe morphism in the category of open covers which proves that this is indeed a refinement, see\n`AlgebraicGeometry.Scheme.OpenCover.fromAffineRefinement`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.affineRefinement\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">affineRefinement</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L306-L307","name":"AlgebraicGeometry.Scheme.openCover_affineOpenCover","line":306,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCover_affineOpenCover","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCover_affineOpenCover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">openCover_affineOpenCover</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.affineOpenCover</span>.openCover</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.affineCover</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L299-L303","name":"AlgebraicGeometry.Scheme.affineOpenCover","line":299,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineOpenCover","doc":"A choice of an affine open cover of a scheme. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineOpenCover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">affineOpenCover</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L290-L294","name":"AlgebraicGeometry.Scheme.AffineOpenCover.openCover","line":290,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.openCover","doc":"The open cover associated to an affine open cover. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.openCover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">openCover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L289-L289","name":"AlgebraicGeometry.Scheme.AffineOpenCover.openCover_f","line":289,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.openCover_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.openCover_f\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">openCover_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.openCover</span>.f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.f</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L289-L289","name":"AlgebraicGeometry.Scheme.AffineOpenCover.openCover_J","line":289,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.openCover_J","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.openCover_J\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">openCover_J</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.openCover</span>.J</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L289-L289","name":"AlgebraicGeometry.Scheme.AffineOpenCover.openCover_map","line":289,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.openCover_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.openCover_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">openCover_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.openCover</span>.map</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.map</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L289-L289","name":"AlgebraicGeometry.Scheme.AffineOpenCover.openCover_obj","line":289,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.openCover_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.openCover_obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">openCover_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝓤 : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">𝓤</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.openCover</span>.obj</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Spec\">AlgebraicGeometry.Spec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝓤</span>.obj</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L282-L282","name":"AlgebraicGeometry.Scheme.AffineOpenCover.IsOpen","line":282,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.IsOpen","doc":"the embedding of subschemes are open immersions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.IsOpen\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">IsOpen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">self</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.map</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L280-L280","name":"AlgebraicGeometry.Scheme.AffineOpenCover.covers","line":280,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.covers","doc":"the subschemes covers `X` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.covers\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">covers</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.f</span> <span class=\"fn\">x</span></span>)</span></span>)</span>.val</span>.base</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L278-L278","name":"AlgebraicGeometry.Scheme.AffineOpenCover.f","line":278,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.f","doc":"given a point of `x : X`, `f x` is the index of the subscheme which contains `x`  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.f\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span> → <span class=\"fn\"><span class=\"fn\">self</span>.J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L276-L276","name":"AlgebraicGeometry.Scheme.AffineOpenCover.map","line":276,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.map","doc":"the embedding of subschemes to `X` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">self</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Spec\">AlgebraicGeometry.Spec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.obj</span> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L274-L274","name":"AlgebraicGeometry.Scheme.AffineOpenCover.obj","line":274,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.obj","doc":"the ring associated to a component of an affine open cover "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.J</span> → <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L272-L272","name":"AlgebraicGeometry.Scheme.AffineOpenCover.J","line":272,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.J","doc":"index set of an affine open cover of a scheme `X` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.J\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">J</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> v</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L270-L270","name":"AlgebraicGeometry.Scheme.AffineOpenCover.mk","line":270,"kind":"ctor","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover.mk\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(obj : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Spec\">AlgebraicGeometry.Spec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span> → <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(covers : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span>)</span>.val</span>.base</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IsOpen : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">J</span>), <span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">x</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#_auto._@.Mathlib.AlgebraicGeometry.Cover.Open._hyg.3041\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.AffineOpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L270-L282","name":"AlgebraicGeometry.Scheme.AffineOpenCover","line":270,"kind":"structure","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover","doc":"An affine open cover of `X` consists of a family of open immersions into `X` from\nspectra of rings.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.AffineOpenCover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">AffineOpenCover</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) (v + 1))</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L255-L264","name":"AlgebraicGeometry.Scheme.OpenCover.inter","line":255,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.inter","doc":"Given open covers `{ Uᵢ }` and `{ Uⱼ }`, we may form the open cover `{ Uᵢ ∩ Uⱼ }`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.inter\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">inter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰₁ : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝒰₂ : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L239-L252","name":"AlgebraicGeometry.Scheme.OpenCover.compactSpace","line":239,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.compactSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.compactSpace\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">compactSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">i</span></span>)</span>.toPresheafedSpace</span></span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L236-L237","name":"AlgebraicGeometry.Scheme.instFintypeJFiniteSubcover","line":236,"kind":"instance","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.instFintypeJFiniteSubcover","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.instFintypeJFiniteSubcover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">instFintypeJFiniteSubcover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.finiteSubcover</span>.J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L217-L234","name":"AlgebraicGeometry.Scheme.OpenCover.finiteSubcover","line":217,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.finiteSubcover","doc":"Every open cover of a quasi-compact scheme can be refined into a finite subcover.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.finiteSubcover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">finiteSubcover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L216-L216","name":"AlgebraicGeometry.Scheme.OpenCover.finiteSubcover_map","line":216,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.finiteSubcover_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.finiteSubcover_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">finiteSubcover_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">⋯</span>.choose</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.finiteSubcover</span>.map</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.f</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L216-L216","name":"AlgebraicGeometry.Scheme.OpenCover.finiteSubcover_obj","line":216,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.finiteSubcover_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.finiteSubcover_obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">finiteSubcover_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">⋯</span>.choose</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.finiteSubcover</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.f</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L197-L212","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCover'","line":197,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover'","doc":"Given an open cover on `X`, we may pull them back along a morphism `f : W ⟶ X` to obtain\nan open cover of `W`. This is similar to `Scheme.OpenCover.pullbackCover`, but here we\ntake `pullback (𝒰.map x) f` instead of `pullback f (𝒰.map x)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover'\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCover'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">W</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L196-L196","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_J","line":196,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_J","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_J\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCover'_J</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover'</span> <span class=\"fn\">f</span></span>)</span>.J</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L196-L196","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_map","line":196,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCover'_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover'</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/HasPullback.html#CategoryTheory.Limits.pullback.snd\">CategoryTheory.Limits.pullback.snd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L196-L196","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_obj","line":196,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCover'_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover'</span> <span class=\"fn\">f</span></span>)</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/HasPullback.html#CategoryTheory.Limits.pullback\">CategoryTheory.Limits.pullback</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L196-L196","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_f","line":196,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover'_f\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCover'_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">W</span>.toPresheafedSpace</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover'</span> <span class=\"fn\">f</span></span>)</span>.f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.val</span>.base</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L190-L191","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackHom_map","line":190,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackHom_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackHom_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackHom_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackHom</span> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L189-L189","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackHom_map_assoc","line":189,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackHom_map_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackHom_map_assoc\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackHom_map_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.J</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackHom</span> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L185-L187","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackHom","line":185,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackHom","doc":"The family of morphisms from the pullback cover to the original cover. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackHom\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L167-L182","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCover","line":167,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover","doc":"Given an open cover on `X`, we may pull them back along a morphism `W ⟶ X` to obtain\nan open cover of `W`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">W</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L166-L166","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCover_J","line":166,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover_J","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover_J\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCover_J</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.J</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L166-L166","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCover_f","line":166,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover_f\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCover_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">W</span>.toPresheafedSpace</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.val</span>.base</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L166-L166","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCover_obj","line":166,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover_obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCover_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/HasPullback.html#CategoryTheory.Limits.pullback\">CategoryTheory.Limits.pullback</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L166-L166","name":"AlgebraicGeometry.Scheme.OpenCover.pullbackCover_map","line":166,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pullbackCover_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pullbackCover_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pullbackCover</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/HasPullback.html#CategoryTheory.Limits.pullback.fst\">CategoryTheory.Limits.pullback.fst</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L155-L162","name":"AlgebraicGeometry.Scheme.OpenCover.add","line":155,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.add","doc":"Adding an open immersion into an open cover gives another open cover. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.add\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L154-L154","name":"AlgebraicGeometry.Scheme.OpenCover.add_map","line":154,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.add_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.add_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">add_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.add</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.rec\">Option.rec</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L154-L154","name":"AlgebraicGeometry.Scheme.OpenCover.add_f","line":154,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.add_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.add_f\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">add_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.add</span> <span class=\"fn\">f</span></span>)</span>.f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L154-L154","name":"AlgebraicGeometry.Scheme.OpenCover.add_obj","line":154,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.add_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.add_obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">add_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.add</span> <span class=\"fn\">f</span></span>)</span>.obj</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.rec\">Option.rec</a> <span class=\"fn\">Y</span> <span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L154-L154","name":"AlgebraicGeometry.Scheme.OpenCover.add_J","line":154,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.add_J","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.add_J\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">add_J</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.add</span> <span class=\"fn\">f</span></span>)</span>.J</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L147-L151","name":"AlgebraicGeometry.Scheme.OpenCover.pushforwardIso","line":147,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pushforwardIso","doc":"The pushforward of an open cover along an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pushforwardIso\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pushforwardIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Y</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L146-L146","name":"AlgebraicGeometry.Scheme.OpenCover.pushforwardIso_map","line":146,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pushforwardIso_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pushforwardIso_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pushforwardIso_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pushforwardIso</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L146-L146","name":"AlgebraicGeometry.Scheme.OpenCover.pushforwardIso_obj","line":146,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pushforwardIso_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pushforwardIso_obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pushforwardIso_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pushforwardIso</span> <span class=\"fn\">f</span></span>)</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L146-L146","name":"AlgebraicGeometry.Scheme.OpenCover.pushforwardIso_J","line":146,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pushforwardIso_J","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.pushforwardIso_J\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">pushforwardIso_J</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.pushforwardIso</span> <span class=\"fn\">f</span></span>)</span>.J</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L130-L142","name":"AlgebraicGeometry.Scheme.OpenCover.copy","line":130,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.copy","doc":"We construct an open cover from another, by providing the needed fields and showing that the\nprovided fields are isomorphic with the original open cover. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.copy\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(obj : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">J</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">J</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₁</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">J</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₂✝</span> <span class=\"fn\">i</span></span>)</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₁</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L129-L129","name":"AlgebraicGeometry.Scheme.OpenCover.copy_J","line":129,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.copy_J","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.copy_J\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">copy_J</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(obj : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">J</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">J</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₁</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">J</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₂✝</span> <span class=\"fn\">i</span></span>)</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₁</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.copy</span> <span class=\"fn\">J</span> <span class=\"fn\">obj</span> <span class=\"fn\">map</span> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂✝</span> <span class=\"fn\">e₂</span></span>)</span>.J</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L129-L129","name":"AlgebraicGeometry.Scheme.OpenCover.copy_obj","line":129,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.copy_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.copy_obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">copy_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(obj : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">J</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">J</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₁</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">J</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₂✝</span> <span class=\"fn\">i</span></span>)</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₁</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">J</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.copy</span> <span class=\"fn\">J</span> <span class=\"fn\">obj</span> <span class=\"fn\">map</span> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂✝</span> <span class=\"fn\">e₂</span></span>)</span>.obj</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L129-L129","name":"AlgebraicGeometry.Scheme.OpenCover.copy_map","line":129,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.copy_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.copy_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">copy_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(obj : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">J</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">J</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₁</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">J</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₂✝</span> <span class=\"fn\">i</span></span>)</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e₁</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.copy</span> <span class=\"fn\">J</span> <span class=\"fn\">obj</span> <span class=\"fn\">map</span> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂✝</span> <span class=\"fn\">e₂</span></span>)</span>.map</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L116-L125","name":"AlgebraicGeometry.Scheme.openCoverOfIsIso","line":116,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso","doc":"An isomorphism `X ⟶ Y` is an open cover of `Y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">openCoverOfIsIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Y</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L115-L115","name":"AlgebraicGeometry.Scheme.openCoverOfIsIso_obj","line":115,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso_obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">openCoverOfIsIso_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#PUnit\">PUnit.{v + 1}</a>     ), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso\">AlgebraicGeometry.Scheme.openCoverOfIsIso</a> <span class=\"fn\">f</span></span>)</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L115-L115","name":"AlgebraicGeometry.Scheme.openCoverOfIsIso_J","line":115,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso_J","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso_J\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">openCoverOfIsIso_J</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso\">AlgebraicGeometry.Scheme.openCoverOfIsIso</a> <span class=\"fn\">f</span></span>)</span>.J</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{v + 1}</a>     </span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L115-L115","name":"AlgebraicGeometry.Scheme.openCoverOfIsIso_map","line":115,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">openCoverOfIsIso_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#PUnit\">PUnit.{v + 1}</a>     ), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.openCoverOfIsIso\">AlgebraicGeometry.Scheme.openCoverOfIsIso</a> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L97-L112","name":"AlgebraicGeometry.Scheme.OpenCover.bind","line":97,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.bind","doc":"Given an open cover `{ Uᵢ }` of `X`, and for each `Uᵢ` an open cover, we may combine these\nopen covers to form an open cover of `X`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.bind\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">x</span></span>)</span>.OpenCover</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L96-L96","name":"AlgebraicGeometry.Scheme.OpenCover.bind_J","line":96,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.bind_J","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.bind_J\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">bind_J</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">x</span></span>)</span>.OpenCover</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.J</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>) × <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.J</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L96-L96","name":"AlgebraicGeometry.Scheme.OpenCover.bind_map","line":96,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.bind_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.bind_map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">bind_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">x</span></span>)</span>.OpenCover</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>) × <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.J</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span></span>)</span>.map</span> <span class=\"fn\"><span class=\"fn\">x</span>.snd</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L96-L96","name":"AlgebraicGeometry.Scheme.OpenCover.bind_obj","line":96,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.bind_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.bind_obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">bind_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.obj</span> <span class=\"fn\">x</span></span>)</span>.OpenCover</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>) × <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.J</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span></span>)</span>.obj</span> <span class=\"fn\"><span class=\"fn\">x</span>.snd</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L90-L92","name":"AlgebraicGeometry.Scheme.OpenCover.iSup_opensRange","line":90,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.iSup_opensRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.iSup_opensRange\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">iSup_opensRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⨆ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>), <span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.Scheme.Hom.opensRange\">AlgebraicGeometry.Scheme.Hom.opensRange</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">i</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L83-L88","name":"AlgebraicGeometry.Scheme.OpenCover.iUnion_range","line":83,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.iUnion_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.iUnion_range\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">iUnion_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(𝒰 : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.J</span>), <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒰</span>.map</span> <span class=\"fn\">i</span></span>)</span>.val</span>.base</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L80-L81","name":"AlgebraicGeometry.Scheme.instInhabitedOpenCover","line":80,"kind":"instance","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.instInhabitedOpenCover","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.instInhabitedOpenCover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">instInhabitedOpenCover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L64-L78","name":"AlgebraicGeometry.Scheme.affineCover","line":64,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineCover","doc":"The affine cover of a scheme. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.affineCover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">affineCover</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L56-L56","name":"AlgebraicGeometry.Scheme.OpenCover.Covers","line":56,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Covers","doc":"**Alias** of `AlgebraicGeometry.Scheme.OpenCover.covers`.\n\n---\n\nthe subschemes covers `X` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.Covers\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">Covers</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.f</span> <span class=\"fn\">x</span></span>)</span></span>)</span>.val</span>.base</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L54-L54","name":"AlgebraicGeometry.Scheme.OpenCover.IsOpen","line":54,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.IsOpen","doc":"the embedding of subschemes are open immersions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.IsOpen\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">IsOpen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">self</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.map</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L52-L52","name":"AlgebraicGeometry.Scheme.OpenCover.covers","line":52,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.covers","doc":"the subschemes covers `X` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.covers\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">covers</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.f</span> <span class=\"fn\">x</span></span>)</span></span>)</span>.val</span>.base</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L50-L50","name":"AlgebraicGeometry.Scheme.OpenCover.f","line":50,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.f","doc":"given a point of `x : X`, `f x` is the index of the subscheme which contains `x`  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.f\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span> → <span class=\"fn\"><span class=\"fn\">self</span>.J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L48-L48","name":"AlgebraicGeometry.Scheme.OpenCover.map","line":48,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.map","doc":"the embedding of subschemes to `X` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.map\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">self</span>.J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.obj</span> <span class=\"fn\">j</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L46-L46","name":"AlgebraicGeometry.Scheme.OpenCover.obj","line":46,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.obj","doc":"the subschemes of an open cover "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.obj\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.J</span> → <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L44-L44","name":"AlgebraicGeometry.Scheme.OpenCover.J","line":44,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.J","doc":"index set of an open cover of a scheme `X` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.J\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">J</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> v</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L42-L42","name":"AlgebraicGeometry.Scheme.OpenCover.mk","line":42,"kind":"ctor","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover.mk\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(obj : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">j</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span> → <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(covers : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPresheafedSpace</span></span></span>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span>)</span>.val</span>.base</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IsOpen : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">J</span>), <span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">AlgebraicGeometry.IsOpenImmersion</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">x</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#_auto._@.Mathlib.AlgebraicGeometry.Cover.Open._hyg.10\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.OpenCover</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicGeometry/Cover/Open.lean#L42-L54","name":"AlgebraicGeometry.Scheme.OpenCover","line":42,"kind":"structure","docLink":"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover","doc":"An open cover of `X` consists of a family of open immersions into `X`,\nand for each `x : X` an open immersion (indexed by `f x`) that covers `x`.\n\nThis is merely a coverage in the Zariski pretopology, and it would be optimal\nif we could reuse the existing API about pretopologies, However, the definitions of sieves and\ngrothendieck topologies uses `Prop`s, so that the actual open sets and immersions are hard to\nobtain. Also, since such a coverage in the pretopology usually contains a proper class of\nimmersions, it is quite hard to glue them, reason about finite covers, etc.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">Scheme</span>.<span class=\"name\">OpenCover</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">AlgebraicGeometry.Scheme</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) (v + 1))</div></div>"}]}