{"name":"Mathlib.AlgebraicTopology.CechNerve","instances":[{"typeNames":["Quiver.Hom"],"name":"CategoryTheory.CechNerveTerminalFrom.uniqueToWideCospanNone","className":"Unique"},{"typeNames":["CategoryTheory.Comma.right"],"name":"CategoryTheory.CechNerveTerminalFrom.hasWidePullback","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["CategoryTheory.Limits.terminal"],"name":"CategoryTheory.CechNerveTerminalFrom.hasWidePullback'","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["CategoryTheory.CechNerveTerminalFrom.wideCospan"],"name":"CategoryTheory.CechNerveTerminalFrom.hasLimit_wideCospan","className":"CategoryTheory.Limits.HasLimit"}],"imports":["Init","Mathlib.AlgebraicTopology.SimplicialObject","Mathlib.CategoryTheory.Comma.Arrow","Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks","Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L407-L414","name":"CategoryTheory.CechNerveTerminalFrom.iso","line":407,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.iso","doc":"Given an object `X : C`, the Čech nerve of the hom to the terminal object `X ⟶ ⊤_ C` is\nnaturally isomorphic to a simplicial object sending `[n]` to `Xⁿ⁺¹` (when `C` is `G-Set`, this is\n`EG`, the universal cover of the classifying space of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow.mk\">CategoryTheory.Arrow.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">X</span></span>)</span></span>)</span>.cechNerve</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.cechNerveTerminalFrom\">CategoryTheory.cechNerveTerminalFrom</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L400-L402","name":"CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_hom_comp_pi","line":400,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_hom_comp_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_hom_comp_pi\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">wideCospan</span>.<span class=\"name\">limitIsoPi_hom_comp_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi\">CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi</a> <span class=\"fn\">ι</span> <span class=\"fn\">X</span></span>)</span>.hom</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">CategoryTheory.Limits.Pi.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.π\">CategoryTheory.Limits.WidePullback.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">X</span></span></span>)</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L399-L399","name":"CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_hom_comp_pi_assoc","line":399,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_hom_comp_pi_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_hom_comp_pi_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">wideCospan</span>.<span class=\"name\">limitIsoPi_hom_comp_pi_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi\">CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi</a> <span class=\"fn\">ι</span> <span class=\"fn\">X</span></span>)</span>.hom</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">CategoryTheory.Limits.Pi.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.π\">CategoryTheory.Limits.WidePullback.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">X</span></span></span>)</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L395-L397","name":"CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_inv_comp_pi","line":395,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_inv_comp_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_inv_comp_pi\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">wideCospan</span>.<span class=\"name\">limitIsoPi_inv_comp_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi\">CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi</a> <span class=\"fn\">ι</span> <span class=\"fn\">X</span></span>)</span>.inv</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.π\">CategoryTheory.Limits.WidePullback.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">X</span></span></span>)</span> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">CategoryTheory.Limits.Pi.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L394-L394","name":"CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_inv_comp_pi_assoc","line":394,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_inv_comp_pi_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi_inv_comp_pi_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">wideCospan</span>.<span class=\"name\">limitIsoPi_inv_comp_pi_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi\">CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi</a> <span class=\"fn\">ι</span> <span class=\"fn\">X</span></span>)</span>.inv</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.π\">CategoryTheory.Limits.WidePullback.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">X</span></span></span>)</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">CategoryTheory.Limits.Pi.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L388-L391","name":"CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi","line":388,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi","doc":"the isomorphism to the product induced by the limit cone `wideCospan ι X` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitIsoPi\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">wideCospan</span>.<span class=\"name\">limitIsoPi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.limit\">CategoryTheory.Limits.limit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan\">CategoryTheory.CechNerveTerminalFrom.wideCospan</a> <span class=\"fn\">ι</span> <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.piObj\">∏ᶜ</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">X</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L384-L384","name":"CategoryTheory.CechNerveTerminalFrom.hasLimit_wideCospan","line":384,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.hasLimit_wideCospan","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.hasLimit_wideCospan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">hasLimit_wideCospan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimit\">CategoryTheory.Limits.HasLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan\">CategoryTheory.CechNerveTerminalFrom.wideCospan</a> <span class=\"fn\">ι</span> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L377-L381","name":"CategoryTheory.CechNerveTerminalFrom.hasWidePullback'","line":377,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.hasWidePullback'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.hasWidePullback'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">hasWidePullback'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal\">⊤_</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">X</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L369-L374","name":"CategoryTheory.CechNerveTerminalFrom.hasWidePullback","line":369,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.hasWidePullback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.hasWidePullback\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">hasWidePullback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow.mk\">CategoryTheory.Arrow.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">X</span></span>)</span></span>)</span>.right</span>\n  <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow.mk\">CategoryTheory.Arrow.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">X</span></span>)</span></span>)</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt;\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow.mk\">CategoryTheory.Arrow.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">X</span></span>)</span></span>)</span>.hom</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L347-L367","name":"CategoryTheory.CechNerveTerminalFrom.wideCospan.limitCone","line":347,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitCone","doc":"The product `Xᶥ` is the vertex of a limit cone on `wideCospan ι X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan.limitCone\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">wideCospan</span>.<span class=\"name\">limitCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.LimitCone\">CategoryTheory.Limits.LimitCone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan\">CategoryTheory.CechNerveTerminalFrom.wideCospan</a> <span class=\"fn\">ι</span> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L340-L342","name":"CategoryTheory.CechNerveTerminalFrom.uniqueToWideCospanNone","line":340,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.uniqueToWideCospanNone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.uniqueToWideCospanNone\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">uniqueToWideCospanNone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan\">CategoryTheory.CechNerveTerminalFrom.wideCospan</a> <span class=\"fn\">ι</span> <span class=\"fn\">X</span></span>)</span>.obj</span> <span class=\"fn\">none</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L337-L338","name":"CategoryTheory.CechNerveTerminalFrom.wideCospan","line":337,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan","doc":"The diagram `Option ι ⥤ C` sending `none` to the terminal object and `some j` to `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CechNerveTerminalFrom.wideCospan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CechNerveTerminalFrom</span>.<span class=\"name\">wideCospan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.HasTerminal\">CategoryTheory.Limits.HasTerminal</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullbackShape\">CategoryTheory.Limits.WidePullbackShape</a> <span class=\"fn\">ι</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L327-L330","name":"CategoryTheory.cechNerveTerminalFrom","line":327,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.cechNerveTerminalFrom","doc":"Given an object `X : C`, the natural simplicial object sending `[n]` to `Xⁿ⁺¹`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.cechNerveTerminalFrom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">cechNerveTerminalFrom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteProducts\">CategoryTheory.Limits.HasFiniteProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L321-L322","name":"CategoryTheory.CosimplicialObject.cechConerveAdjunction","line":321,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerveAdjunction","doc":"The augmented Čech conerve construction is left adjoint to the `toArrow` functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerveAdjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">cechConerveAdjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.augmentedCechConerve</span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\">CategoryTheory.CosimplicialObject.Augmented.toArrow</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L289-L318","name":"CategoryTheory.CosimplicialObject.cechConerveEquiv","line":289,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerveEquiv","doc":"A helper function used in defining the Čech conerve adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerveEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">cechConerveEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechConerve</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L288-L288","name":"CategoryTheory.CosimplicialObject.cechConerveEquiv_apply","line":288,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerveEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerveEquiv_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">cechConerveEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechConerve</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerveEquiv\">CategoryTheory.CosimplicialObject.cechConerveEquiv</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceLeftToRight\">CategoryTheory.CosimplicialObject.equivalenceLeftToRight</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L288-L288","name":"CategoryTheory.CosimplicialObject.cechConerveEquiv_symm_apply","line":288,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerveEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerveEquiv_symm_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">cechConerveEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerveEquiv\">CategoryTheory.CosimplicialObject.cechConerveEquiv</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span></span>)</span>.symm</span> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceRightToLeft\">CategoryTheory.CosimplicialObject.equivalenceRightToLeft</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L260-L285","name":"CategoryTheory.CosimplicialObject.equivalenceRightToLeft","line":260,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceRightToLeft","doc":"A helper function used in defining the Čech conerve adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceRightToLeft\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">equivalenceRightToLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechConerve</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L259-L259","name":"CategoryTheory.CosimplicialObject.equivalenceRightToLeft_right_app","line":259,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceRightToLeft_right_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceRightToLeft_right_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">equivalenceRightToLeft_right_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceRightToLeft\">CategoryTheory.CosimplicialObject.equivalenceRightToLeft</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">G</span></span>)</span>.right</span>.app</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePushout.desc\">CategoryTheory.Limits.WidePushout.desc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">G</span>.left</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.hom</span>.app</span> <span class=\"fn\">x</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">G</span>.right</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.right</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>)</span>.const</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span>)</span>\n    <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L259-L259","name":"CategoryTheory.CosimplicialObject.equivalenceRightToLeft_left","line":259,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceRightToLeft_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceRightToLeft_left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">equivalenceRightToLeft_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceRightToLeft\">CategoryTheory.CosimplicialObject.equivalenceRightToLeft</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">G</span></span>)</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span>.left</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L248-L256","name":"CategoryTheory.CosimplicialObject.equivalenceLeftToRight","line":248,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceLeftToRight","doc":"A helper function used in defining the Čech conerve adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceLeftToRight\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">equivalenceLeftToRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechConerve</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L247-L247","name":"CategoryTheory.CosimplicialObject.equivalenceLeftToRight_left","line":247,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceLeftToRight_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceLeftToRight_left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">equivalenceLeftToRight_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechConerve</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceLeftToRight\">CategoryTheory.CosimplicialObject.equivalenceLeftToRight</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">G</span></span>)</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span>.left</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L247-L247","name":"CategoryTheory.CosimplicialObject.equivalenceLeftToRight_right","line":247,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceLeftToRight_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceLeftToRight_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">equivalenceLeftToRight_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechConerve</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.equivalenceLeftToRight\">CategoryTheory.CosimplicialObject.equivalenceLeftToRight</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">G</span></span>)</span>.right</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePushout.ι\">CategoryTheory.Limits.WidePushout.ι</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">F</span>.hom</span></span>)</span> <span class=\"fn\">0</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.right</span>.app</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L242-L244","name":"CategoryTheory.CosimplicialObject.augmentedCechConerve","line":242,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.augmentedCechConerve","doc":"The augmented Čech conerve construction, as a functor from `Arrow C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.augmentedCechConerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">augmentedCechConerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L241-L241","name":"CategoryTheory.CosimplicialObject.augmentedCechConerve_map","line":241,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.augmentedCechConerve_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.augmentedCechConerve_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">augmentedCechConerve_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>} (<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.augmentedCechConerve</span>.map</span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechConerve\">CategoryTheory.Arrow.mapAugmentedCechConerve</a> <span class=\"fn\">F</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L241-L241","name":"CategoryTheory.CosimplicialObject.augmentedCechConerve_obj","line":241,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.augmentedCechConerve_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.augmentedCechConerve_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">augmentedCechConerve_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.augmentedCechConerve</span>.obj</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.augmentedCechConerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L236-L238","name":"CategoryTheory.CosimplicialObject.cechConerve","line":236,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerve","doc":"The Čech conerve construction, as a functor from `Arrow C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">cechConerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject\">CategoryTheory.CosimplicialObject</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L235-L235","name":"CategoryTheory.CosimplicialObject.cechConerve_obj","line":235,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerve_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerve_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">cechConerve_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.cechConerve</span>.obj</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.cechConerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L235-L235","name":"CategoryTheory.CosimplicialObject.cechConerve_map","line":235,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerve_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.CosimplicialObject.cechConerve_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">CosimplicialObject</span>.<span class=\"name\">cechConerve_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>} (<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.CosimplicialObject.cechConerve</span>.map</span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechConerve\">CategoryTheory.Arrow.mapCechConerve</a> <span class=\"fn\">F</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L218-L223","name":"CategoryTheory.Arrow.mapAugmentedCechConerve","line":218,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechConerve","doc":"The morphism between augmented Čech conerves associated to a morphism of arrows. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechConerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">mapAugmentedCechConerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">g</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.augmentedCechConerve</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">g</span>.augmentedCechConerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L217-L217","name":"CategoryTheory.Arrow.mapAugmentedCechConerve_left","line":217,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechConerve_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechConerve_left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">mapAugmentedCechConerve_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">g</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechConerve\">CategoryTheory.Arrow.mapAugmentedCechConerve</a> <span class=\"fn\">F</span></span>)</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.left</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L217-L217","name":"CategoryTheory.Arrow.mapAugmentedCechConerve_right","line":217,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechConerve_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechConerve_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">mapAugmentedCechConerve_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">g</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechConerve\">CategoryTheory.Arrow.mapAugmentedCechConerve</a> <span class=\"fn\">F</span></span>)</span>.right</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechConerve\">CategoryTheory.Arrow.mapCechConerve</a> <span class=\"fn\">F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L210-L214","name":"CategoryTheory.Arrow.augmentedCechConerve","line":210,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechConerve","doc":"The augmented Čech conerve associated to an arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechConerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">augmentedCechConerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject.Augmented\">CategoryTheory.CosimplicialObject.Augmented</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L209-L209","name":"CategoryTheory.Arrow.augmentedCechConerve_left","line":209,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechConerve_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechConerve_left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">augmentedCechConerve_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.augmentedCechConerve</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L209-L209","name":"CategoryTheory.Arrow.augmentedCechConerve_right","line":209,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechConerve_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechConerve_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">augmentedCechConerve_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.augmentedCechConerve</span>.right</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.cechConerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L209-L209","name":"CategoryTheory.Arrow.augmentedCechConerve_hom_app","line":209,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechConerve_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechConerve_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">augmentedCechConerve_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.augmentedCechConerve</span>.hom</span>.app</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePushout.head\">CategoryTheory.Limits.WidePushout.head</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L200-L206","name":"CategoryTheory.Arrow.mapCechConerve","line":200,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechConerve","doc":"The morphism between Čech conerves associated to a morphism of arrows. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechConerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">mapCechConerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">g</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.cechConerve</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">g</span>.cechConerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L199-L199","name":"CategoryTheory.Arrow.mapCechConerve_app","line":199,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechConerve_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechConerve_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">mapCechConerve_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">g</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechConerve\">CategoryTheory.Arrow.mapCechConerve</a> <span class=\"fn\">F</span></span>)</span>.app</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePushout.desc\">CategoryTheory.Limits.WidePushout.desc</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">F</span>.left</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePushout.head\">CategoryTheory.Limits.WidePushout.head</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">F</span>.right</span>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePushout.ι\">CategoryTheory.Limits.WidePushout.ι</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span>)</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span>\n    <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L191-L196","name":"CategoryTheory.Arrow.cechConerve","line":191,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechConerve","doc":"The Čech conerve associated to an arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechConerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">cechConerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.CosimplicialObject\">CategoryTheory.CosimplicialObject</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L190-L190","name":"CategoryTheory.Arrow.cechConerve_map","line":190,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechConerve_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechConerve_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">cechConerve_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.cechConerve</span>.map</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePushout.desc\">CategoryTheory.Limits.WidePushout.desc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePushout.head\">CategoryTheory.Limits.WidePushout.head</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePushout.ι\">CategoryTheory.Limits.WidePushout.ι</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span>\n    <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L190-L190","name":"CategoryTheory.Arrow.cechConerve_obj","line":190,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechConerve_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechConerve_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">cechConerve_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePushout\">CategoryTheory.Limits.HasWidePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.cechConerve</span>.obj</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.widePushout\">CategoryTheory.Limits.widePushout</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L167-L178","name":"CategoryTheory.SimplicialObject.cechNerveAdjunction","line":167,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerveAdjunction","doc":"The augmented Čech nerve construction is right adjoint to the `toArrow` functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerveAdjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">cechNerveAdjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.Augmented.toArrow</span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\">CategoryTheory.SimplicialObject.augmentedCechNerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L137-L164","name":"CategoryTheory.SimplicialObject.cechNerveEquiv","line":137,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerveEquiv","doc":"A helper function used in defining the Čech adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerveEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">cechNerveEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">F</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechNerve</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L136-L136","name":"CategoryTheory.SimplicialObject.cechNerveEquiv_symm_apply","line":136,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerveEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerveEquiv_symm_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">cechNerveEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechNerve</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerveEquiv\">CategoryTheory.SimplicialObject.cechNerveEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">F</span></span>)</span>.symm</span> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceRightToLeft\">CategoryTheory.SimplicialObject.equivalenceRightToLeft</a> <span class=\"fn\">X</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L136-L136","name":"CategoryTheory.SimplicialObject.cechNerveEquiv_apply","line":136,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerveEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerveEquiv_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">cechNerveEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerveEquiv\">CategoryTheory.SimplicialObject.cechNerveEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceLeftToRight\">CategoryTheory.SimplicialObject.equivalenceLeftToRight</a> <span class=\"fn\">X</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L115-L133","name":"CategoryTheory.SimplicialObject.equivalenceLeftToRight","line":115,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceLeftToRight","doc":"A helper function used in defining the Čech adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceLeftToRight\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">equivalenceLeftToRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechNerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L114-L114","name":"CategoryTheory.SimplicialObject.equivalenceLeftToRight_left_app","line":114,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceLeftToRight_left_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceLeftToRight_left_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">equivalenceLeftToRight_left_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceLeftToRight\">CategoryTheory.SimplicialObject.equivalenceLeftToRight</a> <span class=\"fn\">X</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span>.left</span>.app</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.lift\">CategoryTheory.Limits.WidePullback.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.hom</span>.app</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\"><span class=\"fn\">G</span>.right</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">x</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.left</span>.map</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>)</span>.const</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span>)</span>.op</span></span>)</span> <span class=\"fn\"><span class=\"fn\">G</span>.left</span></span></span>)</span>\n    <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L114-L114","name":"CategoryTheory.SimplicialObject.equivalenceLeftToRight_right","line":114,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceLeftToRight_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceLeftToRight_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">equivalenceLeftToRight_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceLeftToRight\">CategoryTheory.SimplicialObject.equivalenceLeftToRight</a> <span class=\"fn\">X</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span>.right</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span>.right</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L104-L111","name":"CategoryTheory.SimplicialObject.equivalenceRightToLeft","line":104,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceRightToLeft","doc":"A helper function used in defining the Čech adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceRightToLeft\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">equivalenceRightToLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechNerve</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.Augmented.toArrow</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L103-L103","name":"CategoryTheory.SimplicialObject.equivalenceRightToLeft_left","line":103,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceRightToLeft_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceRightToLeft_left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">equivalenceRightToLeft_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechNerve</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceRightToLeft\">CategoryTheory.SimplicialObject.equivalenceRightToLeft</a> <span class=\"fn\">X</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.left</span>.app</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.π\">CategoryTheory.Limits.WidePullback.π</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>)</span></span>)</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">F</span>.hom</span></span>)</span> <span class=\"fn\">0</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L103-L103","name":"CategoryTheory.SimplicialObject.equivalenceRightToLeft_right","line":103,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceRightToLeft_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceRightToLeft_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">equivalenceRightToLeft_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.augmentedCechNerve</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.equivalenceRightToLeft\">CategoryTheory.SimplicialObject.equivalenceRightToLeft</a> <span class=\"fn\">X</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span>.right</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span>.right</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L98-L100","name":"CategoryTheory.SimplicialObject.augmentedCechNerve","line":98,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve","doc":"The augmented Čech nerve construction, as a functor from `Arrow C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">augmentedCechNerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L97-L97","name":"CategoryTheory.SimplicialObject.augmentedCechNerve_map_left_app","line":97,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_map_left_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_map_left_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">augmentedCechNerve_map_left_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>} (<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) (<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.augmentedCechNerve</span>.map</span> <span class=\"fn\">F</span></span>)</span>.left</span>.app</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.lift\">CategoryTheory.Limits.WidePullback.lift</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.base\">CategoryTheory.Limits.WidePullback.base</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">X</span>.hom</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">F</span>.right</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.π\">CategoryTheory.Limits.WidePullback.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">X</span>.hom</span></span>)</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\"><span class=\"fn\">F</span>.left</span></span></span>)</span>\n      <span class=\"fn\">⋯</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L97-L97","name":"CategoryTheory.SimplicialObject.augmentedCechNerve_obj_right","line":97,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_obj_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_obj_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">augmentedCechNerve_obj_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.augmentedCechNerve</span>.obj</span> <span class=\"fn\">f</span></span>)</span>.right</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L97-L97","name":"CategoryTheory.SimplicialObject.augmentedCechNerve_obj_left_obj","line":97,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_obj_left_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_obj_left_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">augmentedCechNerve_obj_left_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.augmentedCechNerve</span>.obj</span> <span class=\"fn\">f</span></span>)</span>.left</span>.obj</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.widePullback\">CategoryTheory.Limits.widePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span>\n    <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L97-L97","name":"CategoryTheory.SimplicialObject.augmentedCechNerve_obj_left_map","line":97,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_obj_left_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_obj_left_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">augmentedCechNerve_obj_left_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>} (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.augmentedCechNerve</span>.obj</span> <span class=\"fn\">f</span></span>)</span>.left</span>.map</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.lift\">CategoryTheory.Limits.WidePullback.lift</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.base\">CategoryTheory.Limits.WidePullback.base</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">Y</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.π\">CategoryTheory.Limits.WidePullback.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span>)</span>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\"><span class=\"fn\">g</span>.unop</span></span>)</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span>\n      <span class=\"fn\">⋯</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L97-L97","name":"CategoryTheory.SimplicialObject.augmentedCechNerve_obj_hom_app","line":97,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_obj_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_obj_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">augmentedCechNerve_obj_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.augmentedCechNerve</span>.obj</span> <span class=\"fn\">f</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.base\">CategoryTheory.Limits.WidePullback.base</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">i</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L97-L97","name":"CategoryTheory.SimplicialObject.augmentedCechNerve_map_right","line":97,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_map_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.augmentedCechNerve_map_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">augmentedCechNerve_map_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>} (<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.augmentedCechNerve</span>.map</span> <span class=\"fn\">F</span></span>)</span>.right</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.right</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L92-L94","name":"CategoryTheory.SimplicialObject.cechNerve","line":92,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerve","doc":"The Čech nerve construction, as a functor from `Arrow C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">cechNerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L91-L91","name":"CategoryTheory.SimplicialObject.cechNerve_map","line":91,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerve_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerve_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">cechNerve_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>} (<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.cechNerve</span>.map</span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechNerve\">CategoryTheory.Arrow.mapCechNerve</a> <span class=\"fn\">F</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L91-L91","name":"CategoryTheory.SimplicialObject.cechNerve_obj","line":91,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerve_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.SimplicialObject.cechNerve_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">SimplicialObject</span>.<span class=\"name\">cechNerve_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.cechNerve</span>.obj</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.cechNerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L74-L79","name":"CategoryTheory.Arrow.mapAugmentedCechNerve","line":74,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechNerve","doc":"The morphism between augmented Čech nerve associated to a morphism of arrows. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechNerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">mapAugmentedCechNerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">g</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.augmentedCechNerve</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">g</span>.augmentedCechNerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L73-L73","name":"CategoryTheory.Arrow.mapAugmentedCechNerve_right","line":73,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechNerve_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechNerve_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">mapAugmentedCechNerve_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">g</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechNerve\">CategoryTheory.Arrow.mapAugmentedCechNerve</a> <span class=\"fn\">F</span></span>)</span>.right</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.right</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L73-L73","name":"CategoryTheory.Arrow.mapAugmentedCechNerve_left","line":73,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechNerve_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechNerve_left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">mapAugmentedCechNerve_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">g</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapAugmentedCechNerve\">CategoryTheory.Arrow.mapAugmentedCechNerve</a> <span class=\"fn\">F</span></span>)</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechNerve\">CategoryTheory.Arrow.mapCechNerve</a> <span class=\"fn\">F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L67-L70","name":"CategoryTheory.Arrow.augmentedCechNerve","line":67,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechNerve","doc":"The augmented Čech nerve associated to an arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechNerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">augmentedCechNerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L66-L66","name":"CategoryTheory.Arrow.augmentedCechNerve_hom_app","line":66,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechNerve_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechNerve_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">augmentedCechNerve_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.augmentedCechNerve</span>.hom</span>.app</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.base\">CategoryTheory.Limits.WidePullback.base</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">i</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L66-L66","name":"CategoryTheory.Arrow.augmentedCechNerve_right","line":66,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechNerve_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechNerve_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">augmentedCechNerve_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.augmentedCechNerve</span>.right</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L66-L66","name":"CategoryTheory.Arrow.augmentedCechNerve_left","line":66,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechNerve_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechNerve_left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">augmentedCechNerve_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.augmentedCechNerve</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.cechNerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L57-L63","name":"CategoryTheory.Arrow.mapCechNerve","line":57,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechNerve","doc":"The morphism between Čech nerves associated to a morphism of arrows. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechNerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">mapCechNerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">g</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.cechNerve</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">g</span>.cechNerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L56-L56","name":"CategoryTheory.Arrow.mapCechNerve_app","line":56,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechNerve_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechNerve_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">mapCechNerve_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">g</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.mapCechNerve\">CategoryTheory.Arrow.mapCechNerve</a> <span class=\"fn\">F</span></span>)</span>.app</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.lift\">CategoryTheory.Limits.WidePullback.lift</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.base\">CategoryTheory.Limits.WidePullback.base</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">F</span>.right</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.π\">CategoryTheory.Limits.WidePullback.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span>)</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\"><span class=\"fn\">F</span>.left</span></span></span>)</span>\n    <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L50-L53","name":"CategoryTheory.Arrow.cechNerve","line":50,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechNerve","doc":"The Čech nerve associated to an arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechNerve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">cechNerve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L49-L49","name":"CategoryTheory.Arrow.cechNerve_map","line":49,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechNerve_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechNerve_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">cechNerve_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>} (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.cechNerve</span>.map</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.lift\">CategoryTheory.Limits.WidePullback.lift</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.base\">CategoryTheory.Limits.WidePullback.base</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">Y</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.WidePullback.π\">CategoryTheory.Limits.WidePullback.π</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span>)</span>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\"><span class=\"fn\">g</span>.unop</span></span>)</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span>\n      <span class=\"fn\">⋯</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/CechNerve.lean#L49-L49","name":"CategoryTheory.Arrow.cechNerve_obj","line":49,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechNerve_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.cechNerve_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Arrow</span>.<span class=\"name\">cechNerve_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">CategoryTheory.Arrow</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.HasWidePullback\">CategoryTheory.Limits.HasWidePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.cechNerve</span>.obj</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WidePullbacks.html#CategoryTheory.Limits.widePullback\">CategoryTheory.Limits.widePullback</a> <span class=\"fn\"><span class=\"fn\">f</span>.right</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span>\n    <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></span></div></div>"}]}