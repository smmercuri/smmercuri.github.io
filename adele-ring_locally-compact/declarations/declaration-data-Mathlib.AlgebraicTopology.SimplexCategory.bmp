{"name":"Mathlib.AlgebraicTopology.SimplexCategory","instances":[{"typeNames":["SimplexCategory"],"name":"SimplexCategory.smallCategory","className":"CategoryTheory.Category"},{"typeNames":["SimplexCategory.skeletalFunctor"],"name":"SimplexCategory.SkeletalFunctor.instFullSimplexCategorySmallCategoryNonemptyFinLinOrdInstNonemptyFinLinOrdLargeCategorySkeletalFunctor","className":"CategoryTheory.Full"},{"typeNames":["SimplexCategory.skeletalFunctor"],"name":"SimplexCategory.SkeletalFunctor.instFaithfulSimplexCategorySmallCategoryNonemptyFinLinOrdInstNonemptyFinLinOrdLargeCategorySkeletalFunctor","className":"CategoryTheory.Faithful"},{"typeNames":["SimplexCategory.skeletalFunctor"],"name":"SimplexCategory.SkeletalFunctor.instEssSurjSimplexCategoryNonemptyFinLinOrdSmallCategoryInstNonemptyFinLinOrdLargeCategorySkeletalFunctor","className":"CategoryTheory.EssSurj"},{"typeNames":["SimplexCategory.skeletalFunctor"],"name":"SimplexCategory.SkeletalFunctor.isEquivalence","className":"CategoryTheory.IsEquivalence"},{"typeNames":["SimplexCategory.Truncated"],"name":"SimplexCategory.instSmallCategoryTruncated","className":"CategoryTheory.Category"},{"typeNames":["SimplexCategory.Truncated"],"name":"SimplexCategory.Truncated.instInhabitedTruncated","className":"Inhabited"},{"typeNames":["SimplexCategory.Truncated.inclusion"],"name":"SimplexCategory.Truncated.instFullTruncatedInstSmallCategoryTruncatedSimplexCategorySmallCategoryInclusion","className":"CategoryTheory.Full"},{"typeNames":["SimplexCategory.Truncated.inclusion"],"name":"SimplexCategory.Truncated.instFaithfulTruncatedInstSmallCategoryTruncatedSimplexCategorySmallCategoryInclusion","className":"CategoryTheory.Faithful"},{"typeNames":["SimplexCategory"],"name":"SimplexCategory.instConcreteCategorySimplexCategorySmallCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["SimplexCategory.δ"],"name":"SimplexCategory.instMonoSimplexCategorySmallCategoryMkHAddNatInstHAddInstAddNatOfNatInstOfNatNatδ","className":"CategoryTheory.Mono"},{"typeNames":["SimplexCategory.σ"],"name":"SimplexCategory.instEpiSimplexCategorySmallCategoryMkHAddNatInstHAddInstAddNatOfNatInstOfNatNatσ","className":"CategoryTheory.Epi"},{"typeNames":["CategoryTheory.forget"],"name":"SimplexCategory.instReflectsIsomorphismsSimplexCategorySmallCategoryTypeTypesForgetInstConcreteCategorySimplexCategorySmallCategory","className":"CategoryTheory.ReflectsIsomorphisms"},{"typeNames":["SimplexCategory"],"name":"SimplexCategory.instSplitEpiCategorySimplexCategorySmallCategory","className":"CategoryTheory.SplitEpiCategory"},{"typeNames":["SimplexCategory"],"name":"SimplexCategory.instHasStrongEpiMonoFactorisationsSimplexCategorySmallCategory","className":"CategoryTheory.Limits.HasStrongEpiMonoFactorisations"},{"typeNames":["SimplexCategory"],"name":"SimplexCategory.instHasStrongEpiImagesSimplexCategorySmallCategoryHasImages_of_hasStrongEpiMonoFactorisationsInstHasStrongEpiMonoFactorisationsSimplexCategorySmallCategory","className":"CategoryTheory.Limits.HasStrongEpiImages"},{"typeNames":["CategoryTheory.Limits.factorThruImage"],"name":"SimplexCategory.instEpiSimplexCategorySmallCategoryImageHas_imageHasImages_of_hasStrongEpiMonoFactorisationsInstHasStrongEpiMonoFactorisationsSimplexCategorySmallCategoryFactorThruImage","className":"CategoryTheory.Epi"}],"imports":["Init","Mathlib.Tactic.Linarith","Mathlib.CategoryTheory.Skeletal","Mathlib.Data.Fintype.Sort","Mathlib.Order.Category.NonemptyFinLinOrd","Mathlib.CategoryTheory.Functor.ReflectsIso"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L876-L879","name":"SimplexCategory.toCat","line":876,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.toCat","doc":"This functor `SimplexCategory ⥤ Cat` sends `[n]` (for `n : ℕ`)\nto the category attached to the ordered set `{0, 1, ..., n}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.toCat\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">toCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L875-L875","name":"SimplexCategory.toCat_obj","line":875,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.toCat_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.toCat_obj\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">toCat_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.toCat\">SimplexCategory.toCat</a>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">CategoryTheory.Cat.of</a>\n    <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a> <a href=\"./Mathlib/Order/Category/Preord.html#Preord\">Preord</a></span>)</span>.obj</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/Lat.html#Lat\">Lat</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></span>)</span>.obj</span>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a> <a href=\"./Mathlib/Order/Category/Lat.html#Lat\">Lat</a></span>)</span>.obj</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/NonemptyFinLinOrd.html#NonemptyFinLinOrd\">NonemptyFinLinOrd</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a></span>)</span>.obj</span>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/NonemptyFinLinOrd.html#NonemptyFinLinOrd.of\">NonemptyFinLinOrd.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L875-L875","name":"SimplexCategory.toCat_map","line":875,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.toCat_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.toCat_map\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">toCat_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.toCat\">SimplexCategory.toCat</a>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#Monotone.functor\">Monotone.functor</a> <span class=\"fn\">⋯</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L866-L868","name":"SimplexCategory.factorThruImage_eq","line":866,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.factorThruImage_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.factorThruImage_eq\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">factorThruImage_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ'' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ''</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image\">CategoryTheory.Limits.image</a> <span class=\"fn\">φ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">e</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image\">CategoryTheory.Limits.image</a> <span class=\"fn\">φ</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ''</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">i</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fac : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">e</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.factorThruImage\">CategoryTheory.Limits.factorThruImage</a> <span class=\"fn\">φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L859-L863","name":"SimplexCategory.image_ι_eq","line":859,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.image_ι_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.image_ι_eq\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">image_ι_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ'' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ''</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image\">CategoryTheory.Limits.image</a> <span class=\"fn\">φ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">e</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image\">CategoryTheory.Limits.image</a> <span class=\"fn\">φ</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ''</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">i</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fac : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">e</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image.ι\">CategoryTheory.Limits.image.ι</a> <span class=\"fn\">φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L849-L856","name":"SimplexCategory.image_eq","line":849,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.image_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.image_eq\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">image_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ'' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ''</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">e</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\">Δ'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ''</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">i</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fac : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">e</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image\">CategoryTheory.Limits.image</a> <span class=\"fn\">φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Δ'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L846-L847","name":"SimplexCategory.instEpiSimplexCategorySmallCategoryImageHas_imageHasImages_of_hasStrongEpiMonoFactorisationsInstHasStrongEpiMonoFactorisationsSimplexCategorySmallCategoryFactorThruImage","line":846,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instEpiSimplexCategorySmallCategoryImageHas_imageHasImages_of_hasStrongEpiMonoFactorisationsInstHasStrongEpiMonoFactorisationsSimplexCategorySmallCategoryFactorThruImage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instEpiSimplexCategorySmallCategoryImageHas_imageHasImages_of_hasStrongEpiMonoFactorisationsInstHasStrongEpiMonoFactorisationsSimplexCategorySmallCategoryFactorThruImage\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">instEpiSimplexCategorySmallCategoryImageHas_imageHasImages_of_hasStrongEpiMonoFactorisationsInstHasStrongEpiMonoFactorisationsSimplexCategorySmallCategoryFactorThruImage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Δ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Δ' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(θ : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.factorThruImage\">CategoryTheory.Limits.factorThruImage</a> <span class=\"fn\">θ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L843-L844","name":"SimplexCategory.instHasStrongEpiImagesSimplexCategorySmallCategoryHasImages_of_hasStrongEpiMonoFactorisationsInstHasStrongEpiMonoFactorisationsSimplexCategorySmallCategory","line":843,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instHasStrongEpiImagesSimplexCategorySmallCategoryHasImages_of_hasStrongEpiMonoFactorisationsInstHasStrongEpiMonoFactorisationsSimplexCategorySmallCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instHasStrongEpiImagesSimplexCategorySmallCategoryHasImages_of_hasStrongEpiMonoFactorisationsInstHasStrongEpiMonoFactorisationsSimplexCategorySmallCategory\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">instHasStrongEpiImagesSimplexCategorySmallCategoryHasImages_of_hasStrongEpiMonoFactorisationsInstHasStrongEpiMonoFactorisationsSimplexCategorySmallCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasStrongEpiImages\">CategoryTheory.Limits.HasStrongEpiImages</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L839-L841","name":"SimplexCategory.instHasStrongEpiMonoFactorisationsSimplexCategorySmallCategory","line":839,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instHasStrongEpiMonoFactorisationsSimplexCategorySmallCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instHasStrongEpiMonoFactorisationsSimplexCategorySmallCategory\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">instHasStrongEpiMonoFactorisationsSimplexCategorySmallCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasStrongEpiMonoFactorisations\">CategoryTheory.Limits.HasStrongEpiMonoFactorisations</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L836-L837","name":"SimplexCategory.instSplitEpiCategorySimplexCategorySmallCategory","line":836,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instSplitEpiCategorySimplexCategorySmallCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instSplitEpiCategorySimplexCategorySmallCategory\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">instSplitEpiCategorySimplexCategorySmallCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EpiMono.html#CategoryTheory.SplitEpiCategory\">CategoryTheory.SplitEpiCategory</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L828-L833","name":"SimplexCategory.len_lt_of_mono","line":828,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len_lt_of_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len_lt_of_mono\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">len_lt_of_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">Δ'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hi : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">i</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi' : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">Δ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">Δ'</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">Δ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L816-L825","name":"SimplexCategory.eq_δ_of_mono","line":816,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_δ_of_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_δ_of_mono\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">eq_δ_of_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">θ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\">θ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L804-L813","name":"SimplexCategory.eq_σ_of_epi","line":804,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_σ_of_epi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_σ_of_epi\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">eq_σ_of_epi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">θ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\">θ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L793-L801","name":"SimplexCategory.eq_id_of_epi","line":793,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_id_of_epi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_id_of_epi\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">eq_id_of_epi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">i</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L783-L790","name":"SimplexCategory.eq_id_of_mono","line":783,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_id_of_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_id_of_mono\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">eq_id_of_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">i</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L775-L780","name":"SimplexCategory.eq_comp_δ_of_not_surjective","line":775,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_comp_δ_of_not_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_comp_δ_of_not_surjective\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">eq_comp_δ_of_not_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(θ : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hθ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">θ</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>) (θ' : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span></span>), <span class=\"fn\"><span class=\"fn\">θ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">θ'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L743-L772","name":"SimplexCategory.eq_comp_δ_of_not_surjective'","line":743,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_comp_δ_of_not_surjective'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_comp_δ_of_not_surjective'\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">eq_comp_δ_of_not_surjective'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(θ : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">Δ</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">θ</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (θ' : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span></span>), <span class=\"fn\"><span class=\"fn\">θ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">θ'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L719-L740","name":"SimplexCategory.eq_σ_comp_of_not_injective","line":719,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_σ_comp_of_not_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_σ_comp_of_not_injective\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">eq_σ_comp_of_not_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hθ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">θ</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) (θ' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>), <span class=\"fn\"><span class=\"fn\">θ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">θ'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L676-L716","name":"SimplexCategory.eq_σ_comp_of_not_injective'","line":676,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_σ_comp_of_not_injective'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_σ_comp_of_not_injective'\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">eq_σ_comp_of_not_injective'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">θ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">θ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (θ' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>), <span class=\"fn\"><span class=\"fn\">θ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">θ'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L672-L673","name":"SimplexCategory.eq_id_of_isIso","line":672,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_id_of_isIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.eq_id_of_isIso\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">eq_id_of_isIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L659-L669","name":"SimplexCategory.iso_eq_iso_refl","line":659,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.iso_eq_iso_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.iso_eq_iso_refl\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">iso_eq_iso_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L648-L656","name":"SimplexCategory.orderIsoOfIso","line":648,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.orderIsoOfIso","doc":"An isomorphism in `SimplexCategory` induces an `OrderIso`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.orderIsoOfIso\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">orderIsoOfIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L640-L643","name":"SimplexCategory.isIso_of_bijective","line":640,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.isIso_of_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.isIso_of_bijective\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">isIso_of_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span>)</span>.toFun</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L616-L638","name":"SimplexCategory.instReflectsIsomorphismsSimplexCategorySmallCategoryTypeTypesForgetInstConcreteCategorySimplexCategorySmallCategory","line":616,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instReflectsIsomorphismsSimplexCategorySmallCategoryTypeTypesForgetInstConcreteCategorySimplexCategorySmallCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instReflectsIsomorphismsSimplexCategorySmallCategoryTypeTypesForgetInstConcreteCategorySimplexCategorySmallCategory\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">instReflectsIsomorphismsSimplexCategorySmallCategoryTypeTypesForgetInstConcreteCategorySimplexCategorySmallCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/ReflectsIso.html#CategoryTheory.ReflectsIsomorphisms\">CategoryTheory.ReflectsIsomorphisms</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L598-L614","name":"SimplexCategory.instEpiSimplexCategorySmallCategoryMkHAddNatInstHAddInstAddNatOfNatInstOfNatNatσ","line":598,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instEpiSimplexCategorySmallCategoryMkHAddNatInstHAddInstAddNatOfNatInstOfNatNatσ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instEpiSimplexCategorySmallCategoryMkHAddNatInstHAddInstAddNatOfNatInstOfNatNatσ\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">instEpiSimplexCategorySmallCategoryMkHAddNatInstHAddInstAddNatOfNatInstOfNatNatσ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L594-L596","name":"SimplexCategory.instMonoSimplexCategorySmallCategoryMkHAddNatInstHAddInstAddNatOfNatInstOfNatNatδ","line":594,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instMonoSimplexCategorySmallCategoryMkHAddNatInstHAddInstAddNatOfNatInstOfNatNatδ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instMonoSimplexCategorySmallCategoryMkHAddNatInstHAddInstAddNatOfNatInstOfNatNatδ\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">instMonoSimplexCategorySmallCategoryMkHAddNatInstHAddInstAddNatOfNatInstOfNatNatδ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L590-L591","name":"SimplexCategory.le_of_epi","line":590,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.le_of_epi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.le_of_epi\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">le_of_epi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L584-L587","name":"SimplexCategory.len_le_of_epi","line":584,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len_le_of_epi","doc":"An epimorphism in `SimplexCategory` must decrease lengths"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len_le_of_epi\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">len_le_of_epi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L579-L580","name":"SimplexCategory.le_of_mono","line":579,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.le_of_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.le_of_mono\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">le_of_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L573-L576","name":"SimplexCategory.len_le_of_mono","line":573,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len_le_of_mono","doc":"A monomorphism in `SimplexCategory` must increase lengths"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len_le_of_mono\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">len_le_of_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L564-L569","name":"SimplexCategory.epi_iff_surjective","line":564,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.epi_iff_surjective","doc":"A morphism in `SimplexCategory` is an epimorphism if and only if it is a surjective function\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.epi_iff_surjective\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">epi_iff_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L554-L559","name":"SimplexCategory.mono_iff_injective","line":554,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mono_iff_injective","doc":"A morphism in `SimplexCategory` is a monomorphism precisely when it is an injective function\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mono_iff_injective\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">mono_iff_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L542-L546","name":"SimplexCategory.instConcreteCategorySimplexCategorySmallCategory","line":542,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instConcreteCategorySimplexCategorySmallCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instConcreteCategorySimplexCategorySmallCategory\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">instConcreteCategorySimplexCategorySmallCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L536-L536","name":"SimplexCategory.Truncated.instFaithfulTruncatedInstSmallCategoryTruncatedSimplexCategorySmallCategoryInclusion","line":536,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated.instFaithfulTruncatedInstSmallCategoryTruncatedSimplexCategorySmallCategoryInclusion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated.instFaithfulTruncatedInstSmallCategoryTruncatedSimplexCategorySmallCategoryInclusion\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">instFaithfulTruncatedInstSmallCategoryTruncatedSimplexCategorySmallCategoryInclusion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Faithful\">CategoryTheory.Faithful</a> <span class=\"fn\">SimplexCategory.Truncated.inclusion</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L535-L535","name":"SimplexCategory.Truncated.instFullTruncatedInstSmallCategoryTruncatedSimplexCategorySmallCategoryInclusion","line":535,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated.instFullTruncatedInstSmallCategoryTruncatedSimplexCategorySmallCategoryInclusion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated.instFullTruncatedInstSmallCategoryTruncatedSimplexCategorySmallCategoryInclusion\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">instFullTruncatedInstSmallCategoryTruncatedSimplexCategorySmallCategoryInclusion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Full\">CategoryTheory.Full</a> <span class=\"fn\">SimplexCategory.Truncated.inclusion</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L531-L532","name":"SimplexCategory.Truncated.inclusion","line":531,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated.inclusion","doc":"The fully faithful inclusion of the truncated simplex category into the usual\nsimplex category.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated.inclusion\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">inclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated\">SimplexCategory.Truncated</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L525-L526","name":"SimplexCategory.Truncated.instInhabitedTruncated","line":525,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated.instInhabitedTruncated","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated.instInhabitedTruncated\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">instInhabitedTruncated</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated\">SimplexCategory.Truncated</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L520-L521","name":"SimplexCategory.instSmallCategoryTruncated","line":520,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instSmallCategoryTruncated","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.instSmallCategoryTruncated\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">instSmallCategoryTruncated</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated\">SimplexCategory.Truncated</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L516-L517","name":"SimplexCategory.Truncated","line":516,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated","doc":"The truncated simplex category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Truncated\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Truncated</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L509-L512","name":"SimplexCategory.isSkeletonOf","line":509,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.isSkeletonOf","doc":"`SimplexCategory` is a skeleton of `NonemptyFinLinOrd`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.isSkeletonOf\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">isSkeletonOf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Skeletal.html#CategoryTheory.IsSkeletonOf\">CategoryTheory.IsSkeletonOf</a> <a href=\"./Mathlib/Order/Category/NonemptyFinLinOrd.html#NonemptyFinLinOrd\">NonemptyFinLinOrd</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor\">SimplexCategory.skeletalFunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L501-L502","name":"SimplexCategory.skeletalEquivalence","line":501,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalEquivalence","doc":"The equivalence that exhibits `SimplexCategory` as skeleton\nof `NonemptyFinLinOrd` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalEquivalence\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">skeletalEquivalence</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/Order/Category/NonemptyFinLinOrd.html#NonemptyFinLinOrd\">NonemptyFinLinOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L493-L494","name":"SimplexCategory.SkeletalFunctor.isEquivalence","line":493,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.SkeletalFunctor.isEquivalence","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.SkeletalFunctor.isEquivalence\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">SkeletalFunctor</span>.<span class=\"name\">isEquivalence</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.IsEquivalence\">CategoryTheory.IsEquivalence</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor\">SimplexCategory.skeletalFunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L474-L491","name":"SimplexCategory.SkeletalFunctor.instEssSurjSimplexCategoryNonemptyFinLinOrdSmallCategoryInstNonemptyFinLinOrdLargeCategorySkeletalFunctor","line":474,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.SkeletalFunctor.instEssSurjSimplexCategoryNonemptyFinLinOrdSmallCategoryInstNonemptyFinLinOrdLargeCategorySkeletalFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.SkeletalFunctor.instEssSurjSimplexCategoryNonemptyFinLinOrdSmallCategoryInstNonemptyFinLinOrdLargeCategorySkeletalFunctor\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">SkeletalFunctor</span>.<span class=\"name\">instEssSurjSimplexCategoryNonemptyFinLinOrdSmallCategoryInstNonemptyFinLinOrdLargeCategorySkeletalFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.EssSurj\">CategoryTheory.EssSurj</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor\">SimplexCategory.skeletalFunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L469-L472","name":"SimplexCategory.SkeletalFunctor.instFaithfulSimplexCategorySmallCategoryNonemptyFinLinOrdInstNonemptyFinLinOrdLargeCategorySkeletalFunctor","line":469,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.SkeletalFunctor.instFaithfulSimplexCategorySmallCategoryNonemptyFinLinOrdInstNonemptyFinLinOrdLargeCategorySkeletalFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.SkeletalFunctor.instFaithfulSimplexCategorySmallCategoryNonemptyFinLinOrdInstNonemptyFinLinOrdLargeCategorySkeletalFunctor\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">SkeletalFunctor</span>.<span class=\"name\">instFaithfulSimplexCategorySmallCategoryNonemptyFinLinOrdInstNonemptyFinLinOrdLargeCategorySkeletalFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Faithful\">CategoryTheory.Faithful</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor\">SimplexCategory.skeletalFunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L466-L467","name":"SimplexCategory.SkeletalFunctor.instFullSimplexCategorySmallCategoryNonemptyFinLinOrdInstNonemptyFinLinOrdLargeCategorySkeletalFunctor","line":466,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.SkeletalFunctor.instFullSimplexCategorySmallCategoryNonemptyFinLinOrdInstNonemptyFinLinOrdLargeCategorySkeletalFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.SkeletalFunctor.instFullSimplexCategorySmallCategoryNonemptyFinLinOrdInstNonemptyFinLinOrdLargeCategorySkeletalFunctor\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">SkeletalFunctor</span>.<span class=\"name\">instFullSimplexCategorySmallCategoryNonemptyFinLinOrdInstNonemptyFinLinOrdLargeCategorySkeletalFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Full\">CategoryTheory.Full</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor\">SimplexCategory.skeletalFunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L456-L461","name":"SimplexCategory.skeletal","line":456,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletal\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">skeletal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Skeletal.html#CategoryTheory.Skeletal\">CategoryTheory.Skeletal</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L451-L453","name":"SimplexCategory.skeletalFunctor.coe_map","line":451,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor.coe_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor.coe_map\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">skeletalFunctor</span>.<span class=\"name\">coe_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₁ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₂ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Δ₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor\">SimplexCategory.skeletalFunctor</a>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L446-L448","name":"SimplexCategory.skeletalFunctor","line":446,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor","doc":"The functor that exhibits `SimplexCategory` as skeleton\nof `NonemptyFinLinOrd` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">skeletalFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a> <a href=\"./Mathlib/Order/Category/NonemptyFinLinOrd.html#NonemptyFinLinOrd\">NonemptyFinLinOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L445-L445","name":"SimplexCategory.skeletalFunctor_obj","line":445,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor_obj\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">skeletalFunctor_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor\">SimplexCategory.skeletalFunctor</a>.obj</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/NonemptyFinLinOrd.html#NonemptyFinLinOrd.of\">NonemptyFinLinOrd.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L445-L445","name":"SimplexCategory.skeletalFunctor_map","line":445,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor_map\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">skeletalFunctor_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.skeletalFunctor\">SimplexCategory.skeletalFunctor</a>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L412-L437","name":"SimplexCategory.factor_δ_spec","line":412,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.factor_δ_spec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.factor_δ_spec\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">factor_δ_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.factor_δ\">SimplexCategory.factor_δ</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L407-L409","name":"SimplexCategory.factor_δ","line":407,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.factor_δ","doc":"If `f : [m] ⟶ [n+1]` is a morphism and `j` is not in the range of `f`,\nthen `factor_δ f j` is a morphism `[m] ⟶ [n]` such that\n`factor_δ f j ≫ δ j = f` (as witnessed by `factor_δ_spec`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.factor_δ\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">factor_δ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L369-L399","name":"SimplexCategory.σ_comp_σ","line":369,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ_comp_σ","doc":"The fifth simplicial identity "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ_comp_σ\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">σ_comp_σ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L368-L368","name":"SimplexCategory.σ_comp_σ_assoc","line":368,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ_comp_σ_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ_comp_σ_assoc\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">σ_comp_σ_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L358-L364","name":"SimplexCategory.δ_comp_σ_of_gt'","line":358,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_gt'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_gt'\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_of_gt'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">3</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castLT\">Fin.castLT</a> <span class=\"fn\">j</span> <span class=\"fn\">⋯</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L357-L357","name":"SimplexCategory.δ_comp_σ_of_gt'_assoc","line":357,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_gt'_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_gt'_assoc\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_of_gt'_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">3</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castLT\">Fin.castLT</a> <span class=\"fn\">j</span> <span class=\"fn\">⋯</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L333-L354","name":"SimplexCategory.δ_comp_σ_of_gt","line":333,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_gt","doc":"The fourth simplicial identity "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_gt\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L332-L332","name":"SimplexCategory.δ_comp_σ_of_gt_assoc","line":332,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_gt_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_gt_assoc\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_of_gt_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L325-L328","name":"SimplexCategory.δ_comp_σ_succ'","line":325,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_succ'\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L324-L324","name":"SimplexCategory.δ_comp_σ_succ'_assoc","line":324,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_succ'_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_succ'_assoc\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_succ'_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L316-L321","name":"SimplexCategory.δ_comp_σ_succ","line":316,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_succ","doc":"The second part of the third simplicial identity "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_succ\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L315-L315","name":"SimplexCategory.δ_comp_σ_succ_assoc","line":315,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_succ_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_succ_assoc\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_succ_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L308-L311","name":"SimplexCategory.δ_comp_σ_self'","line":308,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_self'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_self'\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_self'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L307-L307","name":"SimplexCategory.δ_comp_σ_self'_assoc","line":307,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_self'_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_self'_assoc\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_self'_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L294-L304","name":"SimplexCategory.δ_comp_σ_self","line":294,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_self","doc":"The first part of the third simplicial identity "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_self\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L293-L293","name":"SimplexCategory.δ_comp_σ_self_assoc","line":293,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_self_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_self_assoc\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_self_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L272-L289","name":"SimplexCategory.δ_comp_σ_of_le","line":272,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_le","doc":"The second simplicial identity "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_le\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L271-L271","name":"SimplexCategory.δ_comp_σ_of_le_assoc","line":271,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_le_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_σ_of_le_assoc\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_σ_of_le_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\">SimplexCategory.σ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L264-L267","name":"SimplexCategory.δ_comp_δ_self'","line":264,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ_self'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ_self'\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_δ_self'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">3</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L263-L263","name":"SimplexCategory.δ_comp_δ_self'_assoc","line":263,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ_self'_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ_self'_assoc\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_δ_self'_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">3</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L259-L260","name":"SimplexCategory.δ_comp_δ_self","line":259,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ_self","doc":"The special case of the first simplicial identity "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ_self\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_δ_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L258-L258","name":"SimplexCategory.δ_comp_δ_self_assoc","line":258,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ_self_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ_self_assoc\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_δ_self_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L249-L254","name":"SimplexCategory.δ_comp_δ''","line":249,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ''\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_δ''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">3</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castLT\">Fin.castLT</a> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L239-L246","name":"SimplexCategory.δ_comp_δ'","line":239,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ'\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_δ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">3</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">j</span> <span class=\"fn\">⋯</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L229-L236","name":"SimplexCategory.δ_comp_δ","line":229,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ","doc":"The generic case of the first simplicial identity "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ_comp_δ\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ_comp_δ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L222-L225","name":"SimplexCategory.σ","line":222,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ","doc":"The `i`-th degeneracy map from `[n+1]` to `[n]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.σ\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">σ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L217-L218","name":"SimplexCategory.δ","line":217,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ","doc":"The `i`-th face map from `[n]` to `[n+1]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.δ\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">δ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L197-L199","name":"SimplexCategory.hom_zero_zero","line":197,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.hom_zero_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.hom_zero_zero\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">hom_zero_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L193-L194","name":"SimplexCategory.mkHom","line":193,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mkHom","doc":"Make a morphism `[n] ⟶ [m]` from a monotone map between fin's.\nThis is useful for constructing morphisms between `[n]` directly\nwithout identifying `n` with `[n].len`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mkHom\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">mkHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L182-L185","name":"SimplexCategory.const_comp","line":182,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const_comp\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">const_comp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const\">SimplexCategory.const</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const\">SimplexCategory.const</a> <span class=\"fn\">x</span> <span class=\"fn\">z</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L178-L179","name":"SimplexCategory.const_apply","line":178,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const_apply\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">const_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const\">SimplexCategory.const</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L175-L175","name":"SimplexCategory.const_eq_id","line":175,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const_eq_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const_eq_id\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">const_eq_id</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const\">SimplexCategory.const</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L170-L171","name":"SimplexCategory.const","line":170,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const","doc":"The constant morphism from [0]. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.const\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L165-L167","name":"SimplexCategory.Hom.ext","line":165,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.ext\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Hom</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">g</span></span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L160-L161","name":"SimplexCategory.comp_toOrderHom","line":160,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.comp_toOrderHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.comp_toOrderHom\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">comp_toOrderHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom.comp\">OrderHom.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L156-L157","name":"SimplexCategory.id_toOrderHom","line":156,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.id_toOrderHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.id_toOrderHom\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">id_toOrderHom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">OrderHom.id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L149-L152","name":"SimplexCategory.smallCategory","line":149,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.smallCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.smallCategory\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">smallCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L142-L144","name":"SimplexCategory.Hom.comp","line":142,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.comp","doc":"Composition of morphisms of `SimplexCategory`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.comp\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Hom</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom\">SimplexCategory.Hom</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom\">SimplexCategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom\">SimplexCategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L136-L137","name":"SimplexCategory.Hom.id","line":136,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.id","doc":"Identity morphisms of `SimplexCategory`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.id\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Hom</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom\">SimplexCategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L129-L131","name":"SimplexCategory.Hom.mk_toOrderHom_apply","line":129,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.mk_toOrderHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.mk_toOrderHom_apply\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Hom</span>.<span class=\"name\">mk_toOrderHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.mk\">SimplexCategory.Hom.mk</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L124-L126","name":"SimplexCategory.Hom.toOrderHom_mk","line":124,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom_mk\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Hom</span>.<span class=\"name\">toOrderHom_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.mk\">SimplexCategory.Hom.mk</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L119-L120","name":"SimplexCategory.Hom.mk_toOrderHom","line":119,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.mk_toOrderHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.mk_toOrderHom\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Hom</span>.<span class=\"name\">mk_toOrderHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom\">SimplexCategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.mk\">SimplexCategory.Hom.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L111-L113","name":"SimplexCategory.Hom.ext'","line":111,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.ext'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.ext'\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Hom</span>.<span class=\"name\">ext'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom\">SimplexCategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom\">SimplexCategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\">SimplexCategory.Hom.toOrderHom</a> <span class=\"fn\">g</span></span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L106-L108","name":"SimplexCategory.Hom.toOrderHom","line":106,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom","doc":"Recover the monotone map from a morphism in the simplex category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.toOrderHom\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Hom</span>.<span class=\"name\">toOrderHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom\">SimplexCategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L101-L102","name":"SimplexCategory.Hom.mk","line":101,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.mk","doc":"Make a morphism in `SimplexCategory` from a monotone map of `Fin`'s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom.mk\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Hom</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom\">SimplexCategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L94-L95","name":"SimplexCategory.Hom","line":94,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom","doc":"Morphisms in the `SimplexCategory`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.Hom\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">Hom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L88-L89","name":"SimplexCategory.rec","line":88,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.rec","doc":"A recursor for `SimplexCategory`. Use it as `induction Δ using SimplexCategory.rec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.rec\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">rec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L83-L84","name":"SimplexCategory.mk_len","line":83,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk_len","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk_len\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">mk_len</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L78-L79","name":"SimplexCategory.len_mk","line":78,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len_mk\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">len_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L69-L70","name":"SimplexCategory.ext","line":69,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.ext\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\">SimplexCategory.len</a> <span class=\"fn\">b</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L64-L65","name":"SimplexCategory.len","line":64,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len","doc":"The length of an object of `SimplexCategory`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.len\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">len</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L59-L60","name":"Simplicial.«term[_]»","line":59,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#Simplicial.«term[_]»","doc":"the `n`-dimensional simplex can be denoted `[n]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#Simplicial.«term[_]»\"><span class=\"name\">Simplicial</span>.<span class=\"name\">«term[_]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L55-L56","name":"SimplexCategory.mk","line":55,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk","doc":"Interpret a natural number as an object of the simplex category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\"><span class=\"name\">SimplexCategory</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/AlgebraicTopology/SimplexCategory.lean#L44-L45","name":"SimplexCategory","line":44,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory","doc":"The simplex category:\n* objects are natural numbers `n : ℕ`\n* morphisms from `n` to `m` are monotone functions `Fin (n+1) → Fin (m+1)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\"><span class=\"name\">SimplexCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}