{"name":"Mathlib.AlgebraicTopology.SplitSimplicialObject","instances":[{"typeNames":["SimplicialObject.Splitting.IndexSet.e"],"name":"SimplicialObject.Splitting.IndexSet.instEpiSimplexCategoryE","className":"CategoryTheory.Epi"},{"typeNames":["SimplicialObject.Splitting.IndexSet"],"name":"SimplicialObject.Splitting.IndexSet.instFintype","className":"Fintype"},{"typeNames":["SimplicialObject.Splitting.IndexSet"],"name":"SimplicialObject.Splitting.IndexSet.instInhabited","className":"Inhabited"},{"typeNames":["SimplicialObject.Split"],"name":"SimplicialObject.instCategorySplit","className":"CategoryTheory.Category"}],"imports":["Init","Mathlib.AlgebraicTopology.SimplicialObject","Mathlib.CategoryTheory.Limits.Shapes.Products"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L408-L411","name":"SimplicialObject.Split.natTransCofanInj","line":408,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.natTransCofanInj","doc":"The inclusion of each summand in the coproduct decomposition of simplices\nin split simplicial objects is a natural transformation of functors\n`SimplicialObject.Split C ⥤ C` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.natTransCofanInj\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">natTransCofanInj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.evalN\">SimplicialObject.Split.evalN</a> <span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.forget\">SimplicialObject.Split.forget</a> <span class=\"fn\">C</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Products/Basic.html#CategoryTheory.evaluation\">CategoryTheory.evaluation</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">C</span></span>)</span>.obj</span> <span class=\"fn\">Δ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L407-L407","name":"SimplicialObject.Split.natTransCofanInj_app","line":407,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.natTransCofanInj_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.natTransCofanInj_app\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">natTransCofanInj_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.natTransCofanInj\">SimplicialObject.Split.natTransCofanInj</a> <span class=\"fn\">C</span> <span class=\"fn\">A</span></span>)</span>.app</span> <span class=\"fn\">S</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L400-L402","name":"SimplicialObject.Split.evalN","line":400,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.evalN","doc":"The functor `SimplicialObject.Split C ⥤ C` which sends a simplicial object equipped\nwith a splitting to its nondegenerate `n`-simplices. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.evalN\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">evalN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L399-L399","name":"SimplicialObject.Split.evalN_obj","line":399,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.evalN_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.evalN_obj\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">evalN_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.evalN\">SimplicialObject.Split.evalN</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.obj</span> <span class=\"fn\">S</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.s</span>.N</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L399-L399","name":"SimplicialObject.Split.evalN_map","line":399,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.evalN_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.evalN_map\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">evalN_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>} (<span class=\"fn\">Φ</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.evalN\">SimplicialObject.Split.evalN</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map</span> <span class=\"fn\">Φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ</span>.f</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L393-L395","name":"SimplicialObject.Split.forget","line":393,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.forget","doc":"The functor `SimplicialObject.Split C ⥤ SimplicialObject C` which forgets\nthe splitting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.forget\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">forget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L392-L392","name":"SimplicialObject.Split.forget_map","line":392,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.forget_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.forget_map\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">forget_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>} (<span class=\"fn\">Φ</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.forget\">SimplicialObject.Split.forget</a> <span class=\"fn\">C</span></span>)</span>.map</span> <span class=\"fn\">Φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Φ</span>.F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L392-L392","name":"SimplicialObject.Split.forget_obj","line":392,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.forget_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.forget_obj\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">forget_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.forget\">SimplicialObject.Split.forget</a> <span class=\"fn\">C</span></span>)</span>.obj</span> <span class=\"fn\">S</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">S</span>.X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L383-L386","name":"SimplicialObject.Split.cofan_inj_naturality_symm","line":383,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.cofan_inj_naturality_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.cofan_inj_naturality_symm\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">cofan_inj_naturality_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ</span>.F</span>.app</span> <span class=\"fn\">Δ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ</span>.f</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₂</span>.s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L382-L382","name":"SimplicialObject.Split.cofan_inj_naturality_symm_assoc","line":382,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.cofan_inj_naturality_symm_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.cofan_inj_naturality_symm_assoc\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">cofan_inj_naturality_symm_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₂</span>.X</span>.obj</span> <span class=\"fn\">Δ</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ</span>.F</span>.app</span> <span class=\"fn\">Δ</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ</span>.f</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₂</span>.s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L378-L380","name":"SimplicialObject.Split.comp_f","line":378,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.comp_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.comp_f\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">comp_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₃ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ₁₂ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Φ₂₃ : <span class=\"fn\"><span class=\"fn\">S₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">Φ₁₂</span> <span class=\"fn\">Φ₂₃</span></span>)</span>.f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ₁₂</span>.f</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ₂₃</span>.f</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L373-L375","name":"SimplicialObject.Split.comp_F","line":373,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.comp_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.comp_F\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">comp_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₃ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ₁₂ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Φ₂₃ : <span class=\"fn\"><span class=\"fn\">S₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">Φ₁₂</span> <span class=\"fn\">Φ₂₃</span></span>)</span>.F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">Φ₁₂</span>.F</span> <span class=\"fn\"><span class=\"fn\">Φ₂₃</span>.F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L369-L370","name":"SimplicialObject.Split.id_f","line":369,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.id_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.id_f\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">id_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">S</span></span>)</span>.f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.s</span>.N</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L365-L366","name":"SimplicialObject.Split.id_F","line":365,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.id_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.id_F\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">id_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">S</span></span>)</span>.F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\">S</span>.X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L361-L362","name":"SimplicialObject.Split.congr_f","line":361,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.congr_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.congr_f\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">congr_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Φ₁ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Φ₂ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">Φ₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Φ₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ₁</span>.f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ₂</span>.f</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L359-L359","name":"SimplicialObject.Split.congr_F","line":359,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.congr_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.congr_F\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">congr_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Φ₁ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Φ₂ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">Φ₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Φ₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ₁</span>.f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Φ₂</span>.f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L356-L357","name":"SimplicialObject.Split.hom_ext","line":356,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.hom_ext\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ₁ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Φ₂ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ₁</span>.f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ₂</span>.f</span> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Φ₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Φ₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L338-L348","name":"SimplicialObject.instCategorySplit","line":338,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.instCategorySplit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.instCategorySplit\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">instCategorySplit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, max u_2 u_1}</a>              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L334-L334","name":"SimplicialObject.Split.Hom.comm_assoc","line":334,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.comm_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.comm_assoc\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">Hom</span>.<span class=\"name\">comm_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.Hom</span> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₂</span>.X</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.s</span>.ι</span> <span class=\"fn\">n</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.F</span>.app</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.f</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₂</span>.s</span>.ι</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L321-L332","name":"SimplicialObject.Split.Hom.ext","line":321,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.ext\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">Hom</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.Hom</span> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Φ₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.Hom</span> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ₁</span>.f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ₂</span>.f</span> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Φ₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Φ₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L318-L318","name":"SimplicialObject.Split.Hom.comm","line":318,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.comm\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">Hom</span>.<span class=\"name\">comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.Hom</span> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.s</span>.ι</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.F</span>.app</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.f</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₂</span>.s</span>.ι</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L317-L317","name":"SimplicialObject.Split.Hom.f","line":317,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.f","doc":"the morphism between the \"nondegenerate\" `n`-simplices for all `n : ℕ` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.f\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">Hom</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.Hom</span> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.s</span>.N</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₂</span>.s</span>.N</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L315-L315","name":"SimplicialObject.Split.Hom.F","line":315,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.F","doc":"the morphism between the underlying simplicial objects "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.F\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">Hom</span>.<span class=\"name\">F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.Hom</span> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">S₂</span>.X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L313-L313","name":"SimplicialObject.Split.Hom.mk","line":313,"kind":"ctor","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom.mk\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">Hom</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">S₂</span>.X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.s</span>.N</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₂</span>.s</span>.N</span> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a>\n  <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.s</span>.ι</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.app</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₂</span>.s</span>.ι</span> <span class=\"fn\">n</span></span>)</span></span></span></span>)</span>\n  <a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#_auto._@.Mathlib.AlgebraicTopology.SplitSimplicialObject._hyg.2114\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.Hom</span> <span class=\"fn\">S₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L313-L318","name":"SimplicialObject.Split.Hom","line":313,"kind":"structure","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom","doc":"Morphisms in `SimplicialObject.Split C` are morphisms of simplicial objects that\nare compatible with the splittings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.Hom\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">Hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_2</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L307-L308","name":"SimplicialObject.Split.mk'","line":307,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.mk'","doc":"The object in `SimplicialObject.Split C` attached to a splitting `s : Splitting X`\nof a simplicial object `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.mk'\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L306-L306","name":"SimplicialObject.Split.mk'_X","line":306,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.mk'_X","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.mk'_X\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">mk'_X</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.mk'\">SimplicialObject.Split.mk'</a> <span class=\"fn\">s</span></span>)</span>.X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L306-L306","name":"SimplicialObject.Split.mk'_s","line":306,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.mk'_s","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.mk'_s\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">mk'_s</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.mk'\">SimplicialObject.Split.mk'</a> <span class=\"fn\">s</span></span>)</span>.s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L298-L298","name":"SimplicialObject.Split.s","line":298,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.s","doc":"a splitting of the simplicial object "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.s\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">s</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\"><span class=\"fn\">self</span>.X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L296-L296","name":"SimplicialObject.Split.X","line":296,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.X","doc":"the underlying simplicial object "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.X\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">X</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L294-L294","name":"SimplicialObject.Split.mk","line":294,"kind":"ctor","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.mk\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L294-L298","name":"SimplicialObject.Split","line":294,"kind":"structure","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split","doc":"The category `SimplicialObject.Split C` is the category of simplicial objects\nin `C` equipped with a splitting, and morphisms are morphisms of simplicial objects\nwhich are compatible with the splittings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L293-L293","name":"SimplicialObject.Split.ext_iff","line":293,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.ext_iff\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>} (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.X</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\"><span class=\"fn\">x</span>.s</span> <span class=\"fn\"><span class=\"fn\">y</span>.s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L293-L293","name":"SimplicialObject.Split.ext","line":293,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split.ext\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Split</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>} (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Split\">SimplicialObject.Split</a> <span class=\"fn\">C</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.X</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\"><span class=\"fn\">x</span>.s</span> <span class=\"fn\"><span class=\"fn\">y</span>.s</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L279-L283","name":"SimplicialObject.Splitting.cofan_inj_epi_naturality","line":279,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_epi_naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_epi_naturality\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">cofan_inj_epi_naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">Δ₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\"><span class=\"fn\">p</span>.unop</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ₁</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.map</span> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ₂</span></span>)</span>.inj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.epiComp</span> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L278-L278","name":"SimplicialObject.Splitting.cofan_inj_epi_naturality_assoc","line":278,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_epi_naturality_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_epi_naturality_assoc\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">cofan_inj_epi_naturality_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">Δ₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\"><span class=\"fn\">p</span>.unop</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.obj</span> <span class=\"fn\">Δ₂</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ₁</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.map</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ₂</span></span>)</span>.inj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.epiComp</span> <span class=\"fn\">p</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L272-L276","name":"SimplicialObject.Splitting.ofIso","line":272,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ofIso","doc":"A simplicial object that is isomorphic to a split simplicial object is split. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ofIso\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">ofIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L271-L271","name":"SimplicialObject.Splitting.ofIso_ι","line":271,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ofIso_ι","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ofIso_ι\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">ofIso_ι</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.ofIso</span> <span class=\"fn\">e</span></span>)</span>.ι</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.ι</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.hom</span>.app</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L271-L271","name":"SimplicialObject.Splitting.ofIso_isColimit'","line":271,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ofIso_isColimit'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ofIso_isColimit'\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">ofIso_isColimit'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.ofIso</span> <span class=\"fn\">e</span></span>)</span>.isColimit'</span> <span class=\"fn\">Δ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.isColimit</span> <span class=\"fn\">Δ</span></span>)</span>.ofIsoColimit</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Cofan.ext\">CategoryTheory.Limits.Cofan.ext</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.app</span> <span class=\"fn\">Δ</span></span>)</span> <span class=\"fn\">⋯</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L271-L271","name":"SimplicialObject.Splitting.ofIso_N","line":271,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ofIso_N","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ofIso_N\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">ofIso_N</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.ofIso</span> <span class=\"fn\">e</span></span>)</span>.N</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.N</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L266-L268","name":"SimplicialObject.Splitting.ι_desc","line":266,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ι_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ι_desc\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">ι_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.N</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.desc</span> <span class=\"fn\">Δ</span> <span class=\"fn\">F</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L265-L265","name":"SimplicialObject.Splitting.ι_desc_assoc","line":265,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ι_desc_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ι_desc_assoc\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">ι_desc_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.N</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z✝</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">Z✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.desc</span> <span class=\"fn\">Δ</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L261-L263","name":"SimplicialObject.Splitting.desc","line":261,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.desc","doc":"The map `X.obj Δ ⟶ Z` obtained by providing a family of morphisms on all the\nterms of decomposition given by a splitting `s : Splitting X`  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.desc\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.N</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.obj</span> <span class=\"fn\">Δ</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L250-L257","name":"SimplicialObject.Splitting.hom_ext","line":250,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.hom_ext\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.φ</span> <span class=\"fn\">f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.φ</span> <span class=\"fn\">g</span> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L246-L248","name":"SimplicialObject.Splitting.hom_ext'","line":246,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.hom_ext'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.hom_ext'\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">hom_ext'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.obj</span> <span class=\"fn\">Δ</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.obj</span> <span class=\"fn\">Δ</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">g</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L241-L244","name":"SimplicialObject.Splitting.cofan_inj_comp_app","line":241,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_comp_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_comp_app\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">cofan_inj_comp_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.app</span> <span class=\"fn\">Δ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.φ</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.map</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.e</span>.op</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L240-L240","name":"SimplicialObject.Splitting.cofan_inj_comp_app_assoc","line":240,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_comp_app_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_comp_app_assoc\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">cofan_inj_comp_app_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.obj</span> <span class=\"fn\">Δ</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.app</span> <span class=\"fn\">Δ</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.φ</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.map</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.e</span>.op</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L237-L238","name":"SimplicialObject.Splitting.φ","line":237,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.φ","doc":"As it is stated in `Splitting.hom_ext`, a morphism `f : X ⟶ Y` from a split\nsimplicial object to any simplicial object is determined by its restrictions\n`s.φ f n : s.N n ⟶ Y _[n]` to the distinguished summands in each degree `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.φ\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">φ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.N</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L229-L231","name":"SimplicialObject.Splitting.cofan_inj_id","line":229,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_id\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">cofan_inj_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>)</span>.inj</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.id\">SimplicialObject.Splitting.IndexSet.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.ι</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L226-L227","name":"SimplicialObject.Splitting.cofan_inj_eq","line":226,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_eq\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">cofan_inj_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.ι</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.map</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.e</span>.op</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L225-L225","name":"SimplicialObject.Splitting.cofan_inj_eq_assoc","line":225,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_eq_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan_inj_eq_assoc\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">cofan_inj_eq_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.pt</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span>.inj</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.ι</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.map</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.e</span>.op</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L223-L223","name":"SimplicialObject.Splitting.isColimit","line":223,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.isColimit","doc":"The cofan `s.cofan Δ` is colimit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.isColimit\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">isColimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.cofan</span> <span class=\"fn\">Δ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L219-L220","name":"SimplicialObject.Splitting.cofan","line":219,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan","doc":"The cofan for `summand s.N Δ` induced by a splitting of a simplicial object.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">cofan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Cofan\">CategoryTheory.Limits.Cofan</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.summand\">SimplicialObject.Splitting.summand</a> <span class=\"fn\"><span class=\"fn\">s</span>.N</span> <span class=\"fn\">Δ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L212-L212","name":"SimplicialObject.Splitting.isColimit'","line":212,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.isColimit'","doc":"For each `Δ`, `X.obj Δ` identifies to the coproduct of the objects `N A.1.unop.len`\nfor all `A : IndexSet Δ`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.isColimit'\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">isColimit'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan'\">SimplicialObject.Splitting.cofan'</a> <span class=\"fn\"><span class=\"fn\">self</span>.N</span> <span class=\"fn\">X</span> <span class=\"fn\"><span class=\"fn\">self</span>.ι</span> <span class=\"fn\">Δ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L209-L209","name":"SimplicialObject.Splitting.ι","line":209,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ι","doc":"The \"inclusion\" `N n ⟶ X _[n]` for all `n : ℕ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.ι\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">ι</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.N</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L207-L207","name":"SimplicialObject.Splitting.N","line":207,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.N","doc":"The \"nondegenerate simplices\" `N n` for all `n : ℕ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.N\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">N</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L205-L205","name":"SimplicialObject.Splitting.mk","line":205,"kind":"ctor","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.mk\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isColimit' : <span class=\"fn\">(<span class=\"fn\">Δ</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>) → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan'\">SimplicialObject.Splitting.cofan'</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">ι</span> <span class=\"fn\">Δ</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\">SimplicialObject.Splitting</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L205-L212","name":"SimplicialObject.Splitting","line":205,"kind":"structure","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting","doc":"A splitting of a simplicial object `X` consists of the datum of a sequence\nof objects `N`, a sequence of morphisms `ι : N n ⟶ X _[n]` such that\nfor all `Δ : SimplexCategoryᵒᵖ`, the canonical map `Splitting.map X ι Δ`\nis an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L195-L196","name":"SimplicialObject.Splitting.cofan'","line":195,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan'","doc":"The cofan for `summand N Δ` induced by morphisms `N n ⟶ X_ [n]` for all `n : ℕ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.cofan'\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">cofan'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Cofan\">CategoryTheory.Limits.Cofan</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.summand\">SimplicialObject.Splitting.summand</a> <span class=\"fn\">N</span> <span class=\"fn\">Δ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L191-L192","name":"SimplicialObject.Splitting.summand","line":191,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.summand","doc":"Given a sequences of objects `N : ℕ → C` in a category `C`, this is\na family of objects indexed by the elements `A : Splitting.IndexSet Δ`.\nThe `Δ`-simplices of a split simplicial objects shall identify to the\ncoproduct of objects in such a family. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.summand\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">summand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L179-L180","name":"SimplicialObject.Splitting.IndexSet.fac_pull","line":179,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.fac_pull","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.fac_pull\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">fac_pull</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ' : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(θ : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.pull</span> <span class=\"fn\">θ</span></span>)</span>.e</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image.ι\">CategoryTheory.Limits.image.ι</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">θ</span>.unop</span> <span class=\"fn\"><span class=\"fn\">A</span>.e</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">θ</span>.unop</span> <span class=\"fn\"><span class=\"fn\">A</span>.e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L178-L178","name":"SimplicialObject.Splitting.IndexSet.fac_pull_assoc","line":178,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.fac_pull_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.fac_pull_assoc\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">fac_pull_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ' : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(θ : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.pull</span> <span class=\"fn\">θ</span></span>)</span>.e</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image.ι\">CategoryTheory.Limits.image.ι</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">θ</span>.unop</span> <span class=\"fn\"><span class=\"fn\">A</span>.e</span></span>)</span></span>)</span>\n      <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">θ</span>.unop</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">A</span>.e</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L175-L176","name":"SimplicialObject.Splitting.IndexSet.pull","line":175,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.pull","doc":"When `A : IndexSet Δ` and `θ : Δ → Δ'` is a morphism in `SimplexCategoryᵒᵖ`,\nan element in `IndexSet Δ'` can be defined by using the epi-mono factorisation\nof `θ.unop ≫ A.e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.pull\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">pull</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ' : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(θ : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L165-L167","name":"SimplicialObject.Splitting.IndexSet.epiComp","line":165,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.epiComp","doc":"Given `A : IndexSet Δ₁`, if `p.unop : unop Δ₂ ⟶ unop Δ₁` is an epi, this\nis the obvious element in `A : IndexSet Δ₂` associated to the composition\nof epimorphisms `p.unop ≫ A.e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.epiComp\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">epiComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">Δ₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\"><span class=\"fn\">p</span>.unop</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L164-L164","name":"SimplicialObject.Splitting.IndexSet.epiComp_fst","line":164,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.epiComp_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.epiComp_fst\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">epiComp_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">Δ₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\"><span class=\"fn\">p</span>.unop</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.epiComp</span> <span class=\"fn\">p</span></span>)</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L164-L164","name":"SimplicialObject.Splitting.IndexSet.epiComp_snd_coe","line":164,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.epiComp_snd_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.epiComp_snd_coe\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">epiComp_snd_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">Δ₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\"><span class=\"fn\">p</span>.unop</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.epiComp</span> <span class=\"fn\">p</span></span>)</span>.snd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">p</span>.unop</span> <span class=\"fn\"><span class=\"fn\">A</span>.e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L150-L159","name":"SimplicialObject.Splitting.IndexSet.eqId_iff_mono","line":150,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.eqId_iff_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.eqId_iff_mono\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">eqId_iff_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.EqId</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">A</span>.e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L143-L148","name":"SimplicialObject.Splitting.IndexSet.eqId_iff_len_le","line":143,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.eqId_iff_len_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.eqId_iff_len_le\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">eqId_iff_len_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.EqId</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">Δ</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L133-L141","name":"SimplicialObject.Splitting.IndexSet.eqId_iff_len_eq","line":133,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.eqId_iff_len_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.eqId_iff_len_eq\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">eqId_iff_len_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.EqId</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span>)</span>.len</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">Δ</span></span>)</span>.len</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L118-L131","name":"SimplicialObject.Splitting.IndexSet.eqId_iff_eq","line":118,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.eqId_iff_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.eqId_iff_eq\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">eqId_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.EqId</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Δ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L115-L116","name":"SimplicialObject.Splitting.IndexSet.EqId","line":115,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.EqId","doc":"The condition that an element `Splitting.IndexSet Δ` is the distinguished\nelement `Splitting.IndexSet.Id Δ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.EqId\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">EqId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L107-L108","name":"SimplicialObject.Splitting.IndexSet.instInhabited","line":107,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.instInhabited\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L104-L105","name":"SimplicialObject.Splitting.IndexSet.id","line":104,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.id","doc":"The distinguished element in `Splitting.IndexSet Δ` which corresponds to the\nidentity of `Δ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.id\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L103-L103","name":"SimplicialObject.Splitting.IndexSet.id_fst","line":103,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.id_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.id_fst\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">id_fst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.id\">SimplicialObject.Splitting.IndexSet.id</a> <span class=\"fn\">Δ</span></span>)</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Δ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L103-L103","name":"SimplicialObject.Splitting.IndexSet.id_snd_coe","line":103,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.id_snd_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.id_snd_coe\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">id_snd_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.id\">SimplicialObject.Splitting.IndexSet.id</a> <span class=\"fn\">Δ</span></span>)</span>.snd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">Δ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L80-L97","name":"SimplicialObject.Splitting.IndexSet.instFintype","line":80,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.instFintype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.instFintype\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">instFintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L71-L78","name":"SimplicialObject.Splitting.IndexSet.ext","line":71,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.ext\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A₁</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A₂</span>.fst</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">A₁</span>.e</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a> <span class=\"fn\">⋯</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A₂</span>.e</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L69-L69","name":"SimplicialObject.Splitting.IndexSet.ext'","line":69,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.ext'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.ext'\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">ext'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">A</span>.fst</span>, <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">A</span>.e</span>, <span class=\"fn\">⋯</span>⟩</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L66-L67","name":"SimplicialObject.Splitting.IndexSet.instEpiSimplexCategoryE","line":66,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.instEpiSimplexCategoryE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.instEpiSimplexCategoryE\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">instEpiSimplexCategoryE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\"><span class=\"fn\">A</span>.e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L63-L64","name":"SimplicialObject.Splitting.IndexSet.e","line":63,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.e","doc":"The epimorphism in `SimplexCategory` associated to `A : Splitting.IndexSet Δ` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.e\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">e</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">Δ</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\"><span class=\"fn\">A</span>.fst</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L57-L58","name":"SimplicialObject.Splitting.IndexSet.mk","line":57,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.mk","doc":"The element in `Splitting.IndexSet Δ` attached to an epimorphism `f : Δ ⟶ Δ'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.mk\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\">SimplicialObject.Splitting.IndexSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">Δ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L56-L56","name":"SimplicialObject.Splitting.IndexSet.mk_fst","line":56,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.mk_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.mk_fst\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">mk_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.mk\">SimplicialObject.Splitting.IndexSet.mk</a> <span class=\"fn\">f</span></span>)</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">Δ'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L56-L56","name":"SimplicialObject.Splitting.IndexSet.mk_snd_coe","line":56,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.mk_snd_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.mk_snd_coe\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span>.<span class=\"name\">mk_snd_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Δ' : <a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Δ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Δ'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet.mk\">SimplicialObject.Splitting.IndexSet.mk</a> <span class=\"fn\">f</span></span>)</span>.snd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/AlgebraicTopology/SplitSimplicialObject.lean#L50-L51","name":"SimplicialObject.Splitting.IndexSet","line":50,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet","doc":"The index set which appears in the definition of split simplicial objects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SplitSimplicialObject.html#SimplicialObject.Splitting.IndexSet\"><span class=\"name\">SimplicialObject</span>.<span class=\"name\">Splitting</span>.<span class=\"name\">IndexSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Δ : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory\">SimplexCategory</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}