{"name":"Mathlib.Analysis.Complex.Hadamard","instances":[],"imports":["Init","Mathlib.Analysis.SpecialFunctions.Pow.Deriv","Mathlib.Analysis.Complex.PhragmenLindelof"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L377-L418","name":"Complex.HadamardThreeLines.norm_le_interp_of_mem_verticalClosedStrip'","line":377,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_le_interp_of_mem_verticalClosedStrip'","doc":"**Hadamard three-line theorem** on `re ⁻¹' [0,1]` (Variant in simpler terms): Let `f` be a\nbounded function, continuous on the closed strip `re ⁻¹' [0,1]` and differentiable on open strip\n`re ⁻¹' (0,1)`. If, for all `z.re = 0`, `‖f z‖ ≤ a` for some `a ∈ ℝ` and, similarly, for all\n`z.re = 1`, `‖f z‖ ≤ b` for some `b ∈ ℝ` then for all `z` in the closed strip\n`re ⁻¹' [0,1]` the inequality `‖f(z)‖ ≤ a ^ (1 - z.re) * b ^ z.re` holds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_le_interp_of_mem_verticalClosedStrip'\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">norm_le_interp_of_mem_verticalClosedStrip'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hd : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/DiffContOnCl.html#DiffContOnCl\">DiffContOnCl</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.re\">Complex.re</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.re\">Complex.re</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">{<span class=\"fn\">1</span>}</span></span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">z</span>.re</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">z</span>.re</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L363-L370","name":"Complex.HadamardThreeLines.norm_le_interpStrip_of_mem_verticalClosedStrip","line":363,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_le_interpStrip_of_mem_verticalClosedStrip","doc":"**Hadamard three-line theorem** on `re ⁻¹' [0,1]`: If `f` is a bounded function, continuous on the\nclosed strip `re ⁻¹' [0,1]` and differentiable on open strip `re ⁻¹' (0,1)`, then for\n`M(x) := sup ((norm ∘ f) '' (re ⁻¹' {x}))` we have that for all `z` in the closed strip\n`re ⁻¹' [0,1]` the inequality `‖f(z)‖ ≤ M(0) ^ (1 - z.re) * M(1) ^ z.re` holds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_le_interpStrip_of_mem_verticalClosedStrip\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">norm_le_interpStrip_of_mem_verticalClosedStrip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hd : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/DiffContOnCl.html#DiffContOnCl\">DiffContOnCl</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip\">Complex.HadamardThreeLines.interpStrip</a> <span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L320-L356","name":"Complex.HadamardThreeLines.norm_le_interpStrip_of_mem_verticalStrip_zero","line":320,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_le_interpStrip_of_mem_verticalStrip_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_le_interpStrip_of_mem_verticalStrip_zero\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">norm_le_interpStrip_of_mem_verticalStrip_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hd : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/DiffContOnCl.html#DiffContOnCl\">DiffContOnCl</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip\">Complex.HadamardThreeLines.interpStrip</a> <span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L312-L318","name":"Complex.HadamardThreeLines.eventuallyle","line":312,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.eventuallyle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.eventuallyle\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">eventuallyle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hd : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/DiffContOnCl.html#DiffContOnCl\">DiffContOnCl</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhdsWithin\">nhdsWithin</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">fun (<span class=\"fn\">ε</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>       <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">z</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L297-L310","name":"Complex.HadamardThreeLines.norm_le_interpStrip_of_mem_verticalClosedStrip_eps","line":297,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_le_interpStrip_of_mem_verticalClosedStrip_eps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_le_interpStrip_of_mem_verticalClosedStrip_eps\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">norm_le_interpStrip_of_mem_verticalClosedStrip_eps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hd : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/DiffContOnCl.html#DiffContOnCl\">DiffContOnCl</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>       <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">z</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L276-L295","name":"Complex.HadamardThreeLines.diffContOnCl_interpStrip","line":276,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.diffContOnCl_interpStrip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.diffContOnCl_interpStrip\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">diffContOnCl_interpStrip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/DiffContOnCl.html#DiffContOnCl\">DiffContOnCl</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip\">Complex.HadamardThreeLines.interpStrip</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L255-L274","name":"Complex.HadamardThreeLines.interpStrip_eq_of_mem_verticalStrip","line":255,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip_eq_of_mem_verticalStrip","doc":"Rewrite for `InterpStrip` on the open vertical strip. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip_eq_of_mem_verticalStrip\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">interpStrip_eq_of_mem_verticalStrip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip\">Complex.HadamardThreeLines.interpStrip</a> <span class=\"fn\">f</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span>)</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L250-L252","name":"Complex.HadamardThreeLines.interpStrip_eq_of_zero","line":250,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip_eq_of_zero","doc":"Rewrite for `InterpStrip` when `0 = sSupNormIm f 0` or `0 = sSupNormIm f 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip_eq_of_zero\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">interpStrip_eq_of_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip\">Complex.HadamardThreeLines.interpStrip</a> <span class=\"fn\">f</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L245-L247","name":"Complex.HadamardThreeLines.interpStrip_eq_of_pos","line":245,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip_eq_of_pos","doc":"Rewrite for `InterpStrip` when `0 < sSupNormIm f 0` and `0 < sSupNormIm f 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip_eq_of_pos\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">interpStrip_eq_of_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h0 : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip\">Complex.HadamardThreeLines.interpStrip</a> <span class=\"fn\">f</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span>)</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L239-L242","name":"Complex.HadamardThreeLines.interpStrip","line":239,"kind":"def","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip","doc":"The interpolation of `sSupNormIm` on the two boundaries.\nIn other words, this is the right side of the target inequality:\n`|f(z)| ≤ |M(0) ^ (1-z)| * |M(1) ^ z|`.\n\nNote that if `(sSupNormIm f 0) = 0 ∨ (sSupNormIm f 1) = 0` then the power is not continuous\nsince `0 ^ 0 = 1`. Hence the use of `ite`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.interpStrip\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">interpStrip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L202-L224","name":"Complex.HadamardThreeLines.norm_mul_invInterpStrip_le_one_of_mem_verticalClosedStrip","line":202,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_mul_invInterpStrip_le_one_of_mem_verticalClosedStrip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_mul_invInterpStrip_le_one_of_mem_verticalClosedStrip\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">norm_mul_invInterpStrip_le_one_of_mem_verticalClosedStrip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hd : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/DiffContOnCl.html#DiffContOnCl\">DiffContOnCl</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.F\">Complex.HadamardThreeLines.F</a> <span class=\"fn\">f</span> <span class=\"fn\">ε</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L181-L200","name":"Complex.HadamardThreeLines.F_edge_le_one","line":181,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.F_edge_le_one","doc":"Proof that `F` is bounded by one one the edges. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.F_edge_le_one\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">F_edge_le_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.re\">Complex.re</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">{<span class=\"fn\">0</span>, <span class=\"fn\">1</span>}</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.F\">Complex.HadamardThreeLines.F</a> <span class=\"fn\">f</span> <span class=\"fn\">ε</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L141-L178","name":"Complex.HadamardThreeLines.F_BddAbove","line":141,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.F_BddAbove","doc":"When the function `f` is bounded above on a vertical strip, then so is `F`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.F_BddAbove\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">F_BddAbove</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.F\">Complex.HadamardThreeLines.F</a> <span class=\"fn\">f</span> <span class=\"fn\">ε</span></span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L135-L138","name":"Complex.HadamardThreeLines.norm_lt_sSupNormIm_eps","line":135,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_lt_sSupNormIm_eps","doc":"Alternative version of `norm_le_sSupNormIm` with a strict inequality and a positive `ε`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_lt_sSupNormIm_eps\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">norm_lt_sSupNormIm_eps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hD : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">z</span>.re</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L125-L132","name":"Complex.HadamardThreeLines.norm_le_sSupNormIm","line":125,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_le_sSupNormIm","doc":"If `f` is bounded on the unit vertical strip, then `f` is bounded by `sSupNormIm` there. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.norm_le_sSupNormIm\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">norm_le_sSupNormIm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hD : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">norm</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\">Complex.HadamardThreeLines.verticalClosedStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">z</span>.re</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L111-L122","name":"Complex.HadamardThreeLines.diffContOnCl_invInterpStrip","line":111,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.diffContOnCl_invInterpStrip","doc":"The function `invInterpStrip` is `diffContOnCl`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.diffContOnCl_invInterpStrip\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">diffContOnCl_invInterpStrip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/DiffContOnCl.html#DiffContOnCl\">DiffContOnCl</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">z</span> : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.invInterpStrip\">Complex.HadamardThreeLines.invInterpStrip</a> <span class=\"fn\">f</span> <span class=\"fn\">z</span> <span class=\"fn\">ε</span></span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\">Complex.HadamardThreeLines.verticalStrip</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L102-L108","name":"Complex.HadamardThreeLines.abs_invInterpStrip","line":102,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.abs_invInterpStrip","doc":"Useful rewrite for the absolute value of `invInterpStrip`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.abs_invInterpStrip\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">abs_invInterpStrip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Complex.abs</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.invInterpStrip\">Complex.HadamardThreeLines.invInterpStrip</a> <span class=\"fn\">f</span> <span class=\"fn\">z</span> <span class=\"fn\">ε</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span></span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.re</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span></span></span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">z</span>.re</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L98-L99","name":"Complex.HadamardThreeLines.sSupNormIm_eps_pos","line":98,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm_eps_pos","doc":"`sSup` of `norm` translated by `ε > 0` is positive applied to the image of `f` on the\nvertical line `re z = x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm_eps_pos\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">sSupNormIm_eps_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L91-L94","name":"Complex.HadamardThreeLines.sSupNormIm_nonneg","line":91,"kind":"theorem","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm_nonneg","doc":"`sSup` of `norm` is nonneg applied to the image of `f` on the vertical line `re z = x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm_nonneg\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">sSupNormIm_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\">Complex.HadamardThreeLines.sSupNormIm</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L88-L88","name":"Complex.HadamardThreeLines.F","line":88,"kind":"def","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.F","doc":"A function useful for the proofs steps. We will aim to show that it is bounded by 1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.F\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">E</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L84-L85","name":"Complex.HadamardThreeLines.invInterpStrip","line":84,"kind":"def","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.invInterpStrip","doc":"The inverse of the interpolation of `sSupNormIm` on the two boundaries.\nIn other words, this is the inverse of the right side of the target inequality:\n`|f(z)| ≤ |M(0) ^ (1-z)| * |M(1) ^ z|`.\n\nShifting this by a positive epsilon allows us to prove the case when either of the boundaries\nis zero."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.invInterpStrip\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">invInterpStrip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L69-L71","name":"Complex.HadamardThreeLines.sSupNormIm","line":69,"kind":"def","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm","doc":"The supremum of the norm of `f` on imaginary lines. (Fixed real part)\nThis is also known as the function `M` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.sSupNormIm\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">sSupNormIm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L65-L65","name":"Complex.HadamardThreeLines.verticalClosedStrip","line":65,"kind":"def","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip","doc":"The vertical strip in the complex plane containing all `z ∈ ℂ` such that `z.re ∈ Icc a b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalClosedStrip\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">verticalClosedStrip</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Complex/Hadamard.lean#L62-L62","name":"Complex.HadamardThreeLines.verticalStrip","line":62,"kind":"def","docLink":"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip","doc":"The vertical strip in the complex plane containing all `z ∈ ℂ` such that `z.re ∈ Ioo a b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Complex/Hadamard.html#Complex.HadamardThreeLines.verticalStrip\"><span class=\"name\">Complex</span>.<span class=\"name\">HadamardThreeLines</span>.<span class=\"name\">verticalStrip</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"}]}