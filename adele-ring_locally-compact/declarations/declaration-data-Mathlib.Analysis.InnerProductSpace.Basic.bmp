{"name":"Mathlib.Analysis.InnerProductSpace.Basic","instances":[{"typeNames":[],"name":"InnerProductSpace.toUniformConvexSpace","className":"UniformConvexSpace"},{"typeNames":[],"name":"IsROrC.innerProductSpace","className":"InnerProductSpace"},{"typeNames":["Subtype"],"name":"Submodule.innerProductSpace","className":"InnerProductSpace"},{"typeNames":["Real"],"name":"InnerProductSpace.complexToReal","className":"InnerProductSpace"},{"typeNames":["UniformSpace.Completion"],"name":"UniformSpace.Completion.toInner","className":"Inner"},{"typeNames":["UniformSpace.Completion"],"name":"UniformSpace.Completion.innerProductSpace","className":"InnerProductSpace"}],"imports":["Init","Mathlib.Algebra.DirectSum.Module","Mathlib.Analysis.Complex.Basic","Mathlib.Analysis.Convex.Uniform","Mathlib.Analysis.NormedSpace.Completion","Mathlib.Analysis.NormedSpace.BoundedLinearMaps"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2349-L2373","name":"UniformSpace.Completion.innerProductSpace","line":2349,"kind":"instance","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#UniformSpace.Completion.innerProductSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#UniformSpace.Completion.innerProductSpace\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">Completion</span>.<span class=\"name\">innerProductSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Completion.html#UniformSpace.Completion\">UniformSpace.Completion</a> <span class=\"fn\">E</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2344-L2346","name":"UniformSpace.Completion.Continuous.inner","line":2344,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#UniformSpace.Completion.Continuous.inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#UniformSpace.Completion.Continuous.inner\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">Completion</span>.<span class=\"name\">Continuous</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Completion.html#UniformSpace.Completion\">UniformSpace.Completion</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Completion.html#UniformSpace.Completion\">UniformSpace.Completion</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Œ±</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2329-L2341","name":"UniformSpace.Completion.continuous_inner","line":2329,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#UniformSpace.Completion.continuous_inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#UniformSpace.Completion.continuous_inner\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">Completion</span>.<span class=\"name\">continuous_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">inner</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2324-L2326","name":"UniformSpace.Completion.inner_coe","line":2324,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#UniformSpace.Completion.inner_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#UniformSpace.Completion.inner_coe\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">Completion</span>.<span class=\"name\">inner_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">E</span></span> <span class=\"fn\">a</span></span>, <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">E</span></span> <span class=\"fn\">b</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">a</span>, <span class=\"fn\">b</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2319-L2321","name":"UniformSpace.Completion.toInner","line":2319,"kind":"instance","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#UniformSpace.Completion.toInner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#UniformSpace.Completion.toInner\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">Completion</span>.<span class=\"name\">toInner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ùïú'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\">Inner</a> <span class=\"fn\">ùïú'</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\">Inner</a> <span class=\"fn\">ùïú'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Completion.html#UniformSpace.Completion\">UniformSpace.Completion</a> <span class=\"fn\">E'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2306-L2310","name":"ContinuousLinearMap.reApplyInnerSelf_smul","line":2306,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf_smul\"><span class=\"name\">ContinuousLinearMap</span>.<span class=\"name\">reApplyInnerSelf_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">ùïú</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf\">ContinuousLinearMap.reApplyInnerSelf</a> <span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">c</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf\">ContinuousLinearMap.reApplyInnerSelf</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2301-L2303","name":"ContinuousLinearMap.reApplyInnerSelf_continuous","line":2301,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf_continuous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf_continuous\"><span class=\"name\">ContinuousLinearMap</span>.<span class=\"name\">reApplyInnerSelf_continuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf\">ContinuousLinearMap.reApplyInnerSelf</a> <span class=\"fn\">T</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2296-L2298","name":"ContinuousLinearMap.reApplyInnerSelf_apply","line":2296,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf_apply\"><span class=\"name\">ContinuousLinearMap</span>.<span class=\"name\">reApplyInnerSelf_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf\">ContinuousLinearMap.reApplyInnerSelf</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">x</span></span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2292-L2293","name":"ContinuousLinearMap.reApplyInnerSelf","line":2292,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf","doc":"Extract a real bilinear form from an operator `T`,\nby taking the pairing `fun x ‚Ü¶ re ‚ü™T x, x‚ü´`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.reApplyInnerSelf\"><span class=\"name\">ContinuousLinearMap</span>.<span class=\"name\">reApplyInnerSelf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2282-L2283","name":"Continuous.inner","line":2282,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Continuous.inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Continuous.inner\"><span class=\"name\">Continuous</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\">Œ±</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">t</span></span>, <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">t</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2277-L2278","name":"ContinuousOn.inner","line":2277,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousOn.inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousOn.inner\"><span class=\"name\">ContinuousOn</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousOn\">ContinuousOn</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousOn\">ContinuousOn</a> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousOn\">ContinuousOn</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\">Œ±</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">t</span></span>, <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">t</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2272-L2274","name":"ContinuousAt.inner","line":2272,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousAt.inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousAt.inner\"><span class=\"name\">ContinuousAt</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousAt\">ContinuousAt</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousAt\">ContinuousAt</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousAt\">ContinuousAt</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\">Œ±</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">t</span></span>, <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">t</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2267-L2269","name":"ContinuousWithinAt.inner","line":2267,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousWithinAt.inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousWithinAt.inner\"><span class=\"name\">ContinuousWithinAt</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousWithinAt\">ContinuousWithinAt</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousWithinAt\">ContinuousWithinAt</a> <span class=\"fn\">g</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousWithinAt\">ContinuousWithinAt</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\">Œ±</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">t</span></span>, <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">t</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2260-L2262","name":"Filter.Tendsto.inner","line":2260,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Filter.Tendsto.inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Filter.Tendsto.inner\"><span class=\"name\">Filter</span>.<span class=\"name\">Tendsto</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">g</span> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\">Œ±</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">t</span></span>, <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">t</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2253-L2255","name":"continuous_inner","line":2253,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#continuous_inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#continuous_inner\"><span class=\"name\">continuous_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">E</span></span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">p</span>.1</span>, <span class=\"fn\"><span class=\"fn\">p</span>.2</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2240-L2241","name":"inner_map_complex","line":2240,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_map_complex","doc":"The inner product on an inner product space of dimension 2 can be evaluated in terms\nof a complex-number representation of the space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_map_complex\"><span class=\"name\">inner_map_complex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">‚âÉ‚Çó·µ¢[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">]</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span></span>)</span>.re</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2234-L2235","name":"Complex.inner","line":2234,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Complex.inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Complex.inner\"><span class=\"name\">Complex</span>.<span class=\"name\">inner</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">w</span>, <span class=\"fn\">z</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span>)</span>.re</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2228-L2230","name":"InnerProductSpace.complexToReal","line":2228,"kind":"instance","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.complexToReal","doc":"A complex inner product implies a real inner product "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.complexToReal\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">complexToReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2221-L2223","name":"real_inner_I_smul_self","line":2221,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_I_smul_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_I_smul_self\"><span class=\"name\">real_inner_I_smul_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">IsROrC.I</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2216-L2218","name":"real_inner_eq_re_inner","line":2216,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_eq_re_inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_eq_re_inner\"><span class=\"name\">real_inner_eq_re_inner</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2200-L2211","name":"InnerProductSpace.isROrCToReal","line":2200,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.isROrCToReal","doc":"A general inner product space structure implies a real inner product structure. This is not\nregistered as an instance since it creates problems with the case `ùïú = ‚Ñù`, but in can be used in a\nproof to obtain a real inner product space structure from a given `ùïú`-inner product space\nstructure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.isROrCToReal\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">isROrCToReal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2193-L2193","name":"Inner.isROrCToReal","line":2193,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner.isROrCToReal","doc":"A general inner product implies a real inner product. This is not registered as an instance\nsince it creates problems with the case `ùïú = ‚Ñù`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner.isROrCToReal\"><span class=\"name\">Inner</span>.<span class=\"name\">isROrCToReal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\">Inner</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2176-L2181","name":"DirectSum.IsInternal.collectedBasis_orthonormal","line":2176,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#DirectSum.IsInternal.collectedBasis_orthonormal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#DirectSum.IsInternal.collectedBasis_orthonormal\"><span class=\"name\">DirectSum</span>.<span class=\"name\">IsInternal</span>.<span class=\"name\">collectedBasis_orthonormal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\">‚Ü•<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#Submodule.subtype‚Çó·µ¢\">Submodule.subtype‚Çó·µ¢</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hV_sum : <span class=\"fn\"><a href=\"./Mathlib/Algebra/DirectSum/Basic.html#DirectSum.IsInternal\">DirectSum.IsInternal</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_6</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v_family : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚Ü•<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv_family : <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v_family</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/DirectSum/Module.html#DirectSum.IsInternal.collectedBasis\">DirectSum.IsInternal.collectedBasis</a> <span class=\"fn\">hV_sum</span> <span class=\"fn\">v_family</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2158-L2173","name":"OrthogonalFamily.independent","line":2158,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.independent","doc":"An orthogonal family forms an independent family of subspaces; that is, any collection of\nelements each from a different subspace in the family is linearly independent. In particular, the\npairwise intersections of elements of the family are 0. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.independent\"><span class=\"name\">OrthogonalFamily</span>.<span class=\"name\">independent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\">‚Ü•<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#Submodule.subtype‚Çó·µ¢\">Submodule.subtype‚Çó·µ¢</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SupIndep.html#CompleteLattice.Independent\">CompleteLattice.Independent</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2113-L2152","name":"OrthogonalFamily.summable_iff_norm_sq_summable","line":2113,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.summable_iff_norm_sq_summable","doc":"A family `f` of mutually-orthogonal elements of `E` is summable, if and only if\n`(fun i ‚Ü¶ ‚Äñf i‚Äñ ^ 2)` is summable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.summable_iff_norm_sq_summable\"><span class=\"name\">OrthogonalFamily</span>.<span class=\"name\">summable_iff_norm_sq_summable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">G</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/InfiniteSum/Defs.html#Summable\">Summable</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/InfiniteSum/Defs.html#Summable\">Summable</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2086-L2108","name":"OrthogonalFamily.norm_sq_diff_sum","line":2086,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.norm_sq_diff_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.norm_sq_diff_sum\"><span class=\"name\">OrthogonalFamily</span>.<span class=\"name\">norm_sq_diff_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">G</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s‚ÇÅ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s‚ÇÇ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s‚ÇÅ</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">s‚ÇÇ</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s‚ÇÇ</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">s‚ÇÅ</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2070-L2083","name":"OrthogonalFamily.orthonormal_sigma_orthonormal","line":2070,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.orthonormal_sigma_orthonormal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.orthonormal_sigma_orthonormal\"><span class=\"name\">OrthogonalFamily</span>.<span class=\"name\">orthonormal_sigma_orthonormal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">G</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_6</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v_family : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span> ‚Üí <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv_family : <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v_family</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">(i : <span class=\"fn\">Œπ</span>) √ó <span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\"><span class=\"fn\">a</span>.fst</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v_family</span> <span class=\"fn\"><span class=\"fn\">a</span>.fst</span> <span class=\"fn\"><span class=\"fn\">a</span>.snd</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2065-L2067","name":"OrthogonalFamily.comp","line":2065,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.comp","doc":"The composition of an orthogonal family of subspaces with an injective function is also an\northogonal family. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.comp\"><span class=\"name\">OrthogonalFamily</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">G</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ≥</span> ‚Üí <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\">Œ≥</span>) =&gt; <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\">Œ≥</span>) =&gt; <span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2056-L2060","name":"OrthogonalFamily.norm_sum","line":2056,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.norm_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.norm_sum\"><span class=\"name\">OrthogonalFamily</span>.<span class=\"name\">norm_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">G</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span></span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2041-L2053","name":"OrthogonalFamily.inner_sum","line":2041,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.inner_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.inner_sum\"><span class=\"name\">OrthogonalFamily</span>.<span class=\"name\">inner_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">G</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l‚ÇÅ : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l‚ÇÇ : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l‚ÇÅ</span> <span class=\"fn\">i</span></span>)</span></span></span></span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l‚ÇÇ</span> <span class=\"fn\">j</span></span>)</span></span></span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">l‚ÇÅ</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">l‚ÇÇ</span> <span class=\"fn\">i</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2030-L2038","name":"OrthogonalFamily.inner_right_fintype","line":2030,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.inner_right_fintype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.inner_right_fintype\"><span class=\"name\">OrthogonalFamily</span>.<span class=\"name\">inner_right_fintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">G</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">Œπ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">v</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">j</span></span>)</span></span></span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2014-L2026","name":"OrthogonalFamily.inner_right_dfinsupp","line":2014,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.inner_right_dfinsupp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.inner_right_dfinsupp\"><span class=\"name\">OrthogonalFamily</span>.<span class=\"name\">inner_right_dfinsupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">G</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec_V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>) ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Algebra/DirectSum/Basic.html#DirectSum\">DirectSum</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">Œπ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">v</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Basic.html#DFinsupp.sum\">DFinsupp.sum</a> <span class=\"fn\">l</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">j</span></span>)</span></span></span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2007-L2011","name":"OrthogonalFamily.eq_ite","line":2007,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.eq_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily.eq_ite\"><span class=\"name\">OrthogonalFamily</span>.<span class=\"name\">eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">G</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">Œπ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">Œπ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">v</span></span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">w</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> then <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">v</span></span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">w</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> else <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L2002-L2004","name":"Orthonormal.orthogonalFamily","line":2002,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.orthogonalFamily","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.orthogonalFamily\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">orthogonalFamily</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\">OrthogonalFamily</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">_i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/OperatorNorm/Basic.html#LinearIsometry.toSpanSingleton\">LinearIsometry.toSpanSingleton</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span> <span class=\"fn\">‚ãØ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1993-L1995","name":"OrthogonalFamily","line":1993,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily","doc":"An indexed family of mutually-orthogonal subspaces of an inner product space `E`.\n\nThe simple way to express this concept would be as a condition on `V : Œπ ‚Üí Submodule ùïú E`.  We\ninstead implement it as a condition on a family of inner product spaces each equipped with an\nisometric embedding into `E`, thus making it a property of morphisms rather than subobjects.\nThe connection to the subobject spelling is shown in `orthogonalFamily_iff_pairwise`.\n\nThis definition is less lightweight, but allows for better definitional properties when the inner\nproduct space structure on each of the submodules is important -- for example, when considering\ntheir Hilbert sum (`PiLp V 2`).  For example, given an orthonormal set of vectors `v : Œπ ‚Üí E`,\nwe have an associated orthogonal family of one-dimensional subspaces of `E`, which it is convenient\nto be able to discuss using `Œπ ‚Üí ùïú` rather than `Œ† i : Œπ, span ùïú (v i)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#OrthogonalFamily\"><span class=\"name\">OrthogonalFamily</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(V : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1965-L1969","name":"orthonormal_span","line":1965,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_span","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_span\"><span class=\"name\">orthonormal_span</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">‚ãØ</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1960-L1962","name":"Orthonormal.codRestrict","line":1960,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.codRestrict","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.codRestrict\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">codRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hvs : <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Function.html#Set.codRestrict\">Set.codRestrict</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">‚Üë<span class=\"fn\">s</span></span>)</span> <span class=\"fn\">hvs</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1956-L1957","name":"Submodule.coe_inner","line":1956,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Submodule.coe_inner","doc":"The inner product on submodules is the same as on the ambient space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Submodule.coe_inner\"><span class=\"name\">Submodule</span>.<span class=\"name\">coe_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(W : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">‚Ü•<span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">‚Ü•<span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">‚Üë<span class=\"fn\">x</span></span>, <span class=\"fn\">‚Üë<span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1945-L1951","name":"Submodule.innerProductSpace","line":1945,"kind":"instance","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Submodule.innerProductSpace","doc":"Induced inner product on a submodule. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Submodule.innerProductSpace\"><span class=\"name\">Submodule</span>.<span class=\"name\">innerProductSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(W : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚Ü•<span class=\"fn\">W</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1937-L1938","name":"IsROrC.inner_apply","line":1937,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#IsROrC.inner_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#IsROrC.inner_apply\"><span class=\"name\">IsROrC</span>.<span class=\"name\">inner_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">ùïú</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">ùïú</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1928-L1933","name":"IsROrC.innerProductSpace","line":1928,"kind":"instance","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#IsROrC.innerProductSpace","doc":"A field `ùïú` satisfying `IsROrC` is itself a `ùïú`-inner product space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#IsROrC.innerProductSpace\"><span class=\"name\">IsROrC</span>.<span class=\"name\">innerProductSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">ùïú</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1913-L1922","name":"Orthonormal.inner_products_summable","line":1913,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_products_summable","doc":"The sum defined in Bessel's inequality is summable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_products_summable\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_products_summable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/InfiniteSum/Defs.html#Summable\">Summable</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1906-L1909","name":"Orthonormal.tsum_inner_products_le","line":1906,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.tsum_inner_products_le","doc":"Bessel's inequality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.tsum_inner_products_le\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">tsum_inner_products_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚àë' (i : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1885-L1901","name":"Orthonormal.sum_inner_products_le","line":1885,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.sum_inner_products_le","doc":"Bessel's inequality for finite sums. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.sum_inner_products_le\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">sum_inner_products_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1864-L1875","name":"isBoundedBilinearMap_inner","line":1864,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#isBoundedBilinearMap_inner","doc":"When an inner product space `E` over `ùïú` is considered as a real normed space, its inner\nproduct satisfies `IsBoundedBilinearMap`.\n\nIn order to state these results, we need a `NormedSpace ‚Ñù E` instance. We will later establish\nsuch an instance by restriction-of-scalars, `InnerProductSpace.isROrCToReal ùïú E`, but this\ninstance may be not definitionally equal to some other ‚Äúnatural‚Äù instance. So, we assume\n`[NormedSpace ‚Ñù E]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#isBoundedBilinearMap_inner\"><span class=\"name\">isBoundedBilinearMap_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/BoundedLinearMaps.html#IsBoundedBilinearMap\">IsBoundedBilinearMap</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">E</span></span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">p</span>.1</span>, <span class=\"fn\"><span class=\"fn\">p</span>.2</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1843-L1850","name":"ContinuousLinearMap.toSesqForm_apply_norm_le","line":1843,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.toSesqForm_apply_norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.toSesqForm_apply_norm_le\"><span class=\"name\">ContinuousLinearMap</span>.<span class=\"name\">toSesqForm_apply_norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">E'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">E'</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ContinuousLinearMap.toSesqForm</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">v</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">f</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">v</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1839-L1840","name":"ContinuousLinearMap.toSesqForm_apply_coe","line":1839,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.toSesqForm_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.toSesqForm_apply_coe\"><span class=\"name\">ContinuousLinearMap</span>.<span class=\"name\">toSesqForm_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ContinuousLinearMap.toSesqForm</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap.comp\">ContinuousLinearMap.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL\">innerSL</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1833-L1835","name":"ContinuousLinearMap.toSesqForm","line":1833,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.toSesqForm","doc":"Given `f : E ‚ÜíL[ùïú] E'`, construct the continuous sesquilinear form `fun x y ‚Ü¶ ‚ü™x, A y‚ü´`, given\nas a continuous linear map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ContinuousLinearMap.toSesqForm\"><span class=\"name\">ContinuousLinearMap</span>.<span class=\"name\">toSesqForm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">E'</span></span>)</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">E'</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL‚ãÜ[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1819-L1820","name":"innerSLFlip_apply","line":1819,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSLFlip_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSLFlip_apply\"><span class=\"name\">innerSLFlip_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSLFlip\">innerSLFlip</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1812-L1814","name":"innerSLFlip","line":1812,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSLFlip","doc":"The inner product as a continuous sesquilinear map, with the two arguments flipped. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSLFlip\"><span class=\"name\">innerSLFlip</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL‚ãÜ[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1798-L1807","name":"innerSL_apply_norm","line":1798,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL_apply_norm","doc":"`innerSL` is an isometry. Note that the associated `LinearIsometry` is defined in\n`InnerProductSpace.Dual` as `toDualMap`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL_apply_norm\"><span class=\"name\">innerSL_apply_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL\">innerSL</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1790-L1791","name":"innerSL_apply","line":1790,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL_apply\"><span class=\"name\">innerSL_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL\">innerSL</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\">w</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1784-L1785","name":"innerSL_apply_coe","line":1784,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL_apply_coe\"><span class=\"name\">innerSL_apply_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL\">innerSL</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">w</span> : <span class=\"fn\">E</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\">w</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1777-L1779","name":"innerSL","line":1777,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL","doc":"The inner product as a continuous sesquilinear map. Note that `toDualMap` (resp. `toDual`)\nin `InnerProductSpace.Dual` is a version of this given as a linear isometry (resp. linear\nisometric equivalence). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#innerSL\"><span class=\"name\">innerSL</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL‚ãÜ[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">‚ÜíL[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1772-L1772","name":"inner‚Çó_apply","line":1772,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çó_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çó_apply\"><span class=\"name\">inner‚Çó_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çó\">inner‚Çó</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\">w</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1766-L1768","name":"flip_inner‚Çó","line":1766,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#flip_inner‚Çó","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#flip_inner‚Çó\"><span class=\"name\">flip_inner‚Çó</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.flip\">LinearMap.flip</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çó\">inner‚Çó</a> <span class=\"fn\">F</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çó\">inner‚Çó</a> <span class=\"fn\">F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1764-L1764","name":"inner‚Çó","line":1764,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çó","doc":"The inner product as a bilinear map in the real case. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çó\"><span class=\"name\">inner‚Çó</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1758-L1759","name":"inner‚Çõ‚Çó_apply","line":1758,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çõ‚Çó_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çõ‚Çó_apply\"><span class=\"name\">inner‚Çõ‚Çó_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çõ‚Çó\">inner‚Çõ‚Çó</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\">w</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1753-L1754","name":"inner‚Çõ‚Çó_apply_coe","line":1753,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çõ‚Çó_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çõ‚Çó_apply_coe\"><span class=\"name\">inner‚Çõ‚Çó_apply_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çõ‚Çó\">inner‚Çõ‚Çó</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">w</span> : <span class=\"fn\">E</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\">w</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1747-L1749","name":"inner‚Çõ‚Çó","line":1747,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çõ‚Çó","doc":"The inner product as a sesquilinear map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner‚Çõ‚Çó\"><span class=\"name\">inner‚Çõ‚Çó</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó‚ãÜ[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1731-L1741","name":"inner_sum_smul_sum_smul_of_sum_eq_zero","line":1731,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_sum_smul_sum_smul_of_sum_eq_zero","doc":"The inner product of two weighted sums, where the weights in each\nsum add to 0, in terms of the norms of pairwise differences. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_sum_smul_sum_smul_of_sum_eq_zero\"><span class=\"name\">inner_sum_smul_sum_smul_of_sum_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ‚ÇÅ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ‚ÇÅ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w‚ÇÅ : <span class=\"fn\"><span class=\"fn\">Œπ‚ÇÅ</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v‚ÇÅ : <span class=\"fn\"><span class=\"fn\">Œπ‚ÇÅ</span> ‚Üí <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h‚ÇÅ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s‚ÇÅ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ‚ÇÅ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">w‚ÇÅ</span> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ‚ÇÇ : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ‚ÇÇ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w‚ÇÇ : <span class=\"fn\"><span class=\"fn\">Œπ‚ÇÇ</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v‚ÇÇ : <span class=\"fn\"><span class=\"fn\">Œπ‚ÇÇ</span> ‚Üí <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h‚ÇÇ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s‚ÇÇ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ‚ÇÇ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">w‚ÇÇ</span> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s‚ÇÅ</span> <span class=\"fn\">fun (<span class=\"fn\">i‚ÇÅ</span> : <span class=\"fn\">Œπ‚ÇÅ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w‚ÇÅ</span> <span class=\"fn\">i‚ÇÅ</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">v‚ÇÅ</span> <span class=\"fn\">i‚ÇÅ</span></span></span></span></span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s‚ÇÇ</span> <span class=\"fn\">fun (<span class=\"fn\">i‚ÇÇ</span> : <span class=\"fn\">Œπ‚ÇÇ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w‚ÇÇ</span> <span class=\"fn\">i‚ÇÇ</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">v‚ÇÇ</span> <span class=\"fn\">i‚ÇÇ</span></span></span></span></span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s‚ÇÅ</span> <span class=\"fn\">fun (<span class=\"fn\">i‚ÇÅ</span> : <span class=\"fn\">Œπ‚ÇÅ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s‚ÇÇ</span> <span class=\"fn\">fun (<span class=\"fn\">i‚ÇÇ</span> : <span class=\"fn\">Œπ‚ÇÇ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w‚ÇÅ</span> <span class=\"fn\">i‚ÇÅ</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">w‚ÇÇ</span> <span class=\"fn\">i‚ÇÇ</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v‚ÇÅ</span> <span class=\"fn\">i‚ÇÅ</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">v‚ÇÇ</span> <span class=\"fn\">i‚ÇÇ</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v‚ÇÅ</span> <span class=\"fn\">i‚ÇÅ</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">v‚ÇÇ</span> <span class=\"fn\">i‚ÇÇ</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span></span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a>     <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1722-L1727","name":"eq_of_norm_le_re_inner_eq_norm_sq","line":1722,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#eq_of_norm_le_re_inner_eq_norm_sq","doc":"The sphere of radius `r = ‚Äñy‚Äñ` is tangent to the plane `‚ü™x, y‚ü´ = ‚Äñy‚Äñ ^ 2` at `x = y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#eq_of_norm_le_re_inner_eq_norm_sq\"><span class=\"name\">eq_of_norm_le_re_inner_eq_norm_sq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hle : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1717-L1718","name":"inner_lt_one_iff_real_of_norm_one","line":1717,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_lt_one_iff_real_of_norm_one","doc":"If the inner product of two unit vectors is strictly less than `1`, then the two vectors are\ndistinct. One form of the equality case for Cauchy-Schwarz. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_lt_one_iff_real_of_norm_one\"><span class=\"name\">inner_lt_one_iff_real_of_norm_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1708-L1712","name":"inner_lt_norm_mul_iff_real","line":1708,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_lt_norm_mul_iff_real","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_lt_norm_mul_iff_real\"><span class=\"name\">inner_lt_norm_mul_iff_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1704-L1705","name":"inner_eq_one_iff_of_norm_one","line":1704,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_one_iff_of_norm_one","doc":"If the inner product of two unit vectors is `1`, then the two vectors are equal. One form of\nthe equality case for Cauchy-Schwarz. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_one_iff_of_norm_one\"><span class=\"name\">inner_eq_one_iff_of_norm_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1694-L1699","name":"real_inner_div_norm_mul_norm_eq_neg_one_iff","line":1694,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_div_norm_mul_norm_eq_neg_one_iff","doc":"The inner product of two vectors, divided by the product of their\nnorms, has value -1 if and only if they are nonzero and one is\na negative multiple of the other. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_div_norm_mul_norm_eq_neg_one_iff\"><span class=\"name\">real_inner_div_norm_mul_norm_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">‚àÉ r &lt; <span class=\"fn\">0</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1679-L1688","name":"real_inner_div_norm_mul_norm_eq_one_iff","line":1679,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_div_norm_mul_norm_eq_one_iff","doc":"The inner product of two vectors, divided by the product of their\nnorms, has value 1 if and only if they are nonzero and one is\na positive multiple of the other. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_div_norm_mul_norm_eq_one_iff\"><span class=\"name\">real_inner_div_norm_mul_norm_eq_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">‚àÉ (r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1672-L1673","name":"inner_eq_norm_mul_iff_real","line":1672,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_norm_mul_iff_real","doc":"If the inner product of two vectors is equal to the product of their norms (i.e.,\n`‚ü™x, y‚ü´ = ‚Äñx‚Äñ * ‚Äñy‚Äñ`), then the two vectors are nonnegative real multiples of each other. One form\nof the equality case for Cauchy-Schwarz.\nCompare `norm_inner_eq_norm_iff`, which takes the weaker hypothesis `abs ‚ü™x, y‚ü´ = ‚Äñx‚Äñ * ‚Äñy‚Äñ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_norm_mul_iff_real\"><span class=\"name\">inner_eq_norm_mul_iff_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1660-L1665","name":"inner_eq_norm_mul_iff","line":1660,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_norm_mul_iff","doc":"If the inner product of two vectors is equal to the product of their norms (i.e.,\n`‚ü™x, y‚ü´ = ‚Äñx‚Äñ * ‚Äñy‚Äñ`), then the two vectors are nonnegative real multiples of each other. One form\nof the equality case for Cauchy-Schwarz.\nCompare `norm_inner_eq_norm_iff`, which takes the weaker hypothesis `abs ‚ü™x, y‚ü´ = ‚Äñx‚Äñ * ‚Äñy‚Äñ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_norm_mul_iff\"><span class=\"name\">inner_eq_norm_mul_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1643-L1653","name":"inner_eq_norm_mul_iff_div","line":1643,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_norm_mul_iff_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_norm_mul_iff_div\"><span class=\"name\">inner_eq_norm_mul_iff_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h‚ÇÄ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1638-L1640","name":"abs_real_inner_div_norm_mul_norm_eq_one_iff","line":1638,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#abs_real_inner_div_norm_mul_norm_eq_one_iff","doc":"The inner product of two vectors, divided by the product of their\nnorms, has absolute value 1 if and only if they are nonzero and one is\na multiple of the other. One form of equality case for Cauchy-Schwarz. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#abs_real_inner_div_norm_mul_norm_eq_one_iff\"><span class=\"name\">abs_real_inner_div_norm_mul_norm_eq_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">|<span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span>|</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">‚àÉ (r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1622-L1632","name":"norm_inner_div_norm_mul_norm_eq_one_iff","line":1622,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_div_norm_mul_norm_eq_one_iff","doc":"The inner product of two vectors, divided by the product of their\nnorms, has absolute value 1 if and only if they are nonzero and one is\na multiple of the other. One form of equality case for Cauchy-Schwarz. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_div_norm_mul_norm_eq_one_iff\"><span class=\"name\">norm_inner_div_norm_mul_norm_eq_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">‚àÉ (r : <span class=\"fn\">ùïú</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1608-L1616","name":"norm_inner_eq_norm_iff","line":1608,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_eq_norm_iff","doc":"If the inner product of two vectors is equal to the product of their norms, then the two vectors\nare multiples of each other. One form of the equality case for Cauchy-Schwarz.\nCompare `inner_eq_norm_mul_iff`, which takes the stronger hypothesis `‚ü™x, y‚ü´ = ‚Äñx‚Äñ * ‚Äñy‚Äñ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_eq_norm_iff\"><span class=\"name\">norm_inner_eq_norm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx‚ÇÄ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy‚ÇÄ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ (r : <span class=\"fn\">ùïú</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1580-L1602","name":"norm_inner_eq_norm_tfae","line":1580,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_eq_norm_tfae","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_eq_norm_tfae\"><span class=\"name\">norm_inner_eq_norm_tfae</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/TFAE.html#List.TFAE\">List.TFAE</a>\n  <span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Or\">‚à®</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Or\">‚à®</a> <span class=\"fn\">‚àÉ (r : <span class=\"fn\">ùïú</span>), <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span></span></span></span>,\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Or\">‚à®</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span></span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1573-L1577","name":"real_inner_div_norm_mul_norm_eq_neg_one_of_ne_zero_of_neg_mul","line":1573,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_div_norm_mul_norm_eq_neg_one_of_ne_zero_of_neg_mul","doc":"The inner product of a nonzero vector with a negative multiple of\nitself, divided by the product of their norms, has value -1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_div_norm_mul_norm_eq_neg_one_of_ne_zero_of_neg_mul\"><span class=\"name\">real_inner_div_norm_mul_norm_eq_neg_one_of_ne_zero_of_neg_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1564-L1568","name":"real_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_pos_mul","line":1564,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_pos_mul","doc":"The inner product of a nonzero vector with a positive multiple of\nitself, divided by the product of their norms, has value 1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_pos_mul\"><span class=\"name\">real_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_pos_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1557-L1559","name":"abs_real_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_ne_zero_mul","line":1557,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#abs_real_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_ne_zero_mul","doc":"The inner product of a nonzero vector with a nonzero multiple of\nitself, divided by the product of their norms, has absolute value\n1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#abs_real_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_ne_zero_mul\"><span class=\"name\">abs_real_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_ne_zero_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">|<span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>|</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1545-L1551","name":"norm_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_ne_zero_mul","line":1545,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_ne_zero_mul","doc":"The inner product of a nonzero vector with a nonzero multiple of\nitself, divided by the product of their norms, has absolute value\n1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_ne_zero_mul\"><span class=\"name\">norm_inner_div_norm_mul_norm_eq_one_of_ne_zero_of_ne_zero_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\">ùïú</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1538-L1539","name":"real_inner_smul_self_right","line":1538,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_smul_self_right","doc":"The inner product of a vector with a multiple of itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_smul_self_right\"><span class=\"name\">real_inner_smul_self_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1533-L1534","name":"real_inner_smul_self_left","line":1533,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_smul_self_left","doc":"The inner product of a vector with a multiple of itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_smul_self_left\"><span class=\"name\">real_inner_smul_self_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1527-L1529","name":"abs_real_inner_div_norm_mul_norm_le_one","line":1527,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#abs_real_inner_div_norm_mul_norm_le_one","doc":"The real inner product of two vectors, divided by the product of their\nnorms, has absolute value at most 1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#abs_real_inner_div_norm_mul_norm_le_one\"><span class=\"name\">abs_real_inner_div_norm_mul_norm_le_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">|<span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span>|</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1518-L1522","name":"norm_sub_eq_norm_add","line":1518,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_eq_norm_add","doc":"Given two orthogonal vectors, their sum and difference have equal norms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_eq_norm_add\"><span class=\"name\">norm_sub_eq_norm_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\">w</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">v</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">v</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1505-L1514","name":"real_inner_add_sub_eq_zero_iff","line":1505,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_add_sub_eq_zero_iff","doc":"The sum and difference of two vectors are orthogonal if and only\nif they have the same norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_add_sub_eq_zero_iff\"><span class=\"name\">real_inner_add_sub_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1498-L1500","name":"norm_sub_sq_eq_norm_sq_add_norm_sq_real","line":1498,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_sq_eq_norm_sq_add_norm_sq_real","doc":"Pythagorean theorem, subtracting vectors, vector inner product\nform. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_sq_eq_norm_sq_add_norm_sq_real\"><span class=\"name\">norm_sub_sq_eq_norm_sq_add_norm_sq_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1490-L1493","name":"norm_sub_eq_sqrt_iff_real_inner_eq_zero","line":1490,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_eq_sqrt_iff_real_inner_eq_zero","doc":"Pythagorean theorem, subtracting vectors, if-and-if vector inner product form using square\nroots. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_eq_sqrt_iff_real_inner_eq_zero\"><span class=\"name\">norm_sub_eq_sqrt_iff_real_inner_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Sqrt.html#Real.sqrt\">Real.sqrt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1481-L1485","name":"norm_sub_sq_eq_norm_sq_add_norm_sq_iff_real_inner_eq_zero","line":1481,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_sq_eq_norm_sq_add_norm_sq_iff_real_inner_eq_zero","doc":"Pythagorean theorem, subtracting vectors, if-and-only-if vector\ninner product form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_sq_eq_norm_sq_add_norm_sq_iff_real_inner_eq_zero\"><span class=\"name\">norm_sub_sq_eq_norm_sq_add_norm_sq_iff_real_inner_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1474-L1476","name":"norm_add_sq_eq_norm_sq_add_norm_sq_real","line":1474,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_sq_eq_norm_sq_add_norm_sq_real","doc":"Pythagorean theorem, vector inner product form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_sq_eq_norm_sq_add_norm_sq_real\"><span class=\"name\">norm_add_sq_eq_norm_sq_add_norm_sq_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1466-L1470","name":"norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero","line":1466,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero","doc":"Pythagorean theorem, vector inner product form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero\"><span class=\"name\">norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1459-L1462","name":"norm_add_eq_sqrt_iff_real_inner_eq_zero","line":1459,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_eq_sqrt_iff_real_inner_eq_zero","doc":"Pythagorean theorem, if-and-if vector inner product form using square roots. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_eq_sqrt_iff_real_inner_eq_zero\"><span class=\"name\">norm_add_eq_sqrt_iff_real_inner_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Sqrt.html#Real.sqrt\">Real.sqrt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1452-L1455","name":"norm_add_sq_eq_norm_sq_add_norm_sq_iff_real_inner_eq_zero","line":1452,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_sq_eq_norm_sq_add_norm_sq_iff_real_inner_eq_zero","doc":"Pythagorean theorem, if-and-only-if vector inner product form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_sq_eq_norm_sq_add_norm_sq_iff_real_inner_eq_zero\"><span class=\"name\">norm_add_sq_eq_norm_sq_add_norm_sq_iff_real_inner_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1445-L1448","name":"real_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two","line":1445,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two","doc":"Polarization identity: The real inner product, in terms of the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two\"><span class=\"name\">real_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1438-L1441","name":"real_inner_eq_norm_add_mul_self_sub_norm_mul_self_sub_norm_mul_self_div_two","line":1438,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_eq_norm_add_mul_self_sub_norm_mul_self_sub_norm_mul_self_div_two","doc":"Polarization identity: The real inner product, in terms of the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_eq_norm_add_mul_self_sub_norm_mul_self_sub_norm_mul_self_div_two\"><span class=\"name\">real_inner_eq_norm_add_mul_self_sub_norm_mul_self_sub_norm_mul_self_div_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1429-L1432","name":"Orthonormal.map_equiv","line":1429,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.map_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.map_equiv\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">map_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ' : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ'</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv' : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">Œπ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis.map\">Basis.map</a> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv\">Orthonormal.equiv</a> <span class=\"fn\">hv</span> <span class=\"fn\">hv'</span> <span class=\"fn\">e</span></span>)</span>.toLinearEquiv</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis.reindex\">Basis.reindex</a> <span class=\"fn\">v'</span> <span class=\"fn\"><span class=\"fn\">e</span>.symm</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1421-L1426","name":"Orthonormal.equiv_trans","line":1421,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv_trans\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">equiv_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ' : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ'' : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E'' : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E''</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E''</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ'</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv' : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">Œπ'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v'' : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ''</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E''</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv'' : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v''</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e' : <span class=\"fn\"><span class=\"fn\">Œπ'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">Œπ''</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv.trans\">LinearIsometryEquiv.trans</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv\">Orthonormal.equiv</a> <span class=\"fn\">hv</span> <span class=\"fn\">hv'</span> <span class=\"fn\">e</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv\">Orthonormal.equiv</a> <span class=\"fn\">hv'</span> <span class=\"fn\">hv''</span> <span class=\"fn\">e'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv\">Orthonormal.equiv</a> <span class=\"fn\">hv</span> <span class=\"fn\">hv''</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.trans</span> <span class=\"fn\">e'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1413-L1417","name":"Orthonormal.equiv_symm","line":1413,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv_symm\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">equiv_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ' : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ'</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv' : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">Œπ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv.symm\">LinearIsometryEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv\">Orthonormal.equiv</a> <span class=\"fn\">hv</span> <span class=\"fn\">hv'</span> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv\">Orthonormal.equiv</a> <span class=\"fn\">hv'</span> <span class=\"fn\">hv</span> <span class=\"fn\"><span class=\"fn\">e</span>.symm</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1406-L1409","name":"Orthonormal.equiv_refl","line":1406,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv_refl\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">equiv_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv\">Orthonormal.equiv</a> <span class=\"fn\">hv</span> <span class=\"fn\">hv</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">Œπ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv.refl\">LinearIsometryEquiv.refl</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1399-L1402","name":"Orthonormal.equiv_apply","line":1399,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv_apply\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">equiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ' : <a href=\"./foundational_types.html\">Type</a> u_9}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ'</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv' : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">Œπ'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">Œπ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv\">Orthonormal.equiv</a> <span class=\"fn\">hv</span> <span class=\"fn\">hv'</span> <span class=\"fn\">e</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v'</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1392-L1395","name":"Orthonormal.equiv_toLinearEquiv","line":1392,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv_toLinearEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv_toLinearEquiv\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">equiv_toLinearEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ' : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ'</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv' : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">Œπ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv\">Orthonormal.equiv</a> <span class=\"fn\">hv</span> <span class=\"fn\">hv'</span> <span class=\"fn\">e</span></span>)</span>.toLinearEquiv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis.equiv\">Basis.equiv</a> <span class=\"fn\">v</span> <span class=\"fn\">v'</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1380-L1388","name":"Orthonormal.equiv","line":1380,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv","doc":"A linear isometric equivalence that sends an orthonormal basis to a given orthonormal basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.equiv\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ' : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ'</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv' : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">Œπ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">‚âÉ‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">]</a> <span class=\"fn\">E'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1373-L1376","name":"LinearEquiv.isometryOfOrthonormal_toLinearEquiv","line":1373,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfOrthonormal_toLinearEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfOrthonormal_toLinearEquiv\"><span class=\"name\">LinearEquiv</span>.<span class=\"name\">isometryOfOrthonormal_toLinearEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">‚âÉ‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfOrthonormal\">LinearEquiv.isometryOfOrthonormal</a> <span class=\"fn\">f</span> <span class=\"fn\">hv</span> <span class=\"fn\">hf</span></span>)</span>.toLinearEquiv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1367-L1369","name":"LinearEquiv.coe_isometryOfOrthonormal","line":1367,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.coe_isometryOfOrthonormal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.coe_isometryOfOrthonormal\"><span class=\"name\">LinearEquiv</span>.<span class=\"name\">coe_isometryOfOrthonormal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">‚âÉ‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfOrthonormal\">LinearEquiv.isometryOfOrthonormal</a> <span class=\"fn\">f</span> <span class=\"fn\">hv</span> <span class=\"fn\">hf</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚áë<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1358-L1363","name":"LinearEquiv.isometryOfOrthonormal","line":1358,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfOrthonormal","doc":"A linear equivalence that sends an orthonormal basis to orthonormal vectors is a linear\nisometric equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfOrthonormal\"><span class=\"name\">LinearEquiv</span>.<span class=\"name\">isometryOfOrthonormal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">‚âÉ‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">‚âÉ‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">]</a> <span class=\"fn\">E'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1350-L1353","name":"LinearMap.isometryOfOrthonormal_toLinearMap","line":1350,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfOrthonormal_toLinearMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfOrthonormal_toLinearMap\"><span class=\"name\">LinearMap</span>.<span class=\"name\">isometryOfOrthonormal_toLinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfOrthonormal\">LinearMap.isometryOfOrthonormal</a> <span class=\"fn\">f</span> <span class=\"fn\">hv</span> <span class=\"fn\">hf</span></span>)</span>.toLinearMap</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1344-L1346","name":"LinearMap.coe_isometryOfOrthonormal","line":1344,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.coe_isometryOfOrthonormal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.coe_isometryOfOrthonormal\"><span class=\"name\">LinearMap</span>.<span class=\"name\">coe_isometryOfOrthonormal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfOrthonormal\">LinearMap.isometryOfOrthonormal</a> <span class=\"fn\">f</span> <span class=\"fn\">hv</span> <span class=\"fn\">hf</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚áë<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1336-L1340","name":"LinearMap.isometryOfOrthonormal","line":1336,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfOrthonormal","doc":"A linear map that sends an orthonormal basis to orthonormal vectors is a linear isometry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfOrthonormal\"><span class=\"name\">LinearMap</span>.<span class=\"name\">isometryOfOrthonormal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1330-L1332","name":"Orthonormal.mapLinearIsometryEquiv","line":1330,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.mapLinearIsometryEquiv","doc":"A linear isometric equivalence, applied with `Basis.map`, preserves the property of being\northonormal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.mapLinearIsometryEquiv\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">mapLinearIsometryEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">‚âÉ‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis.map\">Basis.map</a> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">f</span>.toLinearEquiv</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1323-L1325","name":"Orthonormal.comp_linearIsometryEquiv","line":1323,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.comp_linearIsometryEquiv","doc":"A linear isometric equivalence preserves the property of being orthonormal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.comp_linearIsometryEquiv\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">comp_linearIsometryEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">‚âÉ‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">v</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1318-L1319","name":"Orthonormal.comp_linearIsometry","line":1318,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.comp_linearIsometry","doc":"A linear isometry preserves the property of being orthonormal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.comp_linearIsometry\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">comp_linearIsometry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">v</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1312-L1314","name":"LinearIsometry.orthonormal_comp_iff","line":1312,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearIsometry.orthonormal_comp_iff","doc":"A linear isometry preserves the property of being orthonormal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearIsometry.orthonormal_comp_iff\"><span class=\"name\">LinearIsometry</span>.<span class=\"name\">orthonormal_comp_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1306-L1309","name":"LinearMap.norm_map_iff_inner_map_map","line":1306,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.norm_map_iff_inner_map_map","doc":"A linear map is an isometry if and it preserves the inner product. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.norm_map_iff_inner_map_map\"><span class=\"name\">LinearMap</span>.<span class=\"name\">norm_map_iff_inner_map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_9}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMapClass\">LinearMapClass</a> <span class=\"fn\">F</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1300-L1302","name":"LinearEquiv.isometryOfInner_toLinearEquiv","line":1300,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfInner_toLinearEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfInner_toLinearEquiv\"><span class=\"name\">LinearEquiv</span>.<span class=\"name\">isometryOfInner_toLinearEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">‚âÉ‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfInner\">LinearEquiv.isometryOfInner</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span>.toLinearEquiv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1295-L1296","name":"LinearEquiv.coe_isometryOfInner","line":1295,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.coe_isometryOfInner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.coe_isometryOfInner\"><span class=\"name\">LinearEquiv</span>.<span class=\"name\">coe_isometryOfInner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">‚âÉ‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfInner\">LinearEquiv.isometryOfInner</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚áë<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1290-L1291","name":"LinearEquiv.isometryOfInner","line":1290,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfInner","doc":"A linear equivalence that preserves the inner product is a linear isometric equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearEquiv.isometryOfInner\"><span class=\"name\">LinearEquiv</span>.<span class=\"name\">isometryOfInner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">‚âÉ‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">‚âÉ‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">]</a> <span class=\"fn\">E'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1284-L1286","name":"LinearMap.isometryOfInner_toLinearMap","line":1284,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfInner_toLinearMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfInner_toLinearMap\"><span class=\"name\">LinearMap</span>.<span class=\"name\">isometryOfInner_toLinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfInner\">LinearMap.isometryOfInner</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span>.toLinearMap</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1279-L1280","name":"LinearMap.coe_isometryOfInner","line":1279,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.coe_isometryOfInner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.coe_isometryOfInner\"><span class=\"name\">LinearMap</span>.<span class=\"name\">coe_isometryOfInner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfInner\">LinearMap.isometryOfInner</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚áë<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1274-L1275","name":"LinearMap.isometryOfInner","line":1274,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfInner","doc":"A linear map that preserves the inner product is a linear isometry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearMap.isometryOfInner\"><span class=\"name\">LinearMap</span>.<span class=\"name\">isometryOfInner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1269-L1271","name":"LinearIsometryEquiv.inner_map_eq_flip","line":1269,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearIsometryEquiv.inner_map_eq_flip","doc":"The adjoint of a linear isometric equivalence is its inverse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearIsometryEquiv.inner_map_eq_flip\"><span class=\"name\">LinearIsometryEquiv</span>.<span class=\"name\">inner_map_eq_flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">‚âÉ‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv.symm\">LinearIsometryEquiv.symm</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1264-L1265","name":"LinearIsometryEquiv.inner_map_map","line":1264,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearIsometryEquiv.inner_map_map","doc":"A linear isometric equivalence preserves the inner product. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearIsometryEquiv.inner_map_map\"><span class=\"name\">LinearIsometryEquiv</span>.<span class=\"name\">inner_map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">‚âÉ‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometryEquiv\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1258-L1259","name":"LinearIsometry.inner_map_map","line":1258,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearIsometry.inner_map_map","doc":"A linear isometry preserves the inner product. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#LinearIsometry.inner_map_map\"><span class=\"name\">LinearIsometry</span>.<span class=\"name\">inner_map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">‚Üí‚Çó·µ¢[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Analysis/NormedSpace/LinearIsometry.html#LinearIsometry\">]</a> <span class=\"fn\">E'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1242-L1245","name":"ext_inner_map","line":1242,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ext_inner_map","doc":"Two linear maps `S` and `T` are equal, if and only if the identity `‚ü™S x, x‚ü´_‚ÑÇ = ‚ü™T x, x‚ü´_‚ÑÇ` holds\nfor all `x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ext_inner_map\"><span class=\"name\">ext_inner_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">x</span></span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">x</span></span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">T</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1227-L1235","name":"inner_map_self_eq_zero","line":1227,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_map_self_eq_zero","doc":"A linear map `T` is zero, if and only if the identity `‚ü™T x, x‚ü´_‚ÑÇ = 0` holds for all `x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_map_self_eq_zero\"><span class=\"name\">inner_map_self_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">x</span></span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1213-L1222","name":"inner_map_polarization'","line":1213,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_map_polarization'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_map_polarization'\"><span class=\"name\">inner_map_polarization'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>       <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span></span></span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a>     <span class=\"fn\">4</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1201-L1210","name":"inner_map_polarization","line":1201,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_map_polarization","doc":"A complex polarization identity, with a linear map\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_map_polarization\"><span class=\"name\">inner_map_polarization</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">y</span></span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a>       <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span>‚ü´_<a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">‚ÑÇ</a></span></span></span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a>     <span class=\"fn\">4</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1182-L1192","name":"InnerProductSpace.toUniformConvexSpace","line":1182,"kind":"instance","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.toUniformConvexSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.toUniformConvexSpace\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">toUniformConvexSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Convex/Uniform.html#UniformConvexSpace\">UniformConvexSpace</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1164-L1178","name":"dist_div_norm_sq_smul","line":1164,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#dist_div_norm_sq_smul","doc":"Formula for the distance between the images of two nonzero points under an inversion with center\nzero. See also `EuclideanGeometry.dist_inversion_inversion` for inversions around a general\npoint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#dist_div_norm_sq_smul\"><span class=\"name\">dist_div_norm_sq_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1152-L1158","name":"inner_eq_sum_norm_sq_div_four","line":1152,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_sum_norm_sq_div_four","doc":"Polarization identity: The inner product, in terms of the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_sum_norm_sq_div_four\"><span class=\"name\">inner_eq_sum_norm_sq_div_four</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">IsROrC.I</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">IsROrC.I</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">IsROrC.I</span></span></span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">4</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1144-L1147","name":"im_inner_eq_norm_sub_i_smul_mul_self_sub_norm_add_i_smul_mul_self_div_four","line":1144,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#im_inner_eq_norm_sub_i_smul_mul_self_sub_norm_add_i_smul_mul_self_div_four","doc":"Polarization identity: The imaginary part of the inner product, in terms of the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#im_inner_eq_norm_sub_i_smul_mul_self_sub_norm_add_i_smul_mul_self_div_four\"><span class=\"name\">im_inner_eq_norm_sub_i_smul_mul_self_sub_norm_add_i_smul_mul_self_div_four</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.im</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">IsROrC.I</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">IsROrC.I</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">IsROrC.I</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">IsROrC.I</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">4</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1137-L1140","name":"re_inner_eq_norm_add_mul_self_sub_norm_sub_mul_self_div_four","line":1137,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#re_inner_eq_norm_add_mul_self_sub_norm_sub_mul_self_div_four","doc":"Polarization identity: The real part of the inner product, in terms of the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#re_inner_eq_norm_add_mul_self_sub_norm_sub_mul_self_div_four\"><span class=\"name\">re_inner_eq_norm_add_mul_self_sub_norm_sub_mul_self_div_four</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">4</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1130-L1133","name":"re_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two","line":1130,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#re_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two","doc":"Polarization identity: The real part of the inner product, in terms of the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#re_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two\"><span class=\"name\">re_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1123-L1126","name":"re_inner_eq_norm_add_mul_self_sub_norm_mul_self_sub_norm_mul_self_div_two","line":1123,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#re_inner_eq_norm_add_mul_self_sub_norm_mul_self_sub_norm_mul_self_div_two","doc":"Polarization identity: The real part of the inner product, in terms of the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#re_inner_eq_norm_add_mul_self_sub_norm_mul_self_sub_norm_mul_self_div_two\"><span class=\"name\">re_inner_eq_norm_add_mul_self_sub_norm_mul_self_sub_norm_mul_self_div_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1115-L1117","name":"parallelogram_law_with_nnnorm","line":1115,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#parallelogram_law_with_nnnorm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#parallelogram_law_with_nnnorm\"><span class=\"name\">parallelogram_law_with_nnnorm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1108-L1112","name":"parallelogram_law_with_norm","line":1108,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#parallelogram_law_with_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#parallelogram_law_with_norm\"><span class=\"name\">parallelogram_law_with_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1102-L1103","name":"real_inner_le_norm","line":1102,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_le_norm","doc":"Cauchy‚ÄìSchwarz inequality with norm "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_le_norm\"><span class=\"name\">real_inner_le_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1097-L1098","name":"abs_real_inner_le_norm","line":1097,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#abs_real_inner_le_norm","doc":"Cauchy‚ÄìSchwarz inequality with norm "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#abs_real_inner_le_norm\"><span class=\"name\">abs_real_inner_le_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">|<span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>|</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1092-L1093","name":"re_inner_le_norm","line":1092,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#re_inner_le_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#re_inner_le_norm\"><span class=\"name\">re_inner_le_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1088-L1089","name":"nnnorm_inner_le_nnnorm","line":1088,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#nnnorm_inner_le_nnnorm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#nnnorm_inner_le_nnnorm\"><span class=\"name\">nnnorm_inner_le_nnnorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1082-L1085","name":"norm_inner_le_norm","line":1082,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_le_norm","doc":"Cauchy‚ÄìSchwarz inequality with norm "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_le_norm\"><span class=\"name\">norm_inner_le_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1075-L1078","name":"norm_sub_mul_self_real","line":1075,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_mul_self_real","doc":"Expand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_mul_self_real\"><span class=\"name\">norm_sub_mul_self_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1068-L1071","name":"norm_sub_mul_self","line":1068,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_mul_self","doc":"Expand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_mul_self\"><span class=\"name\">norm_sub_mul_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1064-L1064","name":"norm_sub_pow_two_real","line":1064,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_pow_two_real","doc":"**Alias** of `norm_sub_sq_real`.\n\n---\n\nExpand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_pow_two_real\"><span class=\"name\">norm_sub_pow_two_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1060-L1061","name":"norm_sub_sq_real","line":1060,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_sq_real","doc":"Expand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_sq_real\"><span class=\"name\">norm_sub_sq_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1056-L1056","name":"norm_sub_pow_two","line":1056,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_pow_two","doc":"**Alias** of `norm_sub_sq`.\n\n---\n\nExpand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_pow_two\"><span class=\"name\">norm_sub_pow_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1051-L1053","name":"norm_sub_sq","line":1051,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_sq","doc":"Expand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_sub_sq\"><span class=\"name\">norm_sub_sq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1044-L1047","name":"norm_add_mul_self_real","line":1044,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_mul_self_real","doc":"Expand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_mul_self_real\"><span class=\"name\">norm_add_mul_self_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1037-L1040","name":"norm_add_mul_self","line":1037,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_mul_self","doc":"Expand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_mul_self\"><span class=\"name\">norm_add_mul_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1033-L1033","name":"norm_add_pow_two_real","line":1033,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_pow_two_real","doc":"**Alias** of `norm_add_sq_real`.\n\n---\n\nExpand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_pow_two_real\"><span class=\"name\">norm_add_pow_two_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1028-L1030","name":"norm_add_sq_real","line":1028,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_sq_real","doc":"Expand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_sq_real\"><span class=\"name\">norm_add_sq_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1024-L1024","name":"norm_add_pow_two","line":1024,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_pow_two","doc":"**Alias** of `norm_add_sq`.\n\n---\n\nExpand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_pow_two\"><span class=\"name\">norm_add_pow_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1017-L1021","name":"norm_add_sq","line":1017,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_sq","doc":"Expand the square "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_add_sq\"><span class=\"name\">norm_add_sq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1009-L1010","name":"real_inner_self_eq_norm_sq","line":1009,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_self_eq_norm_sq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_self_eq_norm_sq\"><span class=\"name\">real_inner_self_eq_norm_sq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1004-L1006","name":"real_inner_self_eq_norm_mul_norm","line":1004,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_self_eq_norm_mul_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_self_eq_norm_mul_norm\"><span class=\"name\">real_inner_self_eq_norm_mul_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L1000-L1001","name":"inner_self_eq_norm_sq","line":1000,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_eq_norm_sq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_eq_norm_sq\"><span class=\"name\">inner_self_eq_norm_sq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L995-L997","name":"inner_self_eq_norm_mul_norm","line":995,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_eq_norm_mul_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_eq_norm_mul_norm\"><span class=\"name\">inner_self_eq_norm_mul_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L991-L992","name":"norm_eq_sqrt_real_inner","line":991,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_eq_sqrt_real_inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_eq_sqrt_real_inner\"><span class=\"name\">norm_eq_sqrt_real_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Sqrt.html#Real.sqrt\">Real.sqrt</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L984-L987","name":"norm_eq_sqrt_inner","line":984,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_eq_sqrt_inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_eq_sqrt_inner\"><span class=\"name\">norm_eq_sqrt_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Sqrt.html#Real.sqrt\">Real.sqrt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L974-L977","name":"coe_basisOfOrthonormalOfCardEqFinrank","line":974,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#coe_basisOfOrthonormalOfCardEqFinrank","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#coe_basisOfOrthonormalOfCardEqFinrank\"><span class=\"name\">coe_basisOfOrthonormalOfCardEqFinrank</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(card_eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">Œπ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Finrank.html#FiniteDimensional.finrank\">FiniteDimensional.finrank</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#basisOfOrthonormalOfCardEqFinrank\">basisOfOrthonormalOfCardEqFinrank</a> <span class=\"fn\">hv</span> <span class=\"fn\">card_eq</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L968-L970","name":"basisOfOrthonormalOfCardEqFinrank","line":968,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#basisOfOrthonormalOfCardEqFinrank","doc":"A family of orthonormal vectors with the correct cardinality forms a basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#basisOfOrthonormalOfCardEqFinrank\"><span class=\"name\">basisOfOrthonormalOfCardEqFinrank</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(card_eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">Œπ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Finrank.html#FiniteDimensional.finrank\">FiniteDimensional.finrank</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L958-L962","name":"Orthonormal.ne_zero","line":958,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.ne_zero\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">Œπ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L946-L955","name":"exists_maximal_orthonormal","line":946,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#exists_maximal_orthonormal","doc":"Given an orthonormal set `v` of vectors in `E`, there exists a maximal orthonormal set\ncontaining it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#exists_maximal_orthonormal\"><span class=\"name\">exists_maximal_orthonormal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">Subtype.val</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ w ‚äá <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">Subtype.val</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">‚àÄ <span class=\"fn\">u</span> ‚äá <span class=\"fn\">w</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">Subtype.val</span></span> ‚Üí <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L938-L941","name":"orthonormal_sUnion_of_directed","line":938,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_sUnion_of_directed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_sUnion_of_directed\"><span class=\"name\">orthonormal_sUnion_of_directed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ <span class=\"fn\">a</span> ‚àà <span class=\"fn\">s</span>, <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">‚Üë<span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\">‚Üë<span class=\"fn\">x</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">‚ãÉ‚ÇÄ</a> <span class=\"fn\">s</span></span>)</span></span>) =&gt; <span class=\"fn\">‚Üë<span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L926-L935","name":"orthonormal_iUnion_of_directed","line":926,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_iUnion_of_directed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_iUnion_of_directed\"><span class=\"name\">orthonormal_iUnion_of_directed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ∑ : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><span class=\"fn\">Œ∑</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#Directed\">Directed</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\">Œ∑</span>), <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span>)</span></span>) =&gt; <span class=\"fn\">‚Üë<span class=\"fn\">x</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\">‚ãÉ (i : <span class=\"fn\">Œ∑</span>), <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span></span>)</span></span>) =&gt; <span class=\"fn\">‚Üë<span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L919-L921","name":"orthonormal_empty","line":919,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_empty\"><span class=\"name\">orthonormal_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">‚Üë<a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">‚àÖ</a></span>) =&gt; <span class=\"fn\">‚Üë<span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L903-L911","name":"Orthonormal.orthonormal_of_forall_eq_or_eq_neg","line":903,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.orthonormal_of_forall_eq_or_eq_neg","doc":"Given an orthonormal family, a second family of vectors is orthonormal if every vector equals\nthe corresponding vector in the original family or its negation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.orthonormal_of_forall_eq_or_eq_neg\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">orthonormal_of_forall_eq_or_eq_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hw : <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Or\">‚à®</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L894-L898","name":"Orthonormal.inner_finsupp_eq_zero","line":894,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_finsupp_eq_zero","doc":"A linear combination of some subset of an orthonormal set is orthogonal to other members of the\nset. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_finsupp_eq_zero\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_finsupp_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">Œπ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> ‚àâ <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">‚Üí‚ÇÄ</a> <span class=\"fn\">ùïú</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Finsupp.html#Finsupp.supported\">Finsupp.supported</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Finsupp.html#Finsupp.total\">Finsupp.total</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">E</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L887-L889","name":"Orthonormal.toSubtypeRange","line":887,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.toSubtypeRange","doc":"If `v : Œπ ‚Üí E` is an orthonormal family, then `Subtype.val : (range v) ‚Üí E` is an orthonormal\nfamily. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.toSubtypeRange\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">toSubtypeRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">Subtype.val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L877-L882","name":"orthonormal_subtype_range","line":877,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_subtype_range","doc":"An injective family `v : Œπ ‚Üí E` is orthonormal if and only if `Subtype.val : (range v) ‚Üí E` is\northonormal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_subtype_range\"><span class=\"name\">orthonormal_subtype_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">Subtype.val</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L866-L872","name":"Orthonormal.comp","line":866,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.comp","doc":"A subfamily of an orthonormal family (i.e., a composition with an injective map) is an\northonormal family. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.comp\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ' : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Œπ'</span> ‚Üí <span class=\"fn\">Œπ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L855-L861","name":"Orthonormal.linearIndependent","line":855,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.linearIndependent","doc":"An orthonormal set is linearly independent. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.linearIndependent\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">linearIndependent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L848-L851","name":"Orthonormal.inner_left_right_finset","line":848,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_left_right_finset","doc":"The double sum of weighted inner products of pairs of vectors from an orthonormal sequence is the\nsum of the weights.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_left_right_finset\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_left_right_finset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">ùïú</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">j</span></span>, <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">k</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">k</span> <span class=\"fn\">k</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L837-L841","name":"Orthonormal.inner_sum","line":837,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_sum","doc":"The inner product of two linear combinations of a set of orthonormal vectors, expressed as\na sum. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_sum\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l‚ÇÅ : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l‚ÇÇ : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l‚ÇÅ</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span></span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l‚ÇÇ</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l‚ÇÅ</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l‚ÇÇ</span> <span class=\"fn\">i</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L830-L832","name":"Orthonormal.inner_finsupp_eq_sum_right","line":830,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_finsupp_eq_sum_right","doc":"The inner product of two linear combinations of a set of orthonormal vectors, expressed as\na sum over the second `Finsupp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_finsupp_eq_sum_right\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_finsupp_eq_sum_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l‚ÇÅ : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">‚Üí‚ÇÄ</a> <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l‚ÇÇ : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">‚Üí‚ÇÄ</a> <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Finsupp.html#Finsupp.total\">Finsupp.total</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">E</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l‚ÇÅ</span></span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Finsupp.html#Finsupp.total\">Finsupp.total</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">E</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l‚ÇÇ</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finsupp.html#Finsupp.sum\">Finsupp.sum</a> <span class=\"fn\">l‚ÇÇ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">ùïú</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l‚ÇÅ</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L823-L825","name":"Orthonormal.inner_finsupp_eq_sum_left","line":823,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_finsupp_eq_sum_left","doc":"The inner product of two linear combinations of a set of orthonormal vectors, expressed as\na sum over the first `Finsupp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_finsupp_eq_sum_left\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_finsupp_eq_sum_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l‚ÇÅ : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">‚Üí‚ÇÄ</a> <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l‚ÇÇ : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">‚Üí‚ÇÄ</a> <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Finsupp.html#Finsupp.total\">Finsupp.total</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">E</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l‚ÇÅ</span></span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Finsupp.html#Finsupp.total\">Finsupp.total</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">E</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l‚ÇÇ</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finsupp.html#Finsupp.sum\">Finsupp.sum</a> <span class=\"fn\">l‚ÇÅ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">ùïú</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l‚ÇÇ</span> <span class=\"fn\">i</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L816-L818","name":"Orthonormal.inner_left_fintype","line":816,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_left_fintype","doc":"The inner product of a linear combination of a set of orthonormal vectors with one of those\nvectors picks out the coefficient of that vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_left_fintype\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_left_fintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">Œπ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span></span>, <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L807-L811","name":"Orthonormal.inner_left_sum","line":807,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_left_sum","doc":"The inner product of a linear combination of a set of orthonormal vectors with one of those\nvectors picks out the coefficient of that vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_left_sum\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_left_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">Œπ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span></span>, <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L801-L802","name":"Orthonormal.inner_left_finsupp","line":801,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_left_finsupp","doc":"The inner product of a linear combination of a set of orthonormal vectors with one of those\nvectors picks out the coefficient of that vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_left_finsupp\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_left_finsupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">‚Üí‚ÇÄ</a> <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">Œπ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Finsupp.html#Finsupp.total\">Finsupp.total</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">E</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L794-L796","name":"Orthonormal.inner_right_fintype","line":794,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_right_fintype","doc":"The inner product of a linear combination of a set of orthonormal vectors with one of those\nvectors picks out the coefficient of that vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_right_fintype\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_right_fintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">Œπ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L786-L789","name":"Orthonormal.inner_right_sum","line":786,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_right_sum","doc":"The inner product of a linear combination of a set of orthonormal vectors with one of those\nvectors picks out the coefficient of that vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_right_sum\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_right_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">Œπ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L778-L781","name":"Orthonormal.inner_right_finsupp","line":778,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_right_finsupp","doc":"The inner product of a linear combination of a set of orthonormal vectors with one of those\nvectors picks out the coefficient of that vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal.inner_right_finsupp\"><span class=\"name\">Orthonormal</span>.<span class=\"name\">inner_right_finsupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">‚Üí‚ÇÄ</a> <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">Œπ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Finsupp.html#Finsupp.total\">Finsupp.total</a> <span class=\"fn\">Œπ</span> <span class=\"fn\">E</span> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L764-L773","name":"orthonormal_subtype_iff_ite","line":764,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_subtype_iff_ite","doc":"`if ... then ... else` characterization of a set of vectors being orthonormal.  (Inner product\nequals Kronecker delta.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_subtype_iff_ite\"><span class=\"name\">orthonormal_subtype_iff_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">Subtype.val</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÄ <span class=\"fn\">v</span> ‚àà <span class=\"fn\">s</span>, <span class=\"fn\">‚àÄ <span class=\"fn\">w</span> ‚àà <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\">w</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></span> then <span class=\"fn\">1</span> else <span class=\"fn\">0</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L744-L759","name":"orthonormal_iff_ite","line":744,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_iff_ite","doc":"`if ... then ... else` characterization of an indexed set of vectors being orthonormal.  (Inner\nproduct equals Kronecker delta.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#orthonormal_iff_ite\"><span class=\"name\">orthonormal_iff_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\">Orthonormal</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">i </span>j : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">j</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> then <span class=\"fn\">1</span> else <span class=\"fn\">0</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L736-L737","name":"Orthonormal","line":736,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal","doc":"An orthonormal set of vectors in an `InnerProductSpace` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Orthonormal\"><span class=\"name\">Orthonormal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L714-L726","name":"linearIndependent_of_ne_zero_of_inner_eq_zero","line":714,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#linearIndependent_of_ne_zero_of_inner_eq_zero","doc":"A family of vectors is linearly independent if they are nonzero\nand orthogonal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#linearIndependent_of_ne_zero_of_inner_eq_zero\"><span class=\"name\">linearIndependent_of_ne_zero_of_inner_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Pairwise\">Pairwise</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> j : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">j</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L703-L708","name":"real_inner_mul_inner_self_le","line":703,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_mul_inner_self_le","doc":"Cauchy‚ÄìSchwarz inequality for real inner products. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_mul_inner_self_le\"><span class=\"name\">real_inner_mul_inner_self_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L697-L699","name":"inner_mul_inner_self_le","line":697,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_mul_inner_self_le","doc":"**Cauchy‚ÄìSchwarz inequality**. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_mul_inner_self_le\"><span class=\"name\">inner_mul_inner_self_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L690-L692","name":"parallelogram_law","line":690,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#parallelogram_law","doc":"Parallelogram law "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#parallelogram_law\"><span class=\"name\">parallelogram_law</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L683-L684","name":"ext_inner_right","line":683,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ext_inner_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ext_inner_right\"><span class=\"name\">ext_inner_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">v</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">v</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">v</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L679-L680","name":"ext_inner_left","line":679,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ext_inner_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ext_inner_left\"><span class=\"name\">ext_inner_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">v</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">v</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L670-L674","name":"real_inner_sub_sub_self","line":670,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_sub_sub_self","doc":"Expand `‚ü™x - y, x - y‚ü´_‚Ñù` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_sub_sub_self\"><span class=\"name\">real_inner_sub_sub_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L665-L666","name":"inner_sub_sub_self","line":665,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_sub_sub_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_sub_sub_self\"><span class=\"name\">inner_sub_sub_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L657-L661","name":"real_inner_add_add_self","line":657,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_add_add_self","doc":"Expand `‚ü™x + y, x + y‚ü´_‚Ñù` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_add_add_self\"><span class=\"name\">real_inner_add_add_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L652-L653","name":"inner_add_add_self","line":652,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_add_add_self","doc":"Expand `‚ü™x + y, x + y‚ü´` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_add_add_self\"><span class=\"name\">inner_add_add_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L646-L648","name":"inner_mul_symm_re_eq_norm","line":646,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_mul_symm_re_eq_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_mul_symm_re_eq_norm\"><span class=\"name\">inner_mul_symm_re_eq_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L642-L643","name":"inner_sub_right","line":642,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_sub_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_sub_right\"><span class=\"name\">inner_sub_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L638-L639","name":"inner_sub_left","line":638,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_sub_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_sub_left\"><span class=\"name\">inner_sub_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L635-L635","name":"inner_self_conj","line":635,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_conj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_conj\"><span class=\"name\">inner_self_conj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L631-L631","name":"inner_neg_neg","line":631,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_neg_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_neg_neg\"><span class=\"name\">inner_neg_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L627-L628","name":"inner_neg_right","line":627,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_neg_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_neg_right\"><span class=\"name\">inner_neg_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L621-L623","name":"inner_neg_left","line":621,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_neg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_neg_left\"><span class=\"name\">inner_neg_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L617-L617","name":"norm_inner_symm","line":617,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#norm_inner_symm\"><span class=\"name\">norm_inner_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L613-L614","name":"real_inner_self_nonpos","line":613,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_self_nonpos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_self_nonpos\"><span class=\"name\">real_inner_self_nonpos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L609-L610","name":"inner_self_nonpos","line":609,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_nonpos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_nonpos\"><span class=\"name\">inner_self_nonpos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L604-L605","name":"inner_self_ne_zero","line":604,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_ne_zero\"><span class=\"name\">inner_self_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L600-L601","name":"inner_self_eq_zero","line":600,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_eq_zero\"><span class=\"name\">inner_self_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L595-L596","name":"real_inner_self_abs","line":595,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_self_abs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_self_abs\"><span class=\"name\">real_inner_self_abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">|<span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>|</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L589-L591","name":"inner_self_ofReal_norm","line":589,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_ofReal_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_ofReal_norm\"><span class=\"name\">inner_self_ofReal_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L583-L586","name":"inner_self_re_eq_norm","line":583,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_re_eq_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_re_eq_norm\"><span class=\"name\">inner_self_re_eq_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L578-L579","name":"inner_self_eq_norm_sq_to_K","line":578,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_eq_norm_sq_to_K","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_eq_norm_sq_to_K\"><span class=\"name\">inner_self_eq_norm_sq_to_K</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L573-L574","name":"inner_self_ofReal_re","line":573,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_ofReal_re","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_ofReal_re\"><span class=\"name\">inner_self_ofReal_re</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L568-L569","name":"real_inner_self_nonneg","line":568,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_self_nonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_self_nonneg\"><span class=\"name\">real_inner_self_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L564-L565","name":"inner_self_nonneg","line":564,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_nonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_nonneg\"><span class=\"name\">inner_self_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L560-L561","name":"inner_re_zero_right","line":560,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_re_zero_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_re_zero_right\"><span class=\"name\">inner_re_zero_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">0</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L556-L557","name":"inner_zero_right","line":556,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_zero_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_zero_right\"><span class=\"name\">inner_zero_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">0</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L551-L552","name":"inner_re_zero_left","line":551,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_re_zero_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_re_zero_left\"><span class=\"name\">inner_re_zero_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">0</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L547-L548","name":"inner_zero_left","line":547,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_zero_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_zero_left\"><span class=\"name\">inner_zero_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">0</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L540-L543","name":"DFinsupp.inner_sum","line":540,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#DFinsupp.inner_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#DFinsupp.inner_sum\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">inner_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span>) ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span> ‚Üí <span class=\"fn\">E</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">Œ†‚ÇÄ (i : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Basic.html#DFinsupp.sum\">DFinsupp.sum</a> <span class=\"fn\">l</span> <span class=\"fn\">f</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Basic.html#DFinsupp.sum\">DFinsupp.sum</a> <span class=\"fn\">l</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L534-L537","name":"DFinsupp.sum_inner","line":534,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#DFinsupp.sum_inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#DFinsupp.sum_inner\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">sum_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œπ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span>) ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span> ‚Üí <span class=\"fn\">E</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">Œ†‚ÇÄ (i : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Basic.html#DFinsupp.sum\">DFinsupp.sum</a> <span class=\"fn\">l</span> <span class=\"fn\">f</span></span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Basic.html#DFinsupp.sum\">DFinsupp.sum</a> <span class=\"fn\">l</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> <span class=\"fn\">i</span></span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L528-L531","name":"Finsupp.inner_sum","line":528,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Finsupp.inner_sum","doc":"An inner product with a sum on the right, `Finsupp` version. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Finsupp.inner_sum\"><span class=\"name\">Finsupp</span>.<span class=\"name\">inner_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">‚Üí‚ÇÄ</a> <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finsupp.html#Finsupp.sum\">Finsupp.sum</a> <span class=\"fn\">l</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">ùïú</span>) =&gt; <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finsupp.html#Finsupp.sum\">Finsupp.sum</a> <span class=\"fn\">l</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">ùïú</span>) =&gt; <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L521-L524","name":"Finsupp.sum_inner","line":521,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Finsupp.sum_inner","doc":"An inner product with a sum on the left, `Finsupp` version. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Finsupp.sum_inner\"><span class=\"name\">Finsupp</span>.<span class=\"name\">sum_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><span class=\"fn\">Œπ</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">‚Üí‚ÇÄ</a> <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finsupp.html#Finsupp.sum\">Finsupp.sum</a> <span class=\"fn\">l</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">ùïú</span>) =&gt; <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span></span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finsupp.html#Finsupp.sum\">Finsupp.sum</a> <span class=\"fn\">l</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">ùïú</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L515-L517","name":"inner_sum","line":515,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_sum","doc":"An inner product with a sum on the right. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_sum\"><span class=\"name\">inner_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L509-L511","name":"sum_inner","line":509,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#sum_inner","doc":"An inner product with a sum on the left. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#sum_inner\"><span class=\"name\">sum_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">Œπ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span></span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L505-L505","name":"bilinFormOfRealInner","line":505,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#bilinFormOfRealInner","doc":"The real inner product as a bilinear form.\n\nNote that unlike `sesqFormOfInner`, this does not reverse the order of the arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#bilinFormOfRealInner\"><span class=\"name\">bilinFormOfRealInner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.BilinForm\">LinearMap.BilinForm</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L504-L504","name":"bilinFormOfRealInner_apply_apply","line":504,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#bilinFormOfRealInner_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#bilinFormOfRealInner_apply_apply\"><span class=\"name\">bilinFormOfRealInner_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">bilinFormOfRealInner</span> <span class=\"fn\">m‚úù</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">m‚úù</span>, <span class=\"fn\">m</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L495-L498","name":"sesqFormOfInner","line":495,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#sesqFormOfInner","doc":"The inner product as a sesquilinear form.\n\nNote that in the case `ùïú = ‚Ñù` this is a bilinear form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#sesqFormOfInner\"><span class=\"name\">sesqFormOfInner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">E</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">‚Üí‚Çó‚ãÜ[</a><span class=\"fn\">ùïú</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L494-L494","name":"sesqFormOfInner_apply_apply","line":494,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#sesqFormOfInner_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#sesqFormOfInner_apply_apply\"><span class=\"name\">sesqFormOfInner_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sesqFormOfInner</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">m</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L486-L488","name":"inner_smul_real_right","line":486,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_smul_real_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_smul_real_right\"><span class=\"name\">inner_smul_real_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">r</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L482-L483","name":"real_inner_smul_right","line":482,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_smul_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_smul_right\"><span class=\"name\">real_inner_smul_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L478-L479","name":"inner_smul_right","line":478,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_smul_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_smul_right\"><span class=\"name\">inner_smul_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">ùïú</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L473-L475","name":"inner_smul_real_left","line":473,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_smul_real_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_smul_real_left\"><span class=\"name\">inner_smul_real_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">r</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L469-L470","name":"real_inner_smul_left","line":469,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_smul_left\"><span class=\"name\">real_inner_smul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L465-L466","name":"inner_smul_left","line":465,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_smul_left\"><span class=\"name\">inner_smul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">ùïú</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L462-L462","name":"inner_im_symm","line":462,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_im_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_im_symm\"><span class=\"name\">inner_im_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.im</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">IsROrC.im</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L459-L459","name":"inner_re_symm","line":459,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_re_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_re_symm\"><span class=\"name\">inner_re_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L454-L456","name":"inner_add_right","line":454,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_add_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_add_right\"><span class=\"name\">inner_add_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L450-L451","name":"inner_add_left","line":450,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_add_left\"><span class=\"name\">inner_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L447-L447","name":"inner_self_im","line":447,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_im","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_self_im\"><span class=\"name\">inner_self_im</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.im</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L441-L443","name":"inner_eq_zero_symm","line":441,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_zero_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_eq_zero_symm\"><span class=\"name\">inner_eq_zero_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L437-L438","name":"real_inner_comm","line":437,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#real_inner_comm\"><span class=\"name\">real_inner_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L433-L434","name":"inner_conj_symm","line":433,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_conj_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#inner_conj_symm\"><span class=\"name\">inner_conj_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L404-L411","name":"InnerProductSpace.ofCore","line":404,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.ofCore","doc":"Given an `InnerProductSpace.Core` structure on a space, one can use it to turn\nthe space into an inner product space. The `NormedAddCommGroup` structure is expected\nto already be defined with `InnerProductSpace.ofCore.toNormedAddCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.ofCore\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">ofCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L386-L392","name":"InnerProductSpace.Core.toNormedSpace","line":386,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.toNormedSpace","doc":"Normed space structure constructed from an `InnerProductSpace.Core` structure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.toNormedSpace\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">toNormedSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L365-L380","name":"InnerProductSpace.Core.toNormedAddCommGroup","line":365,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.toNormedAddCommGroup","doc":"Normed group structure constructed from an `InnerProductSpace.Core` structure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.toNormedAddCommGroup\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">toNormedAddCommGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L356-L361","name":"InnerProductSpace.Core.norm_inner_le_norm","line":356,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.norm_inner_le_norm","doc":"Cauchy‚ÄìSchwarz inequality with norm "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.norm_inner_le_norm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">norm_inner_le_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L351-L352","name":"InnerProductSpace.Core.sqrt_normSq_eq_norm","line":351,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.sqrt_normSq_eq_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.sqrt_normSq_eq_norm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">sqrt_normSq_eq_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Real/Sqrt.html#Real.sqrt\">Real.sqrt</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq\">InnerProductSpace.Core.normSq</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L347-L348","name":"InnerProductSpace.Core.inner_self_eq_norm_mul_norm","line":347,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_eq_norm_mul_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_eq_norm_mul_norm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_self_eq_norm_mul_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L343-L344","name":"InnerProductSpace.Core.norm_eq_sqrt_inner","line":343,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.norm_eq_sqrt_inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.norm_eq_sqrt_inner\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">norm_eq_sqrt_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Sqrt.html#Real.sqrt\">Real.sqrt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L338-L338","name":"InnerProductSpace.Core.toNorm","line":338,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.toNorm","doc":"Norm constructed from an `InnerProductSpace.Core` structure, defined to be the square root\nof the scalar product. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.toNorm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">toNorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm\">Norm</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L327-L333","name":"InnerProductSpace.Core.inner_mul_inner_self_le","line":327,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_mul_inner_self_le","doc":"**Cauchy‚ÄìSchwarz inequality**.\nWe need this for the `Core` structure to prove the triangle inequality below when\nshowing the core is a normed group.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_mul_inner_self_le\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_mul_inner_self_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L313-L320","name":"InnerProductSpace.Core.cauchy_schwarz_aux","line":313,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.cauchy_schwarz_aux","doc":"An auxiliary equality useful to prove the **Cauchy‚ÄìSchwarz inequality**: the square of the norm\nof `‚ü™x, y‚ü´ ‚Ä¢ x - ‚ü™x, x‚ü´ ‚Ä¢ y` is equal to `‚Äñx‚Äñ ^ 2 * (‚Äñx‚Äñ ^ 2 * ‚Äñy‚Äñ ^ 2 - ‚Äñ‚ü™x, y‚ü´‚Äñ ^ 2)`. We use\n`InnerProductSpace.ofCore.normSq x` etc (defeq to `is_R_or_C.re ‚ü™x, x‚ü´`) instead of `‚Äñx‚Äñ ^ 2`\netc to avoid extra rewrites when applying it to an `InnerProductSpace`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.cauchy_schwarz_aux\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">cauchy_schwarz_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq\">InnerProductSpace.Core.normSq</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq\">InnerProductSpace.Core.normSq</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq\">InnerProductSpace.Core.normSq</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq\">InnerProductSpace.Core.normSq</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L305-L306","name":"InnerProductSpace.Core.inner_sub_sub_self","line":305,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_sub_sub_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_sub_sub_self\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_sub_sub_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L300-L301","name":"InnerProductSpace.Core.inner_add_add_self","line":300,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_add_add_self","doc":"Expand `inner (x + y) (x + y)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_add_add_self\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_add_add_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L294-L296","name":"InnerProductSpace.Core.inner_mul_symm_re_eq_norm","line":294,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_mul_symm_re_eq_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_mul_symm_re_eq_norm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_mul_symm_re_eq_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L290-L291","name":"InnerProductSpace.Core.inner_sub_right","line":290,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_sub_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_sub_right\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_sub_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L286-L287","name":"InnerProductSpace.Core.inner_sub_left","line":286,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_sub_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_sub_left\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_sub_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L282-L283","name":"InnerProductSpace.Core.inner_neg_right","line":282,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_neg_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_neg_right\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_neg_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L277-L279","name":"InnerProductSpace.Core.inner_neg_left","line":277,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_neg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_neg_left\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_neg_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L274-L274","name":"InnerProductSpace.Core.norm_inner_symm","line":274,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.norm_inner_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.norm_inner_symm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">norm_inner_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L269-L270","name":"InnerProductSpace.Core.inner_self_ofReal_re","line":269,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_ofReal_re","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_ofReal_re\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_self_ofReal_re</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L265-L266","name":"InnerProductSpace.Core.inner_self_ne_zero","line":265,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_ne_zero\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_self_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L259-L262","name":"InnerProductSpace.Core.normSq_eq_zero","line":259,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq_eq_zero\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">normSq_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq\">InnerProductSpace.Core.normSq</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L253-L256","name":"InnerProductSpace.Core.inner_self_eq_zero","line":253,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_eq_zero\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_self_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L249-L250","name":"InnerProductSpace.Core.inner_zero_right","line":249,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_zero_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_zero_right\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_zero_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">0</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L244-L246","name":"InnerProductSpace.Core.inner_zero_left","line":244,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_zero_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_zero_left\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_zero_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">0</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L239-L241","name":"InnerProductSpace.Core.inner_smul_right","line":239,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_smul_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_smul_right\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_smul_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\">ùïú</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">y</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L235-L236","name":"InnerProductSpace.Core.inner_smul_left","line":235,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_smul_left\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_smul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\">ùïú</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L232-L232","name":"InnerProductSpace.Core.inner_im_symm","line":232,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_im_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_im_symm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_im_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.im</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">IsROrC.im</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L229-L229","name":"InnerProductSpace.Core.inner_re_symm","line":229,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_re_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_re_symm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_re_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L224-L226","name":"InnerProductSpace.Core.ofReal_normSq_eq_inner_self","line":224,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.ofReal_normSq_eq_inner_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.ofReal_normSq_eq_inner_self\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">ofReal_normSq_eq_inner_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq\">InnerProductSpace.Core.normSq</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L220-L221","name":"InnerProductSpace.Core.inner_add_right","line":220,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_add_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_add_right\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_add_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L216-L217","name":"InnerProductSpace.Core.inner_add_left","line":216,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_add_left\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L211-L213","name":"InnerProductSpace.Core.inner_self_im","line":211,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_im","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_im\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_self_im</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IsROrC.im</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L207-L208","name":"InnerProductSpace.Core.inner_self_nonneg","line":207,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_nonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_self_nonneg\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_self_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L203-L204","name":"InnerProductSpace.Core.inner_conj_symm","line":203,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_conj_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.inner_conj_symm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">inner_conj_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L197-L198","name":"InnerProductSpace.Core.normSq","line":197,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq","doc":"The norm squared function for `InnerProductSpace.Core` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.normSq\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">normSq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L190-L191","name":"InnerProductSpace.Core.toInner'","line":190,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.toInner'","doc":"Inner product defined by the `InnerProductSpace.Core` structure. We can't reuse\n`inner_product_space.core.to_has_inner` because it takes `InnerProductSpace.Core` as an explicit\nargument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.toInner'\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">toInner'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\">Inner</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L162-L170","name":"InnerProductSpace.toCore","line":162,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.toCore","doc":"Define `InnerProductSpace.Core` from `InnerProductSpace`. Defined to reuse lemmas about\n`InnerProductSpace.Core` for `InnerProductSpace`s. Note that the `Norm` instance provided by\n`InnerProductSpace.Core.norm` is propositionally but not definitionally equal to the original\nnorm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.toCore\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">toCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[c : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L150-L150","name":"InnerProductSpace.Core.smul_left","line":150,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.smul_left","doc":"The inner product is conjugate linear in the first coordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.smul_left\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">smul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">ùïú</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L148-L148","name":"InnerProductSpace.Core.add_left","line":148,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.add_left","doc":"The inner product is additive in the first coordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.add_left\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L146-L146","name":"InnerProductSpace.Core.definite","line":146,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.definite","doc":"The inner product is positive definite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.definite\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">definite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> ‚Üí <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L144-L144","name":"InnerProductSpace.Core.nonneg_re","line":144,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.nonneg_re","doc":"The inner product is positive (semi)definite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.nonneg_re\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">nonneg_re</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L142-L142","name":"InnerProductSpace.Core.conj_symm","line":142,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.conj_symm","doc":"The inner product is *hermitian*, taking the `conj` swaps the arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.conj_symm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">conj_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L139-L139","name":"InnerProductSpace.Core.mk","line":139,"kind":"ctor","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core.mk\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toInner : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\">Inner</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(conj_symm : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">F</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonneg_re : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">F</span>), <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(definite : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">F</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> ‚Üí <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(add_left : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y z : <span class=\"fn\">F</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(smul_left : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">F</span>) (<span class=\"fn\">r</span> : <span class=\"fn\">ùïú</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\">InnerProductSpace.Core</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L139-L150","name":"InnerProductSpace.Core","line":139,"kind":"class","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core","doc":"A structure requiring that a scalar product is positive definite and symmetric, from which one\ncan construct an `InnerProductSpace` instance in `InnerProductSpace.ofCore`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.Core\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">Core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\"><span class=\"name\">Inner</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_4 u_5)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L114-L114","name":"InnerProductSpace.smul_left","line":114,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.smul_left","doc":"The inner product is conjugate linear in the first coordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.smul_left\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">smul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">ùïú</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L112-L112","name":"InnerProductSpace.add_left","line":112,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.add_left","doc":"The inner product is additive in the first coordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.add_left\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L110-L110","name":"InnerProductSpace.conj_symm","line":110,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.conj_symm","doc":"The inner product is *hermitian*, taking the `conj` swaps the arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.conj_symm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">conj_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L108-L108","name":"InnerProductSpace.norm_sq_eq_inner","line":108,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.norm_sq_eq_inner","doc":"The inner product induces the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.norm_sq_eq_inner\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">norm_sq_eq_inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L105-L105","name":"InnerProductSpace.mk","line":105,"kind":"ctor","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace.mk\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toNormedSpace : <span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toInner : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\">Inner</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(norm_sq_eq_inner : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">IsROrC.re</span> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(conj_symm : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">x</span>‚ü´_<span class=\"fn\">ùïú</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(add_left : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y z : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">‚ü™<span class=\"fn\">y</span>, <span class=\"fn\">z</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(smul_left : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">E</span>) (<span class=\"fn\">r</span> : <span class=\"fn\">ùïú</span>), <span class=\"fn\"><span class=\"fn\">‚ü™<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span></span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚ü™<span class=\"fn\">x</span>, <span class=\"fn\">y</span>‚ü´_<span class=\"fn\">ùïú</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L105-L114","name":"InnerProductSpace","line":105,"kind":"class","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace","doc":"An inner product space is a vector space with an additional operation called inner product.\nThe norm could be derived from the inner product, instead we require the existence of a norm and\nthe fact that `‚Äñx‚Äñ^2 = re ‚ü™x, x‚ü´` to be able to put instances on `ùïÇ` or product\nspaces.\n\nTo construct a norm from an inner product, see `InnerProductSpace.ofCore`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#InnerProductSpace\"><span class=\"name\">InnerProductSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/IsROrC/Basic.html#IsROrC\">IsROrC</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Analysis/NormedSpace/Basic.html#NormedSpace\"><span class=\"name\">NormedSpace</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\"><span class=\"name\">Inner</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_4 u_5)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L93-L94","name":"ComplexInnerProductSpace.¬´term‚ü™_,_‚ü´¬ª","line":93,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#ComplexInnerProductSpace.¬´term‚ü™_,_‚ü´¬ª","doc":"The inner product with values in `‚ÑÇ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#ComplexInnerProductSpace.¬´term‚ü™_,_‚ü´¬ª\"><span class=\"name\">ComplexInnerProductSpace</span>.<span class=\"name\">¬´term‚ü™_,_‚ü´¬ª</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L90-L91","name":"RealInnerProductSpace.¬´term‚ü™_,_‚ü´¬ª","line":90,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#RealInnerProductSpace.¬´term‚ü™_,_‚ü´¬ª","doc":"The inner product with values in `‚Ñù`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#RealInnerProductSpace.¬´term‚ü™_,_‚ü´¬ª\"><span class=\"name\">RealInnerProductSpace</span>.<span class=\"name\">¬´term‚ü™_,_‚ü´¬ª</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L85-L86","name":"¬´term‚ü™_,_‚ü´__¬ª","line":85,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#¬´term‚ü™_,_‚ü´__¬ª","doc":"The inner product with values in `ùïú`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#¬´term‚ü™_,_‚ü´__¬ª\"><span class=\"name\">¬´term‚ü™_,_‚ü´__¬ª</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L85-L86","name":"¬´term‚ü™_,_‚ü´__¬ª.delab","line":85,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#¬´term‚ü™_,_‚ü´__¬ª.delab","doc":"Pretty printer defined by `notation3` command. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#¬´term‚ü™_,_‚ü´__¬ª.delab\"><span class=\"name\">¬´term‚ü™_,_‚ü´__¬ª</span>.<span class=\"name\">delab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L80-L80","name":"Inner.inner","line":80,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner.inner","doc":"The inner product function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner.inner\"><span class=\"name\">Inner</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\">Inner</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">E</span> ‚Üí <span class=\"fn\">E</span> ‚Üí <span class=\"fn\">ùïú</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L78-L78","name":"Inner.mk","line":78,"kind":"ctor","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner.mk\"><span class=\"name\">Inner</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùïú : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(inner : <span class=\"fn\"><span class=\"fn\">E</span> ‚Üí <span class=\"fn\">E</span> ‚Üí <span class=\"fn\">ùïú</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\">Inner</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Analysis/InnerProductSpace/Basic.lean#L78-L80","name":"Inner","line":78,"kind":"class","docLink":"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner","doc":"Syntactic typeclass for types endowed with an inner product "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/Basic.html#Inner\"><span class=\"name\">Inner</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ùïú : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_4 u_5)</div></div>"}]}