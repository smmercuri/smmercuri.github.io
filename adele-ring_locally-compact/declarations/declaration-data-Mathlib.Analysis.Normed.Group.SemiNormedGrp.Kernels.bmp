{"name":"Mathlib.Analysis.Normed.Group.SemiNormedGrp.Kernels","instances":[{"typeNames":["SemiNormedGrp₁"],"name":"SemiNormedGrp₁.instHasCokernels","className":"CategoryTheory.Limits.HasCokernels"},{"typeNames":["Quiver.Hom"],"name":"SemiNormedGrp.instSubHom","className":"Sub"},{"typeNames":["Quiver.Hom"],"name":"SemiNormedGrp.instNormHom","className":"Norm"},{"typeNames":["Quiver.Hom"],"name":"SemiNormedGrp.instNNNormHom","className":"NNNorm"},{"typeNames":["CategoryTheory.Limits.parallelPair"],"name":"SemiNormedGrp.hasLimit_parallelPair","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["SemiNormedGrp"],"name":"SemiNormedGrp.instHasEqualizers","className":"CategoryTheory.Limits.HasLimitsOfShape"},{"typeNames":["SemiNormedGrp"],"name":"SemiNormedGrp.instHasCokernels","className":"CategoryTheory.Limits.HasCokernels"},{"typeNames":["SemiNormedGrp.explicitCokernelπ"],"name":"SemiNormedGrp.explicitCokernelπ.epi","className":"CategoryTheory.Epi"}],"imports":["Init","Mathlib.Analysis.Normed.Group.SemiNormedGrp","Mathlib.Analysis.Normed.Group.Quotient","Mathlib.CategoryTheory.Limits.Shapes.Kernels"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L348-L355","name":"SemiNormedGrp.ExplicitCoker.map_desc","line":348,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.ExplicitCoker.map_desc","doc":"A special case of `CategoryTheory.Limits.cokernel.map_desc` adapted to `explicitCokernel`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.ExplicitCoker.map_desc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">ExplicitCoker</span>.<span class=\"name\">map_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D' : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fab : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fbd : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fac : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fcd : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fab</span> <span class=\"fn\">fbd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fac</span> <span class=\"fn\">fcd</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fbb' : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fdd' : <span class=\"fn\"><span class=\"fn\">D</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{condb : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fab</span> <span class=\"fn\">fbb'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{condd : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fcd</span> <span class=\"fn\">fdd'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">B'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fbb'</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fbd</span> <span class=\"fn\">fdd'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">condb</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel.map\">SemiNormedGrp.explicitCokernel.map</a> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">condd</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L342-L345","name":"SemiNormedGrp.explicitCokernel.map","line":342,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel.map","doc":"A special case of `CategoryTheory.Limits.cokernel.map` adapted to `explicitCokernel`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel.map\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernel</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fab : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fbd : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fac : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fcd : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fab</span> <span class=\"fn\">fbd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fac</span> <span class=\"fn\">fcd</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">SemiNormedGrp.explicitCokernel</a> <span class=\"fn\">fab</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">SemiNormedGrp.explicitCokernel</a> <span class=\"fn\">fcd</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L334-L339","name":"SemiNormedGrp.explicitCokernelIso_hom_desc","line":334,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_hom_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_hom_desc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelIso_hom_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso\">SemiNormedGrp.explicitCokernelIso</a> <span class=\"fn\">f</span></span>)</span>.hom</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.desc\">CategoryTheory.Limits.cokernel.desc</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">w</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L329-L331","name":"SemiNormedGrp.explicitCokernelIso_inv_π","line":329,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_inv_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_inv_π\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelIso_inv_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.π\">CategoryTheory.Limits.cokernel.π</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso\">SemiNormedGrp.explicitCokernelIso</a> <span class=\"fn\">f</span></span>)</span>.inv</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L324-L326","name":"SemiNormedGrp.explicitCokernelIso_hom_π","line":324,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_hom_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_hom_π\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelIso_hom_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso\">SemiNormedGrp.explicitCokernelIso</a> <span class=\"fn\">f</span></span>)</span>.hom</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.π\">CategoryTheory.Limits.cokernel.π</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L319-L321","name":"SemiNormedGrp.explicitCokernelIso","line":319,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso","doc":"The explicit cokernel is isomorphic to the usual cokernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">SemiNormedGrp.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel\">CategoryTheory.Limits.cokernel</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L313-L315","name":"SemiNormedGrp.explicitCokernelDesc_norm_le","line":313,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_norm_le\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">w</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">g</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L308-L311","name":"SemiNormedGrp.explicitCokernelDesc_comp_eq_zero","line":308,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_comp_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_comp_eq_zero\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_comp_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cond : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cond2 : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">cond</span></span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L300-L306","name":"SemiNormedGrp.explicitCokernelDesc_normNoninc","line":300,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_normNoninc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_normNoninc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_normNoninc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cond : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.NormNoninc\">NormedAddGroupHom.NormNoninc</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.NormNoninc\">NormedAddGroupHom.NormNoninc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">cond</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L296-L298","name":"SemiNormedGrp.explicitCokernelDesc_norm_le_of_norm_le","line":296,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_norm_le_of_norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_norm_le_of_norm_le\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_norm_le_of_norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/Data/NNReal/Basic.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">g</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">w</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L290-L292","name":"SemiNormedGrp.normNoninc_explicitCokernelπ","line":290,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.normNoninc_explicitCokernelπ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.normNoninc_explicitCokernelπ\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">normNoninc_explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.NormNoninc\">NormedAddGroupHom.NormNoninc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L286-L288","name":"SemiNormedGrp.isQuotient_explicitCokernelπ","line":286,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.isQuotient_explicitCokernelπ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.isQuotient_explicitCokernelπ\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">isQuotient_explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Quotient.html#NormedAddGroupHom.IsQuotient\">NormedAddGroupHom.IsQuotient</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L276-L284","name":"SemiNormedGrp.explicitCokernelπ.epi","line":276,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ.epi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ.epi\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ</span>.<span class=\"name\">epi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L266-L274","name":"SemiNormedGrp.explicitCokernel_hom_ext","line":266,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel_hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel_hom_ext\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernel_hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">SemiNormedGrp.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">SemiNormedGrp.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">e₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">e₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L261-L263","name":"SemiNormedGrp.explicitCokernelDesc_zero","line":261,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_zero\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L250-L258","name":"SemiNormedGrp.explicitCokernelDesc_comp_eq_desc","line":250,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_comp_eq_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_comp_eq_desc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_comp_eq_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cond' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">cond'</span></span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L241-L248","name":"SemiNormedGrp.explicitCokernelDesc_unique","line":241,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_unique\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">SemiNormedGrp.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(he : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L237-L239","name":"SemiNormedGrp.explicitCokernelπ_desc_apply","line":237,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc_apply\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ_desc_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cond : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">cond</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L232-L234","name":"SemiNormedGrp.explicitCokernelπ_desc","line":232,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">w</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L231-L231","name":"SemiNormedGrp.explicitCokernelπ_desc_assoc","line":231,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc_assoc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ_desc_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">Z✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">SemiNormedGrp.explicitCokernelDesc</a> <span class=\"fn\">w</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L227-L229","name":"SemiNormedGrp.explicitCokernelπ_apply_dom_eq_zero","line":227,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_apply_dom_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_apply_dom_eq_zero\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ_apply_dom_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L218-L221","name":"SemiNormedGrp.comp_explicitCokernelπ","line":218,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.comp_explicitCokernelπ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.comp_explicitCokernelπ\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">comp_explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L217-L217","name":"SemiNormedGrp.comp_explicitCokernelπ_assoc","line":217,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.comp_explicitCokernelπ_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.comp_explicitCokernelπ_assoc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">comp_explicitCokernelπ_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">SemiNormedGrp.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L213-L215","name":"SemiNormedGrp.explicitCokernelπ_surjective","line":213,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_surjective\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">SemiNormedGrp.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L210-L211","name":"SemiNormedGrp.explicitCokernelπ","line":210,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ","doc":"The projection from `Y` to the explicit cokernel of `X ⟶ Y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">SemiNormedGrp.explicitCokernel</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L204-L206","name":"SemiNormedGrp.explicitCokernelDesc","line":204,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc","doc":"Descend to the explicit cokernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">SemiNormedGrp.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L199-L200","name":"SemiNormedGrp.explicitCokernel","line":199,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel","doc":"An explicit choice of cokernel, which has good properties with respect to the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L186-L190","name":"SemiNormedGrp.instHasCokernels","line":186,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instHasCokernels","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instHasCokernels\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">instHasCokernels</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.HasCokernels\">CategoryTheory.Limits.HasCokernels</a> <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L173-L184","name":"SemiNormedGrp.isColimitCokernelCocone","line":173,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.isColimitCokernelCocone","doc":"Auxiliary definition for `HasCokernels SemiNormedGrp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.isColimitCokernelCocone\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">isColimitCokernelCocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelCocone\">SemiNormedGrp.cokernelCocone</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L161-L169","name":"SemiNormedGrp.cokernelLift","line":161,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelLift","doc":"Auxiliary definition for `HasCokernels SemiNormedGrp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelLift\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">cokernelLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.CokernelCofork\">CategoryTheory.Limits.CokernelCofork</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelCocone\">SemiNormedGrp.cokernelCocone</a> <span class=\"fn\">f</span></span>)</span>.pt</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">s</span>.pt</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L142-L157","name":"SemiNormedGrp.cokernelCocone","line":142,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelCocone","doc":"Auxiliary definition for `HasCokernels SemiNormedGrp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelCocone\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">cokernelCocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork\">CategoryTheory.Limits.Cofork</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L130-L132","name":"SemiNormedGrp.instHasEqualizers","line":130,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instHasEqualizers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instHasEqualizers\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">instHasEqualizers</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.HasEqualizers\">CategoryTheory.Limits.HasEqualizers</a> <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L115-L128","name":"SemiNormedGrp.hasLimit_parallelPair","line":115,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.hasLimit_parallelPair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.hasLimit_parallelPair\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">hasLimit_parallelPair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimit\">CategoryTheory.Limits.HasLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair\">CategoryTheory.Limits.parallelPair</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L104-L113","name":"SemiNormedGrp.fork","line":104,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.fork","doc":"The equalizer cone for a parallel pair of morphisms of seminormed groups. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.fork\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">fork</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork\">CategoryTheory.Limits.Fork</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L101-L102","name":"SemiNormedGrp.instNNNormHom","line":101,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instNNNormHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instNNNormHom\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">instNNNormHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm\">NNNorm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L99-L100","name":"SemiNormedGrp.instNormHom","line":99,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instNormHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instNormHom\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">instNormHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm\">Norm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L97-L98","name":"SemiNormedGrp.instSubHom","line":97,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instSubHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instSubHom\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">instSubHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L67-L83","name":"SemiNormedGrp₁.instHasCokernels","line":67,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.instHasCokernels","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.instHasCokernels\"><span class=\"name\">SemiNormedGrp₁</span>.<span class=\"name\">instHasCokernels</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.HasCokernels\">CategoryTheory.Limits.HasCokernels</a> <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp₁\">SemiNormedGrp₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L54-L65","name":"SemiNormedGrp₁.cokernelLift","line":54,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.cokernelLift","doc":"Auxiliary definition for `HasCokernels SemiNormedGrp₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.cokernelLift\"><span class=\"name\">SemiNormedGrp₁</span>.<span class=\"name\">cokernelLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp₁\">SemiNormedGrp₁</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp₁\">SemiNormedGrp₁</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.CokernelCofork\">CategoryTheory.Limits.CokernelCofork</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.cokernelCocone\">SemiNormedGrp₁.cokernelCocone</a> <span class=\"fn\">f</span></span>)</span>.pt</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">s</span>.pt</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L36-L51","name":"SemiNormedGrp₁.cokernelCocone","line":36,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.cokernelCocone","doc":"Auxiliary definition for `HasCokernels SemiNormedGrp₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.cokernelCocone\"><span class=\"name\">SemiNormedGrp₁</span>.<span class=\"name\">cokernelCocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp₁\">SemiNormedGrp₁</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp₁\">SemiNormedGrp₁</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork\">CategoryTheory.Limits.Cofork</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span></div></div>"}]}