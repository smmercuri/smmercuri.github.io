{"name":"Mathlib.CategoryTheory.Bicategory.Kan.Adjunction","instances":[{"typeNames":[],"name":"CategoryTheory.Bicategory.LeftExtension.instCommuteWithOfIsLeftAdjoint","className":"CategoryTheory.Bicategory.Lan.CommuteWith"}],"imports":["Init","Mathlib.CategoryTheory.Bicategory.Kan.HasKan","Mathlib.CategoryTheory.Bicategory.Adjunction","Mathlib.Tactic.TFAE"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L242-L244","name":"CategoryTheory.Bicategory.LeftExtension.instCommuteWithOfIsLeftAdjoint","line":242,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.instCommuteWithOfIsLeftAdjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.instCommuteWithOfIsLeftAdjoint\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">instCommuteWithOfIsLeftAdjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction.html#CategoryTheory.Bicategory.IsLeftAdjoint\">CategoryTheory.Bicategory.IsLeftAdjoint</a> <span class=\"fn\">h</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.HasLeftKanExtension\">CategoryTheory.Bicategory.HasLeftKanExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.Lan.CommuteWith\">CategoryTheory.Bicategory.Lan.CommuteWith</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L204-L240","name":"CategoryTheory.Bicategory.LeftExtension.isKanOfWhiskerLeftAdjoint","line":204,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.isKanOfWhiskerLeftAdjoint","doc":"A left adjoint commutes with a left Kan extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.isKanOfWhiskerLeftAdjoint\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">isKanOfWhiskerLeftAdjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">CategoryTheory.Bicategory.LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">t</span>.IsKan</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(adj : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction.html#CategoryTheory.Bicategory.Adjunction\">CategoryTheory.Bicategory.Adjunction</a> <span class=\"fn\">h</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.whisker</span> <span class=\"fn\">h</span></span>)</span>.IsKan</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L183-L197","name":"CategoryTheory.Bicategory.isRightAdjoint_TFAE","line":183,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.isRightAdjoint_TFAE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.isRightAdjoint_TFAE\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">isRightAdjoint_TFAE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction.html#CategoryTheory.Bicategory.IsRightAdjoint\">CategoryTheory.Bicategory.IsRightAdjoint</a> <span class=\"fn\">u</span></span>,\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.HasAbsLeftKanLift\">CategoryTheory.Bicategory.HasAbsLeftKanLift</a> <span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span></span>,\n    <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.HasLeftKanLift\">CategoryTheory.Bicategory.HasLeftKanLift</a> <span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span></span>),\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.LanLift.CommuteWith\">CategoryTheory.Bicategory.LanLift.CommuteWith</a> <span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">u</span></span></span>]</span>.TFAE</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L179-L181","name":"CategoryTheory.Bicategory.LeftLift.IsAbsKan.adjunction","line":179,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan.adjunction","doc":"For an adjuntion `f ⊣ u`, `f` is a left Kan lift of the identity along `u`.\nThe unit of this Kan lift is given by the unit of the adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan.adjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsAbsKan</span>.<span class=\"name\">adjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">CategoryTheory.Bicategory.LeftLift</a> <span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">t</span>.IsAbsKan</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction.html#CategoryTheory.Bicategory.Adjunction\">CategoryTheory.Bicategory.Adjunction</a> <span class=\"fn\"><span class=\"fn\">t</span>.lift</span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L155-L175","name":"CategoryTheory.Bicategory.LeftLift.IsKan.adjunction","line":155,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftLift.IsKan.adjunction","doc":"A left Kan lift of the identity along `u` such that `u` commutes with is a left adjoint\nto `u`. The unit of this adjoint is given by the unit of the Kan lift. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftLift.IsKan.adjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">adjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">CategoryTheory.Bicategory.LeftLift</a> <span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">t</span>.IsKan</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H' : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.whisker</span> <span class=\"fn\">u</span></span>)</span>.IsKan</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction.html#CategoryTheory.Bicategory.Adjunction\">CategoryTheory.Bicategory.Adjunction</a> <span class=\"fn\"><span class=\"fn\">t</span>.lift</span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L127-L151","name":"CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKanLift","line":127,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKanLift","doc":"For an adjuntion `f ⊣ u`, `f` is an absolute left Kan lift of the identity along `u`.\nThe unit of this Kan lift is given by the unit of the adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKanLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">isAbsoluteLeftKanLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(adj : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction.html#CategoryTheory.Bicategory.Adjunction\">CategoryTheory.Bicategory.Adjunction</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.mk\">CategoryTheory.Bicategory.LeftLift.mk</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">adj</span>.unit</span></span>)</span>.IsAbsKan</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L103-L117","name":"CategoryTheory.Bicategory.isLeftAdjoint_TFAE","line":103,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.isLeftAdjoint_TFAE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.isLeftAdjoint_TFAE\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">isLeftAdjoint_TFAE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction.html#CategoryTheory.Bicategory.IsLeftAdjoint\">CategoryTheory.Bicategory.IsLeftAdjoint</a> <span class=\"fn\">f</span></span>,\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.HasAbsLeftKanExtension\">CategoryTheory.Bicategory.HasAbsLeftKanExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span></span>,\n    <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.HasLeftKanExtension\">CategoryTheory.Bicategory.HasLeftKanExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span></span>),\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.Lan.CommuteWith\">CategoryTheory.Bicategory.Lan.CommuteWith</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">f</span></span></span>]</span>.TFAE</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L99-L101","name":"CategoryTheory.Bicategory.LeftExtension.IsAbsKan.adjunction","line":99,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan.adjunction","doc":"For an adjuntion `f ⊣ u`, `u` is a left Kan extension of the identity along `f`.\nThe unit of this Kan extension is given by the unit of the adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan.adjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsAbsKan</span>.<span class=\"name\">adjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">CategoryTheory.Bicategory.LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">t</span>.IsAbsKan</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction.html#CategoryTheory.Bicategory.Adjunction\">CategoryTheory.Bicategory.Adjunction</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.extension</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L75-L95","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.adjunction","line":75,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.IsKan.adjunction","doc":"A left Kan extension of the identity along `f` such that `f` commutes with is a right adjoint\nto `f`. The unit of this adjoint is given by the unit of the Kan extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.IsKan.adjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">adjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">CategoryTheory.Bicategory.LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">t</span>.IsKan</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H' : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.whisker</span> <span class=\"fn\">f</span></span>)</span>.IsKan</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction.html#CategoryTheory.Bicategory.Adjunction\">CategoryTheory.Bicategory.Adjunction</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.extension</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L46-L71","name":"CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKan","line":46,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKan","doc":"For an adjuntion `f ⊣ u`, `u` is an absolute left Kan extension of the identity along `f`.\nThe unit of this Kan extension is given by the unit of the adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">isAbsoluteLeftKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(adj : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction.html#CategoryTheory.Bicategory.Adjunction\">CategoryTheory.Bicategory.Adjunction</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.mk\">CategoryTheory.Bicategory.LeftExtension.mk</a> <span class=\"fn\">u</span> <span class=\"fn\"><span class=\"fn\">adj</span>.unit</span></span>)</span>.IsAbsKan</span></div></div>"}]}