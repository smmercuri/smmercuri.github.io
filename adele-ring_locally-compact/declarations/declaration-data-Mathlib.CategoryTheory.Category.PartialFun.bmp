{"name":"Mathlib.CategoryTheory.Category.PartialFun","instances":[{"typeNames":["PartialFun","_builtin_typeu"],"name":"PartialFun.instCoeSortType","className":"CoeSort"},{"typeNames":["PartialFun"],"name":"PartialFun.instInhabited","className":"Inhabited"},{"typeNames":["PartialFun"],"name":"PartialFun.largeCategory","className":"CategoryTheory.Category"},{"typeNames":["typeToPartialFun"],"name":"instFaithfulPartialFunTypeToPartialFun","className":"CategoryTheory.Functor.Faithful"}],"imports":["Init","Mathlib.CategoryTheory.Category.Pointed","Mathlib.Data.PFun"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L159-L171","name":"typeToPartialFunIsoPartialFunToPointed","line":159,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed","doc":"Forgetting that maps are total and making them total again by adding a point is the same as just\nadding a point. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed\"><span class=\"name\">typeToPartialFunIsoPartialFunToPointed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFun\">typeToPartialFun</a>.comp</span> <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed\">partialFunToPointed</a></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#typeToPointed\">typeToPointed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L158-L158","name":"typeToPartialFunIsoPartialFunToPointed_hom_app_toFun","line":158,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed_hom_app_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed_hom_app_toFun\"><span class=\"name\">typeToPartialFunIsoPartialFunToPointed_hom_app_toFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFun\">typeToPartialFun</a>.comp</span> <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed\">partialFunToPointed</a></span>)</span>.obj</span> <span class=\"fn\">X</span></span>)</span>.X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed\">typeToPartialFunIsoPartialFunToPointed</a>.hom</span>.app</span> <span class=\"fn\">X</span></span>)</span>.toFun</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L158-L158","name":"typeToPartialFunIsoPartialFunToPointed_inv_app_toFun","line":158,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed_inv_app_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed_inv_app_toFun\"><span class=\"name\">typeToPartialFunIsoPartialFunToPointed_inv_app_toFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#typeToPointed\">typeToPointed</a>.obj</span> <span class=\"fn\">X</span></span>)</span>.X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed\">typeToPartialFunIsoPartialFunToPointed</a>.inv</span>.app</span> <span class=\"fn\">X</span></span>)</span>.toFun</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L122-L154","name":"partialFunEquivPointed","line":122,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed","doc":"The equivalence induced by `PartialFunToPointed` and `PointedToPartialFun`.\n`Part.equivOption` made functorial. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\"><span class=\"name\">partialFunEquivPointed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L121","name":"partialFunEquivPointed_functor_map_toFun","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_functor_map_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_functor_map_toFun\"><span class=\"name\">partialFunEquivPointed_functor_map_toFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">X</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\">partialFunEquivPointed</a>.functor</span>.map</span> <span class=\"fn\">f</span></span>)</span>.toFun</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.elim'\">Option.elim'</a> <span class=\"fn\">none</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">X</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.toOption</span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L121","name":"partialFunEquivPointed_counitIso_inv_app_toFun","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_counitIso_inv_app_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_counitIso_inv_app_toFun\"><span class=\"name\">partialFunEquivPointed_counitIso_inv_app_toFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a></span>)</span>.obj</span> <span class=\"fn\">X</span></span>)</span>.X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\">partialFunEquivPointed</a>.counitIso</span>.inv</span>.app</span> <span class=\"fn\">X</span></span>)</span>.toFun</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.point</span></span> then <span class=\"fn\">none</span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">h</span>⟩</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L121","name":"partialFunEquivPointed_functor_obj_X","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_functor_obj_X","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_functor_obj_X\"><span class=\"name\">partialFunEquivPointed_functor_obj_X</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\">partialFunEquivPointed</a>.functor</span>.obj</span> <span class=\"fn\">X</span></span>)</span>.X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L121","name":"partialFunEquivPointed_inverse_map_get_coe","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_inverse_map_get_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_inverse_map_get_coe\"><span class=\"name\">partialFunEquivPointed_inverse_map_get_coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.X</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">X</span>.point</span></span> }</span>) (<span class=\"fn\">property</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.toFun</span> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">Y</span>.point</span></span>),\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\">partialFunEquivPointed</a>.inverse</span>.map</span> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.get</span> <span class=\"fn\">property</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.toFun</span> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L121","name":"partialFunEquivPointed_unitIso_hom_app","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_unitIso_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_unitIso_hom_app\"><span class=\"name\">partialFunEquivPointed_unitIso_hom_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\">partialFunEquivPointed</a>.unitIso</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk\">PartialFun.Iso.mk</a>\n        <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">X</span>) =&gt; <span class=\"fn\">⟨<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">⋯</span>⟩</span></span>, <span class=\"fn\">invFun</span> := <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">X</span></span> // <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></span> }</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">a</span></span>)</span>.get</span> <span class=\"fn\">⋯</span></span></span>,\n          <span class=\"fn\">left_inv</span> := <span class=\"fn\">⋯</span>, <span class=\"fn\">right_inv</span> := <span class=\"fn\">⋯</span> }</span></span>)</span>.hom</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun\">pointedToPartialFun</a>.map</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed.Iso.mk\">Pointed.Iso.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Option.html#Equiv.optionSubtypeNe\">Equiv.optionSubtypeNe</a> <span class=\"fn\">none</span></span>)</span> <span class=\"fn\">⋯</span></span>)</span>.inv</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun\">pointedToPartialFun</a>.map</span>\n        <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.elim'\">Option.elim'</a> <span class=\"fn\">none</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">X</span></span> // <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></span> }</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></span>, <span class=\"fn\">map_point</span> := <span class=\"fn\">⋯</span> }</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L121","name":"partialFunEquivPointed_inverse_obj","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_inverse_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_inverse_obj\"><span class=\"name\">partialFunEquivPointed_inverse_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\">partialFunEquivPointed</a>.inverse</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.X</span> // <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.point</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L121","name":"partialFunEquivPointed_counitIso_hom_app_toFun","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_counitIso_hom_app_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_counitIso_hom_app_toFun\"><span class=\"name\">partialFunEquivPointed_counitIso_hom_app_toFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun\">pointedToPartialFun</a>.comp</span> <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed\">partialFunToPointed</a></span>)</span>.obj</span> <span class=\"fn\">X</span></span>)</span>.X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\">partialFunEquivPointed</a>.counitIso</span>.hom</span>.app</span> <span class=\"fn\">X</span></span>)</span>.toFun</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Option/Basic.html#Option.casesOn'\">Option.casesOn'</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">X</span>.point</span> <span class=\"fn\">Subtype.val</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L121","name":"partialFunEquivPointed_inverse_map_Dom","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_inverse_map_Dom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_inverse_map_Dom\"><span class=\"name\">partialFunEquivPointed_inverse_map_Dom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.X</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">X</span>.point</span></span> }</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\">partialFunEquivPointed</a>.inverse</span>.map</span> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.Dom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.toFun</span> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Y</span>.point</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L121","name":"partialFunEquivPointed_functor_obj_point","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_functor_obj_point","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_functor_obj_point\"><span class=\"name\">partialFunEquivPointed_functor_obj_point</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\">partialFunEquivPointed</a>.functor</span>.obj</span> <span class=\"fn\">X</span></span>)</span>.point</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L121","name":"partialFunEquivPointed_unitIso_inv_app","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_unitIso_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_unitIso_inv_app\"><span class=\"name\">partialFunEquivPointed_unitIso_inv_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed\">partialFunEquivPointed</a>.unitIso</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun\">pointedToPartialFun</a>.map</span> <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.elim'\">Option.elim'</a> <span class=\"fn\">none</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">X</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">⟨<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">⋯</span>⟩</span></span></span></span>, <span class=\"fn\">map_point</span> := <span class=\"fn\">⋯</span> }</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun\">pointedToPartialFun</a>.map</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed.Iso.mk\">Pointed.Iso.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Option.html#Equiv.optionSubtypeNe\">Equiv.optionSubtypeNe</a> <span class=\"fn\">none</span></span>)</span> <span class=\"fn\">⋯</span></span>)</span>.hom</span></span>)</span>\n      <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk\">PartialFun.Iso.mk</a>\n          <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">X</span>) =&gt; <span class=\"fn\">⟨<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">⋯</span>⟩</span></span>, <span class=\"fn\">invFun</span> := <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">X</span></span> // <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></span> }</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">a</span></span>)</span>.get</span> <span class=\"fn\">⋯</span></span></span>,\n            <span class=\"fn\">left_inv</span> := <span class=\"fn\">⋯</span>, <span class=\"fn\">right_inv</span> := <span class=\"fn\">⋯</span> }</span></span>)</span>.inv</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L107-L117","name":"partialFunToPointed","line":107,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed","doc":"The functor which maps undefined values to a new point. This makes the maps total and creates\npointed types. This is the noncomputable part of the equivalence `PartialFunEquivPointed`. It can't\nbe computable because `= Option.none` is decidable while the domain of a general `Part` isn't. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed\"><span class=\"name\">partialFunToPointed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a> <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L106-L106","name":"partialFunToPointed_map","line":106,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed_map\"><span class=\"name\">partialFunToPointed_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed\">partialFunToPointed</a>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.elim'\">Option.elim'</a> <span class=\"fn\">none</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">X</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.toOption</span></span></span>, <span class=\"fn\">map_point</span> := <span class=\"fn\">⋯</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L106-L106","name":"partialFunToPointed_obj","line":106,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed_obj\"><span class=\"name\">partialFunToPointed_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed\">partialFunToPointed</a>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">X</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">X</span></span>, <span class=\"fn\">point</span> := <span class=\"fn\">none</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L88-L101","name":"pointedToPartialFun","line":88,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun","doc":"The functor which deletes the point of a pointed type. In return, this makes the maps partial.\nThis is the computable part of the equivalence `PartialFunEquivPointed`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun\"><span class=\"name\">pointedToPartialFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a> <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L87-L87","name":"pointedToPartialFun_obj","line":87,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun_obj\"><span class=\"name\">pointedToPartialFun_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun\">pointedToPartialFun</a>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.X</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">X</span>.point</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L87-L87","name":"pointedToPartialFun_map","line":87,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun_map\"><span class=\"name\">pointedToPartialFun_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/Category/Pointed.html#Pointed\">Pointed</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.X</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">X</span>.point</span></span> }</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun\">pointedToPartialFun</a>.map</span> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFun.html#PFun.toSubtype\">PFun.toSubtype</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">Y</span>.X</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">Y</span>.point</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">f</span>.toFun</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">Subtype.val</span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L82-L83","name":"instFaithfulPartialFunTypeToPartialFun","line":82,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#instFaithfulPartialFunTypeToPartialFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#instFaithfulPartialFunTypeToPartialFun\"><span class=\"name\">instFaithfulPartialFunTypeToPartialFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFun\">typeToPartialFun</a>.Faithful</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L77-L80","name":"typeToPartialFun","line":77,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFun","doc":"The forgetful functor from `Type` to `PartialFun` which forgets that the maps are total. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFun\"><span class=\"name\">typeToPartialFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a> <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L64-L72","name":"PartialFun.Iso.mk","line":64,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk","doc":"Constructs a partial function isomorphism between types from an equivalence between them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk\"><span class=\"name\">PartialFun</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L63-L63","name":"PartialFun.Iso.mk_hom","line":63,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk_hom\"><span class=\"name\">PartialFun</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk\">PartialFun.Iso.mk</a> <span class=\"fn\">e</span></span>)</span>.hom</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L63-L63","name":"PartialFun.Iso.mk_inv","line":63,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk_inv\"><span class=\"name\">PartialFun</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk\">PartialFun.Iso.mk</a> <span class=\"fn\">e</span></span>)</span>.inv</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.symm</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L54-L60","name":"PartialFun.largeCategory","line":54,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.largeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.largeCategory\"><span class=\"name\">PartialFun</span>.<span class=\"name\">largeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.LargeCategory\">CategoryTheory.LargeCategory</a> <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L51-L52","name":"PartialFun.instInhabited","line":51,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.instInhabited\"><span class=\"name\">PartialFun</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L46-L47","name":"PartialFun.of","line":46,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.of","doc":"Turns a type into a `PartialFun`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.of\"><span class=\"name\">PartialFun</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L41-L42","name":"PartialFun.instCoeSortType","line":41,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.instCoeSortType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.instCoeSortType\"><span class=\"name\">PartialFun</span>.<span class=\"name\">instCoeSortType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\">PartialFun</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u_3)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Category/PartialFun.lean#L36-L37","name":"PartialFun","line":36,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun","doc":"The category of types equipped with partial functions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun\"><span class=\"name\">PartialFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_3 + 1)</div></div>"}]}