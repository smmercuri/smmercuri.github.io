{"name":"Mathlib.CategoryTheory.Monad.Coequalizer","instances":[{"typeNames":["CategoryTheory.Monad.FreeCoequalizer.topMap","CategoryTheory.Monad.FreeCoequalizer.bottomMap"],"name":"CategoryTheory.Monad.instIsReflexivePairAlgebraTopMapBottomMap","className":"CategoryTheory.IsReflexivePair"}],"imports":["Init","Mathlib.CategoryTheory.Limits.Shapes.Reflexive","Mathlib.CategoryTheory.Limits.Shapes.SplitCoequalizer","Mathlib.CategoryTheory.Monad.Algebra"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L119-L121","name":"CategoryTheory.Monad.beckCoequalizer_desc","line":119,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCoequalizer_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCoequalizer_desc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">beckCoequalizer_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork\">CategoryTheory.Limits.Cofork</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.map</span> <span class=\"fn\"><span class=\"fn\">X</span>.a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.μ</span>.app</span> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCoequalizer\">CategoryTheory.Monad.beckCoequalizer</a> <span class=\"fn\">X</span></span>)</span>.desc</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.η</span>.app</span> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.π</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L115-L116","name":"CategoryTheory.Monad.beckCoequalizer","line":115,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCoequalizer","doc":"The Beck cofork is a coequalizer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCoequalizer\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">beckCoequalizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCofork\">CategoryTheory.Monad.beckCofork</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L111-L112","name":"CategoryTheory.Monad.beckCofork_π","line":111,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCofork_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCofork_π\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">beckCofork_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCofork\">CategoryTheory.Monad.beckCofork</a> <span class=\"fn\">X</span></span>)</span>.π</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L107-L108","name":"CategoryTheory.Monad.beckCofork","line":107,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCofork","doc":"This is the Beck cofork. It is a split coequalizer, in particular a coequalizer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCofork\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">beckCofork</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork\">CategoryTheory.Limits.Cofork</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.map</span> <span class=\"fn\"><span class=\"fn\">X</span>.a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.μ</span>.app</span> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L106-L106","name":"CategoryTheory.Monad.beckCofork_pt","line":106,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCofork_pt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCofork_pt\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">beckCofork_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckCofork\">CategoryTheory.Monad.beckCofork</a> <span class=\"fn\">X</span></span>)</span>.pt</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L102-L103","name":"CategoryTheory.Monad.beckSplitCoequalizer","line":102,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckSplitCoequalizer","doc":"The Beck cofork is a split coequalizer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckSplitCoequalizer\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">beckSplitCoequalizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SplitCoequalizer.html#CategoryTheory.IsSplitCoequalizer\">CategoryTheory.IsSplitCoequalizer</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.map</span> <span class=\"fn\"><span class=\"fn\">X</span>.a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.μ</span>.app</span> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span>)</span> <span class=\"fn\"><span class=\"fn\">X</span>.a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L84-L99","name":"CategoryTheory.Monad.beckAlgebraCoequalizer","line":84,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCoequalizer","doc":"The cofork constructed is a colimit. This shows that any algebra is a (reflexive) coequalizer of\nfree algebras.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCoequalizer\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">beckAlgebraCoequalizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCofork\">CategoryTheory.Monad.beckAlgebraCofork</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L78-L79","name":"CategoryTheory.Monad.beckAlgebraCofork","line":78,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCofork","doc":"Construct the Beck cofork in the category of algebras. This cofork is reflexive as well as a\ncoequalizer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCofork\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">beckAlgebraCofork</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork\">CategoryTheory.Limits.Cofork</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.topMap\">CategoryTheory.Monad.FreeCoequalizer.topMap</a> <span class=\"fn\">X</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.bottomMap\">CategoryTheory.Monad.FreeCoequalizer.bottomMap</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L77-L77","name":"CategoryTheory.Monad.beckAlgebraCofork_pt","line":77,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCofork_pt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCofork_pt\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">beckAlgebraCofork_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCofork\">CategoryTheory.Monad.beckAlgebraCofork</a> <span class=\"fn\">X</span></span>)</span>.pt</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L77-L77","name":"CategoryTheory.Monad.beckAlgebraCofork_ι_app","line":77,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCofork_ι_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCofork_ι_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">beckAlgebraCofork_ι_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPair\">CategoryTheory.Limits.WalkingParallelPair</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.beckAlgebraCofork\">CategoryTheory.Monad.beckAlgebraCofork</a> <span class=\"fn\">X✝</span></span>)</span>.ι</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPair.rec\">CategoryTheory.Limits.WalkingParallelPair.rec</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.topMap\">CategoryTheory.Monad.FreeCoequalizer.topMap</a> <span class=\"fn\">X✝</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.π\">CategoryTheory.Monad.FreeCoequalizer.π</a> <span class=\"fn\">X✝</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.π\">CategoryTheory.Monad.FreeCoequalizer.π</a> <span class=\"fn\">X✝</span></span>)</span> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L65-L72","name":"CategoryTheory.Monad.instIsReflexivePairAlgebraTopMapBottomMap","line":65,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.instIsReflexivePairAlgebraTopMapBottomMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.instIsReflexivePairAlgebraTopMapBottomMap\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">instIsReflexivePairAlgebraTopMapBottomMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Reflexive.html#CategoryTheory.IsReflexivePair\">CategoryTheory.IsReflexivePair</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.topMap\">CategoryTheory.Monad.FreeCoequalizer.topMap</a> <span class=\"fn\">X</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.bottomMap\">CategoryTheory.Monad.FreeCoequalizer.bottomMap</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L60-L63","name":"CategoryTheory.Monad.FreeCoequalizer.condition","line":60,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.condition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.condition\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">FreeCoequalizer</span>.<span class=\"name\">condition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.topMap\">CategoryTheory.Monad.FreeCoequalizer.topMap</a> <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.π\">CategoryTheory.Monad.FreeCoequalizer.π</a> <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.bottomMap\">CategoryTheory.Monad.FreeCoequalizer.bottomMap</a> <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.π\">CategoryTheory.Monad.FreeCoequalizer.π</a> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L56-L58","name":"CategoryTheory.Monad.FreeCoequalizer.π","line":56,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.π","doc":"The cofork map in the coequalizer diagram we will construct. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.π\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">FreeCoequalizer</span>.<span class=\"name\">π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.free</span>.obj</span> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L55-L55","name":"CategoryTheory.Monad.FreeCoequalizer.π_f","line":55,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.π_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.π_f\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">FreeCoequalizer</span>.<span class=\"name\">π_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.π\">CategoryTheory.Monad.FreeCoequalizer.π</a> <span class=\"fn\">X</span></span>)</span>.f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L50-L52","name":"CategoryTheory.Monad.FreeCoequalizer.bottomMap","line":50,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.bottomMap","doc":"The bottom map in the coequalizer diagram we will construct. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.bottomMap\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">FreeCoequalizer</span>.<span class=\"name\">bottomMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.free</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.obj</span> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.free</span>.obj</span> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L49-L49","name":"CategoryTheory.Monad.FreeCoequalizer.bottomMap_f","line":49,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.bottomMap_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.bottomMap_f\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">FreeCoequalizer</span>.<span class=\"name\">bottomMap_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.bottomMap\">CategoryTheory.Monad.FreeCoequalizer.bottomMap</a> <span class=\"fn\">X</span></span>)</span>.f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.μ</span>.app</span> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L45-L46","name":"CategoryTheory.Monad.FreeCoequalizer.topMap","line":45,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.topMap","doc":"The top map in the coequalizer diagram we will construct. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.topMap\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">FreeCoequalizer</span>.<span class=\"name\">topMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.free</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.obj</span> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.free</span>.obj</span> <span class=\"fn\"><span class=\"fn\">X</span>.A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monad/Coequalizer.lean#L44-L44","name":"CategoryTheory.Monad.FreeCoequalizer.topMap_f","line":44,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.topMap_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.topMap_f\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Monad</span>.<span class=\"name\">FreeCoequalizer</span>.<span class=\"name\">topMap_f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">T</span>.Algebra</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Coequalizer.html#CategoryTheory.Monad.FreeCoequalizer.topMap\">CategoryTheory.Monad.FreeCoequalizer.topMap</a> <span class=\"fn\">X</span></span>)</span>.f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.map</span> <span class=\"fn\"><span class=\"fn\">X</span>.a</span></span></span></div></div>"}]}