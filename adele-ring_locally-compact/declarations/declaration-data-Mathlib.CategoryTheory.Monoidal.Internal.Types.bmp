{"name":"Mathlib.CategoryTheory.Monoidal.Internal.Types","instances":[{"typeNames":["Mon_.X"],"name":"MonTypeEquivalenceMon.monMonoid","className":"Monoid"},{"typeNames":["Mon_"],"name":"monTypeInhabited","className":"Inhabited"},{"typeNames":["Mon_.X"],"name":"CommMonTypeEquivalenceCommMon.commMonCommMonoid","className":"CommMonoid"},{"typeNames":["CommMon_"],"name":"commMonTypeInhabited","className":"Inhabited"}],"imports":["Init","Mathlib.Algebra.Category.MonCat.Basic","Mathlib.CategoryTheory.Monoidal.CommMon_","Mathlib.CategoryTheory.Monoidal.Types.Symmetric"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L152-L153","name":"commMonTypeInhabited","line":152,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#commMonTypeInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#commMonTypeInhabited\"><span class=\"name\">commMonTypeInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/CommMon_.html#CommMon_\">CommMon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L147-L150","name":"commMonTypeEquivalenceCommMonForget","line":147,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#commMonTypeEquivalenceCommMonForget","doc":"The equivalences `Mon_ (Type u) ≌ MonCat.{u}` and `CommMon_ (Type u) ≌ CommMonCat.{u}`\nare naturally compatible with the forgetful functors to `MonCat` and `Mon_ (Type u)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#commMonTypeEquivalenceCommMonForget\"><span class=\"name\">commMonTypeEquivalenceCommMonForget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#CommMonTypeEquivalenceCommMon.functor\">CommMonTypeEquivalenceCommMon.functor</a>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#CommMonCat\">CommMonCat</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat\">MonCat</a></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/CommMon_.html#CommMon_.forget₂Mon_\">CommMon_.forget₂Mon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span>.comp</span> <a href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#MonTypeEquivalenceMon.functor\">MonTypeEquivalenceMon.functor</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L122-L142","name":"commMonTypeEquivalenceCommMon","line":122,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#commMonTypeEquivalenceCommMon","doc":"The category of internal commutative monoid objects in `Type`\nis equivalent to the category of \"native\" bundled commutative monoids.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#commMonTypeEquivalenceCommMon\"><span class=\"name\">commMonTypeEquivalenceCommMon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/CommMon_.html#CommMon_\">CommMon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#CommMonCat\">CommMonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L107-L113","name":"CommMonTypeEquivalenceCommMon.inverse","line":107,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#CommMonTypeEquivalenceCommMon.inverse","doc":"Converting a bundled commutative monoid to a commutative monoid object in `Type`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#CommMonTypeEquivalenceCommMon.inverse\"><span class=\"name\">CommMonTypeEquivalenceCommMon</span>.<span class=\"name\">inverse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#CommMonCat\">CommMonCat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/CommMon_.html#CommMon_\">CommMon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L101-L103","name":"CommMonTypeEquivalenceCommMon.functor","line":101,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#CommMonTypeEquivalenceCommMon.functor","doc":"Converting a commutative monoid object in `Type` to a bundled commutative monoid.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#CommMonTypeEquivalenceCommMon.functor\"><span class=\"name\">CommMonTypeEquivalenceCommMon</span>.<span class=\"name\">functor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/CommMon_.html#CommMon_\">CommMon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#CommMonCat\">CommMonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L95-L97","name":"CommMonTypeEquivalenceCommMon.commMonCommMonoid","line":95,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#CommMonTypeEquivalenceCommMon.commMonCommMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#CommMonTypeEquivalenceCommMon.commMonCommMonoid\"><span class=\"name\">CommMonTypeEquivalenceCommMon</span>.<span class=\"name\">commMonCommMonoid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/CommMon_.html#CommMon_\">CommMon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommMonoid\">CommMonoid</a> <span class=\"fn\"><span class=\"fn\">A</span>.X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L90-L91","name":"monTypeInhabited","line":90,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#monTypeInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#monTypeInhabited\"><span class=\"name\">monTypeInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Mon_.html#Mon_\">Mon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L86-L88","name":"monTypeEquivalenceMonForget","line":86,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#monTypeEquivalenceMonForget","doc":"The equivalence `Mon_ (Type u) ≌ MonCat.{u}`\nis naturally compatible with the forgetful functors to `Type u`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#monTypeEquivalenceMonForget\"><span class=\"name\">monTypeEquivalenceMonForget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#MonTypeEquivalenceMon.functor\">MonTypeEquivalenceMon.functor</a>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat\">MonCat</a></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Mon_.html#Mon_.forget\">Mon_.forget</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L61-L81","name":"monTypeEquivalenceMon","line":61,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#monTypeEquivalenceMon","doc":"The category of internal monoid objects in `Type`\nis equivalent to the category of \"native\" bundled monoids.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#monTypeEquivalenceMon\"><span class=\"name\">monTypeEquivalenceMon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Mon_.html#Mon_\">Mon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat\">MonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L44-L52","name":"MonTypeEquivalenceMon.inverse","line":44,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#MonTypeEquivalenceMon.inverse","doc":"Converting a bundled monoid to a monoid object in `Type`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#MonTypeEquivalenceMon.inverse\"><span class=\"name\">MonTypeEquivalenceMon</span>.<span class=\"name\">inverse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat\">MonCat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Mon_.html#Mon_\">Mon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L35-L40","name":"MonTypeEquivalenceMon.functor","line":35,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#MonTypeEquivalenceMon.functor","doc":"Converting a monoid object in `Type` to a bundled monoid.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#MonTypeEquivalenceMon.functor\"><span class=\"name\">MonTypeEquivalenceMon</span>.<span class=\"name\">functor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Mon_.html#Mon_\">Mon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span> <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat\">MonCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Monoidal/Internal/Types.lean#L26-L31","name":"MonTypeEquivalenceMon.monMonoid","line":26,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#MonTypeEquivalenceMon.monMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Internal/Types.html#MonTypeEquivalenceMon.monMonoid\"><span class=\"name\">MonTypeEquivalenceMon</span>.<span class=\"name\">monMonoid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Mon_.html#Mon_\">Mon_</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\"><span class=\"fn\">A</span>.X</span></span></div></div>"}]}