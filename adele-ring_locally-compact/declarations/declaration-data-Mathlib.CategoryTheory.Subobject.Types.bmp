{"name":"Mathlib.CategoryTheory.Subobject.Types","instances":[{"typeNames":["_builtin_typeu"],"name":"instWellPoweredType","className":"CategoryTheory.WellPowered"}],"imports":["Init","Mathlib.CategoryTheory.Subobject.WellPowered","Mathlib.CategoryTheory.Types","Mathlib.Data.Set.Subsingleton"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Subobject/Types.lean#L61-L62","name":"Types.subobjectEquivSet","line":61,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/Types.html#Types.subobjectEquivSet","doc":"For `α : Type u`, `Subobject α` is order isomorphic to `Set α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.subobjectEquivSet\"><span class=\"name\">Types</span>.<span class=\"name\">subobjectEquivSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">CategoryTheory.Subobject</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Subobject/Types.lean#L55-L57","name":"instWellPoweredType","line":55,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/Types.html#instWellPoweredType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/Types.html#instWellPoweredType\"><span class=\"name\">instWellPoweredType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/WellPowered.html#CategoryTheory.WellPowered\">CategoryTheory.WellPowered</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Subobject/Types.lean#L39-L53","name":"Types.monoOverEquivalenceSet","line":39,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet","doc":"The category of `MonoOver α`, for `α : Type u`, is equivalent to the partial order `Set α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet\"><span class=\"name\">Types</span>.<span class=\"name\">monoOverEquivalenceSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Subobject/Types.lean#L38-L38","name":"Types.monoOverEquivalenceSet_unitIso","line":38,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_unitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_unitIso\"><span class=\"name\">Types</span>.<span class=\"name\">monoOverEquivalenceSet_unitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet\">Types.monoOverEquivalenceSet</a> <span class=\"fn\">α</span></span>)</span>.unitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.NatIso.ofComponents\">CategoryTheory.NatIso.ofComponents</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk\">CategoryTheory.MonoOver.isoMk</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Set.html#Equiv.ofInjective\">Equiv.ofInjective</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.obj</span>.hom</span> <span class=\"fn\">⋯</span></span>)</span>.toIso</span> <span class=\"fn\">⋯</span></span></span>)</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Subobject/Types.lean#L38-L38","name":"Types.monoOverEquivalenceSet_inverse_map","line":38,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_inverse_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_inverse_map\"><span class=\"name\">Types</span>.<span class=\"name\">monoOverEquivalenceSet_inverse_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet\">Types.monoOverEquivalenceSet</a> <span class=\"fn\">α</span></span>)</span>.inverse</span>.map</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.homMk\">CategoryTheory.MonoOver.homMk</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'\">CategoryTheory.MonoOver.mk'</a> <span class=\"fn\">Subtype.val</span></span></span>)</span> <span class=\"fn\">s</span></span>)</span>.obj</span>.left</span>) =&gt; <span class=\"fn\">⟨<span class=\"fn\">↑<span class=\"fn\">w</span></span>, <span class=\"fn\">⋯</span>⟩</span></span>)</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Subobject/Types.lean#L38-L38","name":"Types.monoOverEquivalenceSet_functor_map","line":38,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_functor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_functor_map\"><span class=\"name\">Types</span>.<span class=\"name\">monoOverEquivalenceSet_functor_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet\">Types.monoOverEquivalenceSet</a> <span class=\"fn\">α</span></span>)</span>.functor</span>.map</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.homOfLE\">CategoryTheory.homOfLE</a> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Subobject/Types.lean#L38-L38","name":"Types.monoOverEquivalenceSet_functor_obj","line":38,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_functor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_functor_obj\"><span class=\"name\">Types</span>.<span class=\"name\">monoOverEquivalenceSet_functor_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet\">Types.monoOverEquivalenceSet</a> <span class=\"fn\">α</span></span>)</span>.functor</span>.obj</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.obj</span>.hom</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Subobject/Types.lean#L38-L38","name":"Types.monoOverEquivalenceSet_counitIso","line":38,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_counitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_counitIso\"><span class=\"name\">Types</span>.<span class=\"name\">monoOverEquivalenceSet_counitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet\">Types.monoOverEquivalenceSet</a> <span class=\"fn\">α</span></span>)</span>.counitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.NatIso.ofComponents\">CategoryTheory.NatIso.ofComponents</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToIso\">CategoryTheory.eqToIso</a> <span class=\"fn\">⋯</span></span></span>)</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Subobject/Types.lean#L38-L38","name":"Types.monoOverEquivalenceSet_inverse_obj","line":38,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_inverse_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet_inverse_obj\"><span class=\"name\">Types</span>.<span class=\"name\">monoOverEquivalenceSet_inverse_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Types.html#Types.monoOverEquivalenceSet\">Types.monoOverEquivalenceSet</a> <span class=\"fn\">α</span></span>)</span>.inverse</span>.obj</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'\">CategoryTheory.MonoOver.mk'</a> <span class=\"fn\">Subtype.val</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/Subobject/Types.lean#L31-L32","name":"subtype_val_mono","line":31,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Types.html#subtype_val_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/Types.html#subtype_val_mono\"><span class=\"name\">subtype_val_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Types.html#CategoryTheory.asHom\">CategoryTheory.asHom</a> <span class=\"fn\">Subtype.val</span></span>)</span></span></div></div>"}]}