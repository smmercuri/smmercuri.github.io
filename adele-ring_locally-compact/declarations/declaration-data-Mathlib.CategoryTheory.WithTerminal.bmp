{"name":"Mathlib.CategoryTheory.WithTerminal","instances":[{"typeNames":["CategoryTheory.WithTerminal"],"name":"CategoryTheory.instInhabitedWithTerminal","className":"Inhabited"},{"typeNames":["CategoryTheory.WithInitial"],"name":"CategoryTheory.instInhabitedWithInitial","className":"Inhabited"},{"typeNames":["CategoryTheory.WithTerminal"],"name":"CategoryTheory.WithTerminal.instCategory","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.WithTerminal.incl"],"name":"CategoryTheory.WithTerminal.instFullIncl","className":"CategoryTheory.Functor.Full"},{"typeNames":["CategoryTheory.WithTerminal.incl"],"name":"CategoryTheory.WithTerminal.instFaithfulIncl","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["Quiver.Hom"],"name":"CategoryTheory.WithTerminal.instUniqueHomStar","className":"Unique"},{"typeNames":[],"name":"CategoryTheory.WithTerminal.isIso_of_from_star","className":"CategoryTheory.IsIso"},{"typeNames":["CategoryTheory.WithInitial"],"name":"CategoryTheory.WithInitial.instCategory","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.WithInitial.incl"],"name":"CategoryTheory.WithInitial.instFullIncl","className":"CategoryTheory.Functor.Full"},{"typeNames":["CategoryTheory.WithInitial.incl"],"name":"CategoryTheory.WithInitial.instFaithfulIncl","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["Quiver.Hom"],"name":"CategoryTheory.WithInitial.instUniqueHomStar","className":"Unique"},{"typeNames":[],"name":"CategoryTheory.WithInitial.isIso_of_to_star","className":"CategoryTheory.IsIso"}],"imports":["Init","Mathlib.CategoryTheory.Limits.Shapes.Terminal","Mathlib.CategoryTheory.Bicategory.Functor.Pseudofunctor"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L654-L657","name":"CategoryTheory.WithInitial.isIso_of_to_star","line":654,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.isIso_of_to_star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.isIso_of_to_star\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">isIso_of_to_star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L650-L651","name":"CategoryTheory.WithInitial.homTo","line":650,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.homTo","doc":"Constructs a morphism from `star` to `of X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.homTo\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">homTo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.star</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.obj</span> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L644-L646","name":"CategoryTheory.WithInitial.liftToInitialUnique","line":644,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitialUnique","doc":"A variant of `lift_unique` with `Z` an initial object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitialUnique\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftToInitialUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.comp</span> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitial\">CategoryTheory.WithInitial.liftToInitial</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L643-L643","name":"CategoryTheory.WithInitial.liftToInitialUnique_inv_app","line":643,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitialUnique_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitialUnique_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftToInitialUnique_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.comp</span> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitialUnique\">CategoryTheory.WithInitial.liftToInitialUnique</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span> <span class=\"fn\">G</span> <span class=\"fn\">h</span> <span class=\"fn\">hG</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">h</span>.app</span> <span class=\"fn\">x</span></span>\n    | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\">hG</span></span>)</span>.inv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L643-L643","name":"CategoryTheory.WithInitial.liftToInitialUnique_hom_app","line":643,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitialUnique_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitialUnique_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftToInitialUnique_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.comp</span> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitialUnique\">CategoryTheory.WithInitial.liftToInitialUnique</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span> <span class=\"fn\">G</span> <span class=\"fn\">h</span> <span class=\"fn\">hG</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">h</span>.app</span> <span class=\"fn\">x</span></span>\n    | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\">hG</span></span>)</span>.hom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L638-L640","name":"CategoryTheory.WithInitial.inclLiftToInitial","line":638,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLiftToInitial","doc":"A variant of `incl_lift` with `Z` an initial object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLiftToInitial\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">inclLiftToInitial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitial\">CategoryTheory.WithInitial.liftToInitial</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L637-L637","name":"CategoryTheory.WithInitial.inclLiftToInitial_inv_app","line":637,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLiftToInitial_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLiftToInitial_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">inclLiftToInitial_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLiftToInitial\">CategoryTheory.WithInitial.inclLiftToInitial</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L637-L637","name":"CategoryTheory.WithInitial.inclLiftToInitial_hom_app","line":637,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLiftToInitial_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLiftToInitial_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">inclLiftToInitial_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLiftToInitial\">CategoryTheory.WithInitial.inclLiftToInitial</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n    <span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.obj</span> <span class=\"fn\">X</span></span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>\n    | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\">Z</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L632-L634","name":"CategoryTheory.WithInitial.liftToInitial","line":632,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitial","doc":"A variant of `lift` with `Z` an initial object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitial\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftToInitial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L631-L631","name":"CategoryTheory.WithInitial.liftToInitial_map","line":631,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitial_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitial_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftToInitial_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitial\">CategoryTheory.WithInitial.liftToInitial</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span>, <span class=\"fn\">Y</span>, <span class=\"fn\">f</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">f</span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down\">CategoryTheory.WithInitial.down</a> <span class=\"fn\">f</span></span>)</span></span>\n  | <span class=\"fn\">CategoryTheory.WithInitial.star</span>, <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">x_1</span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hZ</span>.to</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>\n  | <span class=\"fn\">CategoryTheory.WithInitial.star</span>, <span class=\"fn\">CategoryTheory.WithInitial.star</span>, <span class=\"fn\">x</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">Z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L631-L631","name":"CategoryTheory.WithInitial.liftToInitial_obj","line":631,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitial_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitial_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftToInitial_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftToInitial\">CategoryTheory.WithInitial.liftToInitial</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span>)</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L606-L628","name":"CategoryTheory.WithInitial.liftUnique","line":606,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftUnique","doc":"The uniqueness of `lift`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftUnique\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.comp</span> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hh : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">C</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hG</span>.symm</span>.hom</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.starInitial</span>.to</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">h</span>.symm</span>.hom</span>.app</span> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift\">CategoryTheory.WithInitial.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L597-L602","name":"CategoryTheory.WithInitial.liftStar_lift_map","line":597,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar_lift_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar_lift_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftStar_lift_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar\">CategoryTheory.WithInitial.liftStar</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.hom</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift\">CategoryTheory.WithInitial.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.map</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.starInitial</span>.to</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLift\">CategoryTheory.WithInitial.inclLift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L593-L595","name":"CategoryTheory.WithInitial.liftStar","line":593,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar","doc":"The isomorphism between `(lift F _ _).obj WithInitial.star` with `Z`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftStar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift\">CategoryTheory.WithInitial.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.obj</span> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L592-L592","name":"CategoryTheory.WithInitial.liftStar_inv","line":592,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftStar_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar\">CategoryTheory.WithInitial.liftStar</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L592-L592","name":"CategoryTheory.WithInitial.liftStar_hom","line":592,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">liftStar_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.liftStar\">CategoryTheory.WithInitial.liftStar</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L586-L589","name":"CategoryTheory.WithInitial.inclLift","line":586,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLift","doc":"The isomorphism between `incl ⋙ lift F _ _` with `F`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">inclLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift\">CategoryTheory.WithInitial.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L585-L585","name":"CategoryTheory.WithInitial.inclLift_inv_app","line":585,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLift_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLift_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">inclLift_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLift\">CategoryTheory.WithInitial.inclLift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L585-L585","name":"CategoryTheory.WithInitial.inclLift_hom_app","line":585,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLift_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLift_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">inclLift_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.inclLift\">CategoryTheory.WithInitial.inclLift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n    <span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.obj</span> <span class=\"fn\">X</span></span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>\n    | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\">Z</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L572-L582","name":"CategoryTheory.WithInitial.lift","line":572,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift","doc":"Lift a functor `F : C ⥤ D` to `WithInitial C ⥤ D`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L571-L571","name":"CategoryTheory.WithInitial.lift_obj","line":571,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">lift_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift\">CategoryTheory.WithInitial.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L571-L571","name":"CategoryTheory.WithInitial.lift_map","line":571,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">lift_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.lift\">CategoryTheory.WithInitial.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span>, <span class=\"fn\">Y</span>, <span class=\"fn\">f</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">f</span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down\">CategoryTheory.WithInitial.down</a> <span class=\"fn\">f</span></span>)</span></span>\n  | <span class=\"fn\">CategoryTheory.WithInitial.star</span>, <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">x_1</span> =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\">CategoryTheory.WithInitial.star</span>, <span class=\"fn\">CategoryTheory.WithInitial.star</span>, <span class=\"fn\">x</span> =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>) =&gt;\n          <span class=\"fn\">match <span class=\"fn\">X</span> with\n          | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>\n          | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\">Z</span></span></span>)</span>\n        <span class=\"fn\">CategoryTheory.WithInitial.star</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L567-L568","name":"CategoryTheory.WithInitial.starInitial","line":567,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.starInitial","doc":"`WithInitial.star` is initial. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.starInitial\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">starInitial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L559-L564","name":"CategoryTheory.WithInitial.instUniqueHomStar","line":559,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.instUniqueHomStar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.instUniqueHomStar\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">instUniqueHomStar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.star</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L484-L557","name":"CategoryTheory.WithInitial.pseudofunctor","line":484,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor","doc":"The pseudofunctor from `Cat` to `Cat` defined with `WithInitial`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">pseudofunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor/Pseudofunctor.html#CategoryTheory.Pseudofunctor\">CategoryTheory.Pseudofunctor</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L483-L483","name":"CategoryTheory.WithInitial.pseudofunctor_mapId","line":483,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor_mapId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor_mapId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">pseudofunctor_mapId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor\">CategoryTheory.WithInitial.pseudofunctor</a>.mapId</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapId\">CategoryTheory.WithInitial.mapId</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L483-L483","name":"CategoryTheory.WithInitial.pseudofunctor_toPrelaxFunctor","line":483,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor_toPrelaxFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor_toPrelaxFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">pseudofunctor_toPrelaxFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor\">CategoryTheory.WithInitial.pseudofunctor</a>.toPrelaxFunctor</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor\">CategoryTheory.WithInitial.prelaxfunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L483-L483","name":"CategoryTheory.WithInitial.pseudofunctor_mapComp","line":483,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor_mapComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor_mapComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">pseudofunctor_mapComp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a>} (<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span>) (<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <span class=\"fn\">↑<span class=\"fn\">c</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.pseudofunctor\">CategoryTheory.WithInitial.pseudofunctor</a>.mapComp</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapComp\">CategoryTheory.WithInitial.mapComp</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L467-L480","name":"CategoryTheory.WithInitial.prelaxfunctor","line":467,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor","doc":"The prelax functor from `Cat` to `Cat` defined with `WithInitial`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">prelaxfunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor/Prelax.html#CategoryTheory.PrelaxFunctor\">CategoryTheory.PrelaxFunctor</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L466-L466","name":"CategoryTheory.WithInitial.prelaxfunctor_toPrelaxFunctorStruct_map₂","line":466,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor_toPrelaxFunctorStruct_map₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor_toPrelaxFunctorStruct_map₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">prelaxfunctor_toPrelaxFunctorStruct_map₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a>} {<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>} (<span class=\"fn\">η</span> : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor\">CategoryTheory.WithInitial.prelaxfunctor</a>.map₂</span> <span class=\"fn\">η</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map₂\">CategoryTheory.WithInitial.map₂</a> <span class=\"fn\">η</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L466-L466","name":"CategoryTheory.WithInitial.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_obj","line":466,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor\">CategoryTheory.WithInitial.prelaxfunctor</a>.obj</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">CategoryTheory.Cat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L466-L466","name":"CategoryTheory.WithInitial.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_map","line":466,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a>} (<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.prelaxfunctor\">CategoryTheory.WithInitial.prelaxfunctor</a>.map</span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map\">CategoryTheory.WithInitial.map</a> <span class=\"fn\">F</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L454-L463","name":"CategoryTheory.WithInitial.map₂","line":454,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map₂","doc":"From a natrual transformation of functors `C ⥤ D`, the induced natural transformation\nof functors `WithInitial C ⥤ WithInitial D`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">map₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map\">CategoryTheory.WithInitial.map</a> <span class=\"fn\">F</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map\">CategoryTheory.WithInitial.map</a> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L453-L453","name":"CategoryTheory.WithInitial.map₂_app","line":453,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map₂_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map₂_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">map₂_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map₂\">CategoryTheory.WithInitial.map₂</a> <span class=\"fn\">η</span></span>)</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.app</span> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L445-L449","name":"CategoryTheory.WithInitial.mapComp","line":445,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapComp","doc":"A natural isomorphism between the functor `map (F ⋙ G) ` and `map F ⋙ map G `. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">mapComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_2}</a>      <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map\">CategoryTheory.WithInitial.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.comp</span> <span class=\"fn\">G</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map\">CategoryTheory.WithInitial.map</a> <span class=\"fn\">F</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map\">CategoryTheory.WithInitial.map</a> <span class=\"fn\">G</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L444-L444","name":"CategoryTheory.WithInitial.mapComp_inv_app","line":444,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapComp_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapComp_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">mapComp_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_2}</a>      <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapComp\">CategoryTheory.WithInitial.mapComp</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span>\n    | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span></span>)</span>.inv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L444-L444","name":"CategoryTheory.WithInitial.mapComp_hom_app","line":444,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapComp_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapComp_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">mapComp_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_2}</a>      <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapComp\">CategoryTheory.WithInitial.mapComp</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span>\n    | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span></span>)</span>.hom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L438-L441","name":"CategoryTheory.WithInitial.mapId","line":438,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapId","doc":"A natural isomorphism between the functor `map (𝟭 C)` and `𝟭 (WithInitial C)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">mapId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map\">CategoryTheory.WithInitial.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L437-L437","name":"CategoryTheory.WithInitial.mapId_inv_app","line":437,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapId_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapId_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">mapId_inv_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapId\">CategoryTheory.WithInitial.mapId</a> <span class=\"fn\">C</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span>)</span></span>\n    | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span></span>)</span>.inv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L437-L437","name":"CategoryTheory.WithInitial.mapId_hom_app","line":437,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapId_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapId_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">mapId_hom_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.mapId\">CategoryTheory.WithInitial.mapId</a> <span class=\"fn\">C</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span>)</span></span>\n    | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span></span>)</span>.hom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L425-L434","name":"CategoryTheory.WithInitial.map","line":425,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map","doc":"Map `WithInitial` with respect to a functor `F : C ⥤ D`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">D</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L424-L424","name":"CategoryTheory.WithInitial.map_map","line":424,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map\">CategoryTheory.WithInitial.map</a> <span class=\"fn\">F</span></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span>, <span class=\"fn\">Y</span>, <span class=\"fn\">f</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">f</span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down\">CategoryTheory.WithInitial.down</a> <span class=\"fn\">f</span></span>)</span></span>\n  | <span class=\"fn\">CategoryTheory.WithInitial.star</span>, <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">x</span> =&gt; <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a>\n  | <span class=\"fn\">CategoryTheory.WithInitial.star</span>, <span class=\"fn\">CategoryTheory.WithInitial.star</span>, <span class=\"fn\">x</span> =&gt; <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L424-L424","name":"CategoryTheory.WithInitial.map_obj","line":424,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">map_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.map\">CategoryTheory.WithInitial.map</a> <span class=\"fn\">F</span></span>)</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>\n  | <span class=\"fn\">CategoryTheory.WithInitial.star</span> =&gt; <span class=\"fn\">CategoryTheory.WithInitial.star</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L421-L421","name":"CategoryTheory.WithInitial.instFaithfulIncl","line":421,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.instFaithfulIncl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.instFaithfulIncl\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">instFaithfulIncl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.Faithful</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L418-L419","name":"CategoryTheory.WithInitial.instFullIncl","line":418,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.instFullIncl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.instFullIncl\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">instFullIncl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithInitial.incl</span>.Full</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L414-L416","name":"CategoryTheory.WithInitial.incl","line":414,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.incl","doc":"The inclusion of `C` into `WithInitial C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.incl\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">incl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L411-L411","name":"CategoryTheory.WithInitial.false_of_to_star","line":411,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.false_of_to_star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.false_of_to_star\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">false_of_to_star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">CategoryTheory.WithInitial.star</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#False\">False</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L406-L408","name":"CategoryTheory.WithInitial.down_comp","line":406,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">down_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">Y</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down\">CategoryTheory.WithInitial.down</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down\">CategoryTheory.WithInitial.down</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down\">CategoryTheory.WithInitial.down</a> <span class=\"fn\">g</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L405-L405","name":"CategoryTheory.WithInitial.down_id","line":405,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">down_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down\">CategoryTheory.WithInitial.down</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L403-L403","name":"CategoryTheory.WithInitial.down","line":403,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down","doc":"Helper function for typechecking. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.down\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\">CategoryTheory.WithInitial.of</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L390-L400","name":"CategoryTheory.WithInitial.instCategory","line":390,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.instCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.instCategory\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">instCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L383-L388","name":"CategoryTheory.WithInitial.comp","line":383,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.comp","doc":"Composition of morphisms for `WithInitial C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.Hom</span> <span class=\"fn\">Y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.Hom</span> <span class=\"fn\">Z</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.Hom</span> <span class=\"fn\">Z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L377-L379","name":"CategoryTheory.WithInitial.id","line":377,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.id","doc":"Identity morphisms for `WithInitial C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.Hom</span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L370-L373","name":"CategoryTheory.WithInitial.Hom","line":370,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.Hom","doc":"Morphisms for `WithInitial C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.Hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">Hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L356-L359","name":"CategoryTheory.WithTerminal.isIso_of_from_star","line":356,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.isIso_of_from_star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.isIso_of_from_star\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">isIso_of_from_star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.star</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L353-L354","name":"CategoryTheory.WithTerminal.homFrom","line":353,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.homFrom","doc":"Constructs a morphism to `star` from `of X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.homFrom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">homFrom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L346-L349","name":"CategoryTheory.WithTerminal.liftToTerminalUnique","line":346,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminalUnique","doc":"A variant of `lift_unique` with `Z` a terminal object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminalUnique\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">liftToTerminalUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.comp</span> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminal\">CategoryTheory.WithTerminal.liftToTerminal</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L345-L345","name":"CategoryTheory.WithTerminal.liftToTerminalUnique_hom_app","line":345,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminalUnique_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminalUnique_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">liftToTerminalUnique_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.comp</span> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminalUnique\">CategoryTheory.WithTerminal.liftToTerminalUnique</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span> <span class=\"fn\">G</span> <span class=\"fn\">h</span> <span class=\"fn\">hG</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">h</span>.app</span> <span class=\"fn\">x</span></span>\n    | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\">hG</span></span>)</span>.hom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L345-L345","name":"CategoryTheory.WithTerminal.liftToTerminalUnique_inv_app","line":345,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminalUnique_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminalUnique_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">liftToTerminalUnique_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.comp</span> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminalUnique\">CategoryTheory.WithTerminal.liftToTerminalUnique</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span> <span class=\"fn\">G</span> <span class=\"fn\">h</span> <span class=\"fn\">hG</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">h</span>.app</span> <span class=\"fn\">x</span></span>\n    | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\">hG</span></span>)</span>.inv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L340-L342","name":"CategoryTheory.WithTerminal.inclLiftToTerminal","line":340,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLiftToTerminal","doc":"A variant of `incl_lift` with `Z` a terminal object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLiftToTerminal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">inclLiftToTerminal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminal\">CategoryTheory.WithTerminal.liftToTerminal</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L339-L339","name":"CategoryTheory.WithTerminal.inclLiftToTerminal_hom_app","line":339,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLiftToTerminal_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLiftToTerminal_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">inclLiftToTerminal_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLiftToTerminal\">CategoryTheory.WithTerminal.inclLiftToTerminal</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n    <span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.obj</span> <span class=\"fn\">X</span></span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>\n    | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\">Z</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L339-L339","name":"CategoryTheory.WithTerminal.inclLiftToTerminal_inv_app","line":339,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLiftToTerminal_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLiftToTerminal_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">inclLiftToTerminal_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLiftToTerminal\">CategoryTheory.WithTerminal.inclLiftToTerminal</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L334-L336","name":"CategoryTheory.WithTerminal.liftToTerminal","line":334,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminal","doc":"A variant of `lift` with `Z` a terminal object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">liftToTerminal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L333-L333","name":"CategoryTheory.WithTerminal.liftToTerminal_map","line":333,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminal_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminal_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">liftToTerminal_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminal\">CategoryTheory.WithTerminal.liftToTerminal</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span>, <span class=\"fn\">Y</span>, <span class=\"fn\">f</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">f</span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down\">CategoryTheory.WithTerminal.down</a> <span class=\"fn\">f</span></span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">CategoryTheory.WithTerminal.star</span>, <span class=\"fn\">x_1</span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hZ</span>.from</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>\n  | <span class=\"fn\">CategoryTheory.WithTerminal.star</span>, <span class=\"fn\">CategoryTheory.WithTerminal.star</span>, <span class=\"fn\">x</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">Z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L333-L333","name":"CategoryTheory.WithTerminal.liftToTerminal_obj","line":333,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminal_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminal_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">liftToTerminal_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hZ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftToTerminal\">CategoryTheory.WithTerminal.liftToTerminal</a> <span class=\"fn\">F</span> <span class=\"fn\">hZ</span></span>)</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L311-L330","name":"CategoryTheory.WithTerminal.liftUnique","line":311,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftUnique","doc":"The uniqueness of `lift`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftUnique\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">liftUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.comp</span> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hh : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">C</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.starTerminal</span>.from</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\"><span class=\"fn\">hG</span>.hom</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">h</span>.hom</span>.app</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift\">CategoryTheory.WithTerminal.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L302-L307","name":"CategoryTheory.WithTerminal.lift_map_liftStar","line":302,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift_map_liftStar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift_map_liftStar\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">lift_map_liftStar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift\">CategoryTheory.WithTerminal.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.map</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.starTerminal</span>.from</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftStar\">CategoryTheory.WithTerminal.liftStar</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.hom</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLift\">CategoryTheory.WithTerminal.inclLift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L298-L300","name":"CategoryTheory.WithTerminal.liftStar","line":298,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftStar","doc":"The isomorphism between `(lift F _ _).obj WithTerminal.star` with `Z`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftStar\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">liftStar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift\">CategoryTheory.WithTerminal.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.obj</span> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L297-L297","name":"CategoryTheory.WithTerminal.liftStar_hom","line":297,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftStar_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftStar_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">liftStar_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftStar\">CategoryTheory.WithTerminal.liftStar</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L297-L297","name":"CategoryTheory.WithTerminal.liftStar_inv","line":297,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftStar_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftStar_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">liftStar_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.liftStar\">CategoryTheory.WithTerminal.liftStar</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L291-L294","name":"CategoryTheory.WithTerminal.inclLift","line":291,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLift","doc":"The isomorphism between `incl ⋙ lift F _ _` with `F`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">inclLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift\">CategoryTheory.WithTerminal.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L290-L290","name":"CategoryTheory.WithTerminal.inclLift_hom_app","line":290,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLift_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLift_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">inclLift_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLift\">CategoryTheory.WithTerminal.inclLift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n    <span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.obj</span> <span class=\"fn\">X</span></span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>\n    | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\">Z</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L290-L290","name":"CategoryTheory.WithTerminal.inclLift_inv_app","line":290,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLift_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLift_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">inclLift_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.inclLift\">CategoryTheory.WithTerminal.inclLift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L277-L287","name":"CategoryTheory.WithTerminal.lift","line":277,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift","doc":"Lift a functor `F : C ⥤ D` to `WithTerminal C ⥤ D`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">D</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L276-L276","name":"CategoryTheory.WithTerminal.lift_map","line":276,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">lift_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift\">CategoryTheory.WithTerminal.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span>, <span class=\"fn\">Y</span>, <span class=\"fn\">f</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">f</span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down\">CategoryTheory.WithTerminal.down</a> <span class=\"fn\">f</span></span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span>, <span class=\"fn\">CategoryTheory.WithTerminal.star</span>, <span class=\"fn\">x_1</span> =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\">CategoryTheory.WithTerminal.star</span>, <span class=\"fn\">CategoryTheory.WithTerminal.star</span>, <span class=\"fn\">x</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">Z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L276-L276","name":"CategoryTheory.WithTerminal.lift_obj","line":276,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">lift_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.lift\">CategoryTheory.WithTerminal.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">hM</span></span>)</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L272-L273","name":"CategoryTheory.WithTerminal.starTerminal","line":272,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.starTerminal","doc":"`WithTerminal.star` is terminal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.starTerminal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">starTerminal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L264-L269","name":"CategoryTheory.WithTerminal.instUniqueHomStar","line":264,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.instUniqueHomStar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.instUniqueHomStar\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">instUniqueHomStar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L186-L262","name":"CategoryTheory.WithTerminal.pseudofunctor","line":186,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor","doc":"The pseudofunctor from `Cat` to `Cat` defined with `WithTerminal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">pseudofunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor/Pseudofunctor.html#CategoryTheory.Pseudofunctor\">CategoryTheory.Pseudofunctor</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L185-L185","name":"CategoryTheory.WithTerminal.pseudofunctor_mapId","line":185,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor_mapId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor_mapId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">pseudofunctor_mapId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor\">CategoryTheory.WithTerminal.pseudofunctor</a>.mapId</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapId\">CategoryTheory.WithTerminal.mapId</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L185-L185","name":"CategoryTheory.WithTerminal.pseudofunctor_mapComp","line":185,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor_mapComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor_mapComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">pseudofunctor_mapComp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a>} (<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span>) (<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <span class=\"fn\">↑<span class=\"fn\">c</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor\">CategoryTheory.WithTerminal.pseudofunctor</a>.mapComp</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapComp\">CategoryTheory.WithTerminal.mapComp</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L185-L185","name":"CategoryTheory.WithTerminal.pseudofunctor_toPrelaxFunctor","line":185,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor_toPrelaxFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor_toPrelaxFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">pseudofunctor_toPrelaxFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.pseudofunctor\">CategoryTheory.WithTerminal.pseudofunctor</a>.toPrelaxFunctor</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor\">CategoryTheory.WithTerminal.prelaxfunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L169-L182","name":"CategoryTheory.WithTerminal.prelaxfunctor","line":169,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor","doc":"The prelax functor from `Cat` to `Cat` defined with `WithTerminal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">prelaxfunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor/Prelax.html#CategoryTheory.PrelaxFunctor\">CategoryTheory.PrelaxFunctor</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L168-L168","name":"CategoryTheory.WithTerminal.prelaxfunctor_toPrelaxFunctorStruct_map₂","line":168,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor_toPrelaxFunctorStruct_map₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor_toPrelaxFunctorStruct_map₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">prelaxfunctor_toPrelaxFunctorStruct_map₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a>} {<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>} (<span class=\"fn\">η</span> : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor\">CategoryTheory.WithTerminal.prelaxfunctor</a>.map₂</span> <span class=\"fn\">η</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map₂\">CategoryTheory.WithTerminal.map₂</a> <span class=\"fn\">η</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L168-L168","name":"CategoryTheory.WithTerminal.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_map","line":168,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a>} (<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor\">CategoryTheory.WithTerminal.prelaxfunctor</a>.map</span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map\">CategoryTheory.WithTerminal.map</a> <span class=\"fn\">F</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L168-L168","name":"CategoryTheory.WithTerminal.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_obj","line":168,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">prelaxfunctor_toPrelaxFunctorStruct_toPrefunctor_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">CategoryTheory.Cat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.prelaxfunctor\">CategoryTheory.WithTerminal.prelaxfunctor</a>.obj</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">CategoryTheory.Cat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L155-L164","name":"CategoryTheory.WithTerminal.map₂","line":155,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map₂","doc":"From a natural transformation of functors `C ⥤ D`, the induced natural transformation\nof functors `WithTerminal C ⥤ WithTerminal D`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">map₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map\">CategoryTheory.WithTerminal.map</a> <span class=\"fn\">F</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map\">CategoryTheory.WithTerminal.map</a> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L154-L154","name":"CategoryTheory.WithTerminal.map₂_app","line":154,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map₂_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map₂_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">map₂_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map₂\">CategoryTheory.WithTerminal.map₂</a> <span class=\"fn\">η</span></span>)</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.app</span> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L146-L150","name":"CategoryTheory.WithTerminal.mapComp","line":146,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapComp","doc":"A natural isomorphism between the functor `map (F ⋙ G) ` and `map F ⋙ map G `. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">mapComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_2}</a>      <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map\">CategoryTheory.WithTerminal.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.comp</span> <span class=\"fn\">G</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map\">CategoryTheory.WithTerminal.map</a> <span class=\"fn\">F</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map\">CategoryTheory.WithTerminal.map</a> <span class=\"fn\">G</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L145-L145","name":"CategoryTheory.WithTerminal.mapComp_inv_app","line":145,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapComp_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapComp_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">mapComp_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_2}</a>      <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapComp\">CategoryTheory.WithTerminal.mapComp</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span>\n    | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span></span>)</span>.inv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L145-L145","name":"CategoryTheory.WithTerminal.mapComp_hom_app","line":145,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapComp_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapComp_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">mapComp_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_2}</a>      <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapComp\">CategoryTheory.WithTerminal.mapComp</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span>\n    | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span></span>)</span>.hom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L139-L142","name":"CategoryTheory.WithTerminal.mapId","line":139,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapId","doc":"A natural isomorphism between the functor `map (𝟭 C)` and `𝟭 (WithTerminal C)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">mapId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map\">CategoryTheory.WithTerminal.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L138-L138","name":"CategoryTheory.WithTerminal.mapId_hom_app","line":138,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapId_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapId_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">mapId_hom_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapId\">CategoryTheory.WithTerminal.mapId</a> <span class=\"fn\">C</span></span>)</span>.hom</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span>)</span></span>\n    | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span></span>)</span>.hom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L138-L138","name":"CategoryTheory.WithTerminal.mapId_inv_app","line":138,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapId_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapId_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">mapId_inv_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.mapId\">CategoryTheory.WithTerminal.mapId</a> <span class=\"fn\">C</span></span>)</span>.inv</span>.app</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">X</span> with\n    | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span>)</span></span>\n    | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.refl\">CategoryTheory.Iso.refl</a> <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span></span>)</span>.inv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L126-L135","name":"CategoryTheory.WithTerminal.map","line":126,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map","doc":"Map `WithTerminal` with respect to a functor `F : C ⥤ D`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">D</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L125-L125","name":"CategoryTheory.WithTerminal.map_map","line":125,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map\">CategoryTheory.WithTerminal.map</a> <span class=\"fn\">F</span></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span>, <span class=\"fn\">Y</span>, <span class=\"fn\">f</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">y</span></span>, <span class=\"fn\">f</span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down\">CategoryTheory.WithTerminal.down</a> <span class=\"fn\">f</span></span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">CategoryTheory.WithTerminal.star</span>, <span class=\"fn\">x</span> =&gt; <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a>\n  | <span class=\"fn\">CategoryTheory.WithTerminal.star</span>, <span class=\"fn\">CategoryTheory.WithTerminal.star</span>, <span class=\"fn\">x</span> =&gt; <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L125-L125","name":"CategoryTheory.WithTerminal.map_obj","line":125,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">map_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.map\">CategoryTheory.WithTerminal.map</a> <span class=\"fn\">F</span></span>)</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">X</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">x</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.obj</span> <span class=\"fn\">x</span></span>)</span></span>\n  | <span class=\"fn\">CategoryTheory.WithTerminal.star</span> =&gt; <span class=\"fn\">CategoryTheory.WithTerminal.star</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L122-L122","name":"CategoryTheory.WithTerminal.instFaithfulIncl","line":122,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.instFaithfulIncl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.instFaithfulIncl\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">instFaithfulIncl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.Faithful</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L119-L120","name":"CategoryTheory.WithTerminal.instFullIncl","line":119,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.instFullIncl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.instFullIncl\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">instFullIncl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.incl</span>.Full</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L115-L117","name":"CategoryTheory.WithTerminal.incl","line":115,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.incl","doc":"The inclusion from `C` into `WithTerminal C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.incl\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">incl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L112-L112","name":"CategoryTheory.WithTerminal.false_of_from_star","line":112,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.false_of_from_star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.false_of_from_star\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">false_of_from_star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">CategoryTheory.WithTerminal.star</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#False\">False</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L107-L109","name":"CategoryTheory.WithTerminal.down_comp","line":107,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">down_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">Y</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">Z</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down\">CategoryTheory.WithTerminal.down</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down\">CategoryTheory.WithTerminal.down</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down\">CategoryTheory.WithTerminal.down</a> <span class=\"fn\">g</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L106-L106","name":"CategoryTheory.WithTerminal.down_id","line":106,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">down_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down\">CategoryTheory.WithTerminal.down</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L104-L104","name":"CategoryTheory.WithTerminal.down","line":104,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down","doc":"Helper function for typechecking. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.down\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\">CategoryTheory.WithTerminal.of</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L89-L101","name":"CategoryTheory.WithTerminal.instCategory","line":89,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.instCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.instCategory\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">instCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L82-L87","name":"CategoryTheory.WithTerminal.comp","line":82,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.comp","doc":"Composition of morphisms for `WithTerminal C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.Hom</span> <span class=\"fn\">Y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.Hom</span> <span class=\"fn\">Z</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.Hom</span> <span class=\"fn\">Z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L76-L78","name":"CategoryTheory.WithTerminal.id","line":76,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.id","doc":"Identity morphisms for `WithTerminal C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.Hom</span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L69-L72","name":"CategoryTheory.WithTerminal.Hom","line":69,"kind":"def","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.Hom","doc":"Morphisms for `WithTerminal C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.Hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">Hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L58-L58","name":"CategoryTheory.instInhabitedWithInitial","line":58,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.instInhabitedWithInitial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.instInhabitedWithInitial\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instInhabitedWithInitial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L57-L57","name":"CategoryTheory.WithInitial.star","line":57,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.star\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L56-L56","name":"CategoryTheory.WithInitial.of","line":56,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial.of\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\">CategoryTheory.WithInitial</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L55-L58","name":"CategoryTheory.WithInitial","line":55,"kind":"inductive","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial","doc":"Formally adjoin an initial object to a category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithInitial\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithInitial</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L50-L50","name":"CategoryTheory.instInhabitedWithTerminal","line":50,"kind":"instance","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.instInhabitedWithTerminal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.instInhabitedWithTerminal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instInhabitedWithTerminal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L49-L49","name":"CategoryTheory.WithTerminal.star","line":49,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.star\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L48-L48","name":"CategoryTheory.WithTerminal.of","line":48,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal.of\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\">CategoryTheory.WithTerminal</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/CategoryTheory/WithTerminal.lean#L47-L50","name":"CategoryTheory.WithTerminal","line":47,"kind":"inductive","docLink":"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal","doc":"Formally adjoin a terminal object to a category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/WithTerminal.html#CategoryTheory.WithTerminal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">WithTerminal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}