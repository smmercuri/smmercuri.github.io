{"name":"Mathlib.Combinatorics.HalesJewett","instances":[{"typeNames":["Combinatorics.Subspace"],"name":"Combinatorics.Subspace.instInhabited","className":"Inhabited"},{"typeNames":["Combinatorics.Subspace"],"name":"Combinatorics.Subspace.instCoeFun","className":"CoeFun"},{"typeNames":["Combinatorics.Line"],"name":"Combinatorics.Line.instCoeFun","className":"CoeFun"},{"typeNames":["Combinatorics.Line"],"name":"Combinatorics.Line.instInhabitedOfNonempty","className":"Inhabited"},{"typeNames":["Combinatorics.Line.AlmostMono"],"name":"Combinatorics.Line.instInhabitedAlmostMonoDefaultOfNonempty","className":"Inhabited"},{"typeNames":["Combinatorics.Line.ColorFocused"],"name":"Combinatorics.Line.instInhabitedColorFocused","className":"Inhabited"}],"imports":["Init","Mathlib.Algebra.BigOperators.Group.Finset","Mathlib.Data.Countable.Small","Mathlib.Data.Fintype.Option","Mathlib.Data.Fintype.Pi","Mathlib.Data.Fintype.Prod","Mathlib.Data.Fintype.Shrink","Mathlib.Data.Fintype.Sum"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L500-L508","name":"Combinatorics.Subspace.exists_mono_in_high_dimension_fin","line":500,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.exists_mono_in_high_dimension_fin","doc":"A variant of the **extended Hales-Jewett theorem** `exists_mono_in_high_dimension` where the\nreturned type is some `Fin n` instead of a general fintype. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.exists_mono_in_high_dimension_fin\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">exists_mono_in_high_dimension_fin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./foundational_types.html\">Type</a> u_7)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">∀ (<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>), <span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\">Combinatorics.Subspace.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L489-L496","name":"Combinatorics.Subspace.exists_mono_in_high_dimension","line":489,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.exists_mono_in_high_dimension","doc":"The **multidimensional Hales-Jewett theorem**, aka **extended Hales-Jewett theorem**: For any\nfinite types `η`, `α` and `κ`, there exists a finite type `ι` such that whenever the hypercube\n`ι → α` is `κ`-colored, there is a monochromatic combinatorial subspace of dimension `η`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.exists_mono_in_high_dimension\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">exists_mono_in_high_dimension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./foundational_types.html\">Type</a> u_7)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>),\n  <span class=\"fn\">∀ (<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>), <span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\">Combinatorics.Subspace.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L456-L482","name":"Combinatorics.exists_mono_homothetic_copy","line":456,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.exists_mono_homothetic_copy","doc":"A generalization of Van der Waerden's theorem: if `M` is a finitely colored commutative\nmonoid, and `S` is a finite subset, then there exists a monochromatic homothetic copy of `S`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.exists_mono_homothetic_copy\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">exists_mono_homothetic_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">a</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">M</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">κ</span>), <span class=\"fn\">∀ <span class=\"fn\">s</span> ∈ <span class=\"fn\">S</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L445-L450","name":"Combinatorics.Line.exists_mono_in_high_dimension","line":445,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.exists_mono_in_high_dimension","doc":"The **Hales-Jewett theorem**: For any finite types `α` and `κ`, there exists a finite type `ι`\nsuch that whenever the hypercube `ι → α` is `κ`-colored, there is a monochromatic combinatorial\nline. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.exists_mono_in_high_dimension\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">exists_mono_in_high_dimension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>), <span class=\"fn\">∀ (<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>), <span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono\">Combinatorics.Line.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L330-L331","name":"Combinatorics.Line.diagonal_apply","line":330,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.diagonal_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.diagonal_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">diagonal_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.diagonal\">Combinatorics.Line.diagonal</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L324-L327","name":"Combinatorics.Line.prod_apply","line":324,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.prod_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.prod_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">prod_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.prod</span> <span class=\"fn\">l'</span></span>)</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Batteries/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l'</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L318-L321","name":"Combinatorics.Line.horizontal_apply","line":318,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.horizontal_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.horizontal_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">horizontal_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.horizontal</span> <span class=\"fn\">v</span></span>)</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Batteries/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L312-L315","name":"Combinatorics.Line.vertical_apply","line":312,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.vertical_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.vertical_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">vertical_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.vertical\">Combinatorics.Line.vertical</a> <span class=\"fn\">v</span> <span class=\"fn\">l</span></span>)</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Batteries/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L308-L309","name":"Combinatorics.Line.map_apply","line":308,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.map_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α' : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α'</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.map\">Combinatorics.Line.map</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span>)</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L305-L305","name":"Combinatorics.Line.apply_some","line":305,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply_some\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">apply_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L302-L303","name":"Combinatorics.Line.apply_none","line":302,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply_none\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">apply_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L300-L300","name":"Combinatorics.Line.apply_def","line":300,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply_def\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">apply_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L296-L298","name":"Combinatorics.Line.prod","line":296,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.prod","doc":"One line in `ι → α` and one in `ι' → α` together determine a line in `ι ⊕ ι' → α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.prod\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L291-L293","name":"Combinatorics.Line.horizontal","line":291,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.horizontal","doc":"A line in `ι → α` and a point in `ι' → α` determine a line in `ι ⊕ ι' → α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.horizontal\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">horizontal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L286-L288","name":"Combinatorics.Line.vertical","line":286,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.vertical","doc":"A point in `ι → α` and a line in `ι' → α` determine a line in `ι ⊕ ι' → α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.vertical\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">vertical</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L281-L283","name":"Combinatorics.Line.map","line":281,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.map","doc":"A function `f : α → α'` determines a function `line α ι → line α' ι`. For a coordinate `i`\n`l.map f` is the identity at `i` if `l` is, and constantly `f y` if `l` is constantly `y` at `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.map\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α' : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α'</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L275-L277","name":"Combinatorics.Line.instInhabitedColorFocused","line":275,"kind":"instance","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedColorFocused","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedColorFocused\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">instInhabitedColorFocused</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L273-L273","name":"Combinatorics.Line.ColorFocused.distinct_colors","line":273,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.distinct_colors","doc":"The proposition that all lines in a color-focused collection of lines have distinct colors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.distinct_colors\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span>.<span class=\"name\">distinct_colors</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.map\">Multiset.map</a> <span class=\"fn\">Combinatorics.Line.AlmostMono.color</span> <span class=\"fn\"><span class=\"fn\">self</span>.lines</span></span>)</span>.Nodup</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L271-L271","name":"Combinatorics.Line.ColorFocused.is_focused","line":271,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.is_focused","doc":"The proposition that all lines in a color-focused collection have the same endpoint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.is_focused\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span>.<span class=\"name\">is_focused</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">self</span>.lines</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.line</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.focus</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L269-L269","name":"Combinatorics.Line.ColorFocused.focus","line":269,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.focus","doc":"The common endpoint of the lines in the color-focused collection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.focus\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span>.<span class=\"name\">focus</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L267-L267","name":"Combinatorics.Line.ColorFocused.lines","line":267,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.lines","doc":"The underlying multiset of almost monochromatic lines of a color-focused collection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.lines\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span>.<span class=\"name\">lines</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L265-L265","name":"Combinatorics.Line.ColorFocused.mk","line":265,"kind":"ctor","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.mk\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lines : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(focus : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(is_focused : <span class=\"fn\">∀ <span class=\"fn\">p</span> ∈ <span class=\"fn\">lines</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.line</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">focus</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(distinct_colors : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.map\">Multiset.map</a> <span class=\"fn\">Combinatorics.Line.AlmostMono.color</span> <span class=\"fn\">lines</span></span>)</span>.Nodup</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L265-L273","name":"Combinatorics.Line.ColorFocused","line":265,"kind":"structure","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused","doc":"The type of collections of lines such that\n- each line is only one color except possibly at its endpoint\n- the lines all have the same endpoint\n- the colors of the lines are distinct.\nUsed in the proof `exists_mono_in_high_dimension`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u_5 u_6) u_7)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L254-L258","name":"Combinatorics.Line.instInhabitedAlmostMonoDefaultOfNonempty","line":254,"kind":"instance","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedAlmostMonoDefaultOfNonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedAlmostMonoDefaultOfNonempty\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">instInhabitedAlmostMonoDefaultOfNonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>) =&gt; <span class=\"fn\">default</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L252-L252","name":"Combinatorics.Line.AlmostMono.has_color","line":252,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.has_color","doc":"The proposition that the underlying line of an almost monochromatic line assumes its main\ncolor except possibly at the endpoints. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.has_color\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">AlmostMono</span>.<span class=\"name\">has_color</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.line</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.color</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L249-L249","name":"Combinatorics.Line.AlmostMono.color","line":249,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.color","doc":"The main color of an almost monochromatic line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.color\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">AlmostMono</span>.<span class=\"name\">color</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">κ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L247-L247","name":"Combinatorics.Line.AlmostMono.line","line":247,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.line","doc":"The underlying line of an almost monochromatic line, where the coordinate dimension `α` is\nextended by an additional symbol `none`, thought to be marking the endpoint of the line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.line\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">AlmostMono</span>.<span class=\"name\">line</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L244-L244","name":"Combinatorics.Line.AlmostMono.mk","line":244,"kind":"ctor","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.mk\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">AlmostMono</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(line : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(color : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(has_color : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">line</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">color</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L244-L252","name":"Combinatorics.Line.AlmostMono","line":244,"kind":"structure","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono","doc":"The type of lines that are only one color except possibly at their endpoints. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">AlmostMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u_5 u_6) u_7)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L240-L241","name":"Combinatorics.Line.instInhabitedOfNonempty","line":240,"kind":"instance","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedOfNonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedOfNonempty\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">instInhabitedOfNonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L236-L238","name":"Combinatorics.Line.diagonal","line":236,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.diagonal","doc":"The diagonal line. It is the identity at every coordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.diagonal\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">diagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L233-L233","name":"Combinatorics.Line.IsMono.toSubspace","line":233,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono.toSubspace","doc":"**Alias** of the reverse direction of `Combinatorics.Line.toSubspace_isMono`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono.toSubspace\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">IsMono</span>.<span class=\"name\">toSubspace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">η</span></span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono\">Combinatorics.Line.IsMono</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span></span>) =&gt;\n      <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">η</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">x_1</span> with\n        | <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">e</span>)</span> =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span> <span class=\"fn\">e</span></span></span></span></span></span>)</span>\n    <span class=\"fn\">l</span></span> →\n  <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\">Combinatorics.Subspace.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">l</span>.toSubspace</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L229-L231","name":"Combinatorics.Line.toSubspace_isMono","line":229,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspace_isMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspace_isMono\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">toSubspace_isMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">η</span></span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\">Combinatorics.Subspace.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">l</span>.toSubspace</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono\">Combinatorics.Line.IsMono</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span></span>) =&gt;\n      <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">η</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">x_1</span> with\n        | <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">e</span>)</span> =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span> <span class=\"fn\">e</span></span></span></span></span></span>)</span>\n    <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L225-L227","name":"Combinatorics.Line.toSubspace_apply","line":225,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspace_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspace_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">toSubspace_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ie : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">η</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">l</span>.toSubspace</span></span> <span class=\"fn\">a</span> <span class=\"fn\">ie</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">ie</span>.1</span> <span class=\"fn\"><span class=\"fn\">ie</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L221-L223","name":"Combinatorics.Line.toSubspace","line":221,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspace","doc":"Consider a line in `ι → η → α` as a `η`-dimensional subspace in `ι × η → α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspace\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">toSubspace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">η</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L218-L218","name":"Combinatorics.Line.IsMono.toSubspaceUnit","line":218,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono.toSubspaceUnit","doc":"**Alias** of the reverse direction of `Combinatorics.Line.toSubspaceUnit_isMono`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono.toSubspaceUnit\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">IsMono</span>.<span class=\"name\">toSubspaceUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono\">Combinatorics.Line.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\">Combinatorics.Subspace.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">l</span>.toSubspaceUnit</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L214-L216","name":"Combinatorics.Line.toSubspaceUnit_isMono","line":214,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspaceUnit_isMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspaceUnit_isMono\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">toSubspaceUnit_isMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\">Combinatorics.Subspace.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">l</span>.toSubspaceUnit</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono\">Combinatorics.Line.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L211-L212","name":"Combinatorics.Line.toSubspaceUnit_apply","line":211,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspaceUnit_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspaceUnit_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">toSubspaceUnit_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">l</span>.toSubspaceUnit</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L207-L209","name":"Combinatorics.Line.toSubspaceUnit","line":207,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspaceUnit","doc":"Consider a line as a one-dimensional subspace. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toSubspaceUnit\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">toSubspaceUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L203-L204","name":"Combinatorics.Line.IsMono","line":203,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono","doc":"A line is monochromatic if all its points are the same color. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">IsMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Sort</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L193-L200","name":"Combinatorics.Line.coe_injective","line":193,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.coe_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.coe_injective\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">coe_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L190-L190","name":"Combinatorics.Line.coe_apply","line":190,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.coe_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.coe_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">coe_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span>.getD</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L187-L188","name":"Combinatorics.Line.instCoeFun","line":187,"kind":"instance","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instCoeFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instCoeFun\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">instCoeFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L184-L184","name":"Combinatorics.Line.toFun","line":184,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toFun","doc":"Consider a line `l : Line α ι` as a function `α → ι → α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.toFun\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L178-L178","name":"Combinatorics.Line.proper","line":178,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.proper","doc":"We require combinatorial lines to be nontrivial in the sense that `fun x ↦ l x i` is `id` for\nat least one coordinate `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.proper\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">proper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.idxFun</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L175-L175","name":"Combinatorics.Line.idxFun","line":175,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun","doc":"The word representing a combinatorial line. `l.idxfun i = none` means that\n`l x i = x` for all `x` and `l.idxfun i = some y` means that `l x i = y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">idxFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L172-L172","name":"Combinatorics.Line.mk","line":172,"kind":"ctor","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.mk\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(idxFun : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proper : <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">idxFun</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L172-L178","name":"Combinatorics.Line","line":172,"kind":"structure","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line","doc":"The type of combinatorial lines. A line `l : Line α ι` in the hypercube `ι → α` defines a\nfunction `α → ι → α` from `α` to the hypercube, such that for each coordinate `i : ι`, the function\n`fun x ↦ l x i` is either `id` or constant. We require lines to be nontrivial in the sense that\n`fun x ↦ l x i` is `id` for at least one `i`.\n\nFormally, a line is represented by a word `l.idxFun : ι → Option α` which says whether\n`fun x ↦ l x i` is `id` (corresponding to `l.idxFun i = none`) or constantly `y` (corresponding to\n`l.idxFun i = some y`).\n\nWhen `α` has size `1` there can be many elements of `Line α ι` defining the same function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_5 u_6)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L171-L171","name":"Combinatorics.Line.ext","line":171,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ext\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idxFun : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.idxFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.idxFun</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L171-L171","name":"Combinatorics.Line.ext_iff","line":171,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ext_iff\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.idxFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.idxFun</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L155-L157","name":"Combinatorics.Subspace.IsMono.reindex","line":155,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono.reindex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono.reindex\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">IsMono</span>.<span class=\"name\">reindex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η' : <a href=\"./foundational_types.html\">Type</a> u_9}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α' : <a href=\"./foundational_types.html\">Type</a> u_10}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_11}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{eη : <span class=\"fn\"><span class=\"fn\">η</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">η'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{eα : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{eι : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\">Combinatorics.Subspace.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\">Combinatorics.Subspace.IsMono</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\">α'</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">eα</span>.symm</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">eι</span></span></span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.reindex</span> <span class=\"fn\">eη</span> <span class=\"fn\">eα</span> <span class=\"fn\">eι</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L150-L153","name":"Combinatorics.Subspace.reindex_isMono","line":150,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.reindex_isMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.reindex_isMono\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">reindex_isMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η' : <a href=\"./foundational_types.html\">Type</a> u_9}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α' : <a href=\"./foundational_types.html\">Type</a> u_10}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_11}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{eη : <span class=\"fn\"><span class=\"fn\">η</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">η'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{eα : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{eι : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\">α'</span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\">Combinatorics.Subspace.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.reindex</span> <span class=\"fn\">eη</span> <span class=\"fn\">eα</span> <span class=\"fn\">eι</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\">Combinatorics.Subspace.IsMono</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">eα</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">eι</span>.symm</span></span></span></span>)</span></span></span>)</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L146-L148","name":"Combinatorics.Subspace.reindex_apply","line":146,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.reindex_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.reindex_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">reindex_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η' : <a href=\"./foundational_types.html\">Type</a> u_9}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α' : <a href=\"./foundational_types.html\">Type</a> u_10}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_11}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eη : <span class=\"fn\"><span class=\"fn\">η</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">η'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eα : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eι : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">η'</span> → <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.reindex</span> <span class=\"fn\">eη</span> <span class=\"fn\">eα</span> <span class=\"fn\">eι</span></span>)</span></span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">eα</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">eα</span>.symm</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">eη</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">eι</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L141-L144","name":"Combinatorics.Subspace.reindex","line":141,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.reindex","doc":"Change the index types of a subspace. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.reindex\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">reindex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η' : <a href=\"./foundational_types.html\">Type</a> u_9}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α' : <a href=\"./foundational_types.html\">Type</a> u_10}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_11}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eη : <span class=\"fn\"><span class=\"fn\">η</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">η'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eα : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eι : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η'</span> <span class=\"fn\">α'</span> <span class=\"fn\">ι'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L136-L136","name":"Combinatorics.Subspace.IsMono","line":136,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono","doc":"Given a coloring `C` of `ι → α` and a combinatorial subspace `l` of `ι → α`, `l.IsMono C`\nmeans that `l` is monochromatic with regard to `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.IsMono\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">IsMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L132-L132","name":"Combinatorics.Subspace.apply_inr","line":132,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.apply_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.apply_inr\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">apply_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">η</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">e</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L131-L131","name":"Combinatorics.Subspace.apply_inl","line":131,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.apply_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.apply_inl\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">apply_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L130-L130","name":"Combinatorics.Subspace.apply_def","line":130,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.apply_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.apply_def\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">apply_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">id</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L111-L128","name":"Combinatorics.Subspace.coe_injective","line":111,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.coe_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.coe_injective\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">coe_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">Combinatorics.Subspace.toFun</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L108-L108","name":"Combinatorics.Subspace.coe_apply","line":108,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.coe_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.coe_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">coe_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">id</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.idxFun</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L106-L106","name":"Combinatorics.Subspace.instCoeFun","line":106,"kind":"instance","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.instCoeFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.instCoeFun\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">instCoeFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L104-L104","name":"Combinatorics.Subspace.toFun","line":104,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.toFun","doc":"Consider a subspace `l : Subspace η α ι` as a function `(η → α) → ι → α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.toFun\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">η</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L101-L101","name":"Combinatorics.Subspace.instInhabited","line":101,"kind":"instance","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.instInhabited","doc":"The combinatorial subspace corresponding to the identity embedding `(ι → α) → (ι → α)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.instInhabited\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">ι</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L95-L95","name":"Combinatorics.Subspace.proper","line":95,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.proper","doc":"We require combinatorial subspaces to be nontrivial in the sense that `fun x ↦ l x i` is\n`fun x ↦ x e` for at least one coordinate `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.proper\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">proper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">η</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.idxFun</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">e</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L92-L92","name":"Combinatorics.Subspace.idxFun","line":92,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.idxFun","doc":"The word representing a combinatorial subspace. `l.idxfun i = Sum.inr e` means that\n`l x i = x e` for all `x` and `l.idxfun i = some a` means that `l x i = a` for all `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.idxFun\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">idxFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">η</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L89-L89","name":"Combinatorics.Subspace.mk","line":89,"kind":"ctor","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.mk\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(idxFun : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">η</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proper : <span class=\"fn\">∀ (<span class=\"fn\">e</span> : <span class=\"fn\">η</span>), <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">idxFun</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">e</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L89-L95","name":"Combinatorics.Subspace","line":89,"kind":"structure","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace","doc":"The type of combinatorial subspaces. A subspace `l : Subspace η α ι` in the hypercube `ι → α`\ndefines a function `(η → α) → ι → α` from `η → α` to the hypercube, such that for each coordinate\n`i : ι` and direction `e : η`, the function `fun x ↦ l x i` is either `fun x ↦ x e` for some\ndirection `e : η` or constant. We require subspaces to be non-degenerate in the sense that, for\nevery `e : η`, `fun x ↦ l x i` is `fun x ↦ x e` for at least one `i`.\n\nFormally, a subspace is represented by a word `l.idxFun : ι → α ⊕ η` which says whether\n`fun x ↦ l x i` is `fun x ↦ x e` (corresponding to `l.idxFun i = Sum.inr e`) or constantly `a`\n(corresponding to `l.idxFun i = Sum.inl a`).\n\nWhen `α` has size `1` there can be many elements of `Subspace η α ι` defining the same function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_7)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u_5 u_6) u_7)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L88-L88","name":"Combinatorics.Subspace.ext_iff","line":88,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.ext_iff\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.idxFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.idxFun</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/HalesJewett.lean#L88-L88","name":"Combinatorics.Subspace.ext","line":88,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace.ext\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Subspace</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Subspace\">Combinatorics.Subspace</a> <span class=\"fn\">η</span> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idxFun : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.idxFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.idxFun</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"}]}