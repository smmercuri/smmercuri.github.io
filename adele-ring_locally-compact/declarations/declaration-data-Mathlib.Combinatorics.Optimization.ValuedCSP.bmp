{"name":"Mathlib.Combinatorics.Optimization.ValuedCSP","instances":[],"imports":["Init","Mathlib.Algebra.BigOperators.Fin","Mathlib.Data.Fin.VecNotation","Mathlib.Data.Matrix.Notation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L151-L181","name":"Function.HasMaxCutProperty.forbids_commutativeFractionalPolymorphism","line":151,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.HasMaxCutProperty.forbids_commutativeFractionalPolymorphism","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.HasMaxCutProperty.forbids_commutativeFractionalPolymorphism\"><span class=\"name\">Function</span>.<span class=\"name\">HasMaxCutProperty</span>.<span class=\"name\">forbids_commutativeFractionalPolymorphism</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedCancelAddCommMonoid\">OrderedCancelAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">D</span></span>)</span> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mcf : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.HasMaxCutProperty\">Function.HasMaxCutProperty</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\">FractionalOperation</a> <span class=\"fn\">D</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(valid : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsValid\">FractionalOperation.IsValid</a> <span class=\"fn\">ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(symmega : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsSymmetric\">FractionalOperation.IsSymmetric</a> <span class=\"fn\">ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.AdmitsFractional\">Function.AdmitsFractional</a> <span class=\"fn\">f</span> <span class=\"fn\">ω</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L130-L149","name":"Function.HasMaxCutPropertyAt.rows_lt_aux","line":130,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.HasMaxCutPropertyAt.rows_lt_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.HasMaxCutPropertyAt.rows_lt_aux\"><span class=\"name\">Function</span>.<span class=\"name\">HasMaxCutPropertyAt</span>.<span class=\"name\">rows_lt_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedCancelAddCommMonoid\">OrderedCancelAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">D</span></span>)</span> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mcf : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.HasMaxCutPropertyAt\">Function.HasMaxCutPropertyAt</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hab : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\">FractionalOperation</a> <span class=\"fn\">D</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(symmega : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsSymmetric\">FractionalOperation.IsSymmetric</a> <span class=\"fn\">ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rin : <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.tt\">FractionalOperation.tt</a> <span class=\"fn\">ω</span> <span class=\"fn\">![<span class=\"fn\">![<span class=\"fn\">a</span>, <span class=\"fn\">b</span>]</span>, <span class=\"fn\">![<span class=\"fn\">b</span>, <span class=\"fn\">a</span>]</span>]</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">![<span class=\"fn\">a</span>, <span class=\"fn\">b</span>]</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L124-L126","name":"FractionalOperation.IsSymmetricFractionalPolymorphismFor","line":124,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsSymmetricFractionalPolymorphismFor","doc":"Fractional operation is a symmetric fractional polymorphism for given VCSP template. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsSymmetricFractionalPolymorphismFor\"><span class=\"name\">FractionalOperation</span>.<span class=\"name\">IsSymmetricFractionalPolymorphismFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ω : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\">FractionalOperation</a> <span class=\"fn\">D</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L120-L121","name":"FractionalOperation.IsSymmetric","line":120,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsSymmetric","doc":"Fractional operation is symmetric. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsSymmetric\"><span class=\"name\">FractionalOperation</span>.<span class=\"name\">IsSymmetric</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ω : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\">FractionalOperation</a> <span class=\"fn\">D</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L115-L117","name":"FractionalOperation.IsFractionalPolymorphismFor","line":115,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsFractionalPolymorphismFor","doc":"Fractional operation is a fractional polymorphism for given VCSP template. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsFractionalPolymorphismFor\"><span class=\"name\">FractionalOperation</span>.<span class=\"name\">IsFractionalPolymorphismFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ω : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\">FractionalOperation</a> <span class=\"fn\">D</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L110-L112","name":"Function.AdmitsFractional","line":110,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.AdmitsFractional","doc":"Cost function admits given fractional operation, i.e., `ω` improves `f` in the `≤` sense. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.AdmitsFractional\"><span class=\"name\">Function</span>.<span class=\"name\">AdmitsFractional</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">D</span></span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ω : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\">FractionalOperation</a> <span class=\"fn\">D</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L105-L107","name":"FractionalOperation.tt","line":105,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.tt","doc":"Fractional operation applied to a transposed table of values. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.tt\"><span class=\"name\">FractionalOperation</span>.<span class=\"name\">tt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ω : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\">FractionalOperation</a> <span class=\"fn\">D</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">D</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">D</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L100-L102","name":"FractionalOperation.IsValid.contains","line":100,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsValid.contains","doc":"Valid fractional operation contains an operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsValid.contains\"><span class=\"name\">FractionalOperation</span>.<span class=\"name\">IsValid</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\">FractionalOperation</a> <span class=\"fn\">D</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(valid : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsValid\">FractionalOperation.IsValid</a> <span class=\"fn\">ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (g : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\">D</span></span>)</span> → <span class=\"fn\">D</span></span>), <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ω</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L96-L97","name":"FractionalOperation.IsValid","line":96,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsValid","doc":"Fractional operation is valid iff nonempty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.IsValid\"><span class=\"name\">FractionalOperation</span>.<span class=\"name\">IsValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ω : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\">FractionalOperation</a> <span class=\"fn\">D</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L92-L93","name":"FractionalOperation.size","line":92,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.size","doc":"Arity of the \"output\" of the fractional operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation.size\"><span class=\"name\">FractionalOperation</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ω : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\">FractionalOperation</a> <span class=\"fn\">D</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L85-L86","name":"FractionalOperation","line":85,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation","doc":"Fractional operation is a finite unordered collection of D^m → D possibly with duplicates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#FractionalOperation\"><span class=\"name\">FractionalOperation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(D : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_3</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L81-L82","name":"Function.HasMaxCutProperty","line":81,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.HasMaxCutProperty","doc":"Function `f` has Max-Cut property at some two non-identical labels. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.HasMaxCutProperty\"><span class=\"name\">Function</span>.<span class=\"name\">HasMaxCutProperty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">D</span></span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L76-L78","name":"Function.HasMaxCutPropertyAt","line":76,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.HasMaxCutPropertyAt","doc":"Function `f` has Max-Cut property at labels `a` and `b` when `argmin f` is exactly\n`{ ![a, b] , ![b, a] }`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#Function.HasMaxCutPropertyAt\"><span class=\"name\">Function</span>.<span class=\"name\">HasMaxCutPropertyAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">D</span></span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">D</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">D</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L70-L72","name":"ValuedCSP.Instance.IsOptimumSolution","line":70,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Instance.IsOptimumSolution","doc":"Condition for `x` being an optimum solution (min) to given `Γ` instance `I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Instance.IsOptimumSolution\"><span class=\"name\">ValuedCSP</span>.<span class=\"name\">Instance</span>.<span class=\"name\">IsOptimumSolution</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Instance\">ValuedCSP.Instance</a> <span class=\"fn\">Γ</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L65-L67","name":"ValuedCSP.Instance.evalSolution","line":65,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Instance.evalSolution","doc":"Evaluation of a `Γ` instance `I` for given solution `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Instance.evalSolution\"><span class=\"name\">ValuedCSP</span>.<span class=\"name\">Instance</span>.<span class=\"name\">evalSolution</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Instance\">ValuedCSP.Instance</a> <span class=\"fn\">Γ</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L61-L62","name":"ValuedCSP.Instance","line":61,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Instance","doc":"A valued CSP instance over the template `Γ` with variables indexed by `ι`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Instance\"><span class=\"name\">ValuedCSP</span>.<span class=\"name\">Instance</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u_1 u_2) u_3)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L56-L58","name":"ValuedCSP.Term.evalSolution","line":56,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.evalSolution","doc":"Evaluation of a `Γ` term `t` for given solution `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.evalSolution\"><span class=\"name\">ValuedCSP</span>.<span class=\"name\">Term</span>.<span class=\"name\">evalSolution</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term\">ValuedCSP.Term</a> <span class=\"fn\">Γ</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L53-L53","name":"ValuedCSP.Term.app","line":53,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.app","doc":"Which variables are plugged as arguments to the cost function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.app\"><span class=\"name\">ValuedCSP</span>.<span class=\"name\">Term</span>.<span class=\"name\">app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term\">ValuedCSP.Term</a> <span class=\"fn\">Γ</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">self</span>.n</span></span> → <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L51-L51","name":"ValuedCSP.Term.inΓ","line":51,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.inΓ","doc":"The cost function comes from the template "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.inΓ\"><span class=\"name\">ValuedCSP</span>.<span class=\"name\">Term</span>.<span class=\"name\">inΓ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term\">ValuedCSP.Term</a> <span class=\"fn\">Γ</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\"><span class=\"fn\">self</span>.n</span>, <span class=\"fn\">snd</span> := <span class=\"fn\"><span class=\"fn\">self</span>.f</span> }</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">Γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L49-L49","name":"ValuedCSP.Term.f","line":49,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.f","doc":"Which cost function is instantiated "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.f\"><span class=\"name\">ValuedCSP</span>.<span class=\"name\">Term</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term\">ValuedCSP.Term</a> <span class=\"fn\">Γ</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">self</span>.n</span></span> → <span class=\"fn\">D</span></span>)</span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L47-L47","name":"ValuedCSP.Term.n","line":47,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.n","doc":"Arity of the function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.n\"><span class=\"name\">ValuedCSP</span>.<span class=\"name\">Term</span>.<span class=\"name\">n</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term\">ValuedCSP.Term</a> <span class=\"fn\">Γ</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L45-L45","name":"ValuedCSP.Term.mk","line":45,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term.mk\"><span class=\"name\">ValuedCSP</span>.<span class=\"name\">Term</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">D</span></span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inΓ : <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">n</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">Γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(app : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term\">ValuedCSP.Term</a> <span class=\"fn\">Γ</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L45-L53","name":"ValuedCSP.Term","line":45,"kind":"structure","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term","doc":"A term in a valued CSP instance over the template `Γ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP.Term\"><span class=\"name\">ValuedCSP</span>.<span class=\"name\">Term</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Γ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">ValuedCSP</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u_1 u_2) u_3)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/Optimization/ValuedCSP.lean#L39-L40","name":"ValuedCSP","line":39,"kind":"def","docLink":"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP","doc":"A template for a valued CSP problem over a domain `D` with costs in `C`.\nRegarding `C` we want to support `Bool`, `Nat`, `ENat`, `Int`, `Rat`, `NNRat`,\n`Real`, `NNReal`, `EReal`, `ENNReal`, and tuples made of any of those types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\"><span class=\"name\">ValuedCSP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(D : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedAddCommMonoid\">OrderedAddCommMonoid</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"}]}