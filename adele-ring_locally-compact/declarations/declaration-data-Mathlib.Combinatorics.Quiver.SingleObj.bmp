{"name":"Mathlib.Combinatorics.Quiver.SingleObj","instances":[{"typeNames":["Quiver.SingleObj"],"name":"Quiver.instUniqueSingleObj","className":"Unique"},{"typeNames":["Quiver.SingleObj"],"name":"Quiver.SingleObj.inst","className":"Quiver"},{"typeNames":["Quiver.SingleObj"],"name":"Quiver.SingleObj.instInhabited","className":"Inhabited"}],"imports":["Init","Mathlib.Combinatorics.Quiver.Cast","Mathlib.Combinatorics.Quiver.Symmetric"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L141-L143","name":"Quiver.SingleObj.pathEquivList_symm_cons","line":141,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_symm_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.pathEquivList</span>.symm</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.pathEquivList</span>.symm</span> <span class=\"fn\">l</span></span>)</span>.cons</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L137-L138","name":"Quiver.SingleObj.pathEquivList_symm_nil","line":137,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_symm_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.pathEquivList</span>.symm</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Quiver.Path.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L132-L134","name":"Quiver.SingleObj.pathEquivList_cons","line":132,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.pathEquivList</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.cons</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\">Quiver.SingleObj.pathToList</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L128-L129","name":"Quiver.SingleObj.pathEquivList_nil","line":128,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.pathEquivList</span> <span class=\"fn\">Quiver.Path.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L124-L125","name":"Quiver.SingleObj.pathEquivList","line":124,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList","doc":"Paths in `SingleObj α` quiver correspond to lists of elements of type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L118-L121","name":"Quiver.SingleObj.pathToList_listToPath","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList_listToPath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList_listToPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathToList_listToPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\">Quiver.SingleObj.pathToList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath\">Quiver.SingleObj.listToPath</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L112-L116","name":"Quiver.SingleObj.listToPath_pathToList","line":112,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath_pathToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath_pathToList\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">listToPath_pathToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath\">Quiver.SingleObj.listToPath</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\">Quiver.SingleObj.pathToList</a> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">Quiver.Path.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L108-L110","name":"Quiver.SingleObj.listToPath","line":108,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath","doc":"Auxiliary definition for `quiver.SingleObj.pathEquivList`.\nConverts a list of elements of type `α` into a path in the quiver `SingleObj α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">listToPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L100-L102","name":"Quiver.SingleObj.pathToList","line":100,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList","doc":"Auxiliary definition for `quiver.SingleObj.pathEquivList`.\nConverts a path in the quiver `single_obj α` into a list of elements of type `a`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L93-L95","name":"Quiver.SingleObj.toPrefunctor_symm_comp","line":93,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_symm_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">β</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span>.symm</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp\">⋙q</a> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span>.symm</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span>.symm</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L88-L90","name":"Quiver.SingleObj.toPrefunctor_comp","line":88,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp\">⋙q</a> <span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L85-L86","name":"Quiver.SingleObj.toPrefunctor_symm_id","line":85,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_id\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_symm_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span>.symm</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.id\">𝟭q</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L81-L82","name":"Quiver.SingleObj.toPrefunctor_id","line":81,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_id\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">id</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.id\">𝟭q</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L75-L79","name":"Quiver.SingleObj.toPrefunctor","line":75,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor","doc":"Prefunctors between two `SingleObj` quivers correspond to functions between the corresponding\narrows types.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">β</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L74-L74","name":"Quiver.SingleObj.toPrefunctor_apply_map","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_map\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_apply_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>} (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">f</span></span>)</span>.map</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L74-L74","name":"Quiver.SingleObj.toPrefunctor_apply_obj","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_obj\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_apply_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">f</span></span>)</span>.obj</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L74-L74","name":"Quiver.SingleObj.toPrefunctor_symm_apply","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_apply\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span>.symm</span> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toHom</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L68-L69","name":"Quiver.SingleObj.toHom","line":68,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom","doc":"The type of arrows from `star α` to itself is equivalent to the original type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L67-L67","name":"Quiver.SingleObj.toHom_apply","line":67,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_apply\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toHom</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L67-L67","name":"Quiver.SingleObj.toHom_symm_apply","line":67,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_symm_apply\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toHom_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toHom</span>.symm</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L61-L64","name":"Quiver.SingleObj.hasInvolutiveReverse","line":61,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasInvolutiveReverse","doc":"Equip `SingleObj α` with an involutive reverse operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasInvolutiveReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">hasInvolutiveReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rev : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">rev</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">Quiver.HasInvolutiveReverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L57-L57","name":"Quiver.SingleObj.hasReverse","line":57,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasReverse","doc":"Equip `SingleObj α` with a reverse operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">hasReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rev : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L53-L53","name":"Quiver.SingleObj.ext","line":53,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.ext\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L48-L49","name":"Quiver.SingleObj.instInhabited","line":48,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.instInhabited\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L45-L46","name":"Quiver.SingleObj.star","line":45,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star","doc":"The single object in `SingleObj α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L41-L42","name":"Quiver.SingleObj.inst","line":41,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.inst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.inst\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">inst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L33-L35","name":"Quiver.instUniqueSingleObj","line":33,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.instUniqueSingleObj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.instUniqueSingleObj\"><span class=\"name\">Quiver</span>.<span class=\"name\">instUniqueSingleObj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Quiver/SingleObj.lean#L29-L30","name":"Quiver.SingleObj","line":29,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj","doc":"Type tag on `Unit` used to define single-object quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a></span></div></div>"}]}