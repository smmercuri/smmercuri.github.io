{"name":"Mathlib.Combinatorics.SimpleGraph.Acyclic","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Connectivity","Mathlib.Tactic.Linarith"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L150-L197","name":"SimpleGraph.IsTree.card_edgeFinset","line":150,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.card_edgeFinset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.card_edgeFinset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsTree</span>.<span class=\"name\">card_edgeFinset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G</span>.edgeSet</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\">G</span>.IsTree</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.edgeFinset</span>.card</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">V</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L147-L148","name":"SimpleGraph.IsTree.existsUnique_path","line":147,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.existsUnique_path","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.existsUnique_path\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsTree</span>.<span class=\"name\">existsUnique_path</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\">G</span>.IsTree</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃! <span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Walk</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>, <span class=\"fn\"><span class=\"fn\">p</span>.IsPath</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L125-L145","name":"SimpleGraph.isTree_iff_existsUnique_path","line":125,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isTree_iff_existsUnique_path","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isTree_iff_existsUnique_path\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isTree_iff_existsUnique_path</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.IsTree</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">V</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>), <span class=\"fn\">∃! <span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Walk</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>, <span class=\"fn\"><span class=\"fn\">p</span>.IsPath</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L122-L123","name":"SimpleGraph.isAcyclic_iff_path_unique","line":122,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_iff_path_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_iff_path_unique\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isAcyclic_iff_path_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.IsAcyclic</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ ⦃<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>⦄ (<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Path</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L111-L120","name":"SimpleGraph.isAcyclic_of_path_unique","line":111,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_of_path_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_of_path_unique\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isAcyclic_of_path_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>) (<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Path</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.IsAcyclic</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L82-L109","name":"SimpleGraph.IsAcyclic.path_unique","line":82,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsAcyclic.path_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsAcyclic.path_unique\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsAcyclic</span>.<span class=\"name\">path_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">G</span>.IsAcyclic</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Path</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Path</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L78-L80","name":"SimpleGraph.isAcyclic_iff_forall_edge_isBridge","line":78,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_iff_forall_edge_isBridge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_iff_forall_edge_isBridge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isAcyclic_iff_forall_edge_isBridge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.IsAcyclic</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ ⦃<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>⦄, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G</span>.edgeSet</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.IsBridge</span> <span class=\"fn\">e</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L64-L76","name":"SimpleGraph.isAcyclic_iff_forall_adj_isBridge","line":64,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_iff_forall_adj_isBridge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_iff_forall_adj_isBridge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isAcyclic_iff_forall_adj_isBridge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.IsAcyclic</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ ⦃<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>⦄, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.IsBridge</span> <span class=\"fn\">s(<span class=\"fn\">v</span>, <span class=\"fn\">w</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L62-L62","name":"SimpleGraph.isAcyclic_bot","line":62,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isAcyclic_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.IsAcyclic</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L58-L58","name":"SimpleGraph.IsTree.IsAcyclic","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.IsAcyclic","doc":"Graph is acyclic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.IsAcyclic\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsTree</span>.<span class=\"name\">IsAcyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">G</span>.IsTree</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.IsAcyclic</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L56-L56","name":"SimpleGraph.IsTree.isConnected","line":56,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.isConnected","doc":"Graph is connected. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.isConnected\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsTree</span>.<span class=\"name\">isConnected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">G</span>.IsTree</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.Connected</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L54-L54","name":"SimpleGraph.IsTree.mk","line":54,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsTree</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(isConnected : <span class=\"fn\"><span class=\"fn\">G</span>.Connected</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IsAcyclic : <span class=\"fn\"><span class=\"fn\">G</span>.IsAcyclic</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.IsTree</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L54-L58","name":"SimpleGraph.IsTree","line":54,"kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree","doc":"A *tree* is a connected acyclic graph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L53-L53","name":"SimpleGraph.isTree_iff","line":53,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isTree_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isTree_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isTree_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.IsTree</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Connected</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">G</span>.IsAcyclic</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L50-L50","name":"SimpleGraph.IsAcyclic","line":50,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsAcyclic","doc":"A graph is *acyclic* (or a *forest*) if it has no cycles. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsAcyclic\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsAcyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}