{"name":"Mathlib.Combinatorics.SimpleGraph.ConcreteColorings","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Coloring","Mathlib.Combinatorics.SimpleGraph.Hasse","Mathlib.Logic.Equiv.Fin"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L68-L75","name":"SimpleGraph.Walk.three_le_chromaticNumber_of_odd_loop","line":68,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Walk.three_le_chromaticNumber_of_odd_loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Walk.three_le_chromaticNumber_of_odd_loop\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">three_le_chromaticNumber_of_odd_loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Walk</span> <span class=\"fn\">u</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hOdd : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Parity.html#Odd\">Odd</a> <span class=\"fn\"><span class=\"fn\">p</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">3</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">G</span>.chromaticNumber</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L62-L66","name":"SimpleGraph.Coloring.odd_length_iff_not_congr","line":62,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Coloring.odd_length_iff_not_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Coloring.odd_length_iff_not_congr\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Coloring</span>.<span class=\"name\">odd_length_iff_not_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Coloring</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Walk</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Parity.html#Odd\">Odd</a> <span class=\"fn\"><span class=\"fn\">p</span>.length</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L50-L60","name":"SimpleGraph.Coloring.even_length_iff_congr","line":50,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Coloring.even_length_iff_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Coloring.even_length_iff_congr\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Coloring</span>.<span class=\"name\">even_length_iff_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Coloring</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Walk</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\"><span class=\"fn\">p</span>.length</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L42-L48","name":"SimpleGraph.chromaticNumber_pathGraph","line":42,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.chromaticNumber_pathGraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.chromaticNumber_pathGraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">chromaticNumber_pathGraph</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">SimpleGraph.pathGraph</a> <span class=\"fn\">n</span></span>)</span>.chromaticNumber</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L32-L40","name":"SimpleGraph.pathGraph_two_embedding","line":32,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph_two_embedding","doc":"Embedding of `pathGraph 2` into the first two elements of `pathGraph n` for `2 ≤ n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph_two_embedding\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">pathGraph_two_embedding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">SimpleGraph.pathGraph</a> <span class=\"fn\">2</span></span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Embedding\">↪g</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">SimpleGraph.pathGraph</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L24-L29","name":"SimpleGraph.pathGraph.bicoloring","line":24,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph.bicoloring","doc":"Bicoloring of a path graph "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph.bicoloring\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">pathGraph</span>.<span class=\"name\">bicoloring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">SimpleGraph.pathGraph</a> <span class=\"fn\">n</span></span>)</span>.Coloring</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}