{"name":"Mathlib.Combinatorics.SimpleGraph.Operations","instances":[{"typeNames":["SimpleGraph.Adj"],"name":"SimpleGraph.instDecidableRelAdjReplaceVertex","className":"Decidable"},{"typeNames":["SimpleGraph.Adj"],"name":"SimpleGraph.instDecidableRelAdjEdge","className":"Decidable"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.instFintypeElemSym2EdgeSetEdge","className":"Fintype"}],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Finite"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L163-L165","name":"SimpleGraph.card_edgeFinset_sup_edge","line":163,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.card_edgeFinset_sup_edge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.card_edgeFinset_sup_edge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">card_edgeFinset_sup_edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.Adj</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span>)</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span>)</span></span>)</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">G</span></span>)</span>.card</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L158-L161","name":"SimpleGraph.edgeFinset_sup_edge","line":158,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edgeFinset_sup_edge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edgeFinset_sup_edge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edgeFinset_sup_edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.Adj</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span>)</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.cons\">Finset.cons</a> <span class=\"fn\">s(<span class=\"fn\">s</span>, <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L156-L156","name":"SimpleGraph.instFintypeElemSym2EdgeSetEdge","line":156,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.instFintypeElemSym2EdgeSetEdge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.instFintypeElemSym2EdgeSetEdge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">instFintypeElemSym2EdgeSetEdge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L150-L152","name":"SimpleGraph.sup_edge_of_adj","line":150,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.sup_edge_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.sup_edge_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">sup_edge_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L146-L148","name":"SimpleGraph.edge_edgeSet_of_ne","line":146,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge_edgeSet_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge_edgeSet_of_ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edge_edgeSet_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">s(<span class=\"fn\">s</span>, <span class=\"fn\">t</span>)</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L141-L142","name":"SimpleGraph.sup_edge_self","line":141,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.sup_edge_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.sup_edge_self\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">sup_edge_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L137-L138","name":"SimpleGraph.edge_self_eq_bot","line":137,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge_self_eq_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge_self_eq_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edge_self_eq_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L134-L135","name":"SimpleGraph.instDecidableRelAdjEdge","line":134,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.instDecidableRelAdjEdge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.instDecidableRelAdjEdge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">instDecidableRelAdjEdge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span>.Adj</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L131-L132","name":"SimpleGraph.edge_adj","line":131,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edge_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">SimpleGraph.edge</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L129-L129","name":"SimpleGraph.edge","line":129,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge","doc":"The graph with a single `s-t` edge. It is empty iff `s = t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L113-L122","name":"SimpleGraph.card_edgeFinset_replaceVertex_of_adj","line":113,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.card_edgeFinset_replaceVertex_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.card_edgeFinset_replaceVertex_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">card_edgeFinset_replaceVertex_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.Adj</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>)</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">G</span></span>)</span>.card</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.degree\">SimpleGraph.degree</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.degree\">SimpleGraph.degree</a> <span class=\"fn\">G</span> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L102-L111","name":"SimpleGraph.card_edgeFinset_replaceVertex_of_not_adj","line":102,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.card_edgeFinset_replaceVertex_of_not_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.card_edgeFinset_replaceVertex_of_not_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">card_edgeFinset_replaceVertex_of_not_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.Adj</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>)</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">G</span></span>)</span>.card</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.degree\">SimpleGraph.degree</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.degree\">SimpleGraph.degree</a> <span class=\"fn\">G</span> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L91-L100","name":"SimpleGraph.disjoint_sdiff_neighborFinset_image","line":91,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.disjoint_sdiff_neighborFinset_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.disjoint_sdiff_neighborFinset_image\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">disjoint_sdiff_neighborFinset_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.Adj</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.incidenceFinset\">SimpleGraph.incidenceFinset</a> <span class=\"fn\">G</span> <span class=\"fn\">t</span></span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>) =&gt; <span class=\"fn\">s(<span class=\"fn\">x</span>, <span class=\"fn\">t</span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.neighborFinset\">SimpleGraph.neighborFinset</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L85-L89","name":"SimpleGraph.edgeFinset_replaceVertex_of_adj","line":85,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edgeFinset_replaceVertex_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edgeFinset_replaceVertex_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edgeFinset_replaceVertex_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.Adj</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.incidenceFinset\">SimpleGraph.incidenceFinset</a> <span class=\"fn\">G</span> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Core.html#Union.union\">∪</a>       <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>) =&gt; <span class=\"fn\">s(<span class=\"fn\">x</span>, <span class=\"fn\">t</span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.neighborFinset\">SimpleGraph.neighborFinset</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a>     <span class=\"fn\">{<span class=\"fn\">s(<span class=\"fn\">t</span>, <span class=\"fn\">t</span>)</span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L79-L83","name":"SimpleGraph.edgeFinset_replaceVertex_of_not_adj","line":79,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edgeFinset_replaceVertex_of_not_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edgeFinset_replaceVertex_of_not_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edgeFinset_replaceVertex_of_not_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.Adj</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.incidenceFinset\">SimpleGraph.incidenceFinset</a> <span class=\"fn\">G</span> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Core.html#Union.union\">∪</a>     <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>) =&gt; <span class=\"fn\">s(<span class=\"fn\">x</span>, <span class=\"fn\">t</span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.neighborFinset\">SimpleGraph.neighborFinset</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L77-L77","name":"SimpleGraph.instDecidableRelAdjReplaceVertex","line":77,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.instDecidableRelAdjReplaceVertex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.instDecidableRelAdjReplaceVertex\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">instDecidableRelAdjReplaceVertex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.Adj</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span>.Adj</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L69-L73","name":"SimpleGraph.edgeSet_replaceVertex_of_adj","line":69,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edgeSet_replaceVertex_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edgeSet_replaceVertex_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edgeSet_replaceVertex_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSet\">SimpleGraph.incidenceSet</a> <span class=\"fn\">G</span> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>) =&gt; <span class=\"fn\">s(<span class=\"fn\">x</span>, <span class=\"fn\">t</span>)</span></span>)</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">SimpleGraph.neighborSet</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span></span></span></span>)</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a>     <span class=\"fn\">{<span class=\"fn\">s(<span class=\"fn\">t</span>, <span class=\"fn\">t</span>)</span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L63-L67","name":"SimpleGraph.edgeSet_replaceVertex_of_not_adj","line":63,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edgeSet_replaceVertex_of_not_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edgeSet_replaceVertex_of_not_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edgeSet_replaceVertex_of_not_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSet\">SimpleGraph.incidenceSet</a> <span class=\"fn\">G</span> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>) =&gt; <span class=\"fn\">s(<span class=\"fn\">x</span>, <span class=\"fn\">t</span>)</span></span>)</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">SimpleGraph.neighborSet</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L58-L59","name":"SimpleGraph.adj_replaceVertex_iff_of_ne","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.adj_replaceVertex_iff_of_ne","doc":"Adjacency in `G.replaceVertex s t` which does not involve `t` is the same as that of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.adj_replaceVertex_iff_of_ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">adj_replaceVertex_iff_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hw : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L54-L55","name":"SimpleGraph.adj_replaceVertex_iff_of_ne_right","line":54,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.adj_replaceVertex_iff_of_ne_right","doc":"Except possibly for itself, the neighbours of `t` in `G.replaceVertex s t` are the neighbours of\n`s` in `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.adj_replaceVertex_iff_of_ne_right\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">adj_replaceVertex_iff_of_ne_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hw : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span>.Adj</span> <span class=\"fn\">t</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L49-L50","name":"SimpleGraph.adj_replaceVertex_iff_of_ne_left","line":49,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.adj_replaceVertex_iff_of_ne_left","doc":"Except possibly for `t`, the neighbours of `s` in `G.replaceVertex s t` are its neighbours in\n`G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.adj_replaceVertex_iff_of_ne_left\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">adj_replaceVertex_iff_of_ne_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hw : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L42-L43","name":"SimpleGraph.replaceVertex_self","line":42,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex_self\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">replaceVertex_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L40-L40","name":"SimpleGraph.not_adj_replaceVertex_same","line":40,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.not_adj_replaceVertex_same","doc":"There is never an `s-t` edge in `G.replaceVertex s t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.not_adj_replaceVertex_same\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">not_adj_replaceVertex_same</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\">SimpleGraph.replaceVertex</a> <span class=\"fn\">G</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span>.Adj</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Combinatorics/SimpleGraph/Operations.lean#L34-L37","name":"SimpleGraph.replaceVertex","line":34,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex","doc":"The graph formed by forgetting `t`'s neighbours and instead giving it those of `s`. The `s-t`\nedge is removed if present. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.replaceVertex\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">replaceVertex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span></div></div>"}]}