{"name":"Mathlib.Combinatorics.SimpleGraph.Subgraph","instances":[{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instSup","className":"Sup"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instInf","className":"Inf"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instTop","className":"Top"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instBot","className":"Bot"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instSupSet","className":"SupSet"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instInfSet","className":"InfSet"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.distribLattice","className":"DistribLattice"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instBoundedOrder","className":"BoundedOrder"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instCompletelyDistribLattice","className":"CompletelyDistribLattice"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.subgraphInhabited","className":"Inhabited"},{"typeNames":[],"name":"SimpleGraph.Subgraph.neighborSet.decidablePred","className":"Decidable"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.Subgraph.finiteAt","className":"Fintype"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.Subgraph.instFintypeElemNeighborSetOfVertsOfDecidablePredMemSet","className":"Fintype"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.Subgraph.coeFiniteAt","className":"Fintype"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.nonempty_singletonSubgraph_verts","className":"Nonempty"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.nonempty_subgraphOfAdj_verts","className":"Nonempty"}],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Finite","Mathlib.Combinatorics.SimpleGraph.Maps"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1147-L1149","name":"SimpleGraph.Subgraph.deleteVerts_inter_verts_set_right_eq","line":1147,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_inter_verts_set_right_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_inter_verts_set_right_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_inter_verts_set_right_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1143-L1144","name":"SimpleGraph.Subgraph.deleteVerts_inter_verts_left_eq","line":1143,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_inter_verts_left_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_inter_verts_left_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_inter_verts_left_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.verts</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1139-L1140","name":"SimpleGraph.Subgraph.deleteVerts_anti","line":1139,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_anti","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_anti\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_anti</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1134-L1136","name":"SimpleGraph.Subgraph.deleteVerts_mono","line":1134,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G'' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G''</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.deleteVerts</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1130-L1131","name":"SimpleGraph.Subgraph.deleteVerts_le","line":1130,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1127-L1128","name":"SimpleGraph.Subgraph.deleteVerts_empty","line":1127,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_empty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1122-L1124","name":"SimpleGraph.Subgraph.deleteVerts_deleteVerts","line":1122,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_deleteVerts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_deleteVerts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_deleteVerts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">s</span></span>)</span>.deleteVerts</span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">s'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1117-L1119","name":"SimpleGraph.Subgraph.deleteVerts_adj","line":1117,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">s</span></span>)</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> ∉ <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1114-L1115","name":"SimpleGraph.Subgraph.deleteVerts_verts","line":1114,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteVerts</span> <span class=\"fn\">s</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.verts</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1107-L1108","name":"SimpleGraph.Subgraph.deleteVerts","line":1107,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts","doc":"Given a subgraph and a set of vertices, delete all the vertices from the subgraph,\nif present. Any edges incident to the deleted vertices are deleted as well. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1091-L1101","name":"SimpleGraph.Subgraph.subgraphOfAdj_eq_induce","line":1091,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphOfAdj_eq_induce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphOfAdj_eq_induce\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">subgraphOfAdj_eq_induce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.induce</span> <span class=\"fn\">{<span class=\"fn\">v</span>, <span class=\"fn\">w</span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1087-L1089","name":"SimpleGraph.Subgraph.singletonSubgraph_eq_induce","line":1087,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.singletonSubgraph_eq_induce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.singletonSubgraph_eq_induce\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">singletonSubgraph_eq_induce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.induce</span> <span class=\"fn\">{<span class=\"fn\">v</span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1084-L1085","name":"SimpleGraph.Subgraph.le_induce_union_right","line":1084,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union_right\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">le_induce_union_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">s'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1081-L1082","name":"SimpleGraph.Subgraph.le_induce_union_left","line":1081,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union_left\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">le_induce_union_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">s'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1075-L1079","name":"SimpleGraph.Subgraph.le_induce_union","line":1075,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">le_induce_union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">s'</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">s'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1071-L1073","name":"SimpleGraph.Subgraph.le_induce_top_verts","line":1071,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_top_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_top_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">le_induce_top_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.induce</span> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1064-L1069","name":"SimpleGraph.Subgraph.induce_self_verts","line":1064,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_self_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_self_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_self_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1060-L1061","name":"SimpleGraph.Subgraph.induce_empty","line":1060,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_empty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1056-L1057","name":"SimpleGraph.Subgraph.induce_mono_right","line":1056,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono_right\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_mono_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">s'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1052-L1053","name":"SimpleGraph.Subgraph.induce_mono_left","line":1052,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono_left\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_mono_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G'' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G''</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.induce</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1044-L1049","name":"SimpleGraph.Subgraph.induce_mono","line":1044,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G'' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G''</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.induce</span> <span class=\"fn\">s'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1035-L1038","name":"SimpleGraph.induce_eq_coe_induce_top","line":1035,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.induce_eq_coe_induce_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.induce_eq_coe_induce_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">induce_eq_coe_induce_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">SimpleGraph.induce</a> <span class=\"fn\">s</span> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.induce</span> <span class=\"fn\">s</span></span>)</span>.coe</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1028-L1033","name":"SimpleGraph.Subgraph.induce","line":1028,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce","doc":"The induced subgraph of a subgraph. The expectation is that `s ⊆ G'.verts` for the usual\nnotion of an induced subgraph, but, in general, `s` is taken to be the new vertex set and edges\nare induced from the subgraph `G'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1027-L1027","name":"SimpleGraph.Subgraph.induce_adj","line":1027,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">s</span></span>)</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1027-L1027","name":"SimpleGraph.Subgraph.induce_verts","line":1027,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.induce</span> <span class=\"fn\">s</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1012-L1014","name":"SimpleGraph.Subgraph.spanningCoe_deleteEdges_le","line":1012,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_deleteEdges_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_deleteEdges_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_deleteEdges_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span>)</span>.spanningCoe</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">G'</span>.spanningCoe</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1008-L1010","name":"SimpleGraph.Subgraph.coe_deleteEdges_le","line":1008,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_deleteEdges_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_deleteEdges_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_deleteEdges_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span>)</span>.coe</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">G'</span>.coe</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1004-L1006","name":"SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_right_eq","line":1004,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_right_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_right_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_inter_edgeSet_right_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">G'</span>.edgeSet</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L999-L1001","name":"SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_left_eq","line":999,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_left_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_left_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_inter_edgeSet_left_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.edgeSet</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L992-L996","name":"SimpleGraph.Subgraph.deleteEdges_le_of_le","line":992,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_le_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_le_of_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L989-L990","name":"SimpleGraph.Subgraph.deleteEdges_le","line":989,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L984-L987","name":"SimpleGraph.Subgraph.coe_deleteEdges_eq","line":984,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_deleteEdges_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_deleteEdges_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_deleteEdges_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span>)</span>.coe</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.deleteEdges</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.map\">Sym2.map</a> <span class=\"fn\">Subtype.val</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L968-L982","name":"SimpleGraph.Subgraph.deleteEdges_coe_eq","line":968,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_coe_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_coe_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_coe_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.deleteEdges</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.map\">Sym2.map</a> <span class=\"fn\">Subtype.val</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">s</span></span>)</span></span>)</span>.coe</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L963-L966","name":"SimpleGraph.Subgraph.deleteEdges_spanningCoe_eq","line":963,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_spanningCoe_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_spanningCoe_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_spanningCoe_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.spanningCoe</span>.deleteEdges</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span>)</span>.spanningCoe</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L959-L960","name":"SimpleGraph.Subgraph.deleteEdges_empty_eq","line":959,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_empty_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_empty_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_empty_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L954-L956","name":"SimpleGraph.Subgraph.deleteEdges_deleteEdges","line":954,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_deleteEdges","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_deleteEdges\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_deleteEdges</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span>)</span>.deleteEdges</span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">s'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L950-L951","name":"SimpleGraph.Subgraph.deleteEdges_adj","line":950,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span>)</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">s(<span class=\"fn\">v</span>, <span class=\"fn\">w</span>)</span> ∉ <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L946-L947","name":"SimpleGraph.Subgraph.deleteEdges_verts","line":946,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.deleteEdges</span> <span class=\"fn\">s</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L934-L939","name":"SimpleGraph.Subgraph.deleteEdges","line":934,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges","doc":"Given a subgraph `G'` and a set of vertex pairs, remove all of the corresponding edges\nfrom its edge set, if present.\n\nSee also: `SimpleGraph.deleteEdges`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L918-L925","name":"SimpleGraph.Subgraph.coeSubgraph_restrict_eq","line":918,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_restrict_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_restrict_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeSubgraph_restrict_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">SimpleGraph.Subgraph.coeSubgraph</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict\">SimpleGraph.Subgraph.restrict</a> <span class=\"fn\">H'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">H'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L911-L916","name":"SimpleGraph.Subgraph.coeSubgraph_le","line":911,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeSubgraph_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.coe</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">SimpleGraph.Subgraph.coeSubgraph</a> <span class=\"fn\">H'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L907-L909","name":"SimpleGraph.Subgraph.coeSubgraph_injective","line":907,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeSubgraph_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">SimpleGraph.Subgraph.coeSubgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L900-L905","name":"SimpleGraph.Subgraph.restrict_coeSubgraph","line":900,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict_coeSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict_coeSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">restrict_coeSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G'' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict\">SimpleGraph.Subgraph.restrict</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">SimpleGraph.Subgraph.coeSubgraph</a> <span class=\"fn\">G''</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G''</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L897-L898","name":"SimpleGraph.Subgraph.restrict_adj","line":897,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">restrict_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G'' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict\">SimpleGraph.Subgraph.restrict</a> <span class=\"fn\">G''</span></span>)</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span> <span class=\"fn\">↑<span class=\"fn\">w</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.Adj</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span> <span class=\"fn\">↑<span class=\"fn\">w</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L892-L895","name":"SimpleGraph.Subgraph.coeSubgraph_adj","line":892,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeSubgraph_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G'' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">SimpleGraph.Subgraph.coeSubgraph</a> <span class=\"fn\">G''</span></span>)</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">hv</span> : <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>) (<span class=\"fn\">hw</span> : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.Adj</span> <span class=\"fn\">⟨<span class=\"fn\">v</span>, <span class=\"fn\">hv</span>⟩</span> <span class=\"fn\">⟨<span class=\"fn\">w</span>, <span class=\"fn\">hw</span>⟩</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L889-L890","name":"SimpleGraph.Subgraph.verts_coeSubgraph","line":889,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_coeSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_coeSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_coeSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G'' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">SimpleGraph.Subgraph.coeSubgraph</a> <span class=\"fn\">G''</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Subtype.val</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">G''</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L885-L886","name":"SimpleGraph.Subgraph.restrict","line":885,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict","doc":"Given a subgraph of `G`, restrict it to being a subgraph of another subgraph `G'` by\ntaking the portion of `G` that intersects `G'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">restrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L880-L881","name":"SimpleGraph.Subgraph.coeSubgraph","line":880,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph","doc":"Given a subgraph of a subgraph of `G`, construct a subgraph of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.Subgraph</span> → <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L861-L868","name":"SimpleGraph.support_subgraphOfAdj","line":861,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.support_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.support_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">support_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">h</span></span>)</span>.support</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">u</span>, <span class=\"fn\">v</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L856-L858","name":"SimpleGraph.singletonSubgraph_snd_le_subgraphOfAdj","line":856,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_snd_le_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_snd_le_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph_snd_le_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L852-L854","name":"SimpleGraph.singletonSubgraph_fst_le_subgraphOfAdj","line":852,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_fst_le_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_fst_le_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph_fst_le_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L847-L850","name":"SimpleGraph.neighborSet_subgraphOfAdj","line":847,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span>)</span>.neighborSet</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span> then <span class=\"fn\">{<span class=\"fn\">w</span>}</span> else <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></span> then <span class=\"fn\">{<span class=\"fn\">v</span>}</span> else <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L842-L845","name":"SimpleGraph.neighborSet_subgraphOfAdj_of_ne_of_ne","line":842,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj_of_ne_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj_of_ne_of_ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_subgraphOfAdj_of_ne_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hw : <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span>)</span>.neighborSet</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L836-L839","name":"SimpleGraph.neighborSet_snd_subgraphOfAdj","line":836,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_snd_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_snd_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_snd_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span>)</span>.neighborSet</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">v</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L829-L833","name":"SimpleGraph.neighborSet_fst_subgraphOfAdj","line":829,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_fst_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_fst_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_fst_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span>)</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">w</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L824-L826","name":"SimpleGraph.neighborSet_subgraphOfAdj_subset","line":824,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_subgraphOfAdj_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span>)</span>.neighborSet</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">{<span class=\"fn\">v</span>, <span class=\"fn\">w</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L803-L822","name":"SimpleGraph.map_subgraphOfAdj","line":803,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.map_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.map_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">map_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">SimpleGraph.Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.subgraphOfAdj</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L798-L800","name":"SimpleGraph.subgraphOfAdj_symm","line":798,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">subgraphOfAdj_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L790-L796","name":"SimpleGraph.subgraphOfAdj_le_of_adj","line":790,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_le_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_le_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">subgraphOfAdj_le_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L783-L788","name":"SimpleGraph.edgeSet_subgraphOfAdj","line":783,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.edgeSet_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.edgeSet_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edgeSet_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span>)</span>.edgeSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">s(<span class=\"fn\">v</span>, <span class=\"fn\">w</span>)</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L778-L780","name":"SimpleGraph.nonempty_subgraphOfAdj_verts","line":778,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.nonempty_subgraphOfAdj_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.nonempty_subgraphOfAdj_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">nonempty_subgraphOfAdj_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span>)</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L765-L776","name":"SimpleGraph.eq_singletonSubgraph_iff_verts_eq","line":765,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.eq_singletonSubgraph_iff_verts_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.eq_singletonSubgraph_iff_verts_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">eq_singletonSubgraph_iff_verts_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">v</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">v</span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L762-L763","name":"SimpleGraph.edgeSet_singletonSubgraph","line":762,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.edgeSet_singletonSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.edgeSet_singletonSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edgeSet_singletonSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">v</span></span>)</span>.edgeSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L758-L759","name":"SimpleGraph.neighborSet_singletonSubgraph","line":758,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_singletonSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_singletonSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_singletonSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">v</span></span>)</span>.neighborSet</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L750-L755","name":"SimpleGraph.map_singletonSubgraph","line":750,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.map_singletonSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.map_singletonSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">map_singletonSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">SimpleGraph.Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.singletonSubgraph</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L741-L747","name":"SimpleGraph.singletonSubgraph_le_iff","line":741,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_le_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L737-L738","name":"SimpleGraph.nonempty_singletonSubgraph_verts","line":737,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.nonempty_singletonSubgraph_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.nonempty_singletonSubgraph_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">nonempty_singletonSubgraph_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">v</span></span>)</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L723-L726","name":"SimpleGraph.Subgraph.degree_eq_one_iff_unique_adj","line":723,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_eq_one_iff_unique_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_eq_one_iff_unique_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">degree_eq_one_iff_unique_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.degree</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃! <span class=\"fn\">w</span> : <span class=\"fn\">V</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L718-L721","name":"SimpleGraph.Subgraph.degree_spanningCoe","line":718,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_spanningCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_spanningCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">degree_spanningCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.spanningCoe</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.spanningCoe</span>.degree</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.degree</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L712-L715","name":"SimpleGraph.Subgraph.coe_degree","line":712,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_degree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_degree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_degree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.degree</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.degree</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L707-L709","name":"SimpleGraph.Subgraph.degree_le'","line":707,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_le'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_le'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">degree_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G'' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G''</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.degree</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.degree</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L702-L705","name":"SimpleGraph.Subgraph.degree_le","line":702,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">degree_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.degree</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.degree</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L698-L700","name":"SimpleGraph.Subgraph.finset_card_neighborSet_eq_degree","line":698,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finset_card_neighborSet_eq_degree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finset_card_neighborSet_eq_degree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">finset_card_neighborSet_eq_degree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span>.toFinset</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.degree</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L695-L696","name":"SimpleGraph.Subgraph.degree","line":695,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree","doc":"The degree of a vertex in a subgraph. It's zero for vertices outside the subgraph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">degree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L689-L692","name":"SimpleGraph.Subgraph.IsSpanning.card_verts","line":689,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning.card_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning.card_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsSpanning</span>.<span class=\"name\">card_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">G'</span>.IsSpanning</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.verts</span>.toFinset</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">V</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L685-L687","name":"SimpleGraph.Subgraph.coeFiniteAt","line":685,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeFiniteAt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeFiniteAt\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeFiniteAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L681-L683","name":"SimpleGraph.Subgraph.instFintypeElemNeighborSetOfVertsOfDecidablePredMemSet","line":681,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instFintypeElemNeighborSetOfVertsOfDecidablePredMemSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instFintypeElemNeighborSetOfVertsOfDecidablePredMemSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instFintypeElemNeighborSetOfVertsOfDecidablePredMemSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L677-L679","name":"SimpleGraph.Subgraph.finiteAtOfSubgraph","line":677,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finiteAtOfSubgraph","doc":"If a subgraph is locally finite at a vertex, then so are subgraphs of that subgraph.\n\nThis is not an instance because `G''` cannot be inferred. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finiteAtOfSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">finiteAtOfSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G'' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G''</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.neighborSet</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L670-L672","name":"SimpleGraph.Subgraph.finiteAt","line":670,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finiteAt","doc":"If a graph is locally finite at a vertex, then so is a subgraph of that graph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finiteAt\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">finiteAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.neighborSet</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L665-L667","name":"SimpleGraph.Subgraph.neighborSet.decidablePred","line":665,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet.decidablePred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet.decidablePred\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet</span>.<span class=\"name\">decidablePred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L661-L663","name":"SimpleGraph.Subgraph.neighborSet_subset_of_subgraph","line":661,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset_of_subgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset_of_subgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_subset_of_subgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L658-L659","name":"SimpleGraph.Subgraph.spanningHom.injective","line":658,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom.injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom.injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningHom</span>.<span class=\"name\">injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">x</span>.spanningHom</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L654-L656","name":"SimpleGraph.Subgraph.spanningHom","line":654,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom","doc":"There is an induced injective homomorphism of a subgraph of `G` as\na spanning subgraph into `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.spanningCoe</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L653-L653","name":"SimpleGraph.Subgraph.spanningHom_apply","line":653,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom_apply\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.spanningHom</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L648-L649","name":"SimpleGraph.Subgraph.hom.injective","line":648,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom.injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom.injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">hom</span>.<span class=\"name\">injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">x</span>.hom</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L645-L646","name":"SimpleGraph.Subgraph.coe_hom","line":645,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_hom\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">x</span>.hom</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.verts</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L641-L643","name":"SimpleGraph.Subgraph.hom","line":641,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom","doc":"There is an induced injective homomorphism of a subgraph of `G` into `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.coe</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L640-L640","name":"SimpleGraph.Subgraph.hom_apply","line":640,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom_apply\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">hom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.hom</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L634-L637","name":"SimpleGraph.Subgraph.inclusion.injective","line":634,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion.injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion.injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">inclusion</span>.<span class=\"name\">injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion\">SimpleGraph.Subgraph.inclusion</a> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L630-L632","name":"SimpleGraph.Subgraph.inclusion","line":630,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion","doc":"Given two subgraphs, one a subgraph of the other, there is an induced injective homomorphism of\nthe subgraphs as graphs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">inclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.coe</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\"><span class=\"fn\">y</span>.coe</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L629-L629","name":"SimpleGraph.Subgraph.inclusion_apply_coe","line":629,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion_apply_coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">inclusion_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion\">SimpleGraph.Subgraph.inclusion</a> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L613-L625","name":"SimpleGraph.Subgraph.map_le_iff_le_comap","line":613,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_le_iff_le_comap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_le_iff_le_comap\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_le_iff_le_comap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H' : <span class=\"fn\"><span class=\"fn\">G'</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">SimpleGraph.Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\">SimpleGraph.Subgraph.comap</a> <span class=\"fn\">f</span> <span class=\"fn\">H'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L602-L611","name":"SimpleGraph.Subgraph.comap_monotone","line":602,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_monotone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_monotone\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">comap_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\">SimpleGraph.Subgraph.comap</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L595-L600","name":"SimpleGraph.Subgraph.comap","line":595,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap","doc":"Graph homomorphisms induce a contravariant function on subgraphs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">comap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G'</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L594-L594","name":"SimpleGraph.Subgraph.comap_verts","line":594,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">comap_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G'</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\">SimpleGraph.Subgraph.comap</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\"><span class=\"fn\">H</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L594-L594","name":"SimpleGraph.Subgraph.comap_adj","line":594,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">comap_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G'</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\">SimpleGraph.Subgraph.comap</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span>)</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.Adj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L579-L591","name":"SimpleGraph.Subgraph.map_sup","line":579,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_sup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">SimpleGraph.Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">H'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">SimpleGraph.Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">SimpleGraph.Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L569-L577","name":"SimpleGraph.Subgraph.map_monotone","line":569,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_monotone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_monotone\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">SimpleGraph.Subgraph.map</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L556-L567","name":"SimpleGraph.Subgraph.map","line":556,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map","doc":"Graph homomorphisms induce a covariant function on subgraphs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G'</span>.Subgraph</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L555-L555","name":"SimpleGraph.Subgraph.map_verts","line":555,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">SimpleGraph.Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">H</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L555-L555","name":"SimpleGraph.Subgraph.map_adj","line":555,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">a_1</span> : <span class=\"fn\">W</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">SimpleGraph.Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Map\">Relation.Map</a> <span class=\"fn\"><span class=\"fn\">H</span>.Adj</span> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L550-L552","name":"Disjoint.edgeSet","line":550,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#Disjoint.edgeSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#Disjoint.edgeSet\"><span class=\"name\">Disjoint</span>.<span class=\"name\">edgeSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H₁ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H₂ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">H₁</span> <span class=\"fn\">H₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\"><span class=\"fn\">H₁</span>.edgeSet</span> <span class=\"fn\"><span class=\"fn\">H₂</span>.edgeSet</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L547-L548","name":"SimpleGraph.Subgraph.edgeSet_mono","line":547,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H₁ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H₂ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">H₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H₁</span>.edgeSet</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">H₂</span>.edgeSet</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L540-L545","name":"SimpleGraph.Subgraph.botEquiv","line":540,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.botEquiv","doc":"The bottom of the `Subgraph G` lattice is equivalent to the empty graph on the empty\nvertex type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.botEquiv\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">botEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.coe</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso\">≃g</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L531-L536","name":"SimpleGraph.Subgraph.topEquiv","line":531,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.topEquiv","doc":"The top of the `Subgraph G` lattice is equivalent to the graph itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.topEquiv\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">topEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.coe</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L527-L528","name":"SimpleGraph.Subgraph.spanningCoe_le_of_le","line":527,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_le_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_le_of_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.spanningCoe</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">H'</span>.spanningCoe</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L523-L525","name":"SimpleGraph.toSubgraph.isSpanning","line":523,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph.isSpanning","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph.isSpanning\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">toSubgraph</span>.<span class=\"name\">isSpanning</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph\">SimpleGraph.toSubgraph</a> <span class=\"fn\">H</span> <span class=\"fn\">h</span></span>)</span>.IsSpanning</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L520-L521","name":"SimpleGraph.Subgraph.support_mono","line":520,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">support_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.support</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">H'</span>.support</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L513-L518","name":"SimpleGraph.toSubgraph","line":513,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph","doc":"Turn a subgraph of a `SimpleGraph` into a member of its subgraph type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L512-L512","name":"SimpleGraph.toSubgraph_verts","line":512,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">toSubgraph_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph\">SimpleGraph.toSubgraph</a> <span class=\"fn\">H</span> <span class=\"fn\">h</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L512-L512","name":"SimpleGraph.toSubgraph_adj","line":512,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">toSubgraph_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">a_1</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph\">SimpleGraph.toSubgraph</a> <span class=\"fn\">H</span> <span class=\"fn\">h</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L509-L509","name":"SimpleGraph.Subgraph.spanningCoe_bot","line":509,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.spanningCoe</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L506-L506","name":"SimpleGraph.Subgraph.spanningCoe_top","line":506,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.spanningCoe</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L501-L503","name":"SimpleGraph.Subgraph.edgeSet_iInf","line":501,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_iInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_iInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_iInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span>)</span>.edgeSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⋂ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.edgeSet</span></span>)</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">G</span>.edgeSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L497-L498","name":"SimpleGraph.Subgraph.edgeSet_iSup","line":497,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_iSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_iSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_iSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⨆ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span>)</span>.edgeSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.edgeSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L490-L494","name":"SimpleGraph.Subgraph.edgeSet_sInf","line":490,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_sInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">s</span></span>)</span>.edgeSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⋂ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">G'</span>.edgeSet</span></span>)</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">G</span>.edgeSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L484-L487","name":"SimpleGraph.Subgraph.edgeSet_sSup","line":484,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_sSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#SupSet.sSup\">sSup</a> <span class=\"fn\">s</span></span>)</span>.edgeSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">G'</span>.edgeSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L480-L481","name":"SimpleGraph.Subgraph.edgeSet_sup","line":480,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H₁ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H₂ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H₁</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">H₂</span></span>)</span>.edgeSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H₁</span>.edgeSet</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">H₂</span>.edgeSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L476-L477","name":"SimpleGraph.Subgraph.edgeSet_inf","line":476,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_inf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H₁ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H₂ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H₁</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">H₂</span></span>)</span>.edgeSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H₁</span>.edgeSet</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">H₂</span>.edgeSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L472-L473","name":"SimpleGraph.Subgraph.edgeSet_bot","line":472,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.edgeSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L469-L469","name":"SimpleGraph.Subgraph.edgeSet_top","line":469,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.edgeSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span>.edgeSet</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L465-L466","name":"SimpleGraph.Subgraph.neighborSet_iInf","line":465,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_iInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_iInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_iInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span>)</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⋂ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.neighborSet</span> <span class=\"fn\">v</span></span></span>)</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L461-L462","name":"SimpleGraph.Subgraph.neighborSet_iSup","line":461,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_iSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_iSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_iSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⨆ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span>)</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L455-L458","name":"SimpleGraph.Subgraph.neighborSet_sInf","line":455,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_sInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">s</span></span>)</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⋂ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span></span>)</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L449-L452","name":"SimpleGraph.Subgraph.neighborSet_sSup","line":449,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_sSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#SupSet.sSup\">sSup</a> <span class=\"fn\">s</span></span>)</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L446-L446","name":"SimpleGraph.Subgraph.neighborSet_bot","line":446,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L443-L443","name":"SimpleGraph.Subgraph.neighborSet_top","line":443,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L439-L440","name":"SimpleGraph.Subgraph.neighborSet_inf","line":439,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_inf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">H'</span></span>)</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H'</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L435-L436","name":"SimpleGraph.Subgraph.neighborSet_sup","line":435,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">H'</span></span>)</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H'</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L432-L432","name":"SimpleGraph.Subgraph.subgraphInhabited","line":432,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphInhabited\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">subgraphInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L431-L431","name":"SimpleGraph.Subgraph.subgraphInhabited_default","line":431,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphInhabited_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphInhabited_default\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">subgraphInhabited_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">default</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L429-L429","name":"SimpleGraph.Subgraph.verts_monotone","line":429,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_monotone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_monotone\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">SimpleGraph.Subgraph.verts</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L428-L428","name":"SimpleGraph.Subgraph.verts_mono","line":428,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.verts</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">H'</span>.verts</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L425-L426","name":"SimpleGraph.Subgraph.instCompletelyDistribLattice","line":425,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instCompletelyDistribLattice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instCompletelyDistribLattice\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instCompletelyDistribLattice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#CompletelyDistribLattice\">CompletelyDistribLattice</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L401-L423","name":"SimpleGraph.Subgraph.completelyDistribLatticeMinimalAxioms","line":401,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.completelyDistribLatticeMinimalAxioms","doc":"Note that subgraphs do not form a Boolean algebra, because of `verts`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.completelyDistribLatticeMinimalAxioms\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">completelyDistribLatticeMinimalAxioms</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#CompletelyDistribLattice.MinimalAxioms\">CompletelyDistribLattice.MinimalAxioms</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L394-L398","name":"SimpleGraph.Subgraph.instBoundedOrder","line":394,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instBoundedOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instBoundedOrder\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instBoundedOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L388-L392","name":"SimpleGraph.Subgraph.distribLattice","line":388,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.distribLattice","doc":"For subgraphs `G₁`, `G₂`, `G₁ ≤ G₂` iff `G₁.verts ⊆ G₂.verts` and\n`∀ a b, G₁.adj a b → G₂.adj a b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.distribLattice\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">distribLattice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L380-L384","name":"SimpleGraph.Subgraph.verts_spanningCoe_injective","line":380,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_spanningCoe_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_spanningCoe_injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_spanningCoe_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span>, <span class=\"fn\"><span class=\"fn\">G'</span>.spanningCoe</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L378-L378","name":"SimpleGraph.Subgraph.verts_iInf","line":378,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_iInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_iInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_iInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋂ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L375-L375","name":"SimpleGraph.Subgraph.verts_iSup","line":375,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_iSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_iSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_iSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⨆ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L371-L372","name":"SimpleGraph.Subgraph.verts_sInf","line":371,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_sInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">s</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋂ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L367-L368","name":"SimpleGraph.Subgraph.verts_sSup","line":367,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_sSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#SupSet.sSup\">sSup</a> <span class=\"fn\">s</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L361-L364","name":"SimpleGraph.Subgraph.iInf_adj_of_nonempty","line":361,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iInf_adj_of_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iInf_adj_of_nonempty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">iInf_adj_of_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L354-L359","name":"SimpleGraph.Subgraph.sInf_adj_of_nonempty","line":354,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sInf_adj_of_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sInf_adj_of_nonempty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">sInf_adj_of_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">s</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L351-L352","name":"SimpleGraph.Subgraph.iInf_adj","line":351,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iInf_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iInf_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">iInf_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L347-L348","name":"SimpleGraph.Subgraph.iSup_adj","line":347,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iSup_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iSup_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">iSup_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⨆ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L343-L344","name":"SimpleGraph.Subgraph.sInf_adj","line":343,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sInf_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sInf_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">sInf_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">s</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L339-L340","name":"SimpleGraph.Subgraph.sSup_adj","line":339,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sSup_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sSup_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">sSup_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#SupSet.sSup\">sSup</a> <span class=\"fn\">s</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">G_1</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G_1</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L335-L336","name":"SimpleGraph.Subgraph.verts_bot","line":335,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L331-L332","name":"SimpleGraph.Subgraph.verts_top","line":331,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L327-L328","name":"SimpleGraph.Subgraph.verts_inf","line":327,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_inf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G₁ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G₂ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G₁</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">G₂</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₁</span>.verts</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">G₂</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L323-L324","name":"SimpleGraph.Subgraph.verts_sup","line":323,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G₁ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G₂ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G₁</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">G₂</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₁</span>.verts</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">G₂</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L319-L320","name":"SimpleGraph.Subgraph.not_bot_adj","line":319,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.not_bot_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.not_bot_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">not_bot_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L315-L316","name":"SimpleGraph.Subgraph.top_adj","line":315,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.top_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.top_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">top_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L311-L312","name":"SimpleGraph.Subgraph.inf_adj","line":311,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inf_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inf_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">inf_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₁ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₂ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G₁</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">G₂</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₁</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₂</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L307-L308","name":"SimpleGraph.Subgraph.sup_adj","line":307,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sup_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sup_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">sup_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₁ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₂ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G₁</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">G₂</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₁</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₂</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L298-L304","name":"SimpleGraph.Subgraph.instInfSet","line":298,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instInfSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instInfSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instInfSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#InfSet\">InfSet</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L286-L296","name":"SimpleGraph.Subgraph.instSupSet","line":286,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instSupSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instSupSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instSupSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#SupSet\">SupSet</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L278-L284","name":"SimpleGraph.Subgraph.instBot","line":278,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instBot","doc":"The `bot` subgraph is the subgraph with no vertices or edges. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instBot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot\">Bot</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L269-L275","name":"SimpleGraph.Subgraph.instTop","line":269,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instTop","doc":"The `top` subgraph is `G` as a subgraph of itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instTop\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top\">Top</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L260-L266","name":"SimpleGraph.Subgraph.instInf","line":260,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instInf","doc":"The intersection of two subgraphs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Inf\">Inf</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L251-L257","name":"SimpleGraph.Subgraph.instSup","line":251,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instSup","doc":"The union of two subgraphs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Sup\">Sup</a> <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L246-L248","name":"SimpleGraph.Subgraph.copy_eq","line":246,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.copy_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.copy_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">copy_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(V'' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><span class=\"fn\">V''</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(adj' : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hadj : <span class=\"fn\"><span class=\"fn\">adj'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.copy</span> <span class=\"fn\">V''</span> <span class=\"fn\">hV</span> <span class=\"fn\">adj'</span> <span class=\"fn\">hadj</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L238-L244","name":"SimpleGraph.Subgraph.copy","line":238,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.copy","doc":"Create an equal copy of a subgraph (see `copy_eq`) with possibly different definitional equalities.\nSee Note [range copy pattern].\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.copy\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(V'' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><span class=\"fn\">V''</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(adj' : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hadj : <span class=\"fn\"><span class=\"fn\">adj'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L232-L232","name":"SimpleGraph.Subgraph.vert","line":232,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.vert","doc":"Give a vertex as an element of the subgraph's vertex type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.vert\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">vert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L228-L229","name":"SimpleGraph.Subgraph.incidenceSet_subset","line":228,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">incidenceSet_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.incidenceSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">G'</span>.edgeSet</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L224-L226","name":"SimpleGraph.Subgraph.incidenceSet_subset_incidenceSet","line":224,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet_subset_incidenceSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet_subset_incidenceSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">incidenceSet_subset_incidenceSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.incidenceSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.incidenceSet</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L222-L222","name":"SimpleGraph.Subgraph.incidenceSet","line":222,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet","doc":"The `incidenceSet` is the set of edges incident to a given vertex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">incidenceSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L214-L219","name":"SimpleGraph.Subgraph.mem_verts_if_mem_edge","line":214,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_verts_if_mem_edge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_verts_if_mem_edge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mem_verts_if_mem_edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(he : <span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.edgeSet</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">e</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L212-L212","name":"SimpleGraph.Subgraph.mem_edgeSet","line":212,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_edgeSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_edgeSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mem_edgeSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s(<span class=\"fn\">v</span>, <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.edgeSet</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L208-L209","name":"SimpleGraph.Subgraph.edgeSet_subset","line":208,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.edgeSet</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">G</span>.edgeSet</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L206-L206","name":"SimpleGraph.Subgraph.edgeSet","line":206,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet","doc":"The edge set of `G'` consists of a subset of edges of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L198-L203","name":"SimpleGraph.Subgraph.coeNeighborSetEquiv","line":198,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeNeighborSetEquiv","doc":"A subgraph as a graph has equivalent neighbor sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeNeighborSetEquiv\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeNeighborSetEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.neighborSet</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L195-L195","name":"SimpleGraph.Subgraph.mem_neighborSet","line":195,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_neighborSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_neighborSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mem_neighborSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L191-L192","name":"SimpleGraph.Subgraph.neighborSet_subset_verts","line":191,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_subset_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L188-L189","name":"SimpleGraph.Subgraph.neighborSet_subset","line":188,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.neighborSet</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.neighborSet</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L186-L186","name":"SimpleGraph.Subgraph.neighborSet","line":186,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet","doc":"`G'.neighborSet v` is the set of vertices adjacent to `v` in `G'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L182-L183","name":"SimpleGraph.Subgraph.support_subset_verts","line":182,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support_subset_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support_subset_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">support_subset_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.support</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">H</span>.verts</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L180-L180","name":"SimpleGraph.Subgraph.mem_support","line":180,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_support","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_support\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mem_support</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.support</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">w</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L178-L178","name":"SimpleGraph.Subgraph.support","line":178,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support","doc":"`H.support` is the set of vertices that form edges in the subgraph `H`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">support</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L174-L175","name":"SimpleGraph.Subgraph.IsInduced","line":174,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced","doc":"A subgraph is called an *induced subgraph* if vertices of `G'` are adjacent if\nthey are adjacent in `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsInduced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L164-L170","name":"SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning","line":164,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning","doc":"`spanningCoe` is equivalent to `coe` for a subgraph that `IsSpanning`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoeEquivCoeOfSpanning</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">G'</span>.IsSpanning</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.spanningCoe</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\"><span class=\"fn\">G'</span>.coe</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L163-L163","name":"SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_symm_apply","line":163,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_symm_apply\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoeEquivCoeOfSpanning_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">G'</span>.IsSpanning</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/RelIso/Basic.html#RelIso.symm\">RelIso.symm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.spanningCoeEquivCoeOfSpanning</span> <span class=\"fn\">h</span></span>)</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L163-L163","name":"SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_apply_coe","line":163,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_apply_coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoeEquivCoeOfSpanning_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">G'</span>.IsSpanning</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.spanningCoeEquivCoeOfSpanning</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L159-L160","name":"SimpleGraph.Subgraph.spanningCoe_inj","line":159,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_inj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₁ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₂ : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₁</span>.spanningCoe</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G₂</span>.spanningCoe</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₁</span>.Adj</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G₂</span>.Adj</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L155-L157","name":"SimpleGraph.Subgraph.Adj.of_spanningCoe","line":155,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.of_spanningCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.of_spanningCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">of_spanningCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.spanningCoe</span>.Adj</span> <span class=\"fn\">↑<span class=\"fn\">u</span></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">↑<span class=\"fn\">u</span></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L149-L152","name":"SimpleGraph.Subgraph.spanningCoe","line":149,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe","doc":"Coercion from `Subgraph G` to `SimpleGraph V`.  If `G'` is a spanning\nsubgraph, then `G'.spanningCoe` yields an isomorphic graph.\nIn general, this adds in all vertices from `V` as isolated vertices. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L148-L148","name":"SimpleGraph.Subgraph.spanningCoe_adj","line":148,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">a_1</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.spanningCoe</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L143-L143","name":"SimpleGraph.Subgraph.IsSpanning.verts_eq_univ","line":143,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning.verts_eq_univ","doc":"**Alias** of the forward direction of `SimpleGraph.Subgraph.isSpanning_iff`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning.verts_eq_univ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsSpanning</span>.<span class=\"name\">verts_eq_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.IsSpanning</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L140-L141","name":"SimpleGraph.Subgraph.isSpanning_iff","line":140,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.isSpanning_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.isSpanning_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">isSpanning_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.IsSpanning</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L137-L138","name":"SimpleGraph.Subgraph.IsSpanning","line":137,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning","doc":"A subgraph is called a *spanning subgraph* if it contains all the vertices of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsSpanning</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L133-L134","name":"SimpleGraph.Subgraph.Adj.coe","line":133,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.coe</span>.Adj</span> <span class=\"fn\">⟨<span class=\"fn\">u</span>, <span class=\"fn\">⋯</span>⟩</span> <span class=\"fn\">⟨<span class=\"fn\">v</span>, <span class=\"fn\">⋯</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L129-L130","name":"SimpleGraph.Subgraph.coe_adj_sub","line":129,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_adj_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_adj_sub\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_adj_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">↑<span class=\"fn\">u</span></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L123-L126","name":"SimpleGraph.Subgraph.coe","line":123,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe","doc":"Coercion from `G' : Subgraph G` to a `SimpleGraph G'.verts`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L122-L122","name":"SimpleGraph.Subgraph.coe_adj","line":122,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.coe</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span> <span class=\"fn\">↑<span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L118-L119","name":"SimpleGraph.Subgraph.Adj.ne","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L115-L116","name":"SimpleGraph.Subgraph.Adj.snd_mem","line":115,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.snd_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.snd_mem\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">snd_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.verts</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L112-L113","name":"SimpleGraph.Subgraph.Adj.fst_mem","line":112,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.fst_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.fst_mem\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">fst_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.verts</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L109-L110","name":"SimpleGraph.Subgraph.Adj.adj_sub","line":109,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.adj_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.adj_sub\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">adj_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L106-L107","name":"SimpleGraph.Subgraph.Adj.symm","line":106,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L103-L104","name":"SimpleGraph.Subgraph.adj_symm","line":103,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">adj_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L99-L100","name":"SimpleGraph.Subgraph.adj_comm","line":99,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_comm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">adj_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span> <span class=\"fn\">w</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L96-L97","name":"SimpleGraph.Subgraph.loopless","line":96,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.loopless","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.loopless\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">loopless</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Irreflexive\">Irreflexive</a> <span class=\"fn\"><span class=\"fn\">G'</span>.Adj</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L81-L90","name":"SimpleGraph.subgraphOfAdj","line":81,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj","doc":"The one-edge subgraph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L80-L80","name":"SimpleGraph.subgraphOfAdj_adj","line":80,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">subgraphOfAdj_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s(<span class=\"fn\">v</span>, <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L80-L80","name":"SimpleGraph.subgraphOfAdj_verts","line":80,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">subgraphOfAdj_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.subgraphOfAdj</span> <span class=\"fn\">hvw</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">v</span>, <span class=\"fn\">w</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L72-L77","name":"SimpleGraph.singletonSubgraph","line":72,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph","doc":"The one-vertex subgraph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L71-L71","name":"SimpleGraph.singletonSubgraph_verts","line":71,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">v</span></span>)</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">v</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L71-L71","name":"SimpleGraph.singletonSubgraph_adj","line":71,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">a_1</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.singletonSubgraph</span> <span class=\"fn\">v</span></span>)</span>.Adj</span> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L64-L64","name":"SimpleGraph.Subgraph.symm","line":64,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Symmetric\">Symmetric</a> <span class=\"fn\"><span class=\"fn\">self</span>.Adj</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L63-L63","name":"SimpleGraph.Subgraph.edge_vert","line":63,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edge_vert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edge_vert\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edge_vert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">self</span>.verts</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L62-L62","name":"SimpleGraph.Subgraph.adj_sub","line":62,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_sub\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">adj_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L61-L61","name":"SimpleGraph.Subgraph.Adj","line":61,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L60-L60","name":"SimpleGraph.Subgraph.verts","line":60,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L59-L59","name":"SimpleGraph.Subgraph.mk","line":59,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(verts : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Adj : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(adj_sub : <span class=\"fn\">∀ {<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(edge_vert : <span class=\"fn\">∀ {<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">verts</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(symm : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Symmetric\">Symmetric</a> <span class=\"fn\">Adj</span></span>)</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#_auto._@.Mathlib.Combinatorics.SimpleGraph.Subgraph._hyg.7\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L59-L64","name":"SimpleGraph.Subgraph","line":59,"kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph","doc":"A subgraph of a `SimpleGraph` is a subset of vertices along with a restriction of the adjacency\nrelation that is symmetric and is supported by the vertex subset.  They also form a bounded lattice.\n\nThinking of `V → V → Prop` as `Set (V × V)`, a set of darts (i.e., half-edges), then\n`Subgraph.adj_sub` is that the darts of a subgraph are a subset of the darts of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L58-L58","name":"SimpleGraph.Subgraph.ext_iff","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.ext_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.verts</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Adj</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.Adj</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L58-L58","name":"SimpleGraph.Subgraph.ext","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.ext\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">G</span>.Subgraph</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(verts : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.verts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Adj : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Adj</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.Adj</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"}]}