{"name":"Mathlib.Combinatorics.Young.YoungDiagram","instances":[{"typeNames":["YoungDiagram","Prod"],"name":"YoungDiagram.instSetLikeProdNat","className":"SetLike"},{"typeNames":[],"name":"YoungDiagram.decidableMem","className":"Decidable"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instSup","className":"Sup"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instInf","className":"Inf"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instOrderBot","className":"OrderBot"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instInhabited","className":"Inhabited"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instDistribLattice","className":"DistribLattice"}],"imports":["Init","Mathlib.Order.UpperLower.Basic","Mathlib.Data.Finset.Preimage"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L461-L465","name":"YoungDiagram.equivListRowLens","line":461,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens","doc":"Equivalence between Young diagrams and weakly decreasing lists of positive natural numbers.\nA Young diagram `μ` is equivalent to a list of row lengths. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">equivListRowLens</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> // <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L460-L460","name":"YoungDiagram.equivListRowLens_apply_coe","line":460,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_apply_coe\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">equivListRowLens_apply_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">YoungDiagram.equivListRowLens</span> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span>.rowLens</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L460-L460","name":"YoungDiagram.equivListRowLens_symm_apply","line":460,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_symm_apply\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">equivListRowLens_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ww : <span class=\"fn\">{ <span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> // <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens\">YoungDiagram.equivListRowLens</a>.symm</span> <span class=\"fn\">ww</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">↑<span class=\"fn\">ww</span></span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L453-L456","name":"YoungDiagram.rowLens_ofRowLens_eq_self","line":453,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_ofRowLens_eq_self","doc":"The right_inv direction of the equivalence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_ofRowLens_eq_self\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens_ofRowLens_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hw : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hpos : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span>)</span>.rowLens</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L447-L450","name":"YoungDiagram.ofRowLens_to_rowLens_eq_self","line":447,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens_to_rowLens_eq_self","doc":"The left_inv direction of the equivalence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens_to_rowLens_eq_self\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ofRowLens_to_rowLens_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\"><span class=\"fn\">μ</span>.rowLens</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L442-L444","name":"YoungDiagram.rowLen_ofRowLens","line":442,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_ofRowLens","doc":"The length of the `i`th row in `ofRowLens w hw` is the `i`th entry of `w` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_ofRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hw : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">w</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span>)</span>.rowLen</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.get</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L435-L439","name":"YoungDiagram.rowLens_length_ofRowLens","line":435,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_length_ofRowLens","doc":"The number of rows in `ofRowLens w hw` is the length of `w` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_length_ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens_length_ofRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hw : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hpos : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span>)</span>.rowLens</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">w</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L430-L432","name":"YoungDiagram.mem_ofRowLens","line":430,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_ofRowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_ofRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hw : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">w</span>.length</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.get</span> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">c</span>.1</span>, <span class=\"fn\">h</span>⟩</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L415-L428","name":"YoungDiagram.ofRowLens","line":415,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens","doc":"Young diagram from a sorted list "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ofRowLens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hw : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L405-L412","name":"YoungDiagram.mem_cellsOfRowLens","line":405,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cellsOfRowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cellsOfRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_cellsOfRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cellsOfRowLens\">YoungDiagram.cellsOfRowLens</a> <span class=\"fn\">w</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">w</span>.length</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.get</span> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">c</span>.1</span>, <span class=\"fn\">h</span>⟩</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L398-L403","name":"YoungDiagram.cellsOfRowLens","line":398,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cellsOfRowLens","doc":"The cells making up a `YoungDiagram` from a list of row lengths "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cellsOfRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cellsOfRowLens</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L376-L379","name":"YoungDiagram.pos_of_mem_rowLens","line":376,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.pos_of_mem_rowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.pos_of_mem_rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">pos_of_mem_rowLens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span>.rowLens</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L373-L374","name":"YoungDiagram.rowLens_sorted","line":373,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_sorted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_sorted\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens_sorted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">μ</span>.rowLens</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L370-L371","name":"YoungDiagram.length_rowLens","line":370,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.length_rowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.length_rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">length_rowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.rowLens</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.colLen</span> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L366-L367","name":"YoungDiagram.get_rowLens","line":366,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.get_rowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.get_rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">get_rowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.rowLens</span>.length</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.rowLens</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.rowLen</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L362-L363","name":"YoungDiagram.rowLens","line":362,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens","doc":"List of row lengths of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L345-L346","name":"YoungDiagram.colLen_anti","line":345,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_anti","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_anti\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen_anti</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\"><span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.colLen</span> <span class=\"fn\">j2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.colLen</span> <span class=\"fn\">j1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L341-L342","name":"YoungDiagram.colLen_eq_card","line":341,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_eq_card\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen_eq_card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.colLen</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.col</span> <span class=\"fn\">j</span></span>)</span>.card</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L334-L339","name":"YoungDiagram.col_eq_prod","line":334,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col_eq_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col_eq_prod\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">col_eq_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.col</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.colLen</span> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">{<span class=\"fn\">j</span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L330-L332","name":"YoungDiagram.mem_iff_lt_colLen","line":330,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_colLen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_colLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_iff_lt_colLen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.colLen</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L327-L328","name":"YoungDiagram.rowLen_transpose","line":327,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span>.rowLen</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.colLen</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L323-L324","name":"YoungDiagram.colLen_transpose","line":323,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen_transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span>.colLen</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.rowLen</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L319-L320","name":"YoungDiagram.colLen","line":319,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen","doc":"Length of a column of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L314-L316","name":"YoungDiagram.exists_not_mem_col","line":314,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_col","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_col\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">exists_not_mem_col</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> ∉ <span class=\"fn\"><span class=\"fn\">μ</span>.cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L312-L312","name":"YoungDiagram.mk_mem_col_iff","line":312,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_col_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_col_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mk_mem_col_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.col</span> <span class=\"fn\">j</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L309-L310","name":"YoungDiagram.mem_col_iff","line":309,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_col_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_col_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_col_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.col</span> <span class=\"fn\">j</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L306-L307","name":"YoungDiagram.col","line":306,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col","doc":"The `j`-th column of a Young diagram consists of the cells whose second coordinate is `j`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">col</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L290-L294","name":"YoungDiagram.rowLen_anti","line":290,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_anti","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_anti\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_anti</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.rowLen</span> <span class=\"fn\">i2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.rowLen</span> <span class=\"fn\">i1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L286-L287","name":"YoungDiagram.rowLen_eq_card","line":286,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_eq_card\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_eq_card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.rowLen</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.row</span> <span class=\"fn\">i</span></span>)</span>.card</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L279-L284","name":"YoungDiagram.row_eq_prod","line":279,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row_eq_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row_eq_prod\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">row_eq_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.row</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">i</span>}</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.rowLen</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L274-L277","name":"YoungDiagram.mem_iff_lt_rowLen","line":274,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_rowLen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_rowLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_iff_lt_rowLen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.rowLen</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L271-L272","name":"YoungDiagram.rowLen","line":271,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen","doc":"Length of a row of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L261-L268","name":"YoungDiagram.exists_not_mem_row","line":261,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_row","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_row\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">exists_not_mem_row</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> ∉ <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L259-L259","name":"YoungDiagram.mk_mem_row_iff","line":259,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_row_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_row_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mk_mem_row_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.row</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L256-L257","name":"YoungDiagram.mem_row_iff","line":256,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_row_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_row_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_row_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.row</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L253-L254","name":"YoungDiagram.row","line":253,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row","doc":"The `i`-th row of a Young diagram consists of the cells whose first coordinate is `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">row</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L233-L234","name":"YoungDiagram.transposeOrderIso","line":233,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso","doc":"Transposing Young diagrams is an `OrderIso`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transposeOrderIso</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L232-L232","name":"YoungDiagram.transposeOrderIso_apply","line":232,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_apply\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transposeOrderIso_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">YoungDiagram.transposeOrderIso</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L232-L232","name":"YoungDiagram.transposeOrderIso_symm_apply","line":232,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_symm_apply\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transposeOrderIso_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/RelIso/Basic.html#RelIso.symm\">RelIso.symm</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso\">YoungDiagram.transposeOrderIso</a></span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L228-L229","name":"YoungDiagram.transpose_mono","line":228,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_mono\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h_le : <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">ν</span>.transpose</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L220-L225","name":"YoungDiagram.transpose_le_iff","line":220,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_le_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">ν</span>.transpose</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L213-L217","name":"YoungDiagram.le_of_transpose_le","line":213,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.le_of_transpose_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.le_of_transpose_le\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">le_of_transpose_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h_le : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">ν</span>.transpose</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L208-L210","name":"YoungDiagram.transpose_eq_iff","line":208,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ν</span>.transpose</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L202-L205","name":"YoungDiagram.transpose_eq_iff_eq_transpose","line":202,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff_eq_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff_eq_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_eq_iff_eq_transpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ν</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ν</span>.transpose</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L198-L200","name":"YoungDiagram.transpose_transpose","line":198,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span>.transpose</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L194-L195","name":"YoungDiagram.mem_transpose","line":194,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_transpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span>.transpose</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.swap</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L185-L191","name":"YoungDiagram.transpose","line":185,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose","doc":"The `transpose` of a Young diagram is obtained by swapping i's with j's. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L179-L180","name":"YoungDiagram.card","line":179,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.card","doc":"Cardinality of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.card\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L172-L174","name":"YoungDiagram.instDistribLattice","line":172,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instDistribLattice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instDistribLattice\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instDistribLattice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L169-L170","name":"YoungDiagram.instInhabited","line":169,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instInhabited\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L166-L167","name":"YoungDiagram.not_mem_bot","line":166,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.not_mem_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.not_mem_bot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">not_mem_bot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L158-L163","name":"YoungDiagram.coe_bot","line":158,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_bot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">coe_bot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.cells</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L152-L153","name":"YoungDiagram.cells_bot","line":152,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_bot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_bot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.cells</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L140-L149","name":"YoungDiagram.instOrderBot","line":140,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instOrderBot","doc":"The empty Young diagram is (⊥ : young_diagram). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instOrderBot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instOrderBot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#OrderBot\">OrderBot</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L136-L137","name":"YoungDiagram.mem_inf","line":136,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_inf\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">ν</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ν</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L132-L133","name":"YoungDiagram.coe_inf","line":132,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_inf\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">coe_inf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">ν</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">↑<span class=\"fn\">ν</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L128-L129","name":"YoungDiagram.cells_inf","line":128,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_inf\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_inf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">ν</span></span>)</span>.cells</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.cells</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">ν</span>.cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L120-L125","name":"YoungDiagram.instInf","line":120,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instInf\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instInf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Inf\">Inf</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L117-L118","name":"YoungDiagram.mem_sup","line":117,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_sup\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">ν</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ν</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L113-L114","name":"YoungDiagram.coe_sup","line":113,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_sup\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">coe_sup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">ν</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">↑<span class=\"fn\">ν</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L109-L110","name":"YoungDiagram.cells_sup","line":109,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_sup\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_sup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">ν</span></span>)</span>.cells</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.cells</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">ν</span>.cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L101-L106","name":"YoungDiagram.instSup","line":101,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instSup\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instSup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Sup\">Sup</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L98-L99","name":"YoungDiagram.cells_ssubset_iff","line":98,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_ssubset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_ssubset_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_ssubset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.cells</span> <a href=\"./Init/Core.html#HasSSubset.SSubset\">⊂</a> <span class=\"fn\"><span class=\"fn\">ν</span>.cells</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L94-L95","name":"YoungDiagram.cells_subset_iff","line":94,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_subset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_subset_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_subset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.cells</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">ν</span>.cells</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L87-L89","name":"YoungDiagram.up_left_mem","line":87,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.up_left_mem","doc":"In \"English notation\", a Young diagram is drawn so that (i1, j1) ≤ (i2, j2)\nmeans (i1, j1) is weakly up-and-left of (i2, j2). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.up_left_mem\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">up_left_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\"><span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcell : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i2</span>, <span class=\"fn\">j2</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i1</span>, <span class=\"fn\">j1</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L82-L83","name":"YoungDiagram.decidableMem","line":82,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.decidableMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.decidableMem\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">decidableMem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L78-L80","name":"YoungDiagram.mem_mk","line":78,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_mk\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cells : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isLowerSet : <span class=\"fn\"><a href=\"./Mathlib/Order/UpperLower/Basic.html#IsLowerSet\">IsLowerSet</a> <span class=\"fn\">↑<span class=\"fn\">cells</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">{ <span class=\"fn\">cells</span> := <span class=\"fn\">cells</span>, <span class=\"fn\">isLowerSet</span> := <span class=\"fn\">isLowerSet</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L74-L75","name":"YoungDiagram.mem_cells","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cells","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cells\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_cells</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span>.cells</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L68-L71","name":"YoungDiagram.instSetLikeProdNat","line":68,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instSetLikeProdNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instSetLikeProdNat\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instSetLikeProdNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/SetLike/Basic.html#SetLike\">SetLike</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L64-L64","name":"YoungDiagram.isLowerSet","line":64,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.isLowerSet","doc":"Cells are up-left justified, witnessed by the fact that `cells` is a lower set in `ℕ × ℕ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.isLowerSet\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">isLowerSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/UpperLower/Basic.html#IsLowerSet\">IsLowerSet</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L62-L62","name":"YoungDiagram.cells","line":62,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells","doc":"A finite set which represents a finite collection of cells on the `ℕ × ℕ` grid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L60-L60","name":"YoungDiagram.mk","line":60,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cells : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isLowerSet : <span class=\"fn\"><a href=\"./Mathlib/Order/UpperLower/Basic.html#IsLowerSet\">IsLowerSet</a> <span class=\"fn\">↑<span class=\"fn\">cells</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L60-L64","name":"YoungDiagram","line":60,"kind":"structure","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram","doc":"A Young diagram is a finite collection of cells on the `ℕ × ℕ` grid such that whenever\na cell is present, so are all the ones above and to the left of it. Like matrices, an `(i, j)` cell\nis a cell in row `i` and column `j`, where rows are enumerated downward and columns rightward.\n\nYoung diagrams are modeled as finite sets in `ℕ × ℕ` that are lower sets with respect to the\nstandard order on products. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\"><span class=\"name\">YoungDiagram</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L59-L59","name":"YoungDiagram.ext_iff","line":59,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.cells</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Combinatorics/Young/YoungDiagram.lean#L59-L59","name":"YoungDiagram.ext","line":59,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cells : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.cells</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.cells</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"}]}