{"name":"Mathlib.Computability.AkraBazzi.GrowsPolynomially","instances":[],"imports":["Init","Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","Mathlib.Analysis.SpecialFunctions.Pow.Real","Mathlib.Order.Filter.EventuallyConst","Mathlib.Algebra.Order.ToIntervalMod","Mathlib.Analysis.SpecialFunctions.Log.Base"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L718-L720","name":"AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent_const","line":718,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent_const\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">of_isEquivalent_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Asymptotics/AsymptoticEquivalent.html#Asymptotics.IsEquivalent\">Asymptotics.IsEquivalent</a> <span class=\"fn\">Filter.atTop</span> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L712-L716","name":"AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent","line":712,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">of_isEquivalent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Asymptotics/AsymptoticEquivalent.html#Asymptotics.IsEquivalent\">Asymptotics.IsEquivalent</a> <span class=\"fn\">Filter.atTop</span> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L664-L710","name":"AkraBazziRecurrence.GrowsPolynomially.of_isTheta","line":664,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isTheta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isTheta\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">of_isTheta</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Analysis/Asymptotics/Theta.html#Asymptotics.IsTheta\">=Θ[</a><span class=\"fn\">Filter.atTop</span><a href=\"./Mathlib/Analysis/Asymptotics/Theta.html#Asymptotics.IsTheta\">]</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf' : <span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L635-L662","name":"AkraBazziRecurrence.growsPolynomially_log","line":635,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_log","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_log\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_log</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <a href=\"./Mathlib/Analysis/SpecialFunctions/Log/Basic.html#Real.log\">Real.log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L632-L633","name":"AkraBazziRecurrence.growsPolynomially_zpow","line":632,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_zpow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_zpow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_zpow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L629-L630","name":"AkraBazziRecurrence.growsPolynomially_pow","line":629,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_pow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L626-L627","name":"AkraBazziRecurrence.growsPolynomially_rpow","line":626,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_rpow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_rpow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_rpow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L621-L624","name":"AkraBazziRecurrence.GrowsPolynomially.zpow","line":621,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.zpow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.zpow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">zpow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf_nonneg : <span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L616-L619","name":"AkraBazziRecurrence.GrowsPolynomially.pow","line":616,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.pow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf_nonneg : <span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L564-L614","name":"AkraBazziRecurrence.GrowsPolynomially.rpow","line":564,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.rpow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.rpow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">rpow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf_nonneg : <span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L558-L562","name":"AkraBazziRecurrence.GrowsPolynomially.div","line":558,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.div\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L509-L556","name":"AkraBazziRecurrence.GrowsPolynomially.inv","line":509,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.inv\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L403-L507","name":"AkraBazziRecurrence.GrowsPolynomially.add_isLittleO","line":403,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.add_isLittleO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.add_isLittleO\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">add_isLittleO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hfg : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Analysis/Asymptotics/Asymptotics.html#Asymptotics.IsLittleO\">=o[</a><span class=\"fn\">Filter.atTop</span><a href=\"./Mathlib/Analysis/Asymptotics/Asymptotics.html#Asymptotics.IsLittleO\">]</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L363-L401","name":"AkraBazziRecurrence.GrowsPolynomially.add","line":363,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.add\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf' : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\">Filter.atTop</span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg' : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\">Filter.atTop</span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L359-L361","name":"AkraBazziRecurrence.GrowsPolynomially.const_mul","line":359,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.const_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.const_mul\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">const_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L305-L357","name":"AkraBazziRecurrence.GrowsPolynomially.mul","line":305,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.mul\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L297-L303","name":"AkraBazziRecurrence.growsPolynomially_id","line":297,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_id\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_id</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L292-L295","name":"AkraBazziRecurrence.growsPolynomially_const","line":292,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_const\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L284-L286","name":"AkraBazziRecurrence.GrowsPolynomially.norm","line":284,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.norm\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L268-L282","name":"AkraBazziRecurrence.GrowsPolynomially.abs","line":268,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.abs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.abs\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">|<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>|</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L265-L266","name":"AkraBazziRecurrence.GrowsPolynomially.neg_iff","line":265,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.neg_iff\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L256-L263","name":"AkraBazziRecurrence.GrowsPolynomially.neg","line":256,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.neg\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L237-L254","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_zero_or_pos_or_neg","line":237,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_zero_or_pos_or_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_zero_or_pos_or_neg\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_zero_or_pos_or_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L154-L235","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_nonneg_or_nonpos","line":154,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_nonneg_or_nonpos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_nonneg_or_nonpos\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_nonneg_or_nonpos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L86-L152","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_zero_of_frequently_zero","line":86,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_zero_of_frequently_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_zero_of_frequently_zero\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_zero_of_frequently_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf' : <span class=\"fn\">∃ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L81-L84","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge_nat","line":81,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge_nat\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_ge_nat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ c &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∀ᶠ (n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">u</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L74-L79","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge","line":74,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ c &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">u</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L69-L72","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le_nat","line":69,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le_nat\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_le_nat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ c &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∀ᶠ (n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L62-L67","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le","line":62,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ c &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∀ᶠ (x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) in <span class=\"fn\">Filter.atTop</span>, <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L56-L58","name":"AkraBazziRecurrence.GrowsPolynomially.iff_eventuallyEq","line":56,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.iff_eventuallyEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.iff_eventuallyEq\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">iff_eventuallyEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\">Filter.atTop</span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L44-L54","name":"AkraBazziRecurrence.GrowsPolynomially.congr_of_eventuallyEq","line":44,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.congr_of_eventuallyEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.congr_of_eventuallyEq\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">congr_of_eventuallyEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hfg : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\">Filter.atTop</span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">AkraBazziRecurrence.GrowsPolynomially</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L38-L40","name":"AkraBazziRecurrence.GrowsPolynomially","line":38,"kind":"def","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially","doc":"The growth condition that the function `g` must satisfy for the Akra-Bazzi theorem to apply.\nIt roughly states that `c₁ g(n) ≤ g(u) ≤ c₂ g(n)`, for `u` between `b*n` and `n` for any\nconstant `b ∈ (0,1)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}