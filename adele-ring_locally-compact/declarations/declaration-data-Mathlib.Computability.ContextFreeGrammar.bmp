{"name":"Mathlib.Computability.ContextFreeGrammar","instances":[],"imports":["Init","Mathlib.Computability.Language"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L251-L253","name":"Language.IsContextFree.reverse","line":251,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#Language.IsContextFree.reverse","doc":"The class of context-free languages is closed under reversal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#Language.IsContextFree.reverse\"><span class=\"name\">Language</span>.<span class=\"name\">IsContextFree</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Language\">Language</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.IsContextFree</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.reverse</span>.IsContextFree</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L242-L248","name":"ContextFreeGrammar.mem_reverse_language_iff_reverse_mem_language","line":242,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.mem_reverse_language_iff_reverse_mem_language","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.mem_reverse_language_iff_reverse_mem_language\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">mem_reverse_language_iff_reverse_mem_language</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.reverse</span>.language</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.reverse</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">g</span>.language</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L236-L240","name":"ContextFreeGrammar.reverse_mem_language_of_mem_reverse_language","line":236,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.reverse_mem_language_of_mem_reverse_language","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.reverse_mem_language_of_mem_reverse_language\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">reverse_mem_language_of_mem_reverse_language</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hgw : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.reverse</span>.language</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.reverse</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">g</span>.language</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L218-L234","name":"ContextFreeGrammar.reverse_derives","line":218,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.reverse_derives","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.reverse_derives\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">reverse_derives</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hgs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.reverse</span>.Derives</span> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol.nonterminal\">Symbol.nonterminal</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.reverse</span>.initial</span></span>]</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol.nonterminal\">Symbol.nonterminal</a> <span class=\"fn\"><span class=\"fn\">g</span>.initial</span></span>]</span> <span class=\"fn\"><span class=\"fn\">s</span>.reverse</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L213-L216","name":"ContextFreeGrammar.reverse_involutive","line":213,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.reverse_involutive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.reverse_involutive\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">reverse_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">ContextFreeGrammar.reverse</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L208-L211","name":"ContextFreeRule.reverse_involutive","line":208,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.reverse_involutive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.reverse_involutive\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">reverse_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">ContextFreeRule.reverse</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L205-L206","name":"ContextFreeGrammar.reverse","line":205,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.reverse","doc":"Grammar for a reversed language. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.reverse\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L201-L202","name":"ContextFreeRule.reverse","line":201,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.reverse","doc":"Rules for a grammar for a reversed language. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.reverse\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L195-L196","name":"Language.IsContextFree","line":195,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#Language.IsContextFree","doc":"Context-free languages are defined by context-free grammars. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#Language.IsContextFree\"><span class=\"name\">Language</span>.<span class=\"name\">IsContextFree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Language\">Language</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L185-L190","name":"ContextFreeGrammar.Derives.append_right","line":185,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.append_right","doc":"Add extra prefix to context-free deriving. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.append_right\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Derives</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L177-L182","name":"ContextFreeGrammar.Derives.append_left","line":177,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.append_left","doc":"Add extra prefix to context-free deriving. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.append_left\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Derives</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L171-L174","name":"ContextFreeGrammar.Produces.append_right","line":171,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Produces.append_right","doc":"Add extra postfix to context-free producing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Produces.append_right\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Produces</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Produces</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Produces</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L165-L168","name":"ContextFreeGrammar.Produces.append_left","line":165,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Produces.append_left","doc":"Add extra prefix to context-free producing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Produces.append_left\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Produces</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Produces</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Produces</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L160-L162","name":"ContextFreeGrammar.Derives.eq_or_tail","line":160,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.eq_or_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.eq_or_tail\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Derives</span>.<span class=\"name\">eq_or_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(huw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Produces</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L156-L158","name":"ContextFreeGrammar.Derives.eq_or_head","line":156,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.eq_or_head","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.eq_or_head\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Derives</span>.<span class=\"name\">eq_or_head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(huw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Produces</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L151-L154","name":"ContextFreeGrammar.Produces.trans_derives","line":151,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Produces.trans_derives","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Produces.trans_derives\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Produces</span>.<span class=\"name\">trans_derives</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(huv : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Produces</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L146-L149","name":"ContextFreeGrammar.Derives.trans_produces","line":146,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.trans_produces","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.trans_produces\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Derives</span>.<span class=\"name\">trans_produces</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(huv : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Produces</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L142-L144","name":"ContextFreeGrammar.Derives.trans","line":142,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.trans\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Derives</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(huv : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L138-L139","name":"ContextFreeGrammar.Produces.single","line":138,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Produces.single","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Produces.single\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Produces</span>.<span class=\"name\">single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Produces</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L135-L136","name":"ContextFreeGrammar.Derives.refl","line":135,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives.refl\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Derives</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">w</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L128-L130","name":"ContextFreeGrammar.mem_language_iff","line":128,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.mem_language_iff","doc":"A given word `w` belongs to the language generated by a given context-free grammar `g` iff\n`g` can derive the word `w` (wrapped as a string) from the initial nonterminal of `g` in some\nnumber of steps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.mem_language_iff\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">mem_language_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">g</span>.language</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.Derives</span> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol.nonterminal\">Symbol.nonterminal</a> <span class=\"fn\"><span class=\"fn\">g</span>.initial</span></span>]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Symbol.terminal</span> <span class=\"fn\">w</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L121-L122","name":"ContextFreeGrammar.language","line":121,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.language","doc":"The language (set of words) that can be generated by a given context-free grammar `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.language\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">language</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Language\">Language</a> <span class=\"fn\">T</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L117-L118","name":"ContextFreeGrammar.Generates","line":117,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Generates","doc":"Given a context-free grammar `g` and a string `s`\n`g.Generates s` means that `g` can transform its initial nonterminal to `s` in some number of\nrewriting steps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Generates\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Generates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L110-L112","name":"ContextFreeGrammar.Derives","line":110,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives","doc":"Given a context-free grammar `g` and strings `u` and `v`\n`g.Derives u v` means that `g` can transform `u` to `v` in some number of rewriting steps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Derives\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Derives</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L105-L106","name":"ContextFreeGrammar.Produces","line":105,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Produces","doc":"Given a context-free grammar `g` and strings `u` and `v`\n`g.Produces u v` means that one step of a context-free transformation by a rule from `g` sends\n`u` to `v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.Produces\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">Produces</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">g</span>.NT</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L91-L96","name":"ContextFreeRule.Rewrites.append_right","line":91,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites.append_right","doc":"Add extra postfix to context-free rewriting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites.append_right\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.Rewrites</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.Rewrites</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L83-L88","name":"ContextFreeRule.Rewrites.append_left","line":83,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites.append_left","doc":"Add extra prefix to context-free rewriting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites.append_left\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.Rewrites</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.Rewrites</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L77-L80","name":"ContextFreeRule.rewrites_iff","line":77,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.rewrites_iff","doc":"Rule `r` rewrites string `u` is to string `v` iff they share both a prefix `p` and postfix `q`\nsuch that the remaining middle part of `u` is the input of `r` and the remaining middle part\nof `u` is the output of `r`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.rewrites_iff\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">rewrites_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.Rewrites</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>) (<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol.nonterminal\">Symbol.nonterminal</a> <span class=\"fn\"><span class=\"fn\">r</span>.input</span></span>]</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">q</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">r</span>.output</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">q</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L68-L72","name":"ContextFreeRule.rewrites_of_exists_parts","line":68,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.rewrites_of_exists_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.rewrites_of_exists_parts\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">rewrites_of_exists_parts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.Rewrites</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol.nonterminal\">Symbol.nonterminal</a> <span class=\"fn\"><span class=\"fn\">r</span>.input</span></span>]</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">q</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">r</span>.output</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">q</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L55-L66","name":"ContextFreeRule.Rewrites.exists_parts","line":55,"kind":"theorem","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites.exists_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites.exists_parts\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">exists_parts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hyp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.Rewrites</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>) (<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol.nonterminal\">Symbol.nonterminal</a> <span class=\"fn\"><span class=\"fn\">r</span>.input</span></span>]</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">q</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">r</span>.output</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">q</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L51-L53","name":"ContextFreeRule.Rewrites.cons","line":51,"kind":"ctor","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites.cons","doc":"There is a replacement later in the string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites.cons\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hrs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.Rewrites</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.Rewrites</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">s₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L48-L50","name":"ContextFreeRule.Rewrites.head","line":48,"kind":"ctor","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites.head","doc":"The replacement is at the start of the remaining string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites.head\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.Rewrites</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol.nonterminal\">Symbol.nonterminal</a> <span class=\"fn\"><span class=\"fn\">r</span>.input</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.output</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L47-L53","name":"ContextFreeRule.Rewrites","line":47,"kind":"inductive","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites","doc":"Inductive definition of a single application of a given context-free rule `r` to a string `u`;\n`r.Rewrites u v` means that the `r` sends `u` to `v` (there may be multiple such strings `v`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.Rewrites\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">Rewrites</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L37-L37","name":"ContextFreeGrammar.rules","line":37,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.rules","doc":"Rewrite rules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.rules\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">rules</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\"><span class=\"fn\">self</span>.NT</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L35-L35","name":"ContextFreeGrammar.initial","line":35,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.initial","doc":"Initial nonterminal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.initial\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">initial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.NT</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L33-L33","name":"ContextFreeGrammar.NT","line":33,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.NT","doc":"Type of nonterminals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.NT\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">NT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> uN</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L31-L31","name":"ContextFreeGrammar.mk","line":31,"kind":"ctor","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar.mk\"><span class=\"name\">ContextFreeGrammar</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(NT : <a href=\"./foundational_types.html\">Type</a> uN)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(initial : <span class=\"fn\">NT</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rules : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">NT</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\">ContextFreeGrammar</a> <span class=\"fn\">T</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L31-L37","name":"ContextFreeGrammar","line":31,"kind":"structure","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar","doc":"Context-free grammar that generates words over the alphabet `T` (a type of terminals). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeGrammar\"><span class=\"name\">ContextFreeGrammar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(T : <a href=\"./foundational_types.html\">Type</a> uT)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (uN + 1) uT)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L28-L28","name":"ContextFreeRule.output","line":28,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.output","doc":"Output string a.k.a. right-hand side. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.output\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">output</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L26-L26","name":"ContextFreeRule.input","line":26,"kind":"def","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.input","doc":"Input nonterminal a.k.a. left-hand side. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.input\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">input</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">N</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L24-L24","name":"ContextFreeRule.mk","line":24,"kind":"ctor","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule.mk\"><span class=\"name\">ContextFreeRule</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <a href=\"./foundational_types.html\">Type</a> uT}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> uN}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(output : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Symbol\">Symbol</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\">ContextFreeRule</a> <span class=\"fn\">T</span> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Computability/ContextFreeGrammar.lean#L24-L28","name":"ContextFreeRule","line":24,"kind":"structure","docLink":"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule","doc":"Rule that rewrites a single nonterminal to any string (a list of symbols). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/ContextFreeGrammar.html#ContextFreeRule\"><span class=\"name\">ContextFreeRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(T : <a href=\"./foundational_types.html\">Type</a> uT)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./foundational_types.html\">Type</a> uN)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max uN uT)</div></div>"}]}