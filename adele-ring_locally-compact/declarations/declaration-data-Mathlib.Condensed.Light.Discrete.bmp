{"name":"Mathlib.Condensed.Light.Discrete","instances":[],"imports":["Init","Mathlib.CategoryTheory.Sites.ConstantSheaf","Mathlib.CategoryTheory.Sites.Equivalence","Mathlib.CategoryTheory.Sites.LeftExact","Mathlib.Condensed.Light.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Discrete.lean#L57-L58","name":"LightCondSet.discreteUnderlyingAdj","line":57,"kind":"def","docLink":"./Mathlib/Condensed/Light/Discrete.html#LightCondSet.discreteUnderlyingAdj","doc":"A version of `LightCondensed.discrete_underlying_adj` in the `LightCondSet` namespace "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondSet.discreteUnderlyingAdj\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">discreteUnderlyingAdj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondSet.discrete\">LightCondSet.discrete</a> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <a href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondSet.underlying\">LightCondSet.underlying</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Discrete.lean#L54-L54","name":"LightCondSet.underlying","line":54,"kind":"def","docLink":"./Mathlib/Condensed/Light/Discrete.html#LightCondSet.underlying","doc":"A version of `LightCondensed.underlying` in the `LightCondSet` namespace "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondSet.underlying\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">underlying</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondensed\">LightCondensed</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Discrete.lean#L51-L51","name":"LightCondSet.discrete","line":51,"kind":"def","docLink":"./Mathlib/Condensed/Light/Discrete.html#LightCondSet.discrete","doc":"A version of `LightCondensed.discrete` in the `LightCondSet` namespace "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondSet.discrete\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">discrete</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondensed\">LightCondensed</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Discrete.lean#L47-L48","name":"LightCondensed.discreteUnderlyingAdj","line":47,"kind":"def","docLink":"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discreteUnderlyingAdj","doc":"Discreteness is left adjoint to the forgetful functor. When `C` is `Type*`, this is analogous to\n`TopCat.adj₁ : TopCat.discrete ⊣ forget TopCat`.  \n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discreteUnderlyingAdj\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">discreteUnderlyingAdj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u, w}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheafification.html#CategoryTheory.HasSheafify\">CategoryTheory.HasSheafify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span>)</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discrete\">LightCondensed.discrete</a> <span class=\"fn\">C</span></span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.underlying\">LightCondensed.underlying</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Discrete.lean#L40-L41","name":"LightCondensed.underlying","line":40,"kind":"def","docLink":"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.underlying","doc":"The underlying object of a condensed object in `C` is the condensed object evaluated at a point.\nThis can be viewed as a sort of forgetful functor from `Condensed C` to `C`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.underlying\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">underlying</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u, w}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondensed\">LightCondensed</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Discrete.lean#L39-L39","name":"LightCondensed.underlying_map","line":39,"kind":"theorem","docLink":"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.underlying_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.underlying_map\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">underlying_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u, w}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf\">CategoryTheory.Sheaf</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span>)</span> <span class=\"fn\">C</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.underlying\">LightCondensed.underlying</a> <span class=\"fn\">C</span></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.val</span>.app</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.of\">LightProfinite.of</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Discrete.lean#L39-L39","name":"LightCondensed.underlying_obj","line":39,"kind":"theorem","docLink":"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.underlying_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.underlying_obj\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">underlying_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u, w}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf\">CategoryTheory.Sheaf</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span>)</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.underlying\">LightCondensed.underlying</a> <span class=\"fn\">C</span></span>)</span>.obj</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span>.val</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.of\">LightProfinite.of</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Discrete.lean#L33-L33","name":"LightCondensed.discrete","line":33,"kind":"def","docLink":"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discrete","doc":"The discrete condensed object associated to an object of `C` is the constant sheaf at that object.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discrete\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">discrete</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u, w}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheafification.html#CategoryTheory.HasSheafify\">CategoryTheory.HasSheafify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span>)</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondensed\">LightCondensed</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Discrete.lean#L32-L32","name":"LightCondensed.discrete_obj","line":32,"kind":"theorem","docLink":"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discrete_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discrete_obj\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">discrete_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u, w}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheafification.html#CategoryTheory.HasSheafify\">CategoryTheory.HasSheafify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span>)</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discrete\">LightCondensed.discrete</a> <span class=\"fn\">C</span></span>)</span>.obj</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheafification.html#CategoryTheory.presheafToSheaf\">CategoryTheory.presheafToSheaf</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span>)</span> <span class=\"fn\">C</span></span>)</span>.obj</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const\">CategoryTheory.Functor.const</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span>.obj</span> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Discrete.lean#L32-L32","name":"LightCondensed.discrete_map","line":32,"kind":"theorem","docLink":"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discrete_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discrete_map\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">discrete_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u, w}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheafification.html#CategoryTheory.HasSheafify\">CategoryTheory.HasSheafify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span>)</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">C</span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Discrete.html#LightCondensed.discrete\">LightCondensed.discrete</a> <span class=\"fn\">C</span></span>)</span>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheafification.html#CategoryTheory.presheafToSheaf\">CategoryTheory.presheafToSheaf</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span>)</span> <span class=\"fn\">C</span></span>)</span>.map</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const\">CategoryTheory.Functor.const</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span>.map</span> <span class=\"fn\">f</span></span>)</span></span></span></span></div></div>"}]}