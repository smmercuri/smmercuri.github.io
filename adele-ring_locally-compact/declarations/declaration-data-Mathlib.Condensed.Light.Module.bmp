{"name":"Mathlib.Condensed.Light.Module","instances":[{"typeNames":["LightCondMod"],"name":"instAbelianLightCondMod","className":"CategoryTheory.Abelian"}],"imports":["Init","Mathlib.Algebra.Category.ModuleCat.Abelian","Mathlib.Algebra.Category.ModuleCat.Adjunctions","Mathlib.Algebra.Category.ModuleCat.Colimits","Mathlib.Algebra.Category.ModuleCat.FilteredColimits","Mathlib.CategoryTheory.Sites.Abelian","Mathlib.CategoryTheory.Sites.Adjunction","Mathlib.CategoryTheory.Sites.Equivalence","Mathlib.Condensed.Light.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Module.lean#L71-L73","name":"LightCondMod.hom_naturality_apply","line":71,"kind":"theorem","docLink":"./Mathlib/Condensed/Light/Module.html#LightCondMod.hom_naturality_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Module.html#LightCondMod.hom_naturality_apply\"><span class=\"name\">LightCondMod</span>.<span class=\"name\">hom_naturality_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Module.html#LightCondMod\">LightCondMod</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Module.html#LightCondMod\">LightCondMod</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.val</span>.obj</span> <span class=\"fn\">S</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.val</span>.app</span> <span class=\"fn\">T</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.val</span>.map</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.val</span>.map</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.val</span>.app</span> <span class=\"fn\">S</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Module.lean#L62-L62","name":"LightCondAb","line":62,"kind":"def","docLink":"./Mathlib/Condensed/Light/Module.html#LightCondAb","doc":"The category of condensed abelian groups, defined as sheaves of abelian groups over\n`CompHaus` with respect to the coherent Grothendieck topology.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Module.html#LightCondAb\"><span class=\"name\">LightCondAb</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Module.lean#L56-L56","name":"LightCondensed.freeForgetAdjunction","line":56,"kind":"def","docLink":"./Mathlib/Condensed/Light/Module.html#LightCondensed.freeForgetAdjunction","doc":"The condensed version of the free-forgetful adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Module.html#LightCondensed.freeForgetAdjunction\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">freeForgetAdjunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Module.html#LightCondensed.free\">LightCondensed.free</a> <span class=\"fn\">R</span></span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Module.html#LightCondensed.forget\">LightCondensed.forget</a> <span class=\"fn\">R</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Module.lean#L51-L52","name":"LightCondensed.free","line":51,"kind":"def","docLink":"./Mathlib/Condensed/Light/Module.html#LightCondensed.free","doc":"The left adjoint to the forgetful functor. The *free condensed `R`-module* on a condensed set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Module.html#LightCondensed.free\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">free</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondSet\">LightCondSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Module.html#LightCondMod\">LightCondMod</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Module.lean#L44-L45","name":"LightCondensed.forget","line":44,"kind":"def","docLink":"./Mathlib/Condensed/Light/Module.html#LightCondensed.forget","doc":"The forgetful functor from condensed `R`-modules to condensed sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Module.html#LightCondensed.forget\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">forget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Module.html#LightCondMod\">LightCondMod</a> <span class=\"fn\">R</span></span>)</span> <a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondSet\">LightCondSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Module.lean#L41-L41","name":"instAbelianLightCondMod","line":41,"kind":"instance","docLink":"./Mathlib/Condensed/Light/Module.html#instAbelianLightCondMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Module.html#instAbelianLightCondMod\"><span class=\"name\">instAbelianLightCondMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Module.html#LightCondMod\">LightCondMod</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Condensed/Light/Module.lean#L39-L39","name":"LightCondMod","line":39,"kind":"def","docLink":"./Mathlib/Condensed/Light/Module.html#LightCondMod","doc":"The category of condensed `R`-modules, defined as sheaves of `R`-modules over\n`CompHaus` with respect to the coherent Grothendieck topology.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Light/Module.html#LightCondMod\"><span class=\"name\">LightCondMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}