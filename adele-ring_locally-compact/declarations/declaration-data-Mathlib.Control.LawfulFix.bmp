{"name":"Mathlib.Control.LawfulFix","instances":[{"typeNames":["Part"],"name":"Part.lawfulFix","className":"LawfulFix"},{"typeNames":[],"name":"Pi.lawfulFix","className":"LawfulFix"},{"typeNames":[],"name":"Pi.hasFix","className":"Fix"},{"typeNames":[],"name":"Pi.lawfulFix'","className":"LawfulFix"}],"imports":["Init","Mathlib.Data.Stream.Init","Mathlib.Tactic.ApplyFun","Mathlib.Control.Fix","Mathlib.Order.OmegaCompletePartialOrder"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L260-L265","name":"Pi.lawfulFix'","line":260,"kind":"instance","docLink":"./Mathlib/Control/LawfulFix.html#Pi.lawfulFix'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Pi.lawfulFix'\"><span class=\"name\">Pi</span>.<span class=\"name\">lawfulFix'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Type</a> u_3</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#LawfulFix\">LawfulFix</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span> <span class=\"fn\"><span class=\"fn\">x</span>.snd</span></span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#LawfulFix\">LawfulFix</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L254-L256","name":"Pi.uncurry_curry_continuous","line":254,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Pi.uncurry_curry_continuous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Pi.uncurry_curry_continuous\"><span class=\"name\">Pi</span>.<span class=\"name\">uncurry_curry_continuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Type</a> u_3</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Continuous\">OmegaCompletePartialOrder.Continuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Continuous\">OmegaCompletePartialOrder.Continuous</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Pi.monotoneUncurry\">Pi.monotoneUncurry</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Pi.monotoneCurry\">Pi.monotoneCurry</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L244-L245","name":"Pi.hasFix","line":244,"kind":"instance","docLink":"./Mathlib/Control/LawfulFix.html#Pi.hasFix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Pi.hasFix\"><span class=\"name\">Pi</span>.<span class=\"name\">hasFix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Type</a> u_3</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix\">Fix</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span> <span class=\"fn\"><span class=\"fn\">x</span>.snd</span></span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix\">Fix</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L234-L238","name":"Pi.continuous_uncurry","line":234,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Pi.continuous_uncurry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Pi.continuous_uncurry\"><span class=\"name\">Pi</span>.<span class=\"name\">continuous_uncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(γ : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Type</a> u_3</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Continuous\">OmegaCompletePartialOrder.Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Pi.monotoneUncurry\">Pi.monotoneUncurry</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L228-L232","name":"Pi.continuous_curry","line":228,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Pi.continuous_curry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Pi.continuous_curry\"><span class=\"name\">Pi</span>.<span class=\"name\">continuous_curry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(γ : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Type</a> u_3</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Continuous\">OmegaCompletePartialOrder.Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Pi.monotoneCurry\">Pi.monotoneCurry</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L219-L222","name":"Pi.monotoneUncurry","line":219,"kind":"def","docLink":"./Mathlib/Control/LawfulFix.html#Pi.monotoneUncurry","doc":"`Sigma.uncurry` as a monotone function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Pi.monotoneUncurry\"><span class=\"name\">Pi</span>.<span class=\"name\">monotoneUncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(γ : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Type</a> u_3</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span> <span class=\"fn\"><span class=\"fn\">x</span>.snd</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L218-L218","name":"Pi.monotoneUncurry_coe","line":218,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Pi.monotoneUncurry_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Pi.monotoneUncurry_coe\"><span class=\"name\">Pi</span>.<span class=\"name\">monotoneUncurry_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(γ : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Type</a> u_3</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Pi.monotoneUncurry\">Pi.monotoneUncurry</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sigma/Basic.html#Sigma.uncurry\">Sigma.uncurry</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L212-L215","name":"Pi.monotoneCurry","line":212,"kind":"def","docLink":"./Mathlib/Control/LawfulFix.html#Pi.monotoneCurry","doc":"`Sigma.curry` as a monotone function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Pi.monotoneCurry\"><span class=\"name\">Pi</span>.<span class=\"name\">monotoneCurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(γ : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Type</a> u_3</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span> <span class=\"fn\"><span class=\"fn\">x</span>.snd</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L211-L211","name":"Pi.monotoneCurry_coe","line":211,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Pi.monotoneCurry_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Pi.monotoneCurry_coe\"><span class=\"name\">Pi</span>.<span class=\"name\">monotoneCurry_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(γ : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Type</a> u_3</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span> <span class=\"fn\"><span class=\"fn\">x</span>.snd</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Pi.monotoneCurry\">Pi.monotoneCurry</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sigma/Basic.html#Sigma.curry\">Sigma.curry</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L201-L202","name":"Pi.lawfulFix","line":201,"kind":"instance","docLink":"./Mathlib/Control/LawfulFix.html#Pi.lawfulFix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Pi.lawfulFix\"><span class=\"name\">Pi</span>.<span class=\"name\">lawfulFix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#LawfulFix\">LawfulFix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">β</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L191-L193","name":"Part.lawfulFix","line":191,"kind":"instance","docLink":"./Mathlib/Control/LawfulFix.html#Part.lawfulFix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.lawfulFix\"><span class=\"name\">Part</span>.<span class=\"name\">lawfulFix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#LawfulFix\">LawfulFix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L185-L189","name":"Part.to_unit_cont","line":185,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.to_unit_cont","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.to_unit_cont\"><span class=\"name\">Part</span>.<span class=\"name\">to_unit_cont</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Continuous\">OmegaCompletePartialOrder.Continuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Continuous\">OmegaCompletePartialOrder.Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Part.toUnitMono\">Part.toUnitMono</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L181-L183","name":"Part.toUnitMono","line":181,"kind":"def","docLink":"./Mathlib/Control/LawfulFix.html#Part.toUnitMono","doc":"`toUnit` as a monotone function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.toUnitMono\"><span class=\"name\">Part</span>.<span class=\"name\">toUnitMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L180-L180","name":"Part.toUnitMono_coe","line":180,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.toUnitMono_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.toUnitMono_coe\"><span class=\"name\">Part</span>.<span class=\"name\">toUnitMono_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Part.toUnitMono\">Part.toUnitMono</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">u</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L162-L173","name":"Part.fix_eq","line":162,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.fix_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.fix_eq\"><span class=\"name\">Part</span>.<span class=\"name\">fix_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Continuous\">OmegaCompletePartialOrder.Continuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.fix\">Part.fix</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.fix\">Part.fix</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L148-L158","name":"Part.fix_le","line":148,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.fix_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.fix_le\"><span class=\"name\">Part</span>.<span class=\"name\">fix_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hX : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.fix\">Part.fix</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L132-L146","name":"Part.fix_eq_ωSup","line":132,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.fix_eq_ωSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.fix_eq_ωSup\"><span class=\"name\">Part</span>.<span class=\"name\">fix_eq_ωSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.fix\">Part.fix</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.ωSup\">OmegaCompletePartialOrder.ωSup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.approxChain\">Part.Fix.approxChain</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L114-L115","name":"Part.Fix.approx_mem_approxChain","line":114,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.Fix.approx_mem_approxChain","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.approx_mem_approxChain\"><span class=\"name\">Part</span>.<span class=\"name\">Fix</span>.<span class=\"name\">approx_mem_approxChain</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Part.Fix.approx</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.approxChain\">Part.Fix.approxChain</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L109-L112","name":"Part.Fix.le_f_of_mem_approx","line":109,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.Fix.le_f_of_mem_approx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.le_f_of_mem_approx\"><span class=\"name\">Part</span>.<span class=\"name\">Fix</span>.<span class=\"name\">le_f_of_mem_approx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.approxChain\">Part.Fix.approxChain</a> <span class=\"fn\">f</span></span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L106-L107","name":"Part.Fix.approxChain","line":106,"kind":"def","docLink":"./Mathlib/Control/LawfulFix.html#Part.Fix.approxChain","doc":"The series of approximations of `fix f` (see `approx`) as a `Chain` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.approxChain\"><span class=\"name\">Part</span>.<span class=\"name\">Fix</span>.<span class=\"name\">approxChain</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Chain\">OmegaCompletePartialOrder.Chain</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L90-L103","name":"Part.Fix.exists_fix_le_approx","line":90,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.Fix.exists_fix_le_approx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.exists_fix_le_approx\"><span class=\"name\">Part</span>.<span class=\"name\">Fix</span>.<span class=\"name\">exists_fix_le_approx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.fix\">Part.fix</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Part.Fix.approx</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L86-L88","name":"Part.Fix.approx_le_fix","line":86,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.Fix.approx_le_fix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.approx_le_fix\"><span class=\"name\">Part</span>.<span class=\"name\">Fix</span>.<span class=\"name\">approx_le_fix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Part.Fix.approx</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.fix\">Part.fix</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L64-L84","name":"Part.Fix.mem_iff","line":64,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.Fix.mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.mem_iff\"><span class=\"name\">Part</span>.<span class=\"name\">Fix</span>.<span class=\"name\">mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.fix\">Part.fix</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Part.Fix.approx</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L57-L62","name":"Part.Fix.approx_mono","line":57,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.Fix.approx_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.approx_mono\"><span class=\"name\">Part</span>.<span class=\"name\">Fix</span>.<span class=\"name\">approx_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>⦄</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Part.Fix.approx</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Part.Fix.approx</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L52-L55","name":"Part.Fix.approx_mono'","line":52,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#Part.Fix.approx_mono'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#Part.Fix.approx_mono'\"><span class=\"name\">Part</span>.<span class=\"name\">Fix</span>.<span class=\"name\">approx_mono'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Part.Fix.approx</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Part.Fix.approx</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\"><span class=\"fn\">i</span>.succ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L40-L42","name":"LawfulFix.fix_eq'","line":40,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#LawfulFix.fix_eq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#LawfulFix.fix_eq'\"><span class=\"name\">LawfulFix</span>.<span class=\"name\">fix_eq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#LawfulFix\">LawfulFix</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Continuous'\">OmegaCompletePartialOrder.Continuous'</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix.fix\">Fix.fix</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix.fix\">Fix.fix</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L38-L38","name":"LawfulFix.fix_eq","line":38,"kind":"theorem","docLink":"./Mathlib/Control/LawfulFix.html#LawfulFix.fix_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#LawfulFix.fix_eq\"><span class=\"name\">LawfulFix</span>.<span class=\"name\">fix_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#LawfulFix\">LawfulFix</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Continuous\">OmegaCompletePartialOrder.Continuous</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix.fix\">Fix.fix</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix.fix\">Fix.fix</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L37-L37","name":"LawfulFix.mk","line":37,"kind":"ctor","docLink":"./Mathlib/Control/LawfulFix.html#LawfulFix.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#LawfulFix.mk\"><span class=\"name\">LawfulFix</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toFix : <span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix\">Fix</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fix_eq : <span class=\"fn\">∀ {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">α</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.Continuous\">OmegaCompletePartialOrder.Continuous</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix.fix\">Fix.fix</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix.fix\">Fix.fix</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/LawfulFix.html#LawfulFix\">LawfulFix</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Control/LawfulFix.lean#L37-L38","name":"LawfulFix","line":37,"kind":"class","docLink":"./Mathlib/Control/LawfulFix.html#LawfulFix","doc":"Intuitively, a fixed point operator `fix` is lawful if it satisfies `fix f = f (fix f)` for all\n`f`, but this is inconsistent / uninteresting in most cases due to the existence of \"exotic\"\nfunctions `f`, such as the function that is defined iff its argument is not, familiar from the\nhalting problem. Instead, this requirement is limited to only functions that are `Continuous` in the\nsense of `ω`-complete partial orders, which excludes the example because it is not monotone\n(making the input argument less defined can make `f` more defined). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/LawfulFix.html#LawfulFix\"><span class=\"name\">LawfulFix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Fix\"><span class=\"name\">Fix</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_3</div></div>"}]}