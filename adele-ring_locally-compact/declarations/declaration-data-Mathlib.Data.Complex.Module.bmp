{"name":"Mathlib.Data.Complex.Module","instances":[{"typeNames":["Complex"],"name":"Complex.instSMulCommClassComplexInstSMulRealComplexInstSMulRealComplex","className":"SMulCommClass"},{"typeNames":["Complex"],"name":"Complex.instIsScalarTowerComplexInstSMulRealComplexInstSMulRealComplex","className":"IsScalarTower"},{"typeNames":["Complex"],"name":"Complex.instIsCentralScalarComplexInstSMulRealComplexMulOpposite","className":"IsCentralScalar"},{"typeNames":["Complex"],"name":"Complex.mulAction","className":"MulAction"},{"typeNames":["Complex"],"name":"Complex.distribSMul","className":"DistribSMul"},{"typeNames":["Complex"],"name":"Complex.instDistribMulActionComplexToMonoidToMonoidWithZeroToAddMonoidToAddMonoidWithOneAddGroupWithOne","className":"DistribMulAction"},{"typeNames":["Complex"],"name":"Complex.instModule","className":"Module"},{"typeNames":["Complex"],"name":"Complex.instAlgebraComplexInstSemiringComplex","className":"Algebra"},{"typeNames":["Real","Complex"],"name":"Complex.instStarModuleRealComplexToStarToInvolutiveStarInstAddMonoidRealToStarAddMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingInstStarRingRealToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingToAddMonoidToAddMonoidWithOneAddGroupWithOneCommRingInstStarRingComplexToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingInstSMulRealComplexToSMulInstCommSemiringRealSemiringId","className":"StarModule"},{"typeNames":["Real","Complex"],"name":"Complex.instFiniteDimensionalRealComplexInstDivisionRingRealAddCommGroupInstModuleToSemiringToDivisionSemiringToModule","className":"Module.Finite"},{"typeNames":["Real"],"name":"Module.complexToReal","className":"Module"},{"typeNames":["Real"],"name":"Algebra.complexToReal","className":"Algebra"},{"typeNames":["Real"],"name":"SMulCommClass.complexToReal","className":"SMulCommClass"},{"typeNames":["Real"],"name":"IsScalarTower.complexToReal","className":"IsScalarTower"},{"typeNames":["Real"],"name":"FiniteDimensional.complexToReal","className":"Module.Finite"},{"typeNames":["Real"],"name":"StarModule.complexToReal","className":"StarModule"}],"imports":["Init","Mathlib.Algebra.Order.Module.OrderedSMul","Mathlib.Data.Complex.Cardinality","Mathlib.Data.Fin.VecNotation","Mathlib.FieldTheory.Tower","Mathlib.Algebra.CharP.Invertible"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L621-L622","name":"Complex.nonempty_linearEquiv_real","line":621,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.nonempty_linearEquiv_real","doc":"`ℂ` and `ℝ` are isomorphic as vector spaces over `ℚ`, or equivalently,\nas additive groups. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.nonempty_linearEquiv_real\"><span class=\"name\">Complex</span>.<span class=\"name\">nonempty_linearEquiv_real</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L615-L617","name":"Complex.rank_rat_complex","line":615,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.rank_rat_complex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.rank_rat_complex\"><span class=\"name\">Complex</span>.<span class=\"name\">rank_rat_complex</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Basic.html#Module.rank\">Module.rank</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/Cardinal/Continuum.html#Cardinal.continuum\">Cardinal.continuum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L610-L612","name":"Real.rank_rat_real","line":610,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Real.rank_rat_real","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Real.rank_rat_real\"><span class=\"name\">Real</span>.<span class=\"name\">rank_rat_real</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Basic.html#Module.rank\">Module.rank</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/Cardinal/Continuum.html#Cardinal.continuum\">Cardinal.continuum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L591-L601","name":"star_mul_self_add_self_mul_star","line":591,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#star_mul_self_add_self_mul_star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#star_mul_self_add_self_mul_star\"><span class=\"name\">star_mul_self_add_self_mul_star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalRing\">NonUnitalRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarRing\">StarRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsScalarTower\">IsScalarTower</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#Star.star\">star</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#Star.star\">star</a> <span class=\"fn\">a</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">a</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L585-L589","name":"Complex.coe_realPart","line":585,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.coe_realPart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.coe_realPart\"><span class=\"name\">Complex</span>.<span class=\"name\">coe_realPart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">z</span>.re</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L582-L583","name":"imaginaryPart_ofReal","line":582,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#imaginaryPart_ofReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#imaginaryPart_ofReal\"><span class=\"name\">imaginaryPart_ofReal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">↑<span class=\"fn\">r</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L577-L579","name":"realPart_ofReal","line":577,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#realPart_ofReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#realPart_ofReal\"><span class=\"name\">realPart_ofReal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">↑<span class=\"fn\">r</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L571-L574","name":"Complex.coe_selfAdjointEquiv","line":571,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.coe_selfAdjointEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.coe_selfAdjointEquiv\"><span class=\"name\">Complex</span>.<span class=\"name\">coe_selfAdjointEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#selfAdjoint\">selfAdjoint</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Complex.selfAdjointEquiv</span> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L563-L569","name":"Complex.selfAdjointEquiv","line":563,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#Complex.selfAdjointEquiv","doc":"The natural `ℝ`-linear equivalence between `selfAdjoint ℂ` and `ℝ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.selfAdjointEquiv\"><span class=\"name\">Complex</span>.<span class=\"name\">selfAdjointEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#selfAdjoint\">selfAdjoint</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L562-L562","name":"Complex.selfAdjointEquiv_symm_apply","line":562,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.selfAdjointEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.selfAdjointEquiv_symm_apply\"><span class=\"name\">Complex</span>.<span class=\"name\">selfAdjointEquiv_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <a href=\"./Mathlib/Data/Complex/Module.html#Complex.selfAdjointEquiv\">Complex.selfAdjointEquiv</a></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">↑<span class=\"fn\">x</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L562-L562","name":"Complex.selfAdjointEquiv_apply","line":562,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.selfAdjointEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.selfAdjointEquiv_apply\"><span class=\"name\">Complex</span>.<span class=\"name\">selfAdjointEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#selfAdjoint\">selfAdjoint</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Complex.selfAdjointEquiv</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">z</span></span>)</span>.re</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L555-L559","name":"span_selfAdjoint","line":555,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#span_selfAdjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#span_selfAdjoint\"><span class=\"name\">span_selfAdjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#selfAdjoint\">selfAdjoint</a> <span class=\"fn\">A</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L549-L551","name":"imaginaryPart_surjective","line":549,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#imaginaryPart_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#imaginaryPart_surjective\"><span class=\"name\">imaginaryPart_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">imaginaryPart</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L546-L547","name":"realPart_surjective","line":546,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#realPart_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#realPart_surjective\"><span class=\"name\">realPart_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">realPart</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L543-L544","name":"realPart_imaginaryPart","line":543,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#realPart_imaginaryPart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#realPart_imaginaryPart\"><span class=\"name\">realPart_imaginaryPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">x</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L539-L540","name":"realPart_idem","line":539,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#realPart_idem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#realPart_idem\"><span class=\"name\">realPart_idem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">x</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L535-L536","name":"imaginaryPart_imaginaryPart","line":535,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#imaginaryPart_imaginaryPart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#imaginaryPart_imaginaryPart\"><span class=\"name\">imaginaryPart_imaginaryPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">x</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L531-L532","name":"imaginaryPart_realPart","line":531,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#imaginaryPart_realPart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#imaginaryPart_realPart\"><span class=\"name\">imaginaryPart_realPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">x</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L525-L528","name":"imaginaryPart_comp_subtype_selfAdjoint","line":525,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#imaginaryPart_comp_subtype_selfAdjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#imaginaryPart_comp_subtype_selfAdjoint\"><span class=\"name\">imaginaryPart_comp_subtype_selfAdjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">imaginaryPart</span> ∘ₗ <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/LinearMap.html#Submodule.subtype\">Submodule.subtype</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Module.html#selfAdjoint.submodule\">selfAdjoint.submodule</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L521-L523","name":"realPart_comp_subtype_selfAdjoint","line":521,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#realPart_comp_subtype_selfAdjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#realPart_comp_subtype_selfAdjoint\"><span class=\"name\">realPart_comp_subtype_selfAdjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">realPart</span> ∘ₗ <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/LinearMap.html#Submodule.subtype\">Submodule.subtype</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Module.html#selfAdjoint.submodule\">selfAdjoint.submodule</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LinearMap.id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L517-L519","name":"IsSelfAdjoint.imaginaryPart","line":517,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#IsSelfAdjoint.imaginaryPart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#IsSelfAdjoint.imaginaryPart\"><span class=\"name\">IsSelfAdjoint</span>.<span class=\"name\">imaginaryPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#IsSelfAdjoint\">IsSelfAdjoint</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L513-L515","name":"IsSelfAdjoint.coe_realPart","line":513,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#IsSelfAdjoint.coe_realPart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#IsSelfAdjoint.coe_realPart\"><span class=\"name\">IsSelfAdjoint</span>.<span class=\"name\">coe_realPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#IsSelfAdjoint\">IsSelfAdjoint</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L509-L511","name":"imaginaryPart_eq_neg_I_smul_skewAdjointPart","line":509,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#imaginaryPart_eq_neg_I_smul_skewAdjointPart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#imaginaryPart_eq_neg_I_smul_skewAdjointPart\"><span class=\"name\">imaginaryPart_eq_neg_I_smul_skewAdjointPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Module.html#skewAdjointPart\">skewAdjointPart</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> <span class=\"fn\">x</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L505-L507","name":"skewAdjointPart_eq_I_smul_imaginaryPart","line":505,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#skewAdjointPart_eq_I_smul_imaginaryPart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#skewAdjointPart_eq_I_smul_imaginaryPart\"><span class=\"name\">skewAdjointPart_eq_I_smul_imaginaryPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Module.html#skewAdjointPart\">skewAdjointPart</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">x</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L500-L502","name":"imaginaryPart_smul","line":500,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#imaginaryPart_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#imaginaryPart_smul\"><span class=\"name\">imaginaryPart_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.re</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.im</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">a</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L495-L497","name":"realPart_smul","line":495,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#realPart_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#realPart_smul\"><span class=\"name\">realPart_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.re</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.im</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">a</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L486-L491","name":"imaginaryPart_I_smul","line":486,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#imaginaryPart_I_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#imaginaryPart_I_smul\"><span class=\"name\">imaginaryPart_I_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L476-L481","name":"realPart_I_smul","line":476,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#realPart_I_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#realPart_I_smul\"><span class=\"name\">realPart_I_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L468-L471","name":"realPart_add_I_smul_imaginaryPart","line":468,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#realPart_add_I_smul_imaginaryPart","doc":"The standard decomposition of `ℜ a + Complex.I • ℑ a = a` of an element of a star module over\n`ℂ` into a linear combination of self adjoint elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#realPart_add_I_smul_imaginaryPart\"><span class=\"name\">realPart_add_I_smul_imaginaryPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">a</span></span>)</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L460-L463","name":"imaginaryPart_apply_coe","line":460,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#imaginaryPart_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#imaginaryPart_apply_coe\"><span class=\"name\">imaginaryPart_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">imaginaryPart</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#Star.star\">star</a> <span class=\"fn\">a</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L455-L457","name":"realPart_apply_coe","line":455,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#realPart_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#realPart_apply_coe\"><span class=\"name\">realPart_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">realPart</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#Star.star\">star</a> <span class=\"fn\">a</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L450-L451","name":"ComplexStarModule.termℑ","line":450,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#ComplexStarModule.termℑ","doc":"The imaginary part `ℑ a` of an element `a` of a star module over `ℂ`, as a linear map into the\nself adjoint elements. In a general star module, we have a decomposition into the `selfAdjoint`\nand `skewAdjoint` parts, but in a star module over `ℂ` we have\n`realPart_add_I_smul_imaginaryPart`, which allows us to decompose into a linear combination of\n`selfAdjoint`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#ComplexStarModule.termℑ\"><span class=\"name\">ComplexStarModule</span>.<span class=\"name\">termℑ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L448-L449","name":"ComplexStarModule.termℜ","line":448,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#ComplexStarModule.termℜ","doc":"The real part `ℜ a` of an element `a` of a star module over `ℂ`, as a linear map. This is just\n`selfAdjointPart ℝ`, but we provide it as a separate definition in order to link it with lemmas\nconcerning the `imaginaryPart`, which doesn't exist in star modules over other rings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#ComplexStarModule.termℜ\"><span class=\"name\">ComplexStarModule</span>.<span class=\"name\">termℜ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L444-L445","name":"imaginaryPart","line":444,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#imaginaryPart","doc":"The imaginary part `ℑ a` of an element `a` of a star module over `ℂ`, as a linear map into the\nself adjoint elements. In a general star module, we have a decomposition into the `selfAdjoint`\nand `skewAdjoint` parts, but in a star module over `ℂ` we have\n`realPart_add_I_smul_imaginaryPart`, which allows us to decompose into a linear combination of\n`selfAdjoint`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#imaginaryPart\"><span class=\"name\">imaginaryPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">→ₗ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#selfAdjoint\">selfAdjoint</a> <span class=\"fn\">A</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L435-L436","name":"realPart","line":435,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#realPart","doc":"The real part `ℜ a` of an element `a` of a star module over `ℂ`, as a linear map. This is just\n`selfAdjointPart ℝ`, but we provide it as a separate definition in order to link it with lemmas\nconcerning the `imaginaryPart`, which doesn't exist in star modules over other rings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#realPart\"><span class=\"name\">realPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">→ₗ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#selfAdjoint\">selfAdjoint</a> <span class=\"fn\">A</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L426-L428","name":"skewAdjoint.I_smul_neg_I","line":426,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#skewAdjoint.I_smul_neg_I","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#skewAdjoint.I_smul_neg_I\"><span class=\"name\">skewAdjoint</span>.<span class=\"name\">I_smul_neg_I</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#skewAdjoint\">skewAdjoint</a> <span class=\"fn\">A</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">skewAdjoint.negISMul</span> <span class=\"fn\">a</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L410-L422","name":"skewAdjoint.negISMul","line":410,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#skewAdjoint.negISMul","doc":"Create a `selfAdjoint` element from a `skewAdjoint` element by multiplying by the scalar\n`-Complex.I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#skewAdjoint.negISMul\"><span class=\"name\">skewAdjoint</span>.<span class=\"name\">negISMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#skewAdjoint\">skewAdjoint</a> <span class=\"fn\">A</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">→ₗ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#selfAdjoint\">selfAdjoint</a> <span class=\"fn\">A</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L409-L409","name":"skewAdjoint.negISMul_apply_coe","line":409,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#skewAdjoint.negISMul_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#skewAdjoint.negISMul_apply_coe\"><span class=\"name\">skewAdjoint</span>.<span class=\"name\">negISMul_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarAddMonoid\">StarAddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/SelfAdjoint.html#skewAdjoint\">skewAdjoint</a> <span class=\"fn\">A</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">skewAdjoint.negISMul</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L392-L393","name":"Complex.liftAux_neg_I","line":392,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.liftAux_neg_I","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.liftAux_neg_I\"><span class=\"name\">Complex</span>.<span class=\"name\">liftAux_neg_I</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Module.html#Complex.liftAux\">Complex.liftAux</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a></span>)</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<a href=\"./Mathlib/Data/Complex/Module.html#Complex.conjAe\">Complex.conjAe</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L385-L386","name":"Complex.liftAux_I","line":385,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.liftAux_I","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.liftAux_I\"><span class=\"name\">Complex</span>.<span class=\"name\">liftAux_I</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Module.html#Complex.liftAux\">Complex.liftAux</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I_mul_I\">Complex.I_mul_I</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom.id\">AlgHom.id</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L376-L380","name":"Complex.lift","line":376,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#Complex.lift","doc":"A universal property of the complex numbers, providing a unique `ℂ →ₐ[ℝ] A` for every element\nof `A` which squares to `-1`.\n\nThis can be used to embed the complex numbers in the `Quaternion`s.\n\nThis isomorphism is named to match the very similar `Zsqrtd.lift`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.lift\"><span class=\"name\">Complex</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">I'</span> : <span class=\"fn\">A</span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">I'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span> }</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <span class=\"fn\">A</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L375-L375","name":"Complex.lift_apply","line":375,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.lift_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.lift_apply\"><span class=\"name\">Complex</span>.<span class=\"name\">lift_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I' : <span class=\"fn\">{ <span class=\"fn\">I'</span> : <span class=\"fn\">A</span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">I'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Complex.lift</span> <span class=\"fn\">I'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Module.html#Complex.liftAux\">Complex.liftAux</a> <span class=\"fn\">↑<span class=\"fn\">I'</span></span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L375-L375","name":"Complex.lift_symm_apply_coe","line":375,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.lift_symm_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.lift_symm_apply_coe\"><span class=\"name\">Complex</span>.<span class=\"name\">lift_symm_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Complex.lift</span>.symm</span> <span class=\"fn\">F</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L365-L365","name":"Complex.liftAux_apply_I","line":365,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.liftAux_apply_I","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.liftAux_apply_I\"><span class=\"name\">Complex</span>.<span class=\"name\">liftAux_apply_I</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I' : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hI' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">I'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Module.html#Complex.liftAux\">Complex.liftAux</a> <span class=\"fn\">I'</span> <span class=\"fn\">hI'</span></span>)</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">I'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L361-L362","name":"Complex.liftAux_apply","line":361,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.liftAux_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.liftAux_apply\"><span class=\"name\">Complex</span>.<span class=\"name\">liftAux_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I' : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hI' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">I'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Module.html#Complex.liftAux\">Complex.liftAux</a> <span class=\"fn\">I'</span> <span class=\"fn\">hI'</span></span>)</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#algebraMap\">algebraMap</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\"><span class=\"fn\">z</span>.re</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.im</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">I'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L342-L357","name":"Complex.liftAux","line":342,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#Complex.liftAux","doc":"There is an alg_hom from `ℂ` to any `ℝ`-algebra with an element that squares to `-1`.\n\nSee `Complex.lift` for this as an equiv. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.liftAux\"><span class=\"name\">Complex</span>.<span class=\"name\">liftAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I' : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">I'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L333-L334","name":"Complex.equivRealProdLm_symm_apply","line":333,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm_symm_apply\"><span class=\"name\">Complex</span>.<span class=\"name\">equivRealProdLm_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <a href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm\">Complex.equivRealProdLm</a></span>)</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">p</span>.1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">p</span>.2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L327-L330","name":"Complex.equivRealProdLm","line":327,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm","doc":"The natural `LinearEquiv` from `ℂ` to `ℝ × ℝ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm\"><span class=\"name\">Complex</span>.<span class=\"name\">equivRealProdLm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L326-L326","name":"Complex.equivRealProdLm_apply","line":326,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm_apply\"><span class=\"name\">Complex</span>.<span class=\"name\">equivRealProdLm_apply</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Complex.equivRealProdLm</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.re</span>, <span class=\"fn\"><span class=\"fn\">a</span>.im</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L326-L326","name":"Complex.equivRealProdLm_symm_apply_re","line":326,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm_symm_apply_re","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm_symm_apply_re\"><span class=\"name\">Complex</span>.<span class=\"name\">equivRealProdLm_symm_apply_re</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <a href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm\">Complex.equivRealProdLm</a></span>)</span> <span class=\"fn\">a</span></span>)</span>.re</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L326-L326","name":"Complex.equivRealProdLm_symm_apply_im","line":326,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm_symm_apply_im","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm_symm_apply_im\"><span class=\"name\">Complex</span>.<span class=\"name\">equivRealProdLm_symm_apply_im</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <a href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdLm\">Complex.equivRealProdLm</a></span>)</span> <span class=\"fn\">a</span></span>)</span>.im</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L322-L323","name":"Complex.equivRealProdAddHom_symm_apply","line":322,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom_symm_apply\"><span class=\"name\">Complex</span>.<span class=\"name\">equivRealProdAddHom_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <a href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom\">Complex.equivRealProdAddHom</a></span>)</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">p</span>.1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">p</span>.2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L318-L319","name":"Complex.equivRealProdAddHom","line":318,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom","doc":"The natural `AddEquiv` from `ℂ` to `ℝ × ℝ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom\"><span class=\"name\">Complex</span>.<span class=\"name\">equivRealProdAddHom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L317-L317","name":"Complex.equivRealProdAddHom_symm_apply_re","line":317,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom_symm_apply_re","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom_symm_apply_re\"><span class=\"name\">Complex</span>.<span class=\"name\">equivRealProdAddHom_symm_apply_re</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <a href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom\">Complex.equivRealProdAddHom</a></span>)</span> <span class=\"fn\">p</span></span>)</span>.re</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L317-L317","name":"Complex.equivRealProdAddHom_symm_apply_im","line":317,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom_symm_apply_im","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom_symm_apply_im\"><span class=\"name\">Complex</span>.<span class=\"name\">equivRealProdAddHom_symm_apply_im</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <a href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom\">Complex.equivRealProdAddHom</a></span>)</span> <span class=\"fn\">p</span></span>)</span>.im</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L317-L317","name":"Complex.equivRealProdAddHom_apply","line":317,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.equivRealProdAddHom_apply\"><span class=\"name\">Complex</span>.<span class=\"name\">equivRealProdAddHom_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Complex.equivRealProdAddHom</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">z</span>.re</span>, <span class=\"fn\"><span class=\"fn\">z</span>.im</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L309-L313","name":"Complex.real_algHom_eq_id_or_conj","line":309,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.real_algHom_eq_id_or_conj","doc":"The identity and the complex conjugation are the only two `ℝ`-algebra homomorphisms of `ℂ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.real_algHom_eq_id_or_conj\"><span class=\"name\">Complex</span>.<span class=\"name\">real_algHom_eq_id_or_conj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom.id\">AlgHom.id</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<a href=\"./Mathlib/Data/Complex/Module.html#Complex.conjAe\">Complex.conjAe</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L301-L305","name":"Complex.toMatrix_conjAe","line":301,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.toMatrix_conjAe","doc":"The matrix representation of `conjAe`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.toMatrix_conjAe\"><span class=\"name\">Complex</span>.<span class=\"name\">toMatrix_conjAe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/ToLin.html#LinearMap.toMatrix\">LinearMap.toMatrix</a> <a href=\"./Mathlib/Data/Complex/Module.html#Complex.basisOneI\">Complex.basisOneI</a> <a href=\"./Mathlib/Data/Complex/Module.html#Complex.basisOneI\">Complex.basisOneI</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Equiv.html#AlgEquiv.toLinearMap\">AlgEquiv.toLinearMap</a> <a href=\"./Mathlib/Data/Complex/Module.html#Complex.conjAe\">Complex.conjAe</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">![<span class=\"fn\">![<span class=\"fn\">1</span>, <span class=\"fn\">0</span>]</span>, <span class=\"fn\">![<span class=\"fn\">0</span>, <span class=\"fn\">-<span class=\"fn\">1</span></span>]</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L295-L296","name":"Complex.conjAe_coe","line":295,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.conjAe_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.conjAe_coe\"><span class=\"name\">Complex</span>.<span class=\"name\">conjAe_coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<a href=\"./Mathlib/Data/Complex/Module.html#Complex.conjAe\">Complex.conjAe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L286-L291","name":"Complex.conjAe","line":286,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#Complex.conjAe","doc":"`ℝ`-algebra isomorphism version of the complex conjugation function from `ℂ` to `ℂ` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.conjAe\"><span class=\"name\">Complex</span>.<span class=\"name\">conjAe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Algebra/Equiv.html#AlgEquiv\">≃ₐ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Algebra/Equiv.html#AlgEquiv\">]</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L281-L282","name":"Complex.ofRealAm_coe","line":281,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.ofRealAm_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.ofRealAm_coe\"><span class=\"name\">Complex</span>.<span class=\"name\">ofRealAm_coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<a href=\"./Mathlib/Data/Complex/Module.html#Complex.ofRealAm\">Complex.ofRealAm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.ofReal'\">Complex.ofReal'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L276-L277","name":"Complex.ofRealAm","line":276,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#Complex.ofRealAm","doc":"`ℝ`-algebra morphism version of the canonical embedding of `ℝ` in `ℂ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.ofRealAm\"><span class=\"name\">Complex</span>.<span class=\"name\">ofRealAm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L271-L272","name":"Complex.imLm_coe","line":271,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.imLm_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.imLm_coe\"><span class=\"name\">Complex</span>.<span class=\"name\">imLm_coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<a href=\"./Mathlib/Data/Complex/Module.html#Complex.imLm\">Complex.imLm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.im\">Complex.im</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L264-L267","name":"Complex.imLm","line":264,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#Complex.imLm","doc":"Linear map version of the imaginary part function, from `ℂ` to `ℝ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.imLm\"><span class=\"name\">Complex</span>.<span class=\"name\">imLm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">→ₗ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L259-L260","name":"Complex.reLm_coe","line":259,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.reLm_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.reLm_coe\"><span class=\"name\">Complex</span>.<span class=\"name\">reLm_coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<a href=\"./Mathlib/Data/Complex/Module.html#Complex.reLm\">Complex.reLm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.re\">Complex.re</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L252-L255","name":"Complex.reLm","line":252,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#Complex.reLm","doc":"Linear map version of the real part function, from `ℂ` to `ℝ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.reLm\"><span class=\"name\">Complex</span>.<span class=\"name\">reLm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">→ₗ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Basic.html#LinearMap\">]</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L242-L244","name":"StarModule.complexToReal","line":242,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#StarModule.complexToReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#StarModule.complexToReal\"><span class=\"name\">StarModule</span>.<span class=\"name\">complexToReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#Star\">Star</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L237-L239","name":"finrank_real_of_complex","line":237,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#finrank_real_of_complex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#finrank_real_of_complex\"><span class=\"name\">finrank_real_of_complex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Finrank.html#FiniteDimensional.finrank\">FiniteDimensional.finrank</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Finrank.html#FiniteDimensional.finrank\">FiniteDimensional.finrank</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L230-L234","name":"rank_real_of_complex","line":230,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#rank_real_of_complex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#rank_real_of_complex\"><span class=\"name\">rank_real_of_complex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Basic.html#Module.rank\">Module.rank</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Basic.html#Module.rank\">Module.rank</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L225-L227","name":"FiniteDimensional.complexToReal","line":225,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#FiniteDimensional.complexToReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#FiniteDimensional.complexToReal\"><span class=\"name\">FiniteDimensional</span>.<span class=\"name\">complexToReal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/FiniteDimensional.html#FiniteDimensional\">FiniteDimensional</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/FiniteDimensional.html#FiniteDimensional\">FiniteDimensional</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L217-L219","name":"IsScalarTower.complexToReal","line":217,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#IsScalarTower.complexToReal","doc":"The scalar action of `ℝ` on a `ℂ`-module `E` induced by `Module.complexToReal` associates with\nanother scalar action of `M` on `E` whenever the action of `ℂ` associates with the action of `M`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#IsScalarTower.complexToReal\"><span class=\"name\">IsScalarTower</span>.<span class=\"name\">complexToReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsScalarTower\">IsScalarTower</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">M</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsScalarTower\">IsScalarTower</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">M</span> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L210-L212","name":"SMulCommClass.complexToReal","line":210,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#SMulCommClass.complexToReal","doc":"The scalar action of `ℝ` on a `ℂ`-module `E` induced by `Module.complexToReal` commutes with\nanother scalar action of `M` on `E` whenever the action of `ℂ` commutes with the action of `M`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#SMulCommClass.complexToReal\"><span class=\"name\">SMulCommClass</span>.<span class=\"name\">complexToReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">M</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">M</span> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L203-L205","name":"Complex.coe_smul","line":203,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.coe_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.coe_smul\"><span class=\"name\">Complex</span>.<span class=\"name\">coe_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L184-L186","name":"Algebra.complexToReal","line":184,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Algebra.complexToReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Algebra.complexToReal\"><span class=\"name\">Algebra</span>.<span class=\"name\">complexToReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L177-L179","name":"Module.complexToReal","line":177,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Module.complexToReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Module.complexToReal\"><span class=\"name\">Module</span>.<span class=\"name\">complexToReal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L169-L170","name":"Complex.finrank_real_complex_fact","line":169,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.finrank_real_complex_fact","doc":"`Fact` version of the dimension of `ℂ` over `ℝ`, locally useful in the definition of the\ncircle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.finrank_real_complex_fact\"><span class=\"name\">Complex</span>.<span class=\"name\">finrank_real_complex_fact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Finrank.html#FiniteDimensional.finrank\">FiniteDimensional.finrank</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L163-L164","name":"Complex.rank_real_complex'","line":163,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.rank_real_complex'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.rank_real_complex'\"><span class=\"name\">Complex</span>.<span class=\"name\">rank_real_complex'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.lift\">Cardinal.lift.{u, 0}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Basic.html#Module.rank\">Module.rank</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L160-L160","name":"Complex.rank_real_complex","line":160,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.rank_real_complex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.rank_real_complex\"><span class=\"name\">Complex</span>.<span class=\"name\">rank_real_complex</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Basic.html#Module.rank\">Module.rank</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L155-L156","name":"Complex.finrank_real_complex","line":155,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.finrank_real_complex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.finrank_real_complex\"><span class=\"name\">Complex</span>.<span class=\"name\">finrank_real_complex</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Finrank.html#FiniteDimensional.finrank\">FiniteDimensional.finrank</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L151-L152","name":"Complex.instFiniteDimensionalRealComplexInstDivisionRingRealAddCommGroupInstModuleToSemiringToDivisionSemiringToModule","line":151,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Complex.instFiniteDimensionalRealComplexInstDivisionRingRealAddCommGroupInstModuleToSemiringToDivisionSemiringToModule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.instFiniteDimensionalRealComplexInstDivisionRingRealAddCommGroupInstModuleToSemiringToDivisionSemiringToModule\"><span class=\"name\">Complex</span>.<span class=\"name\">instFiniteDimensionalRealComplexInstDivisionRingRealAddCommGroupInstModuleToSemiringToDivisionSemiringToModule</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/FiniteDimensional.html#FiniteDimensional\">FiniteDimensional</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L139-L147","name":"Complex.coe_basisOneI","line":139,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.coe_basisOneI","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.coe_basisOneI\"><span class=\"name\">Complex</span>.<span class=\"name\">coe_basisOneI</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<a href=\"./Mathlib/Data/Complex/Module.html#Complex.basisOneI\">Complex.basisOneI</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![<span class=\"fn\">1</span>, <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L133-L134","name":"Complex.coe_basisOneI_repr","line":133,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.coe_basisOneI_repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.coe_basisOneI_repr\"><span class=\"name\">Complex</span>.<span class=\"name\">coe_basisOneI_repr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Module.html#Complex.basisOneI\">Complex.basisOneI</a>.repr</span> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![<span class=\"fn\"><span class=\"fn\">z</span>.re</span>, <span class=\"fn\"><span class=\"fn\">z</span>.im</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L119-L128","name":"Complex.basisOneI","line":119,"kind":"def","docLink":"./Mathlib/Data/Complex/Module.html#Complex.basisOneI","doc":"`ℂ` has a basis over `ℝ` given by `1` and `I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.basisOneI\"><span class=\"name\">Complex</span>.<span class=\"name\">basisOneI</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L109-L111","name":"Complex.algHom_ext","line":109,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.algHom_ext","doc":"Two `ℝ`-algebra homomorphisms from `ℂ` are equal if they agree on `Complex.I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.algHom_ext\"><span class=\"name\">Complex</span>.<span class=\"name\">algHom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <span class=\"fn\">A</span></span>⦄</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃g : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <span class=\"fn\">A</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.I\">Complex.I</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L103-L104","name":"AlgHom.map_coe_real_complex","line":103,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#AlgHom.map_coe_real_complex","doc":"We need this lemma since `Complex.coe_algebraMap` diverts the simp-normal form away from\n`AlgHom.commutes`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#AlgHom.map_coe_real_complex\"><span class=\"name\">AlgHom</span>.<span class=\"name\">map_coe_real_complex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#algebraMap\">algebraMap</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L92-L93","name":"Complex.coe_algebraMap","line":92,"kind":"theorem","docLink":"./Mathlib/Data/Complex/Module.html#Complex.coe_algebraMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.coe_algebraMap\"><span class=\"name\">Complex</span>.<span class=\"name\">coe_algebraMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#algebraMap\">algebraMap</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.ofReal'\">Complex.ofReal'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L88-L89","name":"Complex.instStarModuleRealComplexToStarToInvolutiveStarInstAddMonoidRealToStarAddMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingInstStarRingRealToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingToAddMonoidToAddMonoidWithOneAddGroupWithOneCommRingInstStarRingComplexToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingInstSMulRealComplexToSMulInstCommSemiringRealSemiringId","line":88,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Complex.instStarModuleRealComplexToStarToInvolutiveStarInstAddMonoidRealToStarAddMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingInstStarRingRealToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingToAddMonoidToAddMonoidWithOneAddGroupWithOneCommRingInstStarRingComplexToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingInstSMulRealComplexToSMulInstCommSemiringRealSemiringId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.instStarModuleRealComplexToStarToInvolutiveStarInstAddMonoidRealToStarAddMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingInstStarRingRealToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingToAddMonoidToAddMonoidWithOneAddGroupWithOneCommRingInstStarRingComplexToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingInstSMulRealComplexToSMulInstCommSemiringRealSemiringId\"><span class=\"name\">Complex</span>.<span class=\"name\">instStarModuleRealComplexToStarToInvolutiveStarInstAddMonoidRealToStarAddMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingInstStarRingRealToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingToAddMonoidToAddMonoidWithOneAddGroupWithOneCommRingInstStarRingComplexToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingCommRingInstSMulRealComplexToSMulInstCommSemiringRealSemiringId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#StarModule\">StarModule</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L82-L86","name":"Complex.instAlgebraComplexInstSemiringComplex","line":82,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Complex.instAlgebraComplexInstSemiringComplex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.instAlgebraComplexInstSemiringComplex\"><span class=\"name\">Complex</span>.<span class=\"name\">instAlgebraComplexInstSemiringComplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L78-L80","name":"Complex.instModule","line":78,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Complex.instModule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.instModule\"><span class=\"name\">Complex</span>.<span class=\"name\">instModule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L75-L76","name":"Complex.instDistribMulActionComplexToMonoidToMonoidWithZeroToAddMonoidToAddMonoidWithOneAddGroupWithOne","line":75,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Complex.instDistribMulActionComplexToMonoidToMonoidWithZeroToAddMonoidToAddMonoidWithOneAddGroupWithOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.instDistribMulActionComplexToMonoidToMonoidWithZeroToAddMonoidToAddMonoidWithOneAddGroupWithOne\"><span class=\"name\">Complex</span>.<span class=\"name\">instDistribMulActionComplexToMonoidToMonoidWithZeroToAddMonoidToAddMonoidWithOneAddGroupWithOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L71-L73","name":"Complex.distribSMul","line":71,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Complex.distribSMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.distribSMul\"><span class=\"name\">Complex</span>.<span class=\"name\">distribSMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L67-L69","name":"Complex.mulAction","line":67,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Complex.mulAction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.mulAction\"><span class=\"name\">Complex</span>.<span class=\"name\">mulAction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L64-L65","name":"Complex.instIsCentralScalarComplexInstSMulRealComplexMulOpposite","line":64,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Complex.instIsCentralScalarComplexInstSMulRealComplexMulOpposite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.instIsCentralScalarComplexInstSMulRealComplexMulOpposite\"><span class=\"name\">Complex</span>.<span class=\"name\">instIsCentralScalarComplexInstSMulRealComplexMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\"><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsCentralScalar\">IsCentralScalar</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsCentralScalar\">IsCentralScalar</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L61-L62","name":"Complex.instIsScalarTowerComplexInstSMulRealComplexInstSMulRealComplex","line":61,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Complex.instIsScalarTowerComplexInstSMulRealComplexInstSMulRealComplex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.instIsScalarTowerComplexInstSMulRealComplexInstSMulRealComplex\"><span class=\"name\">Complex</span>.<span class=\"name\">instIsScalarTowerComplexInstSMulRealComplexInstSMulRealComplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">S</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Complex/Module.lean#L58-L59","name":"Complex.instSMulCommClassComplexInstSMulRealComplexInstSMulRealComplex","line":58,"kind":"instance","docLink":"./Mathlib/Data/Complex/Module.html#Complex.instSMulCommClassComplexInstSMulRealComplexInstSMulRealComplex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Complex/Module.html#Complex.instSMulCommClassComplexInstSMulRealComplexInstSMulRealComplex\"><span class=\"name\">Complex</span>.<span class=\"name\">instSMulCommClassComplexInstSMulRealComplexInstSMulRealComplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">S</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"}]}