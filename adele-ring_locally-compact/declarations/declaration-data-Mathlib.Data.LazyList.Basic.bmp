{"name":"Mathlib.Data.LazyList.Basic","instances":[{"typeNames":["LazyList"],"name":"LazyList.instTraversable","className":"Traversable"},{"typeNames":["LazyList"],"name":"LazyList.instLawfulTraversable","className":"LawfulTraversable"},{"typeNames":["LazyList"],"name":"LazyList.instLawfulMonad_mathlib","className":"LawfulMonad"}],"imports":["Init","Mathlib.Control.Traversable.Equiv","Mathlib.Control.Traversable.Instances","Batteries.Data.LazyList","Mathlib.Lean.Thunk"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/LazyList/Basic.lean#L80-L106","name":"LazyList.instLawfulMonad_mathlib","line":80,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instLawfulMonad_mathlib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.instLawfulMonad_mathlib\"><span class=\"name\">LazyList</span>.<span class=\"name\">instLawfulMonad_mathlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Batteries/Data/LazyList.html#LazyList\">LazyList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/LazyList/Basic.lean#L70-L77","name":"LazyList.bind_singleton","line":70,"kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.bind_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.bind_singleton\"><span class=\"name\">LazyList</span>.<span class=\"name\">bind_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Batteries/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.bind</span> <span class=\"fn\">LazyList.singleton</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/LazyList/Basic.lean#L47-L67","name":"LazyList.instLawfulTraversable","line":47,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instLawfulTraversable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.instLawfulTraversable\"><span class=\"name\">LazyList</span>.<span class=\"name\">instLawfulTraversable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#LawfulTraversable\">LawfulTraversable</a> <a href=\"./Batteries/Data/LazyList.html#LazyList\">LazyList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/LazyList/Basic.lean#L42-L44","name":"LazyList.instTraversable","line":42,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instTraversable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.instTraversable\"><span class=\"name\">LazyList</span>.<span class=\"name\">instTraversable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <a href=\"./Batteries/Data/LazyList.html#LazyList\">LazyList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/LazyList/Basic.lean#L27-L39","name":"LazyList.listEquivLazyList","line":27,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.listEquivLazyList","doc":"Isomorphism between strict and lazy lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.listEquivLazyList\"><span class=\"name\">LazyList</span>.<span class=\"name\">listEquivLazyList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Batteries/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"}]}