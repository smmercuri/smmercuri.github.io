{"name":"Mathlib.Data.Matrix.Composition","instances":[],"imports":["Init","Mathlib.Data.Matrix.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L84-L93","name":"Matrix.compAlgEquiv","line":84,"kind":"def","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compAlgEquiv","doc":"`Matrix.comp` as `AlgEquiv` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAlgEquiv\"><span class=\"name\">Matrix</span>.<span class=\"name\">compAlgEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">K</span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">I</span> <span class=\"fn\">I</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">J</span> <span class=\"fn\">J</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Algebra/Equiv.html#AlgEquiv\">≃ₐ[</a><span class=\"fn\">K</span><a href=\"./Mathlib/Algebra/Algebra/Equiv.html#AlgEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">R</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L83-L83","name":"Matrix.compAlgEquiv_symm_apply","line":83,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compAlgEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAlgEquiv_symm_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">compAlgEquiv_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">K</span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAlgEquiv\">Matrix.compAlgEquiv</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">R</span> <span class=\"fn\">K</span></span>)</span>.symm</span> <span class=\"fn\">n</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<span class=\"fn\">j</span>, <span class=\"fn\">l</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L83-L83","name":"Matrix.compAlgEquiv_apply","line":83,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compAlgEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAlgEquiv_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">compAlgEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">K</span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">I</span> <span class=\"fn\">I</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">J</span> <span class=\"fn\">J</span> <span class=\"fn\">R</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ik : <span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(jl : <span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAlgEquiv\">Matrix.compAlgEquiv</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">R</span> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">ik</span> <span class=\"fn\">jl</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\"><span class=\"fn\">ik</span>.1</span> <span class=\"fn\"><span class=\"fn\">jl</span>.1</span> <span class=\"fn\"><span class=\"fn\">ik</span>.2</span> <span class=\"fn\"><span class=\"fn\">jl</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L70-L72","name":"Matrix.compLinearEquiv","line":70,"kind":"def","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compLinearEquiv","doc":"`Matrix.comp` as `LinearEquiv` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compLinearEquiv\"><span class=\"name\">Matrix</span>.<span class=\"name\">compLinearEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">K</span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">K</span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">R</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L69-L69","name":"Matrix.compLinearEquiv_symm_apply","line":69,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compLinearEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compLinearEquiv_symm_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">compLinearEquiv_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">K</span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">R</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compLinearEquiv\">Matrix.compLinearEquiv</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">K</span></span>)</span>.symm</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAddEquiv\">Matrix.compAddEquiv</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.symm</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L69-L69","name":"Matrix.compLinearEquiv_apply","line":69,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compLinearEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compLinearEquiv_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">compLinearEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">K</span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compLinearEquiv\">Matrix.compLinearEquiv</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAddEquiv\">Matrix.compAddEquiv</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L56-L60","name":"Matrix.compRingEquiv","line":56,"kind":"def","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compRingEquiv","doc":"`Matrix.comp` as `RingEquiv` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compRingEquiv\"><span class=\"name\">Matrix</span>.<span class=\"name\">compRingEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">I</span> <span class=\"fn\">I</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">J</span> <span class=\"fn\">J</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Ring/Equiv.html#RingEquiv\">≃+*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">R</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L55-L55","name":"Matrix.compRingEquiv_symm_apply","line":55,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compRingEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compRingEquiv_symm_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">compRingEquiv_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compRingEquiv\">Matrix.compRingEquiv</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">R</span></span>)</span>.symm</span> <span class=\"fn\">n</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<span class=\"fn\">j</span>, <span class=\"fn\">l</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L55-L55","name":"Matrix.compRingEquiv_apply","line":55,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compRingEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compRingEquiv_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">compRingEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">I</span> <span class=\"fn\">I</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">J</span> <span class=\"fn\">J</span> <span class=\"fn\">R</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ik : <span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(jl : <span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compRingEquiv\">Matrix.compRingEquiv</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">ik</span> <span class=\"fn\">jl</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\"><span class=\"fn\">ik</span>.1</span> <span class=\"fn\"><span class=\"fn\">jl</span>.1</span> <span class=\"fn\"><span class=\"fn\">ik</span>.2</span> <span class=\"fn\"><span class=\"fn\">jl</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L44-L46","name":"Matrix.compAddEquiv","line":44,"kind":"def","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compAddEquiv","doc":"`Matrix.comp` as `AddEquiv` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAddEquiv\"><span class=\"name\">Matrix</span>.<span class=\"name\">compAddEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">R</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L43-L43","name":"Matrix.compAddEquiv_symm_apply","line":43,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compAddEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAddEquiv_symm_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">compAddEquiv_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAddEquiv\">Matrix.compAddEquiv</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.symm</span> <span class=\"fn\">n</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<span class=\"fn\">j</span>, <span class=\"fn\">l</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L43-L43","name":"Matrix.compAddEquiv_apply","line":43,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.compAddEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAddEquiv_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">compAddEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ik : <span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(jl : <span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.compAddEquiv\">Matrix.compAddEquiv</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">ik</span> <span class=\"fn\">jl</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\"><span class=\"fn\">ik</span>.1</span> <span class=\"fn\"><span class=\"fn\">jl</span>.1</span> <span class=\"fn\"><span class=\"fn\">ik</span>.2</span> <span class=\"fn\"><span class=\"fn\">jl</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L32-L36","name":"Matrix.comp","line":32,"kind":"def","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.comp","doc":"I by J matrix where each entry is a K by L matrix is equivalent to\nI × K by J × L matrix "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.comp\"><span class=\"name\">Matrix</span>.<span class=\"name\">comp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">R</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L31-L31","name":"Matrix.comp_symm_apply","line":31,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.comp_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.comp_symm_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">comp_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.comp\">Matrix.comp</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.symm</span> <span class=\"fn\">n</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<span class=\"fn\">j</span>, <span class=\"fn\">l</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Matrix/Composition.lean#L31-L31","name":"Matrix.comp_apply","line":31,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Composition.html#Matrix.comp_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.comp_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">comp_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ik : <span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(jl : <span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Composition.html#Matrix.comp\">Matrix.comp</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">K</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">ik</span> <span class=\"fn\">jl</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\"><span class=\"fn\">ik</span>.1</span> <span class=\"fn\"><span class=\"fn\">jl</span>.1</span> <span class=\"fn\"><span class=\"fn\">ik</span>.2</span> <span class=\"fn\"><span class=\"fn\">jl</span>.2</span></span></span></div></div>"}]}