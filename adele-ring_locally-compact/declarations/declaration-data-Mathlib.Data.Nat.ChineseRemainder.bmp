{"name":"Mathlib.Data.Nat.ChineseRemainder","instances":[],"imports":["Init","Mathlib.Data.Nat.ModEq","Mathlib.Data.Nat.GCD.BigOperators"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L141-L145","name":"Nat.chineseRemainderOfFinset_lt_prod","line":141,"kind":"theorem","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfFinset_lt_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfFinset_lt_prod\"><span class=\"name\">Nat</span>.<span class=\"name\">chineseRemainderOfFinset_lt_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Set.Pairwise\">Set.Pairwise</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">t</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <a href=\"./Mathlib/Init/Function.html#Function.onFun\">on</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfFinset\">Nat.chineseRemainderOfFinset</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span> <span class=\"fn\">hs</span> <span class=\"fn\">pp</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.prod\">Finset.prod</a> <span class=\"fn\">t</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L136-L139","name":"Nat.chineseRemainderOfFinset","line":136,"kind":"def","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfFinset","doc":"The natural number less than `∏ i in t, s i` congruent to\n`a i` mod `s i` for all  `i ∈ t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfFinset\"><span class=\"name\">Nat</span>.<span class=\"name\">chineseRemainderOfFinset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Set.Pairwise\">Set.Pairwise</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">t</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <a href=\"./Mathlib/Init/Function.html#Function.onFun\">on</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{ <span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> // <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L126-L132","name":"Nat.chineseRemainderOfMultiset_lt_prod","line":126,"kind":"theorem","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfMultiset_lt_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfMultiset_lt_prod\"><span class=\"name\">Nat</span>.<span class=\"name\">chineseRemainderOfMultiset_lt_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nod : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Nodup.html#Multiset.Nodup\">Multiset.Nodup</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">m</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Set.Pairwise\">Set.Pairwise</a> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">ι</span> | <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span>}</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <a href=\"./Mathlib/Init/Function.html#Function.onFun\">on</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfMultiset\">Nat.chineseRemainderOfMultiset</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">nod</span> <span class=\"fn\">hs</span> <span class=\"fn\">pp</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Multiset/Basic.html#Multiset.prod\">Multiset.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.map\">Multiset.map</a> <span class=\"fn\">s</span> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L103-L124","name":"Nat.chineseRemainderOfMultiset","line":103,"kind":"def","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfMultiset","doc":"The natural number less than `(m.map s).prod` congruent to\n`a i` mod `s i` for all  `i ∈ m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfMultiset\"><span class=\"name\">Nat</span>.<span class=\"name\">chineseRemainderOfMultiset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Nodup.html#Multiset.Nodup\">Multiset.Nodup</a> <span class=\"fn\">m</span></span> →\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">m</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Set.Pairwise\">Set.Pairwise</a> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">ι</span> | <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span>}</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <a href=\"./Mathlib/Init/Function.html#Function.onFun\">on</a> <span class=\"fn\">s</span></span>)</span></span> → <span class=\"fn\">{ <span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> // <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">m</span>, <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L88-L99","name":"Nat.chineseRemainderOfList_perm","line":88,"kind":"theorem","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList_perm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList_perm\"><span class=\"name\">Nat</span>.<span class=\"name\">chineseRemainderOfList_perm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Perm\">List.Perm</a> <span class=\"fn\">l</span> <span class=\"fn\">l'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(co : <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <a href=\"./Mathlib/Init/Function.html#Function.onFun\">on</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList\">Nat.chineseRemainderOfList</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">co</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList\">Nat.chineseRemainderOfList</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">l'</span> <span class=\"fn\">⋯</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L77-L86","name":"Nat.chineseRemainderOfList_modEq_unique","line":77,"kind":"theorem","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList_modEq_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList_modEq_unique\"><span class=\"name\">Nat</span>.<span class=\"name\">chineseRemainderOfList_modEq_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(co : <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <a href=\"./Mathlib/Init/Function.html#Function.onFun\">on</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList\">Nat.chineseRemainderOfList</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">co</span></span>)</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span></span>)</span></span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L66-L75","name":"Nat.chineseRemainderOfList_lt_prod","line":66,"kind":"theorem","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList_lt_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList_lt_prod\"><span class=\"name\">Nat</span>.<span class=\"name\">chineseRemainderOfList_lt_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(co : <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <a href=\"./Mathlib/Init/Function.html#Function.onFun\">on</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList\">Nat.chineseRemainderOfList</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">co</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L63-L64","name":"Nat.chineseRemainderOfList_nil","line":63,"kind":"theorem","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList_nil\"><span class=\"name\">Nat</span>.<span class=\"name\">chineseRemainderOfList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList\">Nat.chineseRemainderOfList</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">[]</span> <span class=\"fn\">⋯</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L51-L61","name":"Nat.chineseRemainderOfList","line":51,"kind":"def","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList","doc":"The natural number less than `(l.map s).prod` congruent to\n`a i` mod `s i` for all  `i ∈ l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.chineseRemainderOfList\"><span class=\"name\">Nat</span>.<span class=\"name\">chineseRemainderOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <a href=\"./Mathlib/Init/Function.html#Function.onFun\">on</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">l</span></span> → <span class=\"fn\">{ <span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> // <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L39-L45","name":"Nat.modEq_list_prod_iff'","line":39,"kind":"theorem","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.modEq_list_prod_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.modEq_list_prod_iff'\"><span class=\"name\">Nat</span>.<span class=\"name\">modEq_list_prod_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(co : <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <a href=\"./Mathlib/Init/Function.html#Function.onFun\">on</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span></span>)</span></span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Nat/ChineseRemainder.lean#L28-L37","name":"Nat.modEq_list_prod_iff","line":28,"kind":"theorem","docLink":"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.modEq_list_prod_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/ChineseRemainder.html#Nat.modEq_list_prod_iff\"><span class=\"name\">Nat</span>.<span class=\"name\">modEq_list_prod_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(co : <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">l</span></span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">l</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></span></span></div></div>"}]}