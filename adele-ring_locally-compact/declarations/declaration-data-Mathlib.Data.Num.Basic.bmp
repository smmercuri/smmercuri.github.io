{"name":"Mathlib.Data.Num.Basic","instances":[{"typeNames":["Eq"],"name":"instDecidableEqPosNum","className":"Decidable"},{"typeNames":["PosNum"],"name":"instOnePosNum","className":"One"},{"typeNames":["PosNum"],"name":"instInhabitedPosNum","className":"Inhabited"},{"typeNames":["Eq"],"name":"instDecidableEqNum","className":"Decidable"},{"typeNames":["Num"],"name":"instZeroNum","className":"Zero"},{"typeNames":["Num"],"name":"instOneNum","className":"One"},{"typeNames":["Num"],"name":"instInhabitedNum","className":"Inhabited"},{"typeNames":["Eq"],"name":"instDecidableEqZNum","className":"Decidable"},{"typeNames":["ZNum"],"name":"instZeroZNum","className":"Zero"},{"typeNames":["ZNum"],"name":"instOneZNum","className":"One"},{"typeNames":["ZNum"],"name":"instInhabitedZNum","className":"Inhabited"},{"typeNames":["PosNum"],"name":"PosNum.instAddPosNum","className":"Add"},{"typeNames":["PosNum"],"name":"PosNum.instMulPosNum","className":"Mul"},{"typeNames":["PosNum","HAdd.hAdd"],"name":"PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat","className":"OfNat"},{"typeNames":["PosNum"],"name":"PosNum.instLTPosNum","className":"LT"},{"typeNames":["PosNum"],"name":"PosNum.instLEPosNum","className":"LE"},{"typeNames":[],"name":"PosNum.decidableLT","className":"Decidable"},{"typeNames":[],"name":"PosNum.decidableLE","className":"Decidable"},{"typeNames":["PosNum"],"name":"posNumCoe","className":"CoeHTCT"},{"typeNames":["Num"],"name":"numNatCoe","className":"CoeHTCT"},{"typeNames":["PosNum"],"name":"instReprPosNum","className":"Repr"},{"typeNames":["Num"],"name":"instReprNum","className":"Repr"},{"typeNames":["Num"],"name":"Num.instAddNum","className":"Add"},{"typeNames":["Num"],"name":"Num.instMulNum","className":"Mul"},{"typeNames":["Num"],"name":"Num.instLTNum","className":"LT"},{"typeNames":["Num"],"name":"Num.instLENum","className":"LE"},{"typeNames":[],"name":"Num.decidableLT","className":"Decidable"},{"typeNames":[],"name":"Num.decidableLE","className":"Decidable"},{"typeNames":["ZNum"],"name":"ZNum.instNegZNum","className":"Neg"},{"typeNames":["PosNum"],"name":"PosNum.instSubPosNum","className":"Sub"},{"typeNames":["Num"],"name":"Num.instSubNum","className":"Sub"},{"typeNames":["ZNum"],"name":"ZNum.instAddZNum","className":"Add"},{"typeNames":["ZNum"],"name":"ZNum.instMulZNum","className":"Mul"},{"typeNames":["ZNum"],"name":"ZNum.instLTZNum","className":"LT"},{"typeNames":["ZNum"],"name":"ZNum.instLEZNum","className":"LE"},{"typeNames":[],"name":"ZNum.decidableLT","className":"Decidable"},{"typeNames":[],"name":"ZNum.decidableLE","className":"Decidable"},{"typeNames":["Num"],"name":"Num.instDivNum","className":"Div"},{"typeNames":["Num"],"name":"Num.instModNum","className":"Mod"},{"typeNames":["ZNum"],"name":"ZNum.instDivZNum","className":"Div"},{"typeNames":["ZNum"],"name":"ZNum.instModZNum","className":"Mod"},{"typeNames":["ZNum"],"name":"znumCoe","className":"CoeHTCT"},{"typeNames":["ZNum"],"name":"instReprZNum","className":"Repr"}],"imports":["Init","Lean.Linter.Deprecated","Mathlib.Mathport.Rename","Mathlib.Init.Data.Nat.Bitwise","Mathlib.Init.Data.Int.Basic","Mathlib.Init.ZeroOne"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L689-L690","name":"instReprZNum","line":689,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instReprZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instReprZNum\"><span class=\"name\">instReprZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L685-L686","name":"znumCoe","line":685,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#znumCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#znumCoe\"><span class=\"name\">znumCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L678-L681","name":"castZNum","line":678,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#castZNum","doc":"`castZNum` casts a `ZNum` into any type which has `0`, `1`, `+` and `neg` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#castZNum\"><span class=\"name\">castZNum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L666-L667","name":"ZNum.gcd","line":666,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.gcd","doc":"Greatest Common Divisor (GCD) of two `ZNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.gcd\"><span class=\"name\">ZNum</span>.<span class=\"name\">gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L662-L663","name":"ZNum.instModZNum","line":662,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instModZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instModZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instModZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L659-L660","name":"ZNum.instDivZNum","line":659,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instDivZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instDivZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instDivZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L653-L656","name":"ZNum.mod","line":653,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.mod","doc":"Modulus of `ZNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.mod\"><span class=\"name\">ZNum</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L643-L649","name":"ZNum.div","line":643,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.div","doc":"Division of `ZNum`, where `x / 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.div\"><span class=\"name\">ZNum</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L634-L635","name":"Num.gcd","line":634,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.gcd","doc":"Greatest Common Divisor (GCD) of two `Num`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.gcd\"><span class=\"name\">Num</span>.<span class=\"name\">gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L627-L630","name":"Num.gcdAux","line":627,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.gcdAux","doc":"Auxiliary definition for `Num.gcd`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.gcdAux\"><span class=\"name\">Num</span>.<span class=\"name\">gcdAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L623-L624","name":"Num.instModNum","line":623,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instModNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instModNum\"><span class=\"name\">Num</span>.<span class=\"name\">instModNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L620-L621","name":"Num.instDivNum","line":620,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instDivNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instDivNum\"><span class=\"name\">Num</span>.<span class=\"name\">instDivNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L614-L617","name":"Num.mod","line":614,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.mod","doc":"Modulus of `Num`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.mod\"><span class=\"name\">Num</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L607-L610","name":"Num.div","line":607,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.div","doc":"Division of `Num`s, where `x / 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.div\"><span class=\"name\">Num</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L586-L587","name":"PosNum.mod'","line":586,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.mod'","doc":"Modulus of `PosNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.mod'\"><span class=\"name\">PosNum</span>.<span class=\"name\">mod'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L581-L582","name":"PosNum.div'","line":581,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.div'","doc":"Division of `PosNum`, "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.div'\"><span class=\"name\">PosNum</span>.<span class=\"name\">div'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L570-L577","name":"PosNum.divMod","line":570,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.divMod","doc":"`divMod x y = (y / x, y % x)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.divMod\"><span class=\"name\">PosNum</span>.<span class=\"name\">divMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L563-L566","name":"PosNum.divModAux","line":563,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.divModAux","doc":"Auxiliary definition for `PosNum.divMod`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.divModAux\"><span class=\"name\">PosNum</span>.<span class=\"name\">divModAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L554-L555","name":"ZNum.decidableLE","line":554,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.decidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.decidableLE\"><span class=\"name\">ZNum</span>.<span class=\"name\">decidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L550-L551","name":"ZNum.decidableLT","line":550,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.decidableLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.decidableLT\"><span class=\"name\">ZNum</span>.<span class=\"name\">decidableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L547-L548","name":"ZNum.instLEZNum","line":547,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instLEZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instLEZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instLEZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L544-L545","name":"ZNum.instLTZNum","line":544,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instLTZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instLTZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instLTZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L534-L541","name":"ZNum.cmp","line":534,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.cmp","doc":"Ordering on `ZNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.cmp\"><span class=\"name\">ZNum</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L528-L529","name":"ZNum.instMulZNum","line":528,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instMulZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instMulZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instMulZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L519-L525","name":"ZNum.mul","line":519,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.mul","doc":"Multiplication of `ZNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.mul\"><span class=\"name\">ZNum</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L515-L516","name":"ZNum.instAddZNum","line":515,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instAddZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instAddZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instAddZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L506-L512","name":"ZNum.add","line":506,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.add","doc":"Addition of `ZNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.add\"><span class=\"name\">ZNum</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L496-L497","name":"Num.instSubNum","line":496,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instSubNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instSubNum\"><span class=\"name\">Num</span>.<span class=\"name\">instSubNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L492-L493","name":"Num.sub","line":492,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.sub","doc":"Subtraction of two `Num`s, where if `a < b`, `a - b = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.sub\"><span class=\"name\">Num</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L487-L488","name":"Num.psub","line":487,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.psub","doc":"Subtraction of two `Num`s, producing an `Option Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.psub\"><span class=\"name\">Num</span>.<span class=\"name\">psub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L479-L483","name":"Num.sub'","line":479,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.sub'","doc":"Subtraction of two `Num`s, producing a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.sub'\"><span class=\"name\">Num</span>.<span class=\"name\">sub'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L473-L475","name":"Num.ofZNum","line":473,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ofZNum","doc":"Converts a `ZNum` to an `Option Num`, where `ofZNum p = 0` if `p < 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.ofZNum\"><span class=\"name\">Num</span>.<span class=\"name\">ofZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L466-L469","name":"Num.ofZNum'","line":466,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ofZNum'","doc":"Converts a `ZNum` to an `Option Num`, where `ofZNum' p = none` if `p < 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.ofZNum'\"><span class=\"name\">Num</span>.<span class=\"name\">ofZNum'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L458-L462","name":"Num.div2","line":458,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.div2","doc":"Divides a `Num` by `2` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.div2\"><span class=\"name\">Num</span>.<span class=\"name\">div2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L452-L454","name":"Num.pred","line":452,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.pred","doc":"The predecessor of a `Num` as a `Num`, where `pred 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.pred\"><span class=\"name\">Num</span>.<span class=\"name\">pred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L446-L448","name":"Num.ppred","line":446,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ppred","doc":"The predecessor of a `Num` as an `Option Num`, where `ppred 0 = none` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.ppred\"><span class=\"name\">Num</span>.<span class=\"name\">ppred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L438-L439","name":"PosNum.instSubPosNum","line":438,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instSubPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instSubPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instSubPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L432-L435","name":"PosNum.sub","line":432,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.sub","doc":"Subtraction of `PosNum`s, where if `a < b`, then `a - b = 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.sub\"><span class=\"name\">PosNum</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L426-L428","name":"PosNum.ofZNum","line":426,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofZNum","doc":"Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.ofZNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">ofZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L420-L422","name":"PosNum.ofZNum'","line":420,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofZNum'","doc":"Converts a `ZNum` to `Option PosNum`, where it is `some` if the `ZNum` was positive and `none`\notherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.ofZNum'\"><span class=\"name\">PosNum</span>.<span class=\"name\">ofZNum'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L409-L415","name":"PosNum.sub'","line":409,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.sub'","doc":"Subtraction of two `PosNum`s, producing a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.sub'\"><span class=\"name\">PosNum</span>.<span class=\"name\">sub'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L397-L399","name":"ZNum.ofInt'","line":397,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.ofInt'","doc":"Converts an `Int` to a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.ofInt'\"><span class=\"name\">ZNum</span>.<span class=\"name\">ofInt'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L390-L393","name":"ZNum.bitm1","line":390,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.bitm1","doc":"`bitm1 x` appends a `1` to the end of `x`, mapping `x` to `2 * x - 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.bitm1\"><span class=\"name\">ZNum</span>.<span class=\"name\">bitm1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L383-L386","name":"ZNum.bit1","line":383,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.bit1","doc":"`bit1 x` appends a `1` to the end of `x`, mapping `x` to `2 * x + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.bit1\"><span class=\"name\">ZNum</span>.<span class=\"name\">bit1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L376-L379","name":"ZNum.bit0","line":376,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.bit0","doc":"`bit0 n` appends a `0` to the end of `n`, where `bit0 n = n0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.bit0\"><span class=\"name\">ZNum</span>.<span class=\"name\">bit0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L369-L372","name":"ZNum.pred","line":369,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.pred","doc":"The predecessor of a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.pred\"><span class=\"name\">ZNum</span>.<span class=\"name\">pred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L362-L365","name":"ZNum.succ","line":362,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.succ","doc":"The successor of a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.succ\"><span class=\"name\">ZNum</span>.<span class=\"name\">succ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L355-L358","name":"ZNum.abs","line":355,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.abs","doc":"The absolute value of a `ZNum` as a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.abs\"><span class=\"name\">ZNum</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L351-L352","name":"ZNum.instNegZNum","line":351,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instNegZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instNegZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instNegZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L345-L348","name":"ZNum.zNeg","line":345,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.zNeg","doc":"The negation of a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.zNeg\"><span class=\"name\">ZNum</span>.<span class=\"name\">zNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L334-L335","name":"Num.ofNat'","line":334,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ofNat'","doc":"Converts a `Nat` to a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.ofNat'\"><span class=\"name\">Num</span>.<span class=\"name\">ofNat'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L328-L330","name":"Num.toZNumNeg","line":328,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.toZNumNeg","doc":"Converts `x : Num` to `-x : ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.toZNumNeg\"><span class=\"name\">Num</span>.<span class=\"name\">toZNumNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L322-L324","name":"Num.toZNum","line":322,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.toZNum","doc":"Converts a `Num` to a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.toZNum\"><span class=\"name\">Num</span>.<span class=\"name\">toZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L317-L318","name":"Num.decidableLE","line":317,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.decidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.decidableLE\"><span class=\"name\">Num</span>.<span class=\"name\">decidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L313-L314","name":"Num.decidableLT","line":313,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.decidableLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.decidableLT\"><span class=\"name\">Num</span>.<span class=\"name\">decidableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L310-L311","name":"Num.instLENum","line":310,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instLENum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instLENum\"><span class=\"name\">Num</span>.<span class=\"name\">instLENum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L307-L308","name":"Num.instLTNum","line":307,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instLTNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instLTNum\"><span class=\"name\">Num</span>.<span class=\"name\">instLTNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L300-L304","name":"Num.cmp","line":300,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.cmp","doc":"Ordering of `Num`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.cmp\"><span class=\"name\">Num</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L294-L295","name":"Num.instMulNum","line":294,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instMulNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instMulNum\"><span class=\"name\">Num</span>.<span class=\"name\">instMulNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L288-L291","name":"Num.mul","line":288,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.mul","doc":"Multiplication of two `Num`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.mul\"><span class=\"name\">Num</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L282-L284","name":"Num.natSize","line":282,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.natSize","doc":"The number of bits required to represent a `Num`, as a `Nat`. `size 0` is defined to be `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.natSize\"><span class=\"name\">Num</span>.<span class=\"name\">natSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L276-L278","name":"Num.size","line":276,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.size","doc":"The number of bits required to represent a `Num`, as a `Num`. `size 0` is defined to be `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.size\"><span class=\"name\">Num</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L271-L272","name":"Num.bit","line":271,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.bit","doc":"`bit b n` appends the bit `b` to the end of `n`, where `bit tt x = x1` and `bit ff x = x0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.bit\"><span class=\"name\">Num</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L265-L267","name":"Num.bit1","line":265,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.bit1","doc":"`bit1 n` appends a `1` to the end of `n`, where `bit1 n = n1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.bit1\"><span class=\"name\">Num</span>.<span class=\"name\">bit1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L259-L261","name":"Num.bit0","line":259,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.bit0","doc":"`bit0 n` appends a `0` to the end of `n`, where `bit0 n = n0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.bit0\"><span class=\"name\">Num</span>.<span class=\"name\">bit0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L255-L256","name":"Num.instAddNum","line":255,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instAddNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instAddNum\"><span class=\"name\">Num</span>.<span class=\"name\">instAddNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L249-L252","name":"Num.add","line":249,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.add","doc":"Addition of two `Num`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.add\"><span class=\"name\">Num</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L244-L245","name":"Num.succ","line":244,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.succ","doc":"The successor of a `Num` as a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.succ\"><span class=\"name\">Num</span>.<span class=\"name\">succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L238-L240","name":"Num.succ'","line":238,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.succ'","doc":"The successor of a `Num` as a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.succ'\"><span class=\"name\">Num</span>.<span class=\"name\">succ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L228-L229","name":"instReprNum","line":228,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instReprNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instReprNum\"><span class=\"name\">instReprNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L225-L226","name":"instReprPosNum","line":225,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instReprPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instReprPosNum\"><span class=\"name\">instReprPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L219-L220","name":"numNatCoe","line":219,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#numNatCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#numNatCoe\"><span class=\"name\">numNatCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L214-L215","name":"posNumCoe","line":214,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#posNumCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#posNumCoe\"><span class=\"name\">posNumCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L208-L210","name":"castNum","line":208,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#castNum","doc":"`castNum` casts a `Num` into any type which has `0`, `1` and `+`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#castNum\"><span class=\"name\">castNum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L201-L204","name":"castPosNum","line":201,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#castPosNum","doc":"`castPosNum` casts a `PosNum` into any type which has `1` and `+`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#castPosNum\"><span class=\"name\">castPosNum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L187-L188","name":"PosNum.decidableLE","line":187,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.decidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.decidableLE\"><span class=\"name\">PosNum</span>.<span class=\"name\">decidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L183-L184","name":"PosNum.decidableLT","line":183,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.decidableLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.decidableLT\"><span class=\"name\">PosNum</span>.<span class=\"name\">decidableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L180-L181","name":"PosNum.instLEPosNum","line":180,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instLEPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instLEPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instLEPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L177-L178","name":"PosNum.instLTPosNum","line":177,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instLTPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instLTPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instLTPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L167-L174","name":"PosNum.cmp","line":167,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.cmp","doc":"Ordering of `PosNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.cmp\"><span class=\"name\">PosNum</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L161-L162","name":"PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat","line":161,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat\"><span class=\"name\">PosNum</span>.<span class=\"name\">instOfNatPosNumHAddNatInstHAddInstAddNatOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L157-L158","name":"PosNum.ofNat","line":157,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofNat","doc":"`ofNat n` is the `PosNum` corresponding to `n`, except for `ofNat 0 = 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.ofNat\"><span class=\"name\">PosNum</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L151-L153","name":"PosNum.ofNatSucc","line":151,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofNatSucc","doc":"`ofNatSucc n` is the `PosNum` corresponding to `n + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.ofNatSucc\"><span class=\"name\">PosNum</span>.<span class=\"name\">ofNatSucc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L147-L148","name":"PosNum.instMulPosNum","line":147,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instMulPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instMulPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instMulPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L141-L144","name":"PosNum.mul","line":141,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.mul","doc":"Multiplication of two `PosNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.mul\"><span class=\"name\">PosNum</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L134-L137","name":"PosNum.natSize","line":134,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.natSize","doc":"The number of bits of a `PosNum`, as a `Nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.natSize\"><span class=\"name\">PosNum</span>.<span class=\"name\">natSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L127-L130","name":"PosNum.size","line":127,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.size","doc":"The number of bits of a `PosNum`, as a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.size\"><span class=\"name\">PosNum</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L122-L123","name":"PosNum.pred","line":122,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.pred","doc":"The predecessor of a `PosNum` as a `PosNum`. This means that `pred 1 = 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.pred\"><span class=\"name\">PosNum</span>.<span class=\"name\">pred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L115-L118","name":"PosNum.pred'","line":115,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.pred'","doc":"The predecessor of a `PosNum` as a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.pred'\"><span class=\"name\">PosNum</span>.<span class=\"name\">pred'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L111-L112","name":"PosNum.instAddPosNum","line":111,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instAddPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instAddPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instAddPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L102-L108","name":"PosNum.add","line":102,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.add","doc":"Addition of two `PosNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.add\"><span class=\"name\">PosNum</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L96-L98","name":"PosNum.isOne","line":96,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.isOne","doc":"Returns a boolean for whether the `PosNum` is `one`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.isOne\"><span class=\"name\">PosNum</span>.<span class=\"name\">isOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L89-L92","name":"PosNum.succ","line":89,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.succ","doc":"The successor of a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.succ\"><span class=\"name\">PosNum</span>.<span class=\"name\">succ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L84-L85","name":"PosNum.bit","line":84,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.bit","doc":"`bit b n` appends the bit `b` to the end of `n`, where `bit tt x = x1` and `bit ff x = x0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.bit\"><span class=\"name\">PosNum</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L78-L79","name":"instInhabitedZNum","line":78,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instInhabitedZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instInhabitedZNum\"><span class=\"name\">instInhabitedZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L75-L76","name":"instOneZNum","line":75,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instOneZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instOneZNum\"><span class=\"name\">instOneZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L72-L73","name":"instZeroZNum","line":72,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instZeroZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instZeroZNum\"><span class=\"name\">instZeroZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L68-L68","name":"instDecidableEqZNum","line":68,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instDecidableEqZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instDecidableEqZNum\"><span class=\"name\">instDecidableEqZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L67-L67","name":"ZNum.neg","line":67,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.neg\"><span class=\"name\">ZNum</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L66-L66","name":"ZNum.pos","line":66,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.pos\"><span class=\"name\">ZNum</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L65-L65","name":"ZNum.zero","line":65,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.zero\"><span class=\"name\">ZNum</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L64-L68","name":"ZNum","line":64,"kind":"inductive","docLink":"./Mathlib/Data/Num/Basic.html#ZNum","doc":"Representation of integers using trichotomy around zero.\n\n13 = 1101(base 2) = pos (bit1 (bit0 (bit1 one)))\n-13 = -1101(base 2) = neg (bit1 (bit0 (bit1 one))) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum\"><span class=\"name\">ZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L57-L58","name":"instInhabitedNum","line":57,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instInhabitedNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instInhabitedNum\"><span class=\"name\">instInhabitedNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L54-L55","name":"instOneNum","line":54,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instOneNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instOneNum\"><span class=\"name\">instOneNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L51-L52","name":"instZeroNum","line":51,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instZeroNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instZeroNum\"><span class=\"name\">instZeroNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L47-L47","name":"instDecidableEqNum","line":47,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instDecidableEqNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instDecidableEqNum\"><span class=\"name\">instDecidableEqNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L46-L46","name":"Num.pos","line":46,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#Num.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.pos\"><span class=\"name\">Num</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L45-L45","name":"Num.zero","line":45,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#Num.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.zero\"><span class=\"name\">Num</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L44-L47","name":"Num","line":44,"kind":"inductive","docLink":"./Mathlib/Data/Num/Basic.html#Num","doc":"The type of nonnegative binary numbers, using `PosNum`.\n\n13 = 1101(base 2) = pos (bit1 (bit0 (bit1 one))) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num\"><span class=\"name\">Num</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L38-L39","name":"instInhabitedPosNum","line":38,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instInhabitedPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instInhabitedPosNum\"><span class=\"name\">instInhabitedPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L35-L36","name":"instOnePosNum","line":35,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instOnePosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instOnePosNum\"><span class=\"name\">instOnePosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L32-L32","name":"instDecidableEqPosNum","line":32,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instDecidableEqPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instDecidableEqPosNum\"><span class=\"name\">instDecidableEqPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L31-L31","name":"PosNum.bit0","line":31,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.bit0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.bit0\"><span class=\"name\">PosNum</span>.<span class=\"name\">bit0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L30-L30","name":"PosNum.bit1","line":30,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.bit1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.bit1\"><span class=\"name\">PosNum</span>.<span class=\"name\">bit1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L29-L29","name":"PosNum.one","line":29,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.one\"><span class=\"name\">PosNum</span>.<span class=\"name\">one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Num/Basic.lean#L28-L32","name":"PosNum","line":28,"kind":"inductive","docLink":"./Mathlib/Data/Num/Basic.html#PosNum","doc":"The type of positive binary numbers.\n\n13 = 1101(base 2) = bit1 (bit0 (bit1 one)) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum\"><span class=\"name\">PosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}