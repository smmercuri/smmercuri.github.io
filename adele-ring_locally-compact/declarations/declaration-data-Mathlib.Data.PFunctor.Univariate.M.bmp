{"name":"Mathlib.Data.PFunctor.Univariate.M","instances":[{"typeNames":["PFunctor.Approx.CofixA"],"name":"PFunctor.Approx.instInhabitedCofixA","className":"Inhabited"},{"typeNames":["PFunctor.Approx.Path"],"name":"PFunctor.Approx.Path.inhabited","className":"Inhabited"},{"typeNames":["PFunctor.Approx.CofixA"],"name":"PFunctor.Approx.CofixA.instSubsingleton","className":"Subsingleton"},{"typeNames":["PFunctor.M"],"name":"PFunctor.M.inhabited","className":"Inhabited"},{"typeNames":["PFunctor.MIntl"],"name":"PFunctor.MIntl.inhabited","className":"Inhabited"}],"imports":["Init","Mathlib.Data.PFunctor.Univariate.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L790-L797","name":"PFunctor.M.corec'","line":790,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec'","doc":"corecursor where it is possible to return a fully formed value at any point\nof the computation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">X</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">X</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L783-L784","name":"PFunctor.M.corec₁","line":783,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec₁","doc":"corecursor where the state of the computation can be sent downstream\nin the form of a recursive call "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec₁\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">X</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">X</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L766-L777","name":"PFunctor.M.corec_unique","line":766,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec_unique\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyp : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\">PFunctor.M.corec</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L754-L762","name":"PFunctor.M.bisim_equiv","line":754,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim_equiv\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">bisim_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> →\n    <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) (f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></span>) (f' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></span>),\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.B</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L737-L749","name":"PFunctor.M.bisim'","line":737,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">bisim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Q : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> →\n    <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) (f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></span>) (f' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></span>),\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.B</span> <span class=\"fn\">a</span></span>), <span class=\"fn\">∃ (x' : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x'</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x'</span></span></span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L719-L733","name":"PFunctor.M.bisim","line":719,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> →\n    <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) (f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></span>) (f' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span></span>),\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.B</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L714-L715","name":"PFunctor.M.dest_corec","line":714,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest_corec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest_corec\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest_corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\">PFunctor.M.corec</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\">PFunctor.M.corec</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L707-L708","name":"PFunctor.M.corecOn","line":707,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corecOn","doc":"corecursor for `M F` with swapped arguments "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corecOn\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corecOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x₀ : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L689-L698","name":"PFunctor.M.eq_of_bisim","line":689,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.eq_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.eq_of_bisim\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">eq_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bisim : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\">PFunctor.M.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L660-L685","name":"PFunctor.M.nth_of_bisim","line":660,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.nth_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.nth_of_bisim\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">nth_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bisim : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\">PFunctor.M.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">PFunctor.M.IsPath</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">PFunctor.M.IsPath</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₂</span></span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">PFunctor.M.iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">PFunctor.M.iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₂</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>) (f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>) (f' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>),\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree\">PFunctor.M.isubtree</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>           <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree\">PFunctor.M.isubtree</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L656-L656","name":"PFunctor.M.IsBisimulation.tail","line":656,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.tail","doc":"The tails are equal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.tail\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsBisimulation</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\">PFunctor.M.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span>)</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L654-L654","name":"PFunctor.M.IsBisimulation.head","line":654,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.head","doc":"The head of the trees are equal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.head\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsBisimulation</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\">PFunctor.M.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a'</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a'</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L652-L652","name":"PFunctor.M.IsBisimulation.mk","line":652,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsBisimulation</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(head : <span class=\"fn\">∀ {<span class=\"fn\">a </span>a' : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>} {<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a'</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a'</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tail : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>} {<span class=\"fn\">f </span>f' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span>)</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\">PFunctor.M.IsBisimulation</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L652-L656","name":"PFunctor.M.IsBisimulation","line":652,"kind":"structure","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation","doc":"Bisimulation is the standard proof technique for equality between\ninfinite tree-like structures "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsBisimulation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L625-L640","name":"PFunctor.M.ext","line":625,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">PFunctor.M.iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">PFunctor.M.iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L584-L617","name":"PFunctor.M.ext_aux","line":584,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext_aux\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">ext_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">PFunctor.M.Agree'</a> <span class=\"fn\">n</span> <span class=\"fn\">z</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">PFunctor.M.Agree'</a> <span class=\"fn\">n</span> <span class=\"fn\">z</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hrec : <span class=\"fn\">∀ (<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">ps</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">PFunctor.M.iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">PFunctor.M.iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">y</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.approx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.approx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L572-L580","name":"PFunctor.M.corec_def","line":572,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec_def\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x₀ : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\">PFunctor.M.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">x₀</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\">PFunctor.M.corec</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x₀</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L567-L568","name":"PFunctor.M.iselect_cons","line":567,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_cons\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">iselect_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">PFunctor.M.iselect</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">i</span> }</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ps</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">PFunctor.M.iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L561-L562","name":"PFunctor.M.iselect_nil","line":561,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_nil\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">iselect_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">PFunctor.M.iselect</a> <span class=\"fn\">[]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L554-L556","name":"PFunctor.M.isubtree_cons","line":554,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree_cons\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">isubtree_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree\">PFunctor.M.isubtree</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">i</span> }</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ps</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree\">PFunctor.M.isubtree</a> <span class=\"fn\">ps</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L546-L549","name":"PFunctor.M.ichildren_mk","line":546,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ichildren_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ichildren_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">ichildren_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx\">PFunctor.Idx</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ichildren\">PFunctor.M.ichildren</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Obj.iget\">PFunctor.Obj.iget</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L540-L541","name":"PFunctor.M.children_mk","line":540,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.children_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.children_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">children_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">PFunctor.M.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">x</span> }</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.children\">PFunctor.M.children</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">x</span> }</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L531-L535","name":"PFunctor.M.head_mk","line":531,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">head_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">PFunctor.M.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L509-L526","name":"PFunctor.M.iselect_eq_default","line":509,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_eq_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_eq_default\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">iselect_eq_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">PFunctor.M.IsPath</a> <span class=\"fn\">ps</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">PFunctor.M.iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">PFunctor.M.head</a> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L504-L505","name":"PFunctor.M.iselect","line":504,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect","doc":"similar to `isubtree` but returns the data at the end of the path instead\nof the whole subtree "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">iselect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L489-L497","name":"PFunctor.M.isubtree","line":489,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree","doc":"follow a path through a value of `M F` and return the subtree\nfound at the end of the path if it is a valid path for that value and\nreturn a default tree "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">isubtree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L477-L482","name":"PFunctor.M.isPath_cons'","line":477,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isPath_cons'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isPath_cons'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">isPath_cons'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">PFunctor.M.IsPath</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">i</span> }</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">PFunctor.M.IsPath</a> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L468-L473","name":"PFunctor.M.isPath_cons","line":468,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isPath_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isPath_cons\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">isPath_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a'</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">PFunctor.M.IsPath</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a'</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">i</span> }</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L462-L464","name":"PFunctor.M.IsPath.cons","line":462,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath.cons\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsPath</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">PFunctor.M.IsPath</a> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">PFunctor.M.IsPath</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">i</span> }</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L461-L461","name":"PFunctor.M.IsPath.nil","line":461,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath.nil\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsPath</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">PFunctor.M.IsPath</a> <span class=\"fn\">[]</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L460-L464","name":"PFunctor.M.IsPath","line":460,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath","doc":"`IsPath p x` tells us if `p` is a valid path through `x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L452-L455","name":"PFunctor.M.casesOn_mk'","line":452,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn_mk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn_mk'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">casesOn_mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>) → <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn'\">PFunctor.M.casesOn'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">x</span> }</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L445-L447","name":"PFunctor.M.casesOn_mk","line":445,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">casesOn_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">x</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn\">PFunctor.M.casesOn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L434-L440","name":"PFunctor.M.cases_mk","line":434,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.cases_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.cases_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">cases_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">x</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.cases\">PFunctor.M.cases</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L403-L429","name":"PFunctor.M.agree_iff_agree'","line":403,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.agree_iff_agree'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.agree_iff_agree'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">agree_iff_agree'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">PFunctor.Approx.Agree</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.approx</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.approx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">PFunctor.M.Agree'</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L395-L399","name":"PFunctor.M.agree'_refl","line":395,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.agree'_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.agree'_refl\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">agree'_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">PFunctor.M.Agree'</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L388-L390","name":"PFunctor.M.approx_mk","line":388,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.approx_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.approx_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">approx_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span>.approx</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro\">PFunctor.Approx.CofixA.intro</a> <span class=\"fn\">a</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span>.approx</span> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L383-L384","name":"PFunctor.M.casesOn'","line":383,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn'","doc":"destructor for M-types, similar to `casesOn` but also\ngives access directly to the root and subtrees on an M-type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">casesOn'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Sort</a> w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>) → <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L376-L377","name":"PFunctor.M.casesOn","line":376,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn","doc":"destructor for M-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">casesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Sort</a> w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">x</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L367-L371","name":"PFunctor.M.cases","line":367,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.cases","doc":"destructor for M-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.cases\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Sort</a> w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">x</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L362-L362","name":"PFunctor.M.mk_inj","line":362,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk_inj\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">mk_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L335-L358","name":"PFunctor.M.mk_dest","line":335,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk_dest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk_dest\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">mk_dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L330-L330","name":"PFunctor.M.dest_mk","line":330,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L324-L325","name":"PFunctor.M.Agree'.step","line":324,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'.step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'.step\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Agree'</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x' : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y' : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">x</span> }</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">PFunctor.M.mk</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">y</span> }</span></span></span> →\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">PFunctor.M.Agree'</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">PFunctor.M.Agree'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">x'</span> <span class=\"fn\">y'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L323-L323","name":"PFunctor.M.Agree'.trivial","line":323,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'.trivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'.trivial\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Agree'</span>.<span class=\"name\">trivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">PFunctor.M.Agree'</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L322-L325","name":"PFunctor.M.Agree'","line":322,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'","doc":"`Agree' n` relates two trees of type `M F` that\nare the same up to depth `n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Agree'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L313-L316","name":"PFunctor.M.mk","line":313,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk","doc":"constructor for M-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L301-L306","name":"PFunctor.M.Approx.P_mk","line":301,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Approx.P_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Approx.P_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Approx</span>.<span class=\"name\">P_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree\">PFunctor.Approx.AllAgree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Approx.sMk\">PFunctor.M.Approx.sMk</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L295-L297","name":"PFunctor.M.Approx.sMk","line":295,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Approx.sMk","doc":"generates the approximations needed for `M.mk` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Approx.sMk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Approx</span>.<span class=\"name\">sMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L287-L288","name":"PFunctor.M.dest","line":287,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest","doc":"unfold an M-type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L281-L282","name":"PFunctor.M.truncate_approx","line":281,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.truncate_approx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.truncate_approx\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">truncate_approx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate\">PFunctor.Approx.truncate</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.approx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.approx</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L276-L277","name":"PFunctor.M.head'_eq_head","line":276,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head'_eq_head","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head'_eq_head\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">head'_eq_head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">PFunctor.Approx.head'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.approx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">PFunctor.M.head</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L271-L272","name":"PFunctor.M.head_eq_head'","line":271,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_eq_head'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_eq_head'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">head_eq_head'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">PFunctor.M.head</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">PFunctor.Approx.head'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.approx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L266-L267","name":"PFunctor.M.head_succ","line":266,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_succ\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">head_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">PFunctor.Approx.head'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.approx</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">PFunctor.Approx.head'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.approx</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">m</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L260-L262","name":"PFunctor.M.ichildren","line":260,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ichildren","doc":"select a subtree using an `i : F.Idx` or return an arbitrary tree if\n`i` designates no subtree of `x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ichildren\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">ichildren</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx\">PFunctor.Idx</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L244-L254","name":"PFunctor.M.children","line":244,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.children","doc":"return all the subtrees of the root of a tree `x : M F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.children\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">children</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">PFunctor.M.head</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L238-L239","name":"PFunctor.M.head","line":238,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head","doc":"given a tree generated by `F`, `head` gives us the first piece of data\nit contains "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.A</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L230-L232","name":"PFunctor.M.corec","line":230,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec","doc":"Corecursor for the M-type defined by `F`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L217-L221","name":"PFunctor.M.ext'","line":217,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">ext'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.approx</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.approx</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L210-L211","name":"PFunctor.MIntl.inhabited","line":210,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.inhabited\"><span class=\"name\">PFunctor</span>.<span class=\"name\">MIntl</span>.<span class=\"name\">inhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl\">PFunctor.MIntl</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L204-L206","name":"PFunctor.M.inhabited","line":204,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.inhabited\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">inhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L198-L200","name":"PFunctor.M.default_consistent","line":198,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.default_consistent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.default_consistent\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">default_consistent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">PFunctor.Approx.Agree</a> <span class=\"fn\">default</span> <span class=\"fn\">default</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L193-L194","name":"PFunctor.M","line":193,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M","doc":"For polynomial functor `F`, `M F` is its final coalgebra "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L188-L188","name":"PFunctor.MIntl.consistent","line":188,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.consistent","doc":"Each approximation agrees with the next "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.consistent\"><span class=\"name\">PFunctor</span>.<span class=\"name\">MIntl</span>.<span class=\"name\">consistent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl\">PFunctor.MIntl</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree\">PFunctor.Approx.AllAgree</a> <span class=\"fn\"><span class=\"fn\">self</span>.approx</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L186-L186","name":"PFunctor.MIntl.approx","line":186,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx","doc":"An `n`-th level approximation, for each depth `n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\"><span class=\"name\">PFunctor</span>.<span class=\"name\">MIntl</span>.<span class=\"name\">approx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl\">PFunctor.MIntl</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L184-L184","name":"PFunctor.MIntl.mk","line":184,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">MIntl</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(approx : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(consistent : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree\">PFunctor.Approx.AllAgree</a> <span class=\"fn\">approx</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl\">PFunctor.MIntl</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L184-L188","name":"PFunctor.MIntl","line":184,"kind":"structure","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl","doc":"Internal definition for `M`. It is needed to avoid name clashes\nbetween `M.mk` and `M.cases_on` and the declarations generated for\nthe structure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl\"><span class=\"name\">PFunctor</span>.<span class=\"name\">MIntl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L152-L174","name":"PFunctor.Approx.head_succ'","line":152,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head_succ'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">head_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Hconsistent : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree\">PFunctor.Approx.AllAgree</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">PFunctor.Approx.head'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">PFunctor.Approx.head'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">m</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L149-L150","name":"PFunctor.Approx.CofixA.instSubsingleton","line":149,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.instSubsingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.instSubsingleton\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">CofixA</span>.<span class=\"name\">instSubsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L143-L144","name":"PFunctor.Approx.Path.inhabited","line":143,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path.inhabited\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">Path</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">PFunctor.Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L139-L140","name":"PFunctor.Approx.Path","line":139,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path","doc":"`Path F` provides indices to access internal nodes in `Corec F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">Path</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L128-L134","name":"PFunctor.Approx.P_corec","line":128,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.P_corec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.P_corec\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">P_corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">PFunctor.Approx.Agree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.sCorec\">PFunctor.Approx.sCorec</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.sCorec\">PFunctor.Approx.sCorec</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L123-L125","name":"PFunctor.Approx.sCorec","line":123,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.sCorec","doc":"`sCorec f i n` creates an approximation of height `n`\nof the final coalgebra of `f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.sCorec\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">sCorec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L101-L115","name":"PFunctor.Approx.truncate_eq_of_agree","line":101,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate_eq_of_agree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate_eq_of_agree\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">truncate_eq_of_agree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">PFunctor.Approx.Agree</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate\">PFunctor.Approx.truncate</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L96-L98","name":"PFunctor.Approx.truncate","line":96,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate","doc":"`truncate a` turns `a` into a more limited approximation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L89-L92","name":"PFunctor.Approx.agree_children","line":89,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.agree_children","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.agree_children\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">agree_children</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">PFunctor.Approx.head'</a> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">PFunctor.Approx.head'</a> <span class=\"fn\">y</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">PFunctor.Approx.Agree</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">PFunctor.Approx.Agree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.children'\">PFunctor.Approx.children'</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.children'\">PFunctor.Approx.children'</a> <span class=\"fn\">y</span> <span class=\"fn\">j</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L86-L86","name":"PFunctor.Approx.agree_trival","line":86,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.agree_trival","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.agree_trival\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">agree_trival</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">PFunctor.Approx.Agree</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L81-L82","name":"PFunctor.Approx.AllAgree","line":81,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree","doc":"Given an infinite series of approximations `approx`,\n`AllAgree approx` states that they are all consistent with each other.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">AllAgree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L74-L75","name":"PFunctor.Approx.Agree.intro","line":74,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree.intro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree.intro\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">Agree</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">PFunctor.Approx.Agree</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x'</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> →\n  <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">PFunctor.Approx.Agree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro\">PFunctor.Approx.CofixA.intro</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro\">PFunctor.Approx.CofixA.intro</a> <span class=\"fn\">a</span> <span class=\"fn\">x'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L73-L73","name":"PFunctor.Approx.Agree.continu","line":73,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree.continu","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree.continu\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">Agree</span>.<span class=\"name\">continu</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">PFunctor.Approx.Agree</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L72-L75","name":"PFunctor.Approx.Agree","line":72,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree","doc":"Relation between two approximations of the cofix of a pfunctor\nthat state they both contain the same data until one of them is truncated "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">Agree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L66-L67","name":"PFunctor.Approx.approx_eta","line":66,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.approx_eta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.approx_eta\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">approx_eta</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro\">PFunctor.Approx.CofixA.intro</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">PFunctor.Approx.head'</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.children'\">PFunctor.Approx.children'</a> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L62-L63","name":"PFunctor.Approx.children'","line":62,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.children'","doc":"for a non-trivial approximation, return all the subtrees of the root "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.children'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">children'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">PFunctor.Approx.head'</a> <span class=\"fn\">x</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L57-L58","name":"PFunctor.Approx.head'","line":57,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'","doc":"The label of the root of the tree for a non-trivial\napproximation of the cofix of a pfunctor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">head'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L48-L49","name":"PFunctor.Approx.cofixA_eq_zero","line":48,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.cofixA_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.cofixA_eq_zero\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">cofixA_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L45-L46","name":"PFunctor.Approx.instInhabitedCofixA","line":45,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.instInhabitedCofixA","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.instInhabitedCofixA\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">instInhabitedCofixA</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L40-L42","name":"PFunctor.Approx.CofixA.default","line":40,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.default","doc":"default inhabitant of `CofixA` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.default\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">CofixA</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L36-L36","name":"PFunctor.Approx.CofixA.intro","line":36,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">CofixA</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">F</span>.A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.B</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L35-L35","name":"PFunctor.Approx.CofixA.continue","line":35,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.continue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.continue\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">CofixA</span>.<span class=\"name\">continue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">PFunctor.Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PFunctor/Univariate/M.lean#L34-L36","name":"PFunctor.Approx.CofixA","line":34,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA","doc":"`CofixA F n` is an `n` level approximation of an M-type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">CofixA</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>"}]}