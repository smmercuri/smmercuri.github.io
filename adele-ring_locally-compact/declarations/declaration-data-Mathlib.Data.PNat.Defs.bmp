{"name":"Mathlib.Data.PNat.Defs","instances":[{"typeNames":["PNat"],"name":"instOnePNat","className":"One"},{"typeNames":["PNat","Nat"],"name":"coePNatNat","className":"Coe"},{"typeNames":["PNat"],"name":"instReprPNat","className":"Repr"},{"typeNames":["PNat","HAdd.hAdd"],"name":"instOfNatPNatHAddNatInstHAddInstAddNatOfNat","className":"OfNat"},{"typeNames":["PNat.val"],"name":"NeZero.pnat","className":"NeZero"},{"typeNames":["PNat"],"name":"PNat.instInhabitedPNat","className":"Inhabited"},{"typeNames":["PNat"],"name":"PNat.instWellFoundedRelationPNat","className":"WellFoundedRelation"},{"typeNames":["Nat","PNat","PNat.val"],"name":"Nat.canLiftPNat","className":"CanLift"},{"typeNames":["Int","PNat"],"name":"Int.canLiftPNat","className":"CanLift"}],"imports":["Init","Mathlib.Init.Data.Nat.Lemmas","Mathlib.Algebra.NeZero","Mathlib.Order.Basic","Mathlib.Tactic.Coe","Mathlib.Tactic.Lift","Mathlib.Init.Data.Int.Order"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L292-L296","name":"Int.canLiftPNat","line":292,"kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#Int.canLiftPNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Int.canLiftPNat\"><span class=\"name\">Int</span>.<span class=\"name\">canLiftPNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Lift.html#CanLift\">CanLift</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>) =&gt; <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">x</span></span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L288-L289","name":"Nat.canLiftPNat","line":288,"kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.canLiftPNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.canLiftPNat\"><span class=\"name\">Nat</span>.<span class=\"name\">canLiftPNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Lift.html#CanLift\">CanLift</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a> <a href=\"./Mathlib/Data/PNat/Defs.html#PNat.val\">PNat.val</a> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L280-L281","name":"PNat.divExact","line":280,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.divExact","doc":"If `h : k | m`, then `k * (div_exact m k) = m`. Note that this is not equal to `m / k`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.divExact\"><span class=\"name\">PNat</span>.<span class=\"name\">divExact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L267-L276","name":"PNat.div_coe","line":267,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.div_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.div_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">div_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat.div\">PNat.div</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.pred\">Nat.pred</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span>)</span></span> else <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L255-L264","name":"PNat.mod_coe","line":255,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mod_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mod_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">mod_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat.mod\">PNat.mod</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">↑<span class=\"fn\">k</span></span> else <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L251-L252","name":"PNat.div","line":251,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.div","doc":"We define `m / k` in the same way as for `ℕ` except that when `m = n * k` we take\n`m / k = n - 1`. This ensures that `m = (m % k) + k * (m / k)` in all cases. Later we\ndefine a function `div_exact` which gives the usual `m / k` in the case where `k` divides `m`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.div\"><span class=\"name\">PNat</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L243-L244","name":"PNat.mod","line":243,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mod","doc":"We define `m % k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` This ensures that `m % k` is always positive.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mod\"><span class=\"name\">PNat</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L236-L237","name":"PNat.modDiv","line":236,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.modDiv","doc":"`mod_div m k = (m % k, m / k)`.\nWe define `m % k` and `m / k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` and\n`m / k = n - 1`.  This ensures that `m % k` is always positive\nand `m = (m % k) + k * (m / k)` in all cases.  Later we\ndefine a function `div_exact` which gives the usual `m / k`\nin the case where `k` divides `m`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.modDiv\"><span class=\"name\">PNat</span>.<span class=\"name\">modDiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L223-L225","name":"PNat.modDivAux","line":223,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.modDivAux","doc":"We define `m % k` and `m / k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` and\n`m / k = n - 1`.  This ensures that `m % k` is always positive\nand `m = (m % k) + k * (m / k)` in all cases.  Later we\ndefine a function `div_exact` which gives the usual `m / k`\nin the case where `k` divides `m`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.modDivAux\"><span class=\"name\">PNat</span>.<span class=\"name\">modDivAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L211-L213","name":"PNat.strongInductionOn","line":211,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.strongInductionOn","doc":"Strong induction on `ℕ+`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.strongInductionOn\"><span class=\"name\">PNat</span>.<span class=\"name\">strongInductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">m</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">k</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L207-L208","name":"PNat.instWellFoundedRelationPNat","line":207,"kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.instWellFoundedRelationPNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.instWellFoundedRelationPNat\"><span class=\"name\">PNat</span>.<span class=\"name\">instWellFoundedRelationPNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L203-L204","name":"PNat.coe_eq_one_iff","line":203,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_eq_one_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.coe_eq_one_iff\"><span class=\"name\">PNat</span>.<span class=\"name\">coe_eq_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L198-L199","name":"PNat.one_coe","line":198,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.one_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.one_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">one_coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L193-L194","name":"PNat.mk_one","line":193,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mk_one\"><span class=\"name\">PNat</span>.<span class=\"name\">mk_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">1</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L188-L189","name":"PNat.instInhabitedPNat","line":188,"kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.instInhabitedPNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.instInhabitedPNat\"><span class=\"name\">PNat</span>.<span class=\"name\">instInhabitedPNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L184-L185","name":"PNat.not_lt_one","line":184,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.not_lt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.not_lt_one\"><span class=\"name\">PNat</span>.<span class=\"name\">not_lt_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L179-L180","name":"PNat.one_le","line":179,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.one_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.one_le\"><span class=\"name\">PNat</span>.<span class=\"name\">one_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L174-L175","name":"PNat.coe_toPNat'","line":174,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_toPNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.coe_toPNat'\"><span class=\"name\">PNat</span>.<span class=\"name\">coe_toPNat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'\">Nat.toPNat'</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L169-L170","name":"PNat.toPNat'_coe","line":169,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.toPNat'_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.toPNat'_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">toPNat'_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'\">Nat.toPNat'</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L165-L166","name":"NeZero.pnat","line":165,"kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#NeZero.pnat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#NeZero.pnat\"><span class=\"name\">NeZero</span>.<span class=\"name\">pnat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L161-L162","name":"PNat.ne_zero","line":161,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.ne_zero\"><span class=\"name\">PNat</span>.<span class=\"name\">ne_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L156-L157","name":"PNat.coe_injective","line":156,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.coe_injective\"><span class=\"name\">PNat</span>.<span class=\"name\">coe_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>) =&gt; <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L152-L153","name":"PNat.eq","line":152,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.eq\"><span class=\"name\">PNat</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L148-L149","name":"PNat.pos","line":148,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.pos\"><span class=\"name\">PNat</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L143-L144","name":"PNat.coe_lt_coe","line":143,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_lt_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.coe_lt_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">coe_lt_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L138-L139","name":"PNat.coe_le_coe","line":138,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_le_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.coe_le_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">coe_le_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L133-L134","name":"PNat.mk_lt_mk","line":133,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_lt_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mk_lt_mk\"><span class=\"name\">PNat</span>.<span class=\"name\">mk_lt_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">n</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hn</span> }</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">k</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hk</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L128-L129","name":"PNat.mk_le_mk","line":128,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_le_mk","doc":"We now define a long list of structures on ℕ+ induced by\nsimilar structures on ℕ. Most of these behave in a completely\nobvious way, but there are a few things to be said about\nsubtraction, division and powers.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mk_le_mk\"><span class=\"name\">PNat</span>.<span class=\"name\">mk_le_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">n</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hn</span> }</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">k</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hk</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L109-L113","name":"Nat.toPNat'_coe","line":109,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'_coe\"><span class=\"name\">Nat</span>.<span class=\"name\">toPNat'_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'\">Nat.toPNat'</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> then <span class=\"fn\">n</span> else <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L106-L106","name":"Nat.toPNat'_zero","line":106,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">toPNat'_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'\">Nat.toPNat'</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L101-L102","name":"Nat.toPNat'","line":101,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'","doc":"Convert a natural number to a `PNat`. `n+1` is mapped to itself,\nand `0` becomes `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'\"><span class=\"name\">Nat</span>.<span class=\"name\">toPNat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L95-L96","name":"PNat.succPNat_natPred","line":95,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.succPNat_natPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.succPNat_natPred\"><span class=\"name\">PNat</span>.<span class=\"name\">succPNat_natPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#Nat.succPNat\">Nat.succPNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat.natPred\">PNat.natPred</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L90-L91","name":"Nat.natPred_succPNat","line":90,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.natPred_succPNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.natPred_succPNat\"><span class=\"name\">Nat</span>.<span class=\"name\">natPred_succPNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat.natPred\">PNat.natPred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#Nat.succPNat\">Nat.succPNat</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L85-L86","name":"Nat.succPNat_coe","line":85,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.succPNat_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.succPNat_coe\"><span class=\"name\">Nat</span>.<span class=\"name\">succPNat_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#Nat.succPNat\">Nat.succPNat</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L80-L81","name":"Nat.succPNat","line":80,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.succPNat","doc":"Write a successor as an element of `ℕ+`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.succPNat\"><span class=\"name\">Nat</span>.<span class=\"name\">succPNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L75-L76","name":"Nat.toPNat","line":75,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat","doc":"Convert a natural number to a positive natural number. The\npositivity assumption is inferred by `dec_trivial`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat\"><span class=\"name\">Nat</span>.<span class=\"name\">toPNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Data/PNat/Defs.html#_auto._@.Mathlib.Data.PNat.Defs._hyg.358\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L65-L66","name":"PNat.natPred_eq_pred","line":65,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.natPred_eq_pred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.natPred_eq_pred\"><span class=\"name\">PNat</span>.<span class=\"name\">natPred_eq_pred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat.natPred\">PNat.natPred</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">n</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.pred\">Nat.pred</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L60-L61","name":"PNat.natPred","line":60,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.natPred","doc":"Predecessor of a `ℕ+`, as a `ℕ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.natPred\"><span class=\"name\">PNat</span>.<span class=\"name\">natPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L55-L56","name":"PNat.mk_coe","line":55,"kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mk_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">mk_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">n</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L48-L49","name":"instOfNatPNatHAddNatInstHAddInstAddNatOfNat","line":48,"kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#instOfNatPNatHAddNatInstHAddInstAddNatOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#instOfNatPNatHAddNatInstHAddInstAddNatOfNat\"><span class=\"name\">instOfNatPNatHAddNatInstHAddInstAddNatOfNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L44-L45","name":"instReprPNat","line":44,"kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#instReprPNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#instReprPNat\"><span class=\"name\">instReprPNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L40-L41","name":"coePNatNat","line":40,"kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#coePNatNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#coePNatNat\"><span class=\"name\">coePNatNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L38-L38","name":"PNat.val","line":38,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.val","doc":"The underlying natural number "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.val\"><span class=\"name\">PNat</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L33-L34","name":"instOnePNat","line":33,"kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#instOnePNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#instOnePNat\"><span class=\"name\">instOnePNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L30-L31","name":"«termℕ+»","line":30,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#«termℕ+»","doc":"`ℕ+` is the type of positive natural numbers. It is defined as a subtype,\nand the VM representation of `ℕ+` is the same as `ℕ` because the proof\nis not stored. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#«termℕ+»\"><span class=\"name\">«termℕ+»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/PNat/Defs.lean#L26-L27","name":"PNat","line":26,"kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat","doc":"`ℕ+` is the type of positive natural numbers. It is defined as a subtype,\nand the VM representation of `ℕ+` is the same as `ℕ` because the proof\nis not stored. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat\"><span class=\"name\">PNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}