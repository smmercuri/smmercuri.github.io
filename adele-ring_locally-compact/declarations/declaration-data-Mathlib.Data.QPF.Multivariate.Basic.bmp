{"name":"Mathlib.Data.QPF.Multivariate.Basic","instances":[{"typeNames":[],"name":"MvQPF.lawfulMvFunctor","className":"LawfulMvFunctor"},{"typeNames":["MvPFunctor.Obj"],"name":"MvPFunctor.instMvQPFObj","className":"MvQPF"}],"imports":["Init","Mathlib.Data.PFunctor.Multivariate.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L281-L286","name":"MvPFunctor.instMvQPFObj","line":281,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvPFunctor.instMvQPFObj","doc":"Every polynomial functor is a (trivial) QPF "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvPFunctor.instMvQPFObj\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">instMvQPFObj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u_1}</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">↑<span class=\"fn\">P</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L267-L276","name":"MvQPF.ofEquiv","line":267,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.ofEquiv","doc":"Any type function `F` that is (extensionally) equivalent to a QPF, is itself a QPF,\nassuming that the functorial map of `F` behaves similar to `MvFunctor.ofEquiv eqv` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.ofEquiv\"><span class=\"name\">MvQPF</span>.<span class=\"name\">ofEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eqv : <span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">F'</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map_eq : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a>\n  <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">α </span><span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.Arrow</span> <span class=\"fn\">β</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">eqv</span> <span class=\"fn\">β</span></span>)</span>.symm</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">eqv</span> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></span>)</span>\n  <a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#_auto._@.Mathlib.Data.QPF.Multivariate.Basic._hyg.3008\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L262-L263","name":"MvQPF.liftpPreservation_iff_uniform","line":262,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.liftpPreservation_iff_uniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.liftpPreservation_iff_uniform\"><span class=\"name\">MvQPF</span>.<span class=\"name\">liftpPreservation_iff_uniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">MvQPF.LiftPPreservation</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">MvQPF.IsUniform</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L248-L260","name":"MvQPF.suppPreservation_iff_liftpPreservation","line":248,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.suppPreservation_iff_liftpPreservation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.suppPreservation_iff_liftpPreservation\"><span class=\"name\">MvQPF</span>.<span class=\"name\">suppPreservation_iff_liftpPreservation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">MvQPF.SuppPreservation</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">MvQPF.LiftPPreservation</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L240-L246","name":"MvQPF.suppPreservation_iff_isUniform","line":240,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.suppPreservation_iff_isUniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.suppPreservation_iff_isUniform\"><span class=\"name\">MvQPF</span>.<span class=\"name\">suppPreservation_iff_isUniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">MvQPF.SuppPreservation</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">MvQPF.IsUniform</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L234-L238","name":"MvQPF.supp_map","line":234,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.supp_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.supp_map\"><span class=\"name\">MvQPF</span>.<span class=\"name\">supp_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">MvQPF.IsUniform</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.Arrow</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.supp\">MvFunctor.supp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.supp\">MvFunctor.supp</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L220-L232","name":"MvQPF.liftP_iff_of_isUniform","line":220,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.liftP_iff_of_isUniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.liftP_iff_of_isUniform\"><span class=\"name\">MvQPF</span>.<span class=\"name\">liftP_iff_of_isUniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">MvQPF.IsUniform</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftP\">MvFunctor.LiftP</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>), <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.supp\">MvFunctor.supp</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span> <span class=\"fn\">u</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L212-L218","name":"MvQPF.supp_eq_of_isUniform","line":212,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.supp_eq_of_isUniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.supp_eq_of_isUniform\"><span class=\"name\">MvQPF</span>.<span class=\"name\">supp_eq_of_isUniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">MvQPF.IsUniform</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.B</span> <span class=\"fn\">a</span></span>)</span>.Arrow</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.supp\">MvFunctor.supp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L209-L210","name":"MvQPF.SuppPreservation","line":209,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.SuppPreservation","doc":"does `abs` preserve `supp`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.SuppPreservation\"><span class=\"name\">MvQPF</span>.<span class=\"name\">SuppPreservation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L205-L206","name":"MvQPF.LiftPPreservation","line":205,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.LiftPPreservation","doc":"does `abs` preserve `liftp`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.LiftPPreservation\"><span class=\"name\">MvQPF</span>.<span class=\"name\">LiftPPreservation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L200-L202","name":"MvQPF.IsUniform","line":200,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.IsUniform","doc":"A qpf is said to be uniform if every polynomial functor\nrepresenting a single value all have the same range. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.IsUniform\"><span class=\"name\">MvQPF</span>.<span class=\"name\">IsUniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L173-L196","name":"MvQPF.has_good_supp_iff","line":173,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.has_good_supp_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.has_good_supp_iff\"><span class=\"name\">MvQPF</span>.<span class=\"name\">has_good_supp_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftP\">MvFunctor.LiftP</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>), <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.supp\">MvFunctor.supp</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span> <span class=\"fn\">u</span></span></span></span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.B</span> <span class=\"fn\">a</span></span>)</span>.Arrow</span> <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) (<span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.B</span> <span class=\"fn\">a'</span></span>)</span>.Arrow</span> <span class=\"fn\">α</span></span>),\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a'</span>, <span class=\"fn\">f'</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L170-L171","name":"MvQPF.supp_eq","line":170,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.supp_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.supp_eq\"><span class=\"name\">MvQPF</span>.<span class=\"name\">supp_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.supp\">MvFunctor.supp</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> | <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.B</span> <span class=\"fn\">a</span></span>)</span>.Arrow</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span></span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L155-L168","name":"MvQPF.mem_supp","line":155,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.mem_supp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.mem_supp\"><span class=\"name\">MvQPF</span>.<span class=\"name\">mem_supp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.supp\">MvFunctor.supp</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.B</span> <span class=\"fn\">a</span></span>)</span>.Arrow</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L133-L149","name":"MvQPF.liftR_iff","line":133,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.liftR_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.liftR_iff\"><span class=\"name\">MvQPF</span>.<span class=\"name\">liftR_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR\">MvFunctor.LiftR</a> <span class=\"fn\">(<span class=\"fn\">fun {<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>} =&gt; <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (<span class=\"fn\">f₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.B</span> <span class=\"fn\">a</span></span>)</span>.Arrow</span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">f₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.B</span> <span class=\"fn\">a</span></span>)</span>.Arrow</span> <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f₀</span>⟩</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f₁</span>⟩</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.B</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span>), <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₀</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L119-L131","name":"MvQPF.liftP_iff","line":119,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.liftP_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.liftP_iff\"><span class=\"name\">MvQPF</span>.<span class=\"name\">liftP_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">⦃<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftP\">MvFunctor.LiftP</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.B</span> <span class=\"fn\">a</span></span>)</span>.Arrow</span> <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.B</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L114-L116","name":"MvQPF.lawfulMvFunctor","line":114,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.lawfulMvFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.lawfulMvFunctor\"><span class=\"name\">MvQPF</span>.<span class=\"name\">lawfulMvFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#LawfulMvFunctor\">LawfulMvFunctor</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L109-L112","name":"MvQPF.comp_map","line":109,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.comp_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.comp_map\"><span class=\"name\">MvQPF</span>.<span class=\"name\">comp_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.Arrow</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span>.Arrow</span> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L104-L106","name":"MvQPF.id_map","line":104,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.id_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.id_map\"><span class=\"name\">MvQPF</span>.<span class=\"name\">id_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">TypeVec.id</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L91-L91","name":"MvQPF.abs_map","line":91,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs_map\"><span class=\"name\">MvQPF</span>.<span class=\"name\">abs_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.Arrow</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L90-L90","name":"MvQPF.abs_repr","line":90,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs_repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs_repr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">abs_repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.repr\">MvQPF.repr</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L89-L89","name":"MvQPF.repr","line":89,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.repr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span></span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L88-L88","name":"MvQPF.abs","line":88,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\"><span class=\"name\">MvQPF</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L87-L87","name":"MvQPF.P","line":87,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\"><span class=\"name\">MvQPF</span>.<span class=\"name\">P</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L86-L86","name":"MvQPF.mk","line":86,"kind":"ctor","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.mk\"><span class=\"name\">MvQPF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toMvFunctor : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(abs : <span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(repr : <span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(abs_repr : <span class=\"fn\">∀ {<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>} (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">abs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">repr</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(abs_map : <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.Arrow</span> <span class=\"fn\">β</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">abs</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">abs</span> <span class=\"fn\">p</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Basic.lean#L86-L91","name":"MvQPF","line":86,"kind":"class","docLink":"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF","doc":"Multivariate quotients of polynomial functors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\"><span class=\"name\">MvQPF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\"><span class=\"name\">MvFunctor</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) u_1)</div></div>"}]}