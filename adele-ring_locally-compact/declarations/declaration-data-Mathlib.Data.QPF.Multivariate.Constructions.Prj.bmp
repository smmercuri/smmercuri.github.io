{"name":"Mathlib.Data.QPF.Multivariate.Constructions.Prj","instances":[{"typeNames":["MvQPF.Prj"],"name":"MvQPF.Prj.inhabited","className":"Inhabited"},{"typeNames":["MvQPF.Prj"],"name":"MvQPF.Prj.mvfunctor","className":"MvFunctor"},{"typeNames":["MvQPF.Prj"],"name":"MvQPF.Prj.mvqpf","className":"MvQPF"}],"imports":["Init","Mathlib.Control.Functor.Multivariate","Mathlib.Data.QPF.Multivariate.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Constructions/Prj.lean#L47-L52","name":"MvQPF.Prj.mvqpf","line":47,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.mvqpf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.mvqpf\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Prj</span>.<span class=\"name\">mvqpf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj\">MvQPF.Prj</a> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Constructions/Prj.lean#L44-L45","name":"MvQPF.Prj.repr","line":44,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.repr","doc":"Representation function of the `QPF` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.repr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Prj</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>⦄</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj\">MvQPF.Prj</a> <span class=\"fn\">i</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.P\">MvQPF.Prj.P</a> <span class=\"fn\">i</span></span>)</span></span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Constructions/Prj.lean#L40-L41","name":"MvQPF.Prj.abs","line":40,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.abs","doc":"Abstraction function of the `QPF` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.abs\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Prj</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>⦄</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.P\">MvQPF.Prj.P</a> <span class=\"fn\">i</span></span>)</span></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj\">MvQPF.Prj</a> <span class=\"fn\">i</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Constructions/Prj.lean#L35-L37","name":"MvQPF.Prj.P","line":35,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.P","doc":"Polynomial representation of the projection functor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.P\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Prj</span>.<span class=\"name\">P</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Constructions/Prj.lean#L32-L32","name":"MvQPF.Prj.mvfunctor","line":32,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.mvfunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.mvfunctor\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Prj</span>.<span class=\"name\">mvfunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj\">MvQPF.Prj</a> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Constructions/Prj.lean#L30-L30","name":"MvQPF.Prj.map","line":30,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.map","doc":"`map` on functor `Prj i` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.map\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Prj</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>⦄</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_2}</a> <span class=\"fn\">n</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.Arrow</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj\">MvQPF.Prj</a> <span class=\"fn\">i</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj\">MvQPF.Prj</a> <span class=\"fn\">i</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Constructions/Prj.lean#L26-L27","name":"MvQPF.Prj.inhabited","line":26,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj.inhabited\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Prj</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj\">MvQPF.Prj</a> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/QPF/Multivariate/Constructions/Prj.lean#L24-L24","name":"MvQPF.Prj","line":24,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj","doc":"The projection `i` functor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Prj.html#MvQPF.Prj\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Prj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}