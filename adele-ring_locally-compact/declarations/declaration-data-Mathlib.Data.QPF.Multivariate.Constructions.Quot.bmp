{"name":"Mathlib.Data.QPF.Multivariate.Constructions.Quot","instances":[{"typeNames":["MvQPF.Quot1"],"name":"MvQPF.Quot1.inhabited","className":"Inhabited"}],"imports":["Init","Mathlib.Data.QPF.Multivariate.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/QPF/Multivariate/Constructions/Quot.lean#L76-L78","name":"MvQPF.relQuot","line":76,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.relQuot","doc":"`Quot1` is a QPF "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.relQuot\"><span class=\"name\">MvQPF</span>.<span class=\"name\">relQuot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\">⦃<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Hfunc : <span class=\"fn\">∀ ⦃<span class=\"fn\">α </span>β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>⦄ (<span class=\"fn\">a </span>b : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1\">MvQPF.Quot1</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/QPF/Multivariate/Constructions/Quot.lean#L72-L72","name":"MvQPF.Quot1.mvFunctor","line":72,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1.mvFunctor","doc":"`mvFunctor` instance for `Quot1` with well-behaved `R` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1.mvFunctor\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Quot1</span>.<span class=\"name\">mvFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\">⦃<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Hfunc : <span class=\"fn\">∀ ⦃<span class=\"fn\">α </span>β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>⦄ (<span class=\"fn\">a </span>b : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1\">MvQPF.Quot1</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/QPF/Multivariate/Constructions/Quot.lean#L67-L68","name":"MvQPF.Quot1.map","line":67,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1.map","doc":"`map` of the `Quot1` functor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1.map\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Quot1</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\">⦃<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Hfunc : <span class=\"fn\">∀ ⦃<span class=\"fn\">α </span>β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>⦄ (<span class=\"fn\">a </span>b : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>⦄</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1\">MvQPF.Quot1</a> <span class=\"fn\">R</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1\">MvQPF.Quot1</a> <span class=\"fn\">R</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/QPF/Multivariate/Constructions/Quot.lean#L59-L60","name":"MvQPF.Quot1.inhabited","line":59,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1.inhabited\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Quot1</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\">⦃<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1\">MvQPF.Quot1</a> <span class=\"fn\">R</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/QPF/Multivariate/Constructions/Quot.lean#L55-L56","name":"MvQPF.Quot1","line":55,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1","doc":"Functorial quotient type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.Quot1\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Quot1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\">⦃<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/QPF/Multivariate/Constructions/Quot.lean#L38-L45","name":"MvQPF.quotientQPF","line":38,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.quotientQPF","doc":"If `F` is a QPF then `G` is a QPF as well. Can be used to\nconstruct `MvQPF` instances by transporting them across\nsurjective functions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Quot.html#MvQPF.quotientQPF\"><span class=\"name\">MvQPF</span>.<span class=\"name\">quotientQPF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{FG_abs : <span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">α</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{FG_repr : <span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(FG_abs_repr : <span class=\"fn\">∀ {<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>} (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FG_abs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FG_repr</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(FG_abs_map : <span class=\"fn\">∀ {<span class=\"fn\">α </span>β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FG_abs</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FG_abs</span> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">G</span></span></div></div>"}]}