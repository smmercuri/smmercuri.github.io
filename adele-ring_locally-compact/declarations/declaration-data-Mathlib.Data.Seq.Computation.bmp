{"name":"Mathlib.Data.Seq.Computation","instances":[{"typeNames":["Computation"],"name":"Computation.instCoeTC","className":"CoeTC"},{"typeNames":["Computation"],"name":"Computation.instInhabited","className":"Inhabited"},{"typeNames":["Computation"],"name":"Computation.instMembership","className":"Membership"},{"typeNames":["Computation.pure"],"name":"Computation.ret_terminates","className":"Computation.Terminates"},{"typeNames":["Computation.think"],"name":"Computation.think_terminates","className":"Computation.Terminates"},{"typeNames":["Computation.thinkN"],"name":"Computation.thinkN_terminates","className":"Computation.Terminates"},{"typeNames":["Computation"],"name":"Computation.instBind","className":"Bind"},{"typeNames":["Computation.bind"],"name":"Computation.terminates_bind","className":"Computation.Terminates"},{"typeNames":["Computation"],"name":"Computation.monad","className":"Monad"},{"typeNames":["Computation"],"name":"Computation.instLawfulMonad","className":"LawfulMonad"},{"typeNames":["Computation.map"],"name":"Computation.terminates_map","className":"Computation.Terminates"},{"typeNames":["Computation"],"name":"Computation.instAlternativeComputation","className":"Alternative"}],"imports":["Init","Mathlib.Data.Nat.Find","Mathlib.Data.Stream.Init","Mathlib.Tactic.Common"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1101-L1107","name":"Computation.liftRel_rec","line":1101,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_rec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_rec\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_rec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">ca</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">cb</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">ca</span>.destruct</span> <span class=\"fn\"><span class=\"fn\">cb</span>.destruct</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Hc : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1088-L1099","name":"Computation.LiftRelRec.lem","line":1088,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelRec.lem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelRec.lem\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRelRec</span>.<span class=\"name\">lem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">ca</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">cb</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">ca</span>.destruct</span> <span class=\"fn\"><span class=\"fn\">cb</span>.destruct</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Hc : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1084-L1086","name":"Computation.LiftRelAux.ret_right","line":1084,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.ret_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.ret_right\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRelAux</span>.<span class=\"name\">ret_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">ca</span>.destruct</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1079-L1081","name":"Computation.LiftRelAux.swap","line":1079,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.swap\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRelAux</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1069-L1077","name":"Computation.LiftRelAux.ret_left","line":1069,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.ret_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.ret_left\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRelAux</span>.<span class=\"name\">ret_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\"><span class=\"fn\">cb</span>.destruct</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1064-L1066","name":"Computation.liftRelAux_inr_inr","line":1064,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inr_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inr_inr\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRelAux_inr_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">ca</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">cb</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1061-L1063","name":"Computation.liftRelAux_inr_inl","line":1061,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inr_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inr_inl\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRelAux_inr_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">ca</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1058-L1060","name":"Computation.liftRelAux_inl_inr","line":1058,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inl_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inl_inr\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRelAux_inl_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">cb</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1056-L1057","name":"Computation.liftRelAux_inl_inl","line":1056,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inl_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inl_inl\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRelAux_inl_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1044-L1049","name":"Computation.LiftRelAux","line":1044,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux","doc":"Alternate definition of `LiftRel` over relations between `Computation`s"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRelAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1038-L1041","name":"Computation.map_congr","line":1038,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_congr\"><span class=\"name\">Computation</span>.<span class=\"name\">map_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s1</span>.Equiv</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s1</span></span>)</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1026-L1035","name":"Computation.liftRel_map","line":1026,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_map\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f1 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f2 : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f1</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f2</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f1</span> <span class=\"fn\">s1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f2</span> <span class=\"fn\">s2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1020-L1024","name":"Computation.liftRel_congr","line":1020,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_congr\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca' : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb' : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ca</span>.Equiv</span> <span class=\"fn\">ca'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cb</span>.Equiv</span> <span class=\"fn\">cb'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca'</span> <span class=\"fn\">cb'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1016-L1018","name":"Computation.liftRel_mem_cases","line":1016,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_mem_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_mem_cases\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_mem_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Ha : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Hb : <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1012-L1014","name":"Computation.liftRel_think_right","line":1012,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_think_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_think_right\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_think_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\"><span class=\"fn\">cb</span>.think</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L1005-L1009","name":"Computation.liftRel_think_left","line":1005,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_think_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_think_left\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_think_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\"><span class=\"fn\">ca</span>.think</span> <span class=\"fn\">cb</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L999-L1002","name":"Computation.liftRel_pure","line":999,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L993-L994","name":"Computation.liftRel_pure_right","line":993,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure_right\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_pure_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L986-L990","name":"Computation.liftRel_pure_left","line":986,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure_left\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_pure_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">cb</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L968-L983","name":"Computation.liftRel_bind","line":968,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f1 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f2 : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f1</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f2</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s1</span>.bind</span> <span class=\"fn\">f1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s2</span>.bind</span> <span class=\"fn\">f2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L954-L966","name":"Computation.liftRel_def","line":954,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_def\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ca</span>.Terminates</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cb</span>.Terminates</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> → <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L950-L952","name":"Computation.exists_of_liftRel_right","line":950,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_liftRel_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_liftRel_right\"><span class=\"name\">Computation</span>.<span class=\"name\">exists_of_liftRel_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L946-L948","name":"Computation.exists_of_liftRel_left","line":946,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_liftRel_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_liftRel_left\"><span class=\"name\">Computation</span>.<span class=\"name\">exists_of_liftRel_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L941-L944","name":"Computation.liftRel_of_mem","line":941,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ma : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ab : <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L935-L939","name":"Computation.rel_of_liftRel","line":935,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.rel_of_liftRel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.rel_of_liftRel\"><span class=\"name\">Computation</span>.<span class=\"name\">rel_of_liftRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span> → <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> → <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L925-L933","name":"Computation.terminates_of_liftRel","line":925,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_of_liftRel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_of_liftRel\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_of_liftRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.Terminates</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L915-L923","name":"Computation.LiftRel.imp","line":915,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.imp\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L907-L909","name":"Computation.LiftRel.equiv","line":907,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">R</span></span> → <span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L896-L905","name":"Computation.LiftRel.trans","line":896,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.trans\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Transitive\">Transitive</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Transitive\">Transitive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L887-L894","name":"Computation.LiftRel.symm","line":887,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.symm\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Symmetric\">Symmetric</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Symmetric\">Symmetric</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L884-L885","name":"Computation.LiftRel.refl","line":884,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.refl\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Reflexive\">Reflexive</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Reflexive\">Reflexive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L878-L882","name":"Computation.lift_eq_iff_equiv","line":878,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.lift_eq_iff_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.lift_eq_iff_equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">lift_eq_iff_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Equiv</span> <span class=\"fn\">c₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L874-L876","name":"Computation.LiftRel.swap","line":874,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.swap\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">cb</span> <span class=\"fn\">ca</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L871-L872","name":"Computation.LiftRel","line":871,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel","doc":"`LiftRel R ca cb` is a generalization of `Equiv` to relations other than\nequality. It asserts that if `ca` terminates with `a`, then `cb` terminates with\nsome `b` such that `R a b`, and if `cb` terminates with `b` then `ca` terminates\nwith some `a` such that `R a b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L864-L865","name":"Computation.equiv_pure_of_mem","line":864,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.equiv_pure_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.equiv_pure_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">equiv_pure_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L855-L862","name":"Computation.bind_congr","line":855,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind_congr\"><span class=\"name\">Computation</span>.<span class=\"name\">bind_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f1 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f2 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s1</span>.Equiv</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f1</span> <span class=\"fn\">a</span></span>)</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f2</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s1</span>.bind</span> <span class=\"fn\">f1</span></span>)</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s2</span>.bind</span> <span class=\"fn\">f2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L853-L853","name":"Computation.thinkN_equiv","line":853,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">thinkN_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.thinkN</span> <span class=\"fn\">n</span></span>)</span>.Equiv</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L851-L851","name":"Computation.think_equiv","line":851,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think_equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">think_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.Equiv</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L847-L849","name":"Computation.get_equiv","line":847,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">get_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Equiv</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">c₁</span>.Terminates</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">c₂</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.get</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c₂</span>.get</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L844-L845","name":"Computation.promises_congr","line":844,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.promises_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.promises_congr\"><span class=\"name\">Computation</span>.<span class=\"name\">promises_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Equiv</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Promises</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.Promises</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L841-L842","name":"Computation.terminates_congr","line":841,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_congr\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Equiv</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.Terminates</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c₂</span>.Terminates</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L838-L839","name":"Computation.equiv_of_mem","line":838,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.equiv_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.equiv_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">equiv_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Equiv</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L835-L836","name":"Computation.Equiv.equivalence","line":835,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.equivalence","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.equivalence\"><span class=\"name\">Computation</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">equivalence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">Computation.Equiv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L832-L833","name":"Computation.Equiv.trans","line":832,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.trans\"><span class=\"name\">Computation</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Equiv</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.Equiv</span> <span class=\"fn\">u</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Equiv</span> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L829-L829","name":"Computation.Equiv.symm","line":829,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.symm\"><span class=\"name\">Computation</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Equiv</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.Equiv</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L826-L826","name":"Computation.Equiv.refl","line":826,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.refl\"><span class=\"name\">Computation</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Equiv</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L822-L823","name":"Computation.«term_~_»","line":822,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.«term_~_»","doc":"equivalence relation for computations"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.«term_~_»\"><span class=\"name\">Computation</span>.<span class=\"name\">«term_~_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L819-L820","name":"Computation.Equiv","line":819,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Equiv","doc":"`c₁ ~ c₂` asserts that `c₁` and `c₂` either both terminate with the same result,\nor both loop forever. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">Equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L811-L815","name":"Computation.orElse_empty","line":811,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.orElse_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.orElse_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">orElse_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\">c</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L804-L808","name":"Computation.empty_orElse","line":804,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.empty_orElse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty_orElse\"><span class=\"name\">Computation</span>.<span class=\"name\">empty_orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">c</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L798-L801","name":"Computation.orElse_think","line":798,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.orElse_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.orElse_think\"><span class=\"name\">Computation</span>.<span class=\"name\">orElse_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\"><span class=\"fn\">c₁</span>.think</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><span class=\"fn\">c₂</span>.think</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\">c₁</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">c₂</span></span></span>)</span>.think</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L791-L794","name":"Computation.orElse_pure","line":791,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.orElse_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.orElse_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">orElse_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\"><span class=\"fn\">c₁</span>.think</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L784-L787","name":"Computation.ret_orElse","line":784,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.ret_orElse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.ret_orElse\"><span class=\"name\">Computation</span>.<span class=\"name\">ret_orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">c₂</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L777-L780","name":"Computation.instAlternativeComputation","line":777,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instAlternativeComputation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instAlternativeComputation\"><span class=\"name\">Computation</span>.<span class=\"name\">instAlternativeComputation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L766-L775","name":"Computation.orElse","line":766,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.orElse","doc":"`c₁ <|> c₂` calculates `c₁` and `c₂` simultaneously, returning\nthe first one that gives a result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.orElse\"><span class=\"name\">Computation</span>.<span class=\"name\">orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L757-L761","name":"Computation.terminates_map_iff","line":757,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_map_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_map_iff\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span>.Terminates</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L754-L755","name":"Computation.terminates_map","line":754,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_map\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span>.Terminates</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L748-L752","name":"Computation.exists_of_mem_map","line":748,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_mem_map\"><span class=\"name\">Computation</span>.<span class=\"name\">exists_of_mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L745-L746","name":"Computation.mem_map","line":745,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_map\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L742-L743","name":"Computation.map_think'","line":742,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_think'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_think'\"><span class=\"name\">Computation</span>.<span class=\"name\">map_think'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.think</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">s</span></span>)</span>.think</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L738-L739","name":"Computation.map_pure'","line":738,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_pure'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_pure'\"><span class=\"name\">Computation</span>.<span class=\"name\">map_pure'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L734-L735","name":"Computation.pure_def","line":734,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.pure_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure_def\"><span class=\"name\">Computation</span>.<span class=\"name\">pure_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L730-L731","name":"Computation.has_map_eq_map","line":730,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.has_map_eq_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.has_map_eq_map\"><span class=\"name\">Computation</span>.<span class=\"name\">has_map_eq_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L724-L728","name":"Computation.instLawfulMonad","line":724,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instLawfulMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instLawfulMonad\"><span class=\"name\">Computation</span>.<span class=\"name\">instLawfulMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L719-L722","name":"Computation.monad","line":719,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.monad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.monad\"><span class=\"name\">Computation</span>.<span class=\"name\">monad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L714-L717","name":"Computation.bind_promises","line":714,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">bind_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Promises</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.Promises</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.Promises</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L708-L712","name":"Computation.exists_of_mem_bind","line":708,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_mem_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_mem_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">exists_of_mem_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L694-L706","name":"Computation.of_results_bind","line":694,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.of_results_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.of_results_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">of_results_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.Results</span> <span class=\"fn\">b</span> <span class=\"fn\">k</span></span> → <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∃ (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.Results</span> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L689-L692","name":"Computation.length_bind","line":689,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.length_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.length_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">length_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_T1 : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_T2 : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.get</span></span>)</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.get</span></span>)</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s</span>.length</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L684-L686","name":"Computation.get_bind","line":684,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">get_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.get</span></span>)</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.get</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.get</span></span>)</span>.get</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L679-L681","name":"Computation.terminates_bind","line":679,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.get</span></span>)</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.Terminates</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L673-L677","name":"Computation.mem_bind","line":673,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L658-L671","name":"Computation.results_bind","line":658,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">results_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.Results</span> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.Results</span> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L642-L656","name":"Computation.bind_assoc","line":642,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind_assoc\"><span class=\"name\">Computation</span>.<span class=\"name\">bind_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.bind</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span>.bind</span> <span class=\"fn\">g</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L632-L639","name":"Computation.bind_pure'","line":632,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind_pure'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind_pure'\"><span class=\"name\">Computation</span>.<span class=\"name\">bind_pure'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">Computation.pure</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L620-L628","name":"Computation.bind_pure","line":620,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">bind_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Computation.pure</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L616-L617","name":"Computation.think_bind","line":616,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">think_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.think</span>.bind</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.think</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L602-L613","name":"Computation.ret_bind","line":602,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.ret_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.ret_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">ret_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span>.bind</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L595-L599","name":"Computation.map_comp","line":595,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_comp\"><span class=\"name\">Computation</span>.<span class=\"name\">map_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L588-L593","name":"Computation.map_id","line":588,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_id\"><span class=\"name\">Computation</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">id</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L584-L585","name":"Computation.destruct_map","line":584,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_map\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.lmap\">Computation.lmap</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.rmap\">Computation.rmap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.destruct</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L580-L581","name":"Computation.map_think","line":580,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_think\"><span class=\"name\">Computation</span>.<span class=\"name\">map_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.think</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span>.think</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L576-L577","name":"Computation.map_pure","line":576,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">map_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L572-L573","name":"Computation.join","line":572,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.join","doc":"Flatten a computation of computations into a single computation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.join\"><span class=\"name\">Computation</span>.<span class=\"name\">join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L568-L569","name":"Computation.has_bind_eq_bind","line":568,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.has_bind_eq_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.has_bind_eq_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">has_bind_eq_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.bind</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L565-L566","name":"Computation.instBind","line":565,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instBind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instBind\"><span class=\"name\">Computation</span>.<span class=\"name\">instBind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L562-L563","name":"Computation.bind","line":562,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind","doc":"Compose two computations into a monadic `bind` operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\"><span class=\"name\">Computation</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L553-L559","name":"Computation.Bind.f","line":553,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Bind.f","doc":"bind over a function mapping `α` to a `Computation`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Bind.f\"><span class=\"name\">Computation</span>.<span class=\"name\">Bind</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L548-L550","name":"Computation.Bind.g","line":548,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Bind.g","doc":"bind over a `Sum` of `Computation`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Bind.g\"><span class=\"name\">Computation</span>.<span class=\"name\">Bind</span>.<span class=\"name\">g</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L539-L545","name":"Computation.map","line":539,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map","doc":"Map a function on the result of a computation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\"><span class=\"name\">Computation</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L531-L536","name":"Computation.terminatesRecOn","line":531,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminatesRecOn","doc":"Recursor based on assertion of `Terminates`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminatesRecOn\"><span class=\"name\">Computation</span>.<span class=\"name\">terminatesRecOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">s</span>.think</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L523-L528","name":"Computation.memRecOn","line":523,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.memRecOn","doc":"Recursor based on membership"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.memRecOn\"><span class=\"name\">Computation</span>.<span class=\"name\">memRecOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">s</span>.think</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L518-L520","name":"Computation.eq_thinkN'","line":518,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.eq_thinkN'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.eq_thinkN'\"><span class=\"name\">Computation</span>.<span class=\"name\">eq_thinkN'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\"><span class=\"fn\">s</span>.get</span></span>)</span>.thinkN</span> <span class=\"fn\"><span class=\"fn\">s</span>.length</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L505-L516","name":"Computation.eq_thinkN","line":505,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.eq_thinkN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.eq_thinkN\"><span class=\"name\">Computation</span>.<span class=\"name\">eq_thinkN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span>.thinkN</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L501-L503","name":"Computation.length_thinkN","line":501,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.length_thinkN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.length_thinkN\"><span class=\"name\">Computation</span>.<span class=\"name\">length_thinkN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.thinkN</span> <span class=\"fn\">n</span></span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L497-L498","name":"Computation.results_thinkN_pure","line":497,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_thinkN_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_thinkN_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">results_thinkN_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span>.thinkN</span> <span class=\"fn\">n</span></span>)</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L492-L495","name":"Computation.results_thinkN","line":492,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_thinkN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_thinkN\"><span class=\"name\">Computation</span>.<span class=\"name\">results_thinkN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.thinkN</span> <span class=\"fn\">n</span></span>)</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L487-L490","name":"Computation.results_think_iff","line":487,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_think_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_think_iff\"><span class=\"name\">Computation</span>.<span class=\"name\">results_think_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L480-L484","name":"Computation.of_results_think","line":480,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.of_results_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.of_results_think\"><span class=\"name\">Computation</span>.<span class=\"name\">of_results_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L476-L478","name":"Computation.results_think","line":476,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_think\"><span class=\"name\">Computation</span>.<span class=\"name\">results_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L465-L474","name":"Computation.length_think","line":465,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.length_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.length_think\"><span class=\"name\">Computation</span>.<span class=\"name\">length_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L461-L462","name":"Computation.results_pure","line":461,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">results_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L457-L459","name":"Computation.length_pure","line":457,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.length_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.length_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">length_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L453-L454","name":"Computation.get_pure","line":453,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">get_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span>.get</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L448-L450","name":"Computation.exists_results_of_mem","line":448,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.exists_results_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.exists_results_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">exists_results_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L445-L446","name":"Computation.Results.len_unique","line":445,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results.len_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results.len_unique\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span>.<span class=\"name\">len_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L441-L443","name":"Computation.Results.val_unique","line":441,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results.val_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results.val_unique\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span>.<span class=\"name\">val_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L438-L439","name":"Computation.Results.length","line":438,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results.length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results.length\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_T : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L435-L436","name":"Computation.Results.terminates","line":435,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results.terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results.terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span>.<span class=\"name\">terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L432-L433","name":"Computation.Results.mem","line":432,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results.mem\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L429-L430","name":"Computation.results_of_terminates'","line":429,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_of_terminates'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_of_terminates'\"><span class=\"name\">Computation</span>.<span class=\"name\">results_of_terminates'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L425-L427","name":"Computation.results_of_terminates","line":425,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_of_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_of_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">results_of_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_T : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Results</span> <span class=\"fn\"><span class=\"fn\">s</span>.get</span> <span class=\"fn\"><span class=\"fn\">s</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L422-L423","name":"Computation.Results","line":422,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results","doc":"`Results s a n` completely characterizes a terminating computation:\nit asserts that `s` terminates after exactly `n` steps, with result `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L415-L416","name":"Computation.get_eq_of_promises","line":415,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_eq_of_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_eq_of_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">get_eq_of_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Promises</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L409-L413","name":"Computation.mem_of_promises","line":409,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_of_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_of_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_of_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Promises</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L407-L407","name":"Computation.get_promises","line":407,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">get_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Promises</span> <span class=\"fn\"><span class=\"fn\">s</span>.get</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L404-L405","name":"Computation.get_thinkN","line":404,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_thinkN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_thinkN\"><span class=\"name\">Computation</span>.<span class=\"name\">get_thinkN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.thinkN</span> <span class=\"fn\">n</span></span>)</span>.get</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.get</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L398-L401","name":"Computation.get_think","line":398,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_think\"><span class=\"name\">Computation</span>.<span class=\"name\">get_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.get</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.get</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L395-L395","name":"Computation.mem_of_get_eq","line":395,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_of_get_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_of_get_eq\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_of_get_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L392-L393","name":"Computation.get_eq_of_mem","line":392,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_eq_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_eq_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">get_eq_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L389-L390","name":"Computation.get_mem","line":389,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">get_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L386-L387","name":"Computation.get","line":386,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get","doc":"`get s` returns the result of a terminating computation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\"><span class=\"name\">Computation</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L382-L383","name":"Computation.length","line":382,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.length","doc":"`length s` gets the number of steps of a terminating computation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\"><span class=\"name\">Computation</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L375-L375","name":"Computation.empty_promises","line":375,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.empty_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">empty_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span>.Promises</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L373-L373","name":"Computation.mem_promises","line":373,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Promises</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L369-L371","name":"Computation.«term_~>_»","line":369,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.«term_~>_»","doc":"`Promises s a`, or `s ~> a`, asserts that although the computation `s`\nmay not terminate, if it does, then the result is `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.«term_~&gt;_»\"><span class=\"name\">Computation</span>.<span class=\"name\">«term_~&gt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L366-L367","name":"Computation.Promises","line":366,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Promises","doc":"`Promises s a`, or `s ~> a`, asserts that although the computation `s`\nmay not terminate, if it does, then the result is `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\"><span class=\"name\">Computation</span>.<span class=\"name\">Promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L361-L362","name":"Computation.of_thinkN_terminates","line":361,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.of_thinkN_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.of_thinkN_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">of_thinkN_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.thinkN</span> <span class=\"fn\">n</span></span>)</span>.Terminates</span> → <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L358-L359","name":"Computation.thinkN_terminates","line":358,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">thinkN_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.thinkN</span> <span class=\"fn\">n</span></span>)</span>.Terminates</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L354-L356","name":"Computation.thinkN_mem","line":354,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">thinkN_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.thinkN</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L349-L352","name":"Computation.eq_empty_of_not_terminates","line":349,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.eq_empty_of_not_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.eq_empty_of_not_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">eq_empty_of_not_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L347-L347","name":"Computation.not_terminates_empty","line":347,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.not_terminates_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.not_terminates_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">not_terminates_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span>.Terminates</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L345-L345","name":"Computation.not_mem_empty","line":345,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.not_mem_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L342-L343","name":"Computation.of_think_terminates","line":342,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.of_think_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.of_think_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">of_think_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.Terminates</span> → <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L336-L340","name":"Computation.of_think_mem","line":336,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.of_think_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.of_think_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">of_think_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.think</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L333-L334","name":"Computation.think_terminates","line":333,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">think_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.Terminates</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L330-L331","name":"Computation.think_mem","line":330,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">think_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.think</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L327-L328","name":"Computation.ret_terminates","line":327,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.ret_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.ret_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">ret_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span>.Terminates</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L324-L325","name":"Computation.eq_of_pure_mem","line":324,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.eq_of_pure_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.eq_of_pure_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">eq_of_pure_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L321-L322","name":"Computation.ret_mem","line":321,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.ret_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.ret_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">ret_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L313-L319","name":"Computation.terminates_def","line":313,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_def\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">s</span></span> <span class=\"fn\">n</span></span>)</span>.isSome</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L310-L311","name":"Computation.terminates_of_mem","line":310,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L307-L308","name":"Computation.terminates_iff","line":307,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_iff\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L305-L305","name":"Computation.Terminates.term","line":305,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Terminates.term","doc":"assertion that there is some term `a` such that the `Computation` terminates "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates.term\"><span class=\"name\">Computation</span>.<span class=\"name\">Terminates</span>.<span class=\"name\">term</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L303-L303","name":"Computation.Terminates.mk","line":303,"kind":"ctor","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Terminates.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates.mk\"><span class=\"name\">Computation</span>.<span class=\"name\">Terminates</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(term : <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L303-L305","name":"Computation.Terminates","line":303,"kind":"class","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Terminates","doc":"`Terminates s` asserts that the computation `s` eventually terminates with some value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">Terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L299-L300","name":"Computation.Mem.left_unique","line":299,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Mem.left_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Mem.left_unique\"><span class=\"name\">Computation</span>.<span class=\"name\">Mem</span>.<span class=\"name\">left_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftUnique\">Relator.LeftUnique</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L294-L297","name":"Computation.mem_unique","line":294,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_unique\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L289-L292","name":"Computation.le_stable","line":289,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.le_stable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.le_stable\"><span class=\"name\">Computation</span>.<span class=\"name\">le_stable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">s</span></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">s</span></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L286-L287","name":"Computation.instMembership","line":286,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instMembership","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instMembership\"><span class=\"name\">Computation</span>.<span class=\"name\">instMembership</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L283-L284","name":"Computation.Mem","line":283,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Mem","doc":"Assertion that a `Computation` limits to a given value"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Mem\"><span class=\"name\">Computation</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L255-L276","name":"Computation.eq_of_bisim","line":255,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.eq_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.eq_of_bisim\"><span class=\"name\">Computation</span>.<span class=\"name\">eq_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bisim : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.IsBisimulation\">Computation.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L251-L252","name":"Computation.IsBisimulation","line":251,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.IsBisimulation","doc":"Attribute expressing bisimilarity over two `Computation`s"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.IsBisimulation\"><span class=\"name\">Computation</span>.<span class=\"name\">IsBisimulation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L243-L246","name":"Computation.BisimO","line":243,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.BisimO","doc":"Bisimilarity over a sum of `Computation`s"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.BisimO\"><span class=\"name\">Computation</span>.<span class=\"name\">BisimO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L219-L233","name":"Computation.corec_eq","line":219,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.corec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec_eq\"><span class=\"name\">Computation</span>.<span class=\"name\">corec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\">Computation.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span></span>)</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.rmap\">Computation.rmap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\">Computation.corec</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L207-L209","name":"Computation.rmap","line":207,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.rmap","doc":"right map of `⊕` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.rmap\"><span class=\"name\">Computation</span>.<span class=\"name\">rmap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L202-L204","name":"Computation.lmap","line":202,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.lmap","doc":"left map of `⊕` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.lmap\"><span class=\"name\">Computation</span>.<span class=\"name\">lmap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L188-L199","name":"Computation.corec","line":188,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.corec","doc":"`corec f b` is the corecursor for `Computation α` as a coinductive type.\nIf `f b = inl a` then `corec f b = pure a`, and if `f b = inl b'` then\n`corec f b = think (corec f b')`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\"><span class=\"name\">Computation</span>.<span class=\"name\">corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L177-L183","name":"Computation.Corec.f","line":177,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Corec.f","doc":"Corecursor constructor for `corec`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Corec.f\"><span class=\"name\">Computation</span>.<span class=\"name\">Corec</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L165-L174","name":"Computation.recOn","line":165,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.recOn","doc":"Recursion principle for computations, compare with `List.recOn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.recOn\"><span class=\"name\">Computation</span>.<span class=\"name\">recOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">s</span>.think</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L161-L162","name":"Computation.think_empty","line":161,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">think_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span>.think</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L158-L159","name":"Computation.tail_empty","line":158,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.tail_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">tail_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L154-L155","name":"Computation.tail_think","line":154,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.tail_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail_think\"><span class=\"name\">Computation</span>.<span class=\"name\">tail_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L150-L151","name":"Computation.tail_pure","line":150,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.tail_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">tail_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L146-L147","name":"Computation.head_empty","line":146,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.head_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.head_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">head_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L142-L143","name":"Computation.head_think","line":142,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.head_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.head_think\"><span class=\"name\">Computation</span>.<span class=\"name\">head_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L138-L139","name":"Computation.head_pure","line":138,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.head_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.head_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">head_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L134-L135","name":"Computation.destruct_empty","line":134,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L130-L131","name":"Computation.destruct_think","line":130,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_think\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.think</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L126-L127","name":"Computation.destruct_pure","line":126,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L113-L123","name":"Computation.destruct_eq_think","line":113,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_eq_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_eq_think\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_eq_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">s'</span></span></span> → <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s'</span>.think</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L102-L111","name":"Computation.destruct_eq_pure","line":102,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_eq_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_eq_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_eq_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span></span> → <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L96-L100","name":"Computation.run","line":96,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.run","doc":"`run c` is an unsound meta function that runs `c` to completion, possibly\nresulting in an infinite loop in the VM. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.run\"><span class=\"name\">Computation</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L89-L92","name":"Computation.destruct","line":89,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct","doc":"`destruct c` is the destructor for `Computation α` as a coinductive type.\nIt returns `inl a` if `c = pure a` and `inr c'` if `c = think c'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L84-L85","name":"Computation.runFor","line":84,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.runFor","doc":"`runFor c n` evaluates `c` for `n` steps and returns the result, or `none`\nif it did not terminate after `n` steps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.runFor\"><span class=\"name\">Computation</span>.<span class=\"name\">runFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L79-L80","name":"Computation.instInhabited","line":79,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instInhabited\"><span class=\"name\">Computation</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L76-L77","name":"Computation.empty","line":76,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.empty","doc":"`empty α` is the computation that never returns, an infinite sequence of\n`think`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\"><span class=\"name\">Computation</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L71-L72","name":"Computation.tail","line":71,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.tail","doc":"`tail c` is the remainder of computation, either `c` if `c = pure a`\nor `c'` if `c = think c'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail\"><span class=\"name\">Computation</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L65-L66","name":"Computation.head","line":65,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.head","doc":"`head c` is the first step of computation, either `some a` if `c = pure a`\nor `none` if `c = think c'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.head\"><span class=\"name\">Computation</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L58-L60","name":"Computation.thinkN","line":58,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.thinkN","doc":"`thinkN c n` is the computation that delays for `n` ticks and then performs\ncomputation `c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\"><span class=\"name\">Computation</span>.<span class=\"name\">thinkN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L50-L54","name":"Computation.think","line":50,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think","doc":"`think c` is the computation that delays for one \"tick\" and then performs\ncomputation `c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\"><span class=\"name\">Computation</span>.<span class=\"name\">think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L44-L45","name":"Computation.instCoeTC","line":44,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instCoeTC","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instCoeTC\"><span class=\"name\">Computation</span>.<span class=\"name\">instCoeTC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTC\">CoeTC</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L41-L42","name":"Computation.pure","line":41,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.pure","doc":"`pure a` is the computation that immediately terminates with result `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\"><span class=\"name\">Computation</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Computation.lean#L31-L32","name":"Computation","line":31,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation","doc":"`Computation α` is the type of unbounded computations returning `α`.\nAn element of `Computation α` is an infinite sequence of `Option α` such\nthat if `f n = some a` for some `n` then it is constantly `some a` after that. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation\"><span class=\"name\">Computation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}