{"name":"Mathlib.Data.Seq.Seq","instances":[{"typeNames":["Stream'.Seq"],"name":"Stream'.Seq.instInhabited","className":"Inhabited"},{"typeNames":["Stream'.Seq.TerminatedAt"],"name":"Stream'.Seq.terminatedAtDecidable","className":"Decidable"},{"typeNames":["Stream'.Seq"],"name":"Stream'.Seq.instMembership","className":"Membership"},{"typeNames":["List","Stream'.Seq"],"name":"Stream'.Seq.coeList","className":"Coe"},{"typeNames":["Stream'","Stream'.Seq"],"name":"Stream'.Seq.coeStream","className":"Coe"},{"typeNames":["LazyList","Stream'.Seq"],"name":"Stream'.Seq.coeLazyList","className":"Coe"},{"typeNames":["Stream'.Seq"],"name":"Stream'.Seq.instFunctor","className":"Functor"},{"typeNames":["Stream'.Seq"],"name":"Stream'.Seq.instLawfulFunctor","className":"LawfulFunctor"},{"typeNames":["Stream'.Seq1","Stream'.Seq"],"name":"Stream'.Seq1.coeSeq","className":"Coe"},{"typeNames":["Stream'.Seq1"],"name":"Stream'.Seq1.instInhabited","className":"Inhabited"},{"typeNames":["Stream'.Seq1"],"name":"Stream'.Seq1.monad","className":"Monad"},{"typeNames":["Stream'.Seq1"],"name":"Stream'.Seq1.lawfulMonad","className":"LawfulMonad"}],"imports":["Init","Mathlib.Data.Option.NAry","Mathlib.Data.Seq.Computation","Batteries.Data.LazyList"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L937-L941","name":"Stream'.Seq1.lawfulMonad","line":937,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.lawfulMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.lawfulMonad\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">lawfulMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L932-L935","name":"Stream'.Seq1.monad","line":932,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.monad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.monad\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">monad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L915-L930","name":"Stream'.Seq1.bind_assoc","line":915,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.bind_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.bind_assoc\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">bind_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">f</span></span>)</span>.bind</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span>.bind</span> <span class=\"fn\">g</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L891-L912","name":"Stream'.Seq1.join_join","line":891,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_join\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">join_join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(SS : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SS</span>.join</span>.join</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">Stream'.Seq1.join</span> <span class=\"fn\">SS</span></span>)</span>.join</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L887-L888","name":"Stream'.Seq1.map_join","line":887,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_join\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">map_join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map\">Stream'.Seq1.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">S</span>.join</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map\">Stream'.Seq1.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map\">Stream'.Seq1.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">S</span></span>)</span>.join</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L868-L884","name":"Stream'.Seq1.map_join'","line":868,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_join'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_join'\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">map_join'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">S</span>.join</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map\">Stream'.Seq1.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">S</span></span>)</span>.join</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L862-L865","name":"Stream'.Seq1.ret_bind","line":862,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.ret_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.ret_bind\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">ret_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.ret\">Stream'.Seq1.ret</a> <span class=\"fn\">a</span></span>)</span>.bind</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L854-L859","name":"Stream'.Seq1.bind_ret","line":854,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.bind_ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.bind_ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">bind_ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bind</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Stream'.Seq1.ret</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map\">Stream'.Seq1.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L850-L851","name":"Stream'.Seq1.join_map_ret","line":850,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_map_ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_map_ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">join_map_ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">Stream'.Seq1.ret</span> <span class=\"fn\">s</span></span>)</span>.join</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L846-L847","name":"Stream'.Seq1.bind","line":846,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.bind","doc":"The `bind` operator for the `Seq1` monad,\nwhich maps `f` on each element of `s` and appends the results together.\n(Not all of `s` may be evaluated, because the first few elements of `s`\nmay already produce an infinite result.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.bind\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L839-L840","name":"Stream'.Seq1.instInhabited","line":839,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.instInhabited\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L836-L837","name":"Stream'.Seq1.ret","line":836,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.ret","doc":"The `return` operator for the `Seq1` monad,\nwhich produces a singleton sequence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L830-L832","name":"Stream'.Seq1.join_cons","line":830,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">join_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join\">Stream'.Seq1.join</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span>)</span>, <span class=\"fn\">S</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">(<span class=\"fn\">b</span>, <span class=\"fn\">s</span>)</span> <span class=\"fn\">S</span></span>)</span>.join</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L826-L827","name":"Stream'.Seq1.join_nil","line":826,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">join_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join\">Stream'.Seq1.join</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">Stream'.Seq.nil</span>)</span>, <span class=\"fn\">S</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><span class=\"fn\">S</span>.join</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L819-L823","name":"Stream'.Seq1.join","line":819,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join","doc":"Flatten a nonempty sequence of nonempty sequences "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L815-L816","name":"Stream'.Seq1.map_id","line":815,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_id\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map\">Stream'.Seq1.map</a> <span class=\"fn\">id</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L813-L813","name":"Stream'.Seq1.map_pair","line":813,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_pair\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">map_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map\">Stream'.Seq1.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L810-L811","name":"Stream'.Seq1.map","line":810,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map","doc":"Map a function on a `Seq1` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L806-L807","name":"Stream'.Seq1.coeSeq","line":806,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.coeSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.coeSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">coeSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L803-L804","name":"Stream'.Seq1.toSeq","line":803,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.toSeq","doc":"Convert a `Seq1` to a sequence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.toSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span>.<span class=\"name\">toSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L787-L792","name":"Stream'.Seq.enum_cons","line":787,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.enum_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.enum_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">enum_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>)</span>.enum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">(<span class=\"fn\">0</span>, <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">id</span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.enum</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L783-L784","name":"Stream'.Seq.mem_append_left","line":783,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_append_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">mem_append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.append</span> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L764-L781","name":"Stream'.Seq.of_mem_append","line":764,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.of_mem_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.of_mem_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">of_mem_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.append</span> <span class=\"fn\">s₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L756-L762","name":"Stream'.Seq.exists_of_mem_map","line":756,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.exists_of_mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.exists_of_mem_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">exists_of_mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span> → <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L753-L754","name":"Stream'.Seq.mem_map","line":753,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L749-L751","name":"Stream'.Seq.head_dropn","line":749,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_dropn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_dropn\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">head_dropn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.drop</span> <span class=\"fn\">n</span></span>)</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L745-L746","name":"Stream'.Seq.dropn_tail","line":745,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.dropn_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.dropn_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">dropn_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.tail</span>.drop</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.drop</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L741-L743","name":"Stream'.Seq.dropn_add","line":741,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.dropn_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.dropn_add\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">dropn_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.drop</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.drop</span> <span class=\"fn\">m</span></span>)</span>.drop</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L733-L739","name":"Stream'.Seq.toList'","line":733,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toList'","doc":"Convert a sequence into a list, embedded in a computation to allow for\nthe possibility of infinite sequences (in which case the computation\nnever returns anything). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toList'\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">toList'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L726-L728","name":"Stream'.Seq.ofStream_append","line":726,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofStream_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofStream_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ofStream_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">l</span></span>)</span>.append</span> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L722-L723","name":"Stream'.Seq.ofList_append","line":722,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ofList_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">l</span></span>)</span>.append</span> <span class=\"fn\">↑<span class=\"fn\">l'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L718-L719","name":"Stream'.Seq.ofStream_cons","line":718,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofStream_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofStream_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ofStream_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L695-L715","name":"Stream'.Seq.join_append","line":695,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">join_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.append</span> <span class=\"fn\">T</span></span>)</span>.join</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.join</span>.append</span> <span class=\"fn\"><span class=\"fn\">T</span>.join</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L675-L692","name":"Stream'.Seq.join_cons","line":675,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">join_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s</span>)</span> <span class=\"fn\">S</span></span>)</span>.join</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.append</span> <span class=\"fn\"><span class=\"fn\">S</span>.join</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L670-L672","name":"Stream'.Seq.join_cons_cons","line":670,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_cons_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">join_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">S</span></span>)</span>.join</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">(<span class=\"fn\">b</span>, <span class=\"fn\">s</span>)</span> <span class=\"fn\">S</span></span>)</span>.join</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L666-L667","name":"Stream'.Seq.join_cons_nil","line":666,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_cons_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_cons_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">join_cons_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">Stream'.Seq.nil</span>)</span> <span class=\"fn\">S</span></span>)</span>.join</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">S</span>.join</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L662-L663","name":"Stream'.Seq.join_nil","line":662,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">join_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Stream'.Seq.nil</span>.join</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.Seq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L656-L659","name":"Stream'.Seq.instLawfulFunctor","line":656,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instLawfulFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instLawfulFunctor\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">instLawfulFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulFunctor\">LawfulFunctor</a> <a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L654-L654","name":"Stream'.Seq.instFunctor","line":654,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instFunctor\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">instFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L651-L652","name":"Stream'.Seq.map_get?","line":651,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_get?\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">map_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L635-L648","name":"Stream'.Seq.map_append","line":635,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">map_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.append</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span>.append</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L628-L632","name":"Stream'.Seq.map_comp","line":628,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_comp\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">map_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L625-L626","name":"Stream'.Seq.map_tail","line":625,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">map_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.tail</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span>.tail</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L619-L622","name":"Stream'.Seq.map_id","line":619,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_id\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">id</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L615-L616","name":"Stream'.Seq.map_cons","line":615,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">map_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L611-L612","name":"Stream'.Seq.map_nil","line":611,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">map_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\">Stream'.Seq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">Stream'.Seq.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.Seq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L593-L608","name":"Stream'.Seq.append_assoc","line":593,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.append_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.append_assoc\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">append_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.append</span> <span class=\"fn\">t</span></span>)</span>.append</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.append</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.append</span> <span class=\"fn\">u</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L583-L590","name":"Stream'.Seq.append_nil","line":583,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.append_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.append_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">append_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.append</span> <span class=\"fn\">Stream'.Seq.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L577-L580","name":"Stream'.Seq.cons_append","line":577,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">cons_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.append</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.append</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L566-L574","name":"Stream'.Seq.nil_append","line":566,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nil_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nil_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">nil_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Stream'.Seq.nil</span>.append</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L562-L563","name":"Stream'.Seq.toListOrStream","line":562,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toListOrStream","doc":"Convert a sequence into either a list or a stream depending on whether\nit is finite or infinite. (Without decidability of the infiniteness predicate,\nthis is not constructively possible.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toListOrStream\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">toListOrStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L556-L557","name":"Stream'.Seq.toStream","line":556,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toStream","doc":"Convert a sequence which is known not to terminate into a stream "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toStream\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">toStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L552-L553","name":"Stream'.Seq.toList","line":552,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toList","doc":"Convert a sequence which is known to terminate into a list "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toList\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L548-L549","name":"Stream'.Seq.enum_nil","line":548,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.enum_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.enum_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">enum_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Stream'.Seq.nil</span>.enum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.Seq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L544-L545","name":"Stream'.Seq.get?_enum","line":544,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_enum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_enum\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get?_enum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.enum</span>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">Prod.mk</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L540-L541","name":"Stream'.Seq.enum","line":540,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.enum","doc":"Enumerate a sequence by tagging each element with its index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.enum\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">enum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L536-L537","name":"Stream'.Seq.unzip","line":536,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.unzip","doc":"Separate a sequence of pairs into two sequences "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.unzip\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">unzip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L531-L533","name":"Stream'.Seq.get?_zip","line":531,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get?_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.zip</span> <span class=\"fn\">t</span></span>)</span>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Option/NAry.html#Option.map₂\">Option.map₂</a> <span class=\"fn\">Prod.mk</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.get?</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L528-L529","name":"Stream'.Seq.zip","line":528,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.zip","doc":"Pair two sequences into a sequence of pairs "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L521-L523","name":"Stream'.Seq.get?_zipWith","line":521,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_zipWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_zipWith\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get?_zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s' : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.zipWith\">Stream'.Seq.zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span> <span class=\"fn\">s'</span></span>)</span>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Option/NAry.html#Option.map₂\">Option.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.get?</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L514-L516","name":"Stream'.Seq.zipWith","line":514,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.zipWith","doc":"Combine two sequences with a function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.zipWith\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L502-L509","name":"Stream'.Seq.splitAt","line":502,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.splitAt","doc":"Split a sequence at `n`, producing a finite initial segment\nand an infinite tail. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.splitAt\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">splitAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L493-L498","name":"Stream'.Seq.take","line":493,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.take","doc":"Take the first `n` elements of the sequence (producing a list) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.take\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L486-L488","name":"Stream'.Seq.drop","line":486,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.drop","doc":"Remove the first `n` elements from the sequence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L474-L483","name":"Stream'.Seq.join","line":474,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join","doc":"Flatten a sequence of sequences. (It is required that the\nsequences be nonempty to ensure productivity; in the case\nof an infinite sequence of `nil`, the first element is never\ngenerated.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L461-L468","name":"Stream'.Seq.map","line":461,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map","doc":"Map a function over a sequence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L452-L458","name":"Stream'.Seq.append","line":452,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.append","doc":"Append two sequences. If `s₁` is infinite, then `s₁ ++ s₂ = s₁`,\notherwise it puts `s₂` at the location of the `nil` in `s₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.append\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L447-L448","name":"Stream'.Seq.nats_get?","line":447,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nats_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nats_get?\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">nats_get?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nats\">Stream'.Seq.nats</a>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L443-L444","name":"Stream'.Seq.nats","line":443,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nats","doc":"The sequence of natural numbers some 0, some 1, ... "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nats\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">nats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L436-L440","name":"Stream'.Seq.forceToList","line":436,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.forceToList","doc":"Translate a sequence to a list. This function will run forever if\nrun on an infinite sequence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.forceToList\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">forceToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L426-L430","name":"Stream'.Seq.toLazyList","line":426,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toLazyList","doc":"Translate a sequence into a `LazyList`. Since `LazyList` and `List`\nare isomorphic as non-meta types, this function is necessarily meta. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toLazyList\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">toLazyList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L420-L421","name":"Stream'.Seq.coeLazyList","line":420,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coeLazyList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coeLazyList\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">coeLazyList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L413-L417","name":"Stream'.Seq.ofLazyList","line":413,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofLazyList","doc":"Embed a `LazyList α` as a sequence. Note that even though this\nis non-meta, it will produce infinite sequences if used with\ncyclic `LazyList`s created by meta constructions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofLazyList\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ofLazyList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L402-L403","name":"Stream'.Seq.coeStream","line":402,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coeStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coeStream\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">coeStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L399-L400","name":"Stream'.Seq.ofStream","line":399,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofStream","doc":"Embed an infinite stream as a sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofStream\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ofStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L394-L395","name":"Stream'.Seq.ofList_cons","line":394,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ofList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L390-L391","name":"Stream'.Seq.ofList_get","line":390,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_get\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ofList_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">l</span></span>)</span>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.get?</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L386-L387","name":"Stream'.Seq.ofList_nil","line":386,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ofList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.Seq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L382-L383","name":"Stream'.Seq.coeList","line":382,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coeList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coeList\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">coeList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L377-L380","name":"Stream'.Seq.ofList","line":377,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList","doc":"Embed a list as a sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L365-L373","name":"Stream'.Seq.coinduction2","line":365,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coinduction2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coinduction2\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">coinduction2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.BisimO\">Stream'.Seq.BisimO</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s1</span> <span class=\"fn\">s2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">∃ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">s2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">s</span></span></span></span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span>.destruct</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">s</span></span>)</span>.destruct</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L358-L363","name":"Stream'.Seq.coinduction","line":358,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coinduction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coinduction\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">coinduction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.head</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u) (<span class=\"fn\">fr</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\">s₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\"><span class=\"fn\">s₁</span>.tail</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\"><span class=\"fn\">s₂</span>.tail</span></span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L325-L354","name":"Stream'.Seq.eq_of_bisim","line":325,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.eq_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.eq_of_bisim\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">eq_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bisim : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.IsBisimulation\">Stream'.Seq.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L321-L322","name":"Stream'.Seq.IsBisimulation","line":321,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.IsBisimulation","doc":"a relation is bisimilar if it meets the `BisimO` test"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.IsBisimulation\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">IsBisimulation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L313-L316","name":"Stream'.Seq.BisimO","line":313,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.BisimO","doc":"Bisimilarity relation over `Option` of `Seq1 α`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.BisimO\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">BisimO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L291-L304","name":"Stream'.Seq.corec_eq","line":291,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.corec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.corec_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">corec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.corec\">Stream'.Seq.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span></span>)</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.omap\">Stream'.Seq.omap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.corec\">Stream'.Seq.corec</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L272-L288","name":"Stream'.Seq.corec","line":272,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.corec","doc":"Corecursor for `Seq α` as a coinductive type. Iterates `f` to produce new elements\nof the sequence until `none` is obtained. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.corec\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L263-L268","name":"Stream'.Seq.Corec.f","line":263,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.Corec.f","doc":"Corecursor over pairs of `Option` values"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.Corec.f\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">Corec</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L243-L260","name":"Stream'.Seq.mem_rec_on","line":243,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_rec_on","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_rec_on\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">mem_rec_on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s'</span></span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s'</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L234-L241","name":"Stream'.Seq.recOn","line":234,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.recOn","doc":"Recursion principle for sequences, compare with `List.recOn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.recOn\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">recOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Stream'.Seq.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L230-L231","name":"Stream'.Seq.get?_tail","line":230,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get?_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.tail</span>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L224-L227","name":"Stream'.Seq.tail_cons","line":224,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">tail_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L220-L221","name":"Stream'.Seq.tail_nil","line":220,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">tail_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Stream'.Seq.nil</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.Seq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L216-L217","name":"Stream'.Seq.head_cons","line":216,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">head_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L212-L213","name":"Stream'.Seq.head_nil","line":212,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">head_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Stream'.Seq.nil</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L208-L209","name":"Stream'.Seq.head_eq_destruct","line":208,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_eq_destruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_eq_destruct\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">head_eq_destruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Prod.fst</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.destruct</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L201-L205","name":"Stream'.Seq.destruct_cons","line":201,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">destruct_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L197-L198","name":"Stream'.Seq.destruct_nil","line":197,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">destruct_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Stream'.Seq.nil</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L183-L194","name":"Stream'.Seq.destruct_eq_cons","line":183,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_eq_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_eq_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">destruct_eq_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s'</span>)</span></span></span> → <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L174-L181","name":"Stream'.Seq.destruct_eq_nil","line":174,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_eq_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_eq_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">destruct_eq_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.destruct</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span> → <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.Seq.nil</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L171-L172","name":"Stream'.Seq.destruct","line":171,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct","doc":"Destructor for a sequence, resulting in either `none` (for `nil`) or\n`some (a, s)` (for `cons a s`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">destruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L166-L167","name":"Stream'.Seq.mem_cons_iff","line":166,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_cons_iff\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">mem_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L162-L163","name":"Stream'.Seq.eq_or_mem_of_mem_cons","line":162,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.eq_or_mem_of_mem_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.eq_or_mem_of_mem_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">eq_or_mem_of_mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L159-L160","name":"Stream'.Seq.mem_cons_of_mem","line":159,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_cons_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_cons_of_mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">mem_cons_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">y</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L156-L157","name":"Stream'.Seq.mem_cons","line":156,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L154-L154","name":"Stream'.Seq.not_mem_nil","line":154,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.not_mem_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.not_mem_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">not_mem_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">Stream'.Seq.nil</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L148-L152","name":"Stream'.Seq.ge_stable","line":148,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ge_stable","doc":"If `s.get? n = some aₙ` for some value `aₙ`, then there is also some value `aₘ` such\nthat `s.get? = some aₘ` for `m ≤ n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ge_stable\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ge_stable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aₙ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m_le_n : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s_nth_eq_some : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">aₙ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">aₘ</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">aₘ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L142-L143","name":"Stream'.Seq.terminated_stable","line":142,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.terminated_stable","doc":"If a sequence terminated at position `n`, it also terminated at `m ≥ n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.terminated_stable\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">terminated_stable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.TerminatedAt</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.TerminatedAt</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L136-L139","name":"Stream'.Seq.le_stable","line":136,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.le_stable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.le_stable\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">le_stable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L133-L134","name":"Stream'.Seq.instMembership","line":133,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instMembership","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instMembership\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">instMembership</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L130-L131","name":"Stream'.Seq.Mem","line":130,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.Mem","doc":"member definition for `Seq`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.Mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L124-L127","name":"Stream'.Seq.tail","line":124,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail","doc":"Get the tail of a sequence (or `nil` if the sequence is `nil`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L120-L121","name":"Stream'.Seq.head","line":120,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head","doc":"Get the first element of a sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L115-L117","name":"Stream'.Seq.omap","line":115,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.omap","doc":"Functorial action of the functor `Option (α × _)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.omap\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">omap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L110-L111","name":"Stream'.Seq.not_terminates_iff","line":110,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.not_terminates_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.not_terminates_iff\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">not_terminates_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">s</span>.Terminates</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">n</span></span>)</span>.isSome</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L107-L108","name":"Stream'.Seq.Terminates","line":107,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.Terminates","doc":"A sequence terminates if there is some position `n` at which it has terminated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.Terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">Terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L103-L104","name":"Stream'.Seq.terminatedAtDecidable","line":103,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.terminatedAtDecidable","doc":"It is decidable whether a sequence terminates at a given position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.terminatedAtDecidable\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">terminatedAtDecidable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.TerminatedAt</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L99-L100","name":"Stream'.Seq.TerminatedAt","line":99,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.TerminatedAt","doc":"A sequence has terminated at position `n` if the value at position `n` equals `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.TerminatedAt\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">TerminatedAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L95-L96","name":"Stream'.Seq.cons_right_injective","line":95,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_right_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_right_injective\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">cons_right_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L92-L93","name":"Stream'.Seq.cons_left_injective","line":92,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_left_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_left_injective\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">cons_left_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L88-L90","name":"Stream'.Seq.cons_injective2","line":88,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_injective2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_injective2\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">cons_injective2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Injective2\">Function.Injective2</a> <span class=\"fn\">Stream'.Seq.cons</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L85-L86","name":"Stream'.Seq.ext","line":85,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ext\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.get?</span> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L81-L82","name":"Stream'.Seq.get?_cons_succ","line":81,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_cons_succ\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get?_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.get?</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get?</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L77-L78","name":"Stream'.Seq.get?_cons_zero","line":77,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_cons_zero\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get?_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.get?</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L73-L74","name":"Stream'.Seq.get?_nil","line":73,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get?_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Stream'.Seq.nil</span>.get?</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L69-L70","name":"Stream'.Seq.get?_mk","line":69,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_mk\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get?_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\">f</span>.IsSeq</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">Stream'.Seq.get?</a> <span class=\"fn\">⟨<span class=\"fn\">f</span>, <span class=\"fn\">hf</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L65-L66","name":"Stream'.Seq.get?","line":65,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?","doc":"Get the nth element of a sequence (if it exists) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L61-L62","name":"Stream'.Seq.val_cons","line":61,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.val_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.val_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">val_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\">Stream'.Seq.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L54-L58","name":"Stream'.Seq.cons","line":54,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons","doc":"Prepend an element to a sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L50-L51","name":"Stream'.Seq.instInhabited","line":50,"kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instInhabited\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L47-L48","name":"Stream'.Seq.nil","line":47,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nil","doc":"The empty sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L39-L40","name":"Stream'.Seq1","line":39,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1","doc":"`Seq1 α` is the type of nonempty sequences. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L35-L36","name":"Stream'.Seq","line":35,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq","doc":"`Seq α` is the type of possibly infinite lists (referred here as sequences).\nIt is encoded as an infinite stream of options such that if `f n = none`, then\n`f m = none` for all `m ≥ n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\"><span class=\"name\">Stream'</span>.<span class=\"name\">Seq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Seq/Seq.lean#L29-L30","name":"Stream'.IsSeq","line":29,"kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.IsSeq","doc":"A stream `s : Option α` is a sequence if `s.get n = none` implies `s.get (n + 1) = none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Seq.html#Stream'.IsSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">IsSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}