{"name":"Mathlib.Data.Seq.WSeq","instances":[{"typeNames":["Stream'.Seq","Stream'.WSeq"],"name":"Stream'.WSeq.coeSeq","className":"Coe"},{"typeNames":["List","Stream'.WSeq"],"name":"Stream'.WSeq.coeList","className":"Coe"},{"typeNames":["Stream'","Stream'.WSeq"],"name":"Stream'.WSeq.coeStream","className":"Coe"},{"typeNames":["Stream'.WSeq"],"name":"Stream'.WSeq.inhabited","className":"Inhabited"},{"typeNames":["Stream'.WSeq"],"name":"Stream'.WSeq.membership","className":"Membership"},{"typeNames":["Stream'.WSeq.toList"],"name":"Stream'.WSeq.toList_terminates","className":"Computation.Terminates"},{"typeNames":["Stream'.WSeq.get?"],"name":"Stream'.WSeq.get?_terminates","className":"Computation.Terminates"},{"typeNames":["Stream'.WSeq.head"],"name":"Stream'.WSeq.head_terminates","className":"Computation.Terminates"},{"typeNames":["Stream'.WSeq.tail"],"name":"Stream'.WSeq.productive_tail","className":"Stream'.WSeq.Productive"},{"typeNames":["Stream'.WSeq.drop"],"name":"Stream'.WSeq.productive_dropn","className":"Stream'.WSeq.Productive"},{"typeNames":["Stream'.WSeq.ofSeq"],"name":"Stream'.WSeq.productive_ofSeq","className":"Stream'.WSeq.Productive"},{"typeNames":["Stream'.WSeq"],"name":"Stream'.WSeq.monad","className":"Monad"}],"imports":["Init","Mathlib.Logic.Relation","Mathlib.Data.Option.Basic","Mathlib.Data.Seq.Seq"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1812-L1815","name":"Stream'.WSeq.monad","line":1812,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.monad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.monad\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">monad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1806-L1809","name":"Stream'.WSeq.bind_assoc","line":1806,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind_assoc\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">bind_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">g</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1772-L1802","name":"Stream'.WSeq.join_join","line":1772,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_join\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(SS : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">SS</span></span>)</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">Stream'.WSeq.join</span> <span class=\"fn\">SS</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1754-L1768","name":"Stream'.WSeq.map_join","line":1754,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_join\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map_join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">S</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">S</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1750-L1750","name":"Stream'.WSeq.ret_bind","line":1750,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ret_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ret_bind\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">ret_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ret\">Stream'.WSeq.ret</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1743-L1746","name":"Stream'.WSeq.bind_ret","line":1743,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind_ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind_ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">bind_ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Stream'.WSeq.ret</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1715-L1739","name":"Stream'.WSeq.join_append","line":1715,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">S</span> <span class=\"fn\">T</span></span>)</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">S</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">T</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1696-L1711","name":"Stream'.WSeq.join_map_ret","line":1696,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_map_ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_map_ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_map_ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">Stream'.WSeq.ret</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1692-L1692","name":"Stream'.WSeq.join_ret","line":1692,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ret\">Stream'.WSeq.ret</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1686-L1688","name":"Stream'.WSeq.bind_congr","line":1686,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">bind_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f1 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f2 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">s1</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f1</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\">f2</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">s1</span> <span class=\"fn\">f1</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">s2</span> <span class=\"fn\">f2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1680-L1683","name":"Stream'.WSeq.liftRel_bind","line":1680,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_bind\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f1 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f2 : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f1</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f2</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">s1</span> <span class=\"fn\">f1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">s2</span> <span class=\"fn\">f2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1676-L1677","name":"Stream'.WSeq.join_congr","line":1676,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">Stream'.WSeq.Equiv</span> <span class=\"fn\">S</span> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">S</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">T</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1648-L1673","name":"Stream'.WSeq.liftRel_join","line":1648,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_join\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">S</span> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">S</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">T</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1596-L1645","name":"Stream'.WSeq.liftRel_join.lem","line":1596,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_join.lem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_join.lem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_join</span>.<span class=\"name\">lem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{U : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ST : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">S</span> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(HU : <span class=\"fn\">∀ (<span class=\"fn\">s1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">s2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>),\n      <span class=\"fn\">∃ (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>),\n        <span class=\"fn\">∃ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>),\n          <span class=\"fn\">∃ (<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>)</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">S</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>               <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">t</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">T</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>                 <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">S</span> <span class=\"fn\">T</span></span></span></span></span></span></span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">U</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ma : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">S</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">T</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\">Stream'.WSeq.LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1568-L1593","name":"Stream'.WSeq.liftRel_append","line":1568,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">t1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s2</span> <span class=\"fn\">t2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">t1</span> <span class=\"fn\">t2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1552-L1565","name":"Stream'.WSeq.destruct_join","line":1552,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_join\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">S</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">S</span></span>)</span> <span class=\"fn\">Stream'.WSeq.destruct_join.aux</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1547-L1549","name":"Stream'.WSeq.destruct_join.aux","line":1547,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_join.aux","doc":"auxiliary definition of `destruct_join` over weak sequences"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_join.aux\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_join</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1531-L1542","name":"Stream'.WSeq.destruct_append","line":1531,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_append.aux\">Stream'.WSeq.destruct_append.aux</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1526-L1528","name":"Stream'.WSeq.destruct_append.aux","line":1526,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_append.aux","doc":"auxiliary definition of `destruct_append` over weak sequences"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_append.aux\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_append</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1520-L1521","name":"Stream'.WSeq.map_congr","line":1520,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1502-L1517","name":"Stream'.WSeq.liftRel_map","line":1502,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f1 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f2 : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f1</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f2</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f1</span> <span class=\"fn\">s1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f2</span> <span class=\"fn\">s2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1487-L1499","name":"Stream'.WSeq.destruct_map","line":1487,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1480-L1484","name":"Stream'.WSeq.exists_of_mem_bind","line":1480,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_of_mem_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_of_mem_bind\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">exists_of_mem_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\">Stream'.WSeq.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1444-L1477","name":"Stream'.WSeq.exists_of_mem_join","line":1444,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_of_mem_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_of_mem_join\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">exists_of_mem_join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">S</span></span></span> → <span class=\"fn\">∃ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1439-L1440","name":"Stream'.WSeq.mem_map","line":1439,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1433-L1436","name":"Stream'.WSeq.map_comp","line":1433,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_comp\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1429-L1430","name":"Stream'.WSeq.map_append","line":1429,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1425-L1425","name":"Stream'.WSeq.map_ret","line":1425,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map_ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ret\">Stream'.WSeq.ret</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ret\">Stream'.WSeq.ret</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1421-L1421","name":"Stream'.WSeq.map_id","line":1421,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_id\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">id</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1416-L1417","name":"Stream'.WSeq.map_think","line":1416,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1411-L1412","name":"Stream'.WSeq.map_cons","line":1411,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1406-L1407","name":"Stream'.WSeq.map_nil","line":1406,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">Stream'.WSeq.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.WSeq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1401-L1402","name":"Stream'.WSeq.ret","line":1401,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ret","doc":"The monadic `return a` is a singleton list containing `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1394-L1397","name":"Stream'.WSeq.toSeq_ofSeq","line":1394,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toSeq_ofSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toSeq_ofSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toSeq_ofSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toSeq\">Stream'.WSeq.toSeq</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1390-L1391","name":"Stream'.WSeq.productive_ofSeq","line":1390,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.productive_ofSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.productive_ofSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">productive_ofSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1386-L1387","name":"Stream'.WSeq.get?_ofSeq","line":1386,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_ofSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_ofSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get?_ofSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">Stream'.Seq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1379-L1383","name":"Stream'.WSeq.dropn_ofSeq","line":1379,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_ofSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_ofSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">dropn_ofSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.drop\">Stream'.Seq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1371-L1375","name":"Stream'.WSeq.tail_ofSeq","line":1371,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail_ofSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail_ofSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">tail_ofSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail\">Stream'.Seq.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1365-L1367","name":"Stream'.WSeq.head_ofSeq","line":1365,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_ofSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_ofSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_ofSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head\">Stream'.Seq.head</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1352-L1361","name":"Stream'.WSeq.destruct_ofSeq","line":1352,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_ofSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_ofSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_ofSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail\">Stream'.Seq.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head\">Stream'.Seq.head</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1347-L1348","name":"Stream'.WSeq.toList_ofList","line":1347,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList_ofList\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toList_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList\">Stream'.WSeq.toList</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1343-L1344","name":"Stream'.WSeq.toList_nil","line":1343,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList\">Stream'.WSeq.toList</a> <span class=\"fn\">Stream'.WSeq.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1333-L1339","name":"Stream'.WSeq.toList_cons","line":1333,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList\">Stream'.WSeq.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">List.cons</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList\">Stream'.WSeq.toList</a> <span class=\"fn\">s</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1305-L1329","name":"Stream'.WSeq.toList'_map","line":1305,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList'_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList'_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toList'_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\">Computation.corec</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s</span>)</span> =&gt;\n        <span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct\">Stream'.Seq.destruct</a> <span class=\"fn\">s</span></span> with\n        | <span class=\"fn\">none</span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">none</span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s'</span>)</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>, <span class=\"fn\">s'</span>)</span></span></span></span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList\">Stream'.WSeq.toList</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1291-L1302","name":"Stream'.WSeq.toList'_think","line":1291,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList'_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList'_think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toList'_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\">Computation.corec</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s</span>)</span> =&gt;\n        <span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct\">Stream'.Seq.destruct</a> <span class=\"fn\">s</span></span> with\n        | <span class=\"fn\">none</span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">none</span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s'</span>)</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>, <span class=\"fn\">s'</span>)</span></span></span></span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\">Computation.corec</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">x</span> with\n        | <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s</span>)</span> =&gt;\n          <span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct\">Stream'.Seq.destruct</a> <span class=\"fn\">s</span></span> with\n          | <span class=\"fn\">none</span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span>\n          | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">none</span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s'</span>)</span></span>\n          | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>, <span class=\"fn\">s'</span>)</span></span></span></span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s</span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1276-L1287","name":"Stream'.WSeq.toList'_cons","line":1276,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList'_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList'_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toList'_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\">Computation.corec</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s</span>)</span> =&gt;\n        <span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct\">Stream'.Seq.destruct</a> <span class=\"fn\">s</span></span> with\n        | <span class=\"fn\">none</span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">none</span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s'</span>)</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>, <span class=\"fn\">s'</span>)</span></span></span></span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\">Computation.corec</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">x</span> with\n        | <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s</span>)</span> =&gt;\n          <span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct\">Stream'.Seq.destruct</a> <span class=\"fn\">s</span></span> with\n          | <span class=\"fn\">none</span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span>\n          | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">none</span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s'</span>)</span></span>\n          | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>, <span class=\"fn\">s'</span>)</span></span></span></span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>, <span class=\"fn\">s</span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1266-L1272","name":"Stream'.WSeq.toList'_nil","line":1266,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList'_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList'_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toList'_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\">Computation.corec</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s</span>)</span> =&gt;\n        <span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct\">Stream'.Seq.destruct</a> <span class=\"fn\">s</span></span> with\n        | <span class=\"fn\">none</span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">none</span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">s'</span>)</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">s'</span>)</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>, <span class=\"fn\">s'</span>)</span></span></span></span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">l</span>, <span class=\"fn\">Stream'.WSeq.nil</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1261-L1262","name":"Stream'.WSeq.ofList_cons","line":1261,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ofList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ofList_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">ofList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1256-L1257","name":"Stream'.WSeq.ofList_nil","line":1256,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ofList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ofList_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">ofList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.WSeq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1233-L1252","name":"Stream'.WSeq.length_eq_map","line":1233,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.length_eq_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.length_eq_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">length_eq_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.length\">Stream'.WSeq.length</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">List.length</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList\">Stream'.WSeq.toList</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1210-L1230","name":"Stream'.WSeq.Equiv.ext","line":1210,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv.ext\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1206-L1207","name":"Stream'.WSeq.productive_congr","line":1206,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.productive_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.productive_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">productive_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1199-L1203","name":"Stream'.WSeq.mem_congr","line":1199,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1195-L1196","name":"Stream'.WSeq.get?_congr","line":1195,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get?_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1191-L1192","name":"Stream'.WSeq.dropn_congr","line":1191,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">dropn_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1175-L1188","name":"Stream'.WSeq.tail_congr","line":1175,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">tail_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1170-L1172","name":"Stream'.WSeq.flatten_congr","line":1170,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">flatten_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">Stream'.WSeq.Equiv</span> <span class=\"fn\">c1</span> <span class=\"fn\">c2</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten\">Stream'.WSeq.flatten</a> <span class=\"fn\">c1</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten\">Stream'.WSeq.flatten</a> <span class=\"fn\">c2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1155-L1167","name":"Stream'.WSeq.liftRel_flatten","line":1155,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_flatten","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_flatten\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_flatten</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">c1</span> <span class=\"fn\">c2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten\">Stream'.WSeq.flatten</a> <span class=\"fn\">c1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten\">Stream'.WSeq.flatten</a> <span class=\"fn\">c2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1147-L1152","name":"Stream'.WSeq.flatten_equiv","line":1147,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten_equiv\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">flatten_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten\">Stream'.WSeq.flatten</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1126-L1144","name":"Stream'.WSeq.head_congr","line":1126,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1122-L1123","name":"Stream'.WSeq.think_congr","line":1122,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">think_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1119-L1119","name":"Stream'.WSeq.think_equiv","line":1119,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think_equiv\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">think_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1115-L1116","name":"Stream'.WSeq.cons_congr","line":1115,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">cons_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1111-L1112","name":"Stream'.WSeq.liftRel_think_right","line":1111,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_think_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_think_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_think_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1106-L1107","name":"Stream'.WSeq.liftRel_think_left","line":1106,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_think_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_think_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_think_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1098-L1102","name":"Stream'.WSeq.liftRel_cons","line":1098,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1091-L1094","name":"Stream'.WSeq.liftRel_nil","line":1091,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">Stream'.WSeq.nil</span> <span class=\"fn\">Stream'.WSeq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1081-L1087","name":"Stream'.WSeq.exists_of_mem_map","line":1081,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_of_mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_of_mem_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">exists_of_mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\">Stream'.WSeq.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span> → <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1077-L1078","name":"Stream'.WSeq.mem_append_left","line":1077,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_append_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s₁</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1073-L1074","name":"Stream'.WSeq.of_mem_append","line":1073,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.of_mem_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.of_mem_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">of_mem_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1068-L1070","name":"Stream'.WSeq.head_terminates_of_mem","line":1068,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_terminates_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_terminates_of_mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_terminates_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1064-L1065","name":"Stream'.WSeq.exists_of_liftRel_right","line":1064,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_of_liftRel_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_of_liftRel_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">exists_of_liftRel_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1053-L1061","name":"Stream'.WSeq.exists_of_liftRel_left","line":1053,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_of_liftRel_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_of_liftRel_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">exists_of_liftRel_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1038-L1050","name":"Stream'.WSeq.liftRel_dropn_destruct","line":1038,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_dropn_destruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_dropn_destruct\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_dropn_destruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\">Stream'.WSeq.LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1023-L1035","name":"Stream'.WSeq.exists_dropn_of_mem","line":1023,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_dropn_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_dropn_of_mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">exists_dropn_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">∃ (<span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s'</span>)</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L1004-L1020","name":"Stream'.WSeq.exists_get?_of_mem","line":1004,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_get?_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.exists_get?_of_mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">exists_get?_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L988-L1001","name":"Stream'.WSeq.get?_mem","line":988,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get?_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L983-L985","name":"Stream'.WSeq.mem_of_mem_dropn","line":983,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_of_mem_dropn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_of_mem_dropn\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_of_mem_dropn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L970-L980","name":"Stream'.WSeq.mem_of_mem_tail","line":970,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_of_mem_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_of_mem_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_of_mem_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L966-L967","name":"Stream'.WSeq.mem_cons","line":966,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L962-L963","name":"Stream'.WSeq.mem_cons_of_mem","line":962,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_cons_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_cons_of_mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_cons_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L958-L959","name":"Stream'.WSeq.mem_cons_iff","line":958,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_cons_iff\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L934-L954","name":"Stream'.WSeq.eq_or_mem_iff_mem","line":934,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.eq_or_mem_iff_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.eq_or_mem_iff_mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">eq_or_mem_iff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a'</span>, <span class=\"fn\">s'</span>)</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s'</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L924-L931","name":"Stream'.WSeq.mem_think","line":924,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L909-L920","name":"Stream'.WSeq.mem_rec_on","line":909,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_rec_on","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.mem_rec_on\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_rec_on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s'</span></span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s'</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L904-L906","name":"Stream'.WSeq.destruct_terminates_of_get?_terminates","line":904,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_terminates_of_get?_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_terminates_of_get?_terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_terminates_of_get?_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L899-L901","name":"Stream'.WSeq.head_terminates_of_get?_terminates","line":899,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_terminates_of_get?_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_terminates_of_get?_terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_terminates_of_get?_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L893-L896","name":"Stream'.WSeq.get?_terminates_le","line":893,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_terminates_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_terminates_le\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get?_terminates_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L881-L890","name":"Stream'.WSeq.toSeq","line":881,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toSeq","doc":"Given a productive weak sequence, we can collapse all the `think`s to\nproduce a sequence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L875-L876","name":"Stream'.WSeq.productive_dropn","line":875,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.productive_dropn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.productive_dropn\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">productive_dropn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L871-L872","name":"Stream'.WSeq.productive_tail","line":871,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.productive_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.productive_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">productive_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L862-L868","name":"Stream'.WSeq.head_some_of_get?_some","line":862,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_some_of_get?_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_some_of_get?_some\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_some_of_get?_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L853-L859","name":"Stream'.WSeq.head_some_of_head_tail_some","line":853,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_some_of_head_tail_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_some_of_head_tail_some\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_some_of_head_tail_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">s</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L842-L850","name":"Stream'.WSeq.destruct_some_of_destruct_tail_some","line":842,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_some_of_destruct_tail_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_some_of_destruct_tail_some\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_some_of_destruct_tail_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">s</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L830-L839","name":"Stream'.WSeq.head_terminates_of_head_tail_terminates","line":830,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_terminates_of_head_tail_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_terminates_of_head_tail_terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_terminates_of_head_tail_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L823-L827","name":"Stream'.WSeq.destruct_dropn","line":823,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_dropn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_dropn\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_dropn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop.aux\">Stream'.WSeq.drop.aux</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L816-L820","name":"Stream'.WSeq.drop.aux_none","line":816,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop.aux_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop.aux_none\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">drop</span>.<span class=\"name\">aux_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop.aux\">Stream'.WSeq.drop.aux</a> <span class=\"fn\">n</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">none</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L811-L813","name":"Stream'.WSeq.drop.aux","line":811,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop.aux","doc":"auxiliary definition of drop over weak sequences"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop.aux\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">drop</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L804-L806","name":"Stream'.WSeq.destruct_tail","line":804,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">Stream'.WSeq.tail.aux</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L799-L801","name":"Stream'.WSeq.tail.aux","line":799,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail.aux","doc":"auxiliary definition of tail over weak sequences"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail.aux\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">tail</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L793-L794","name":"Stream'.WSeq.append_assoc","line":793,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append_assoc\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">append_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">t</span> <span class=\"fn\">u</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L788-L789","name":"Stream'.WSeq.append_nil","line":788,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">append_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s</span> <span class=\"fn\">Stream'.WSeq.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L783-L784","name":"Stream'.WSeq.think_append","line":783,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">think_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L778-L779","name":"Stream'.WSeq.cons_append","line":778,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">cons_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L773-L774","name":"Stream'.WSeq.nil_append","line":773,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.nil_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.nil_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">nil_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">Stream'.WSeq.nil</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L766-L769","name":"Stream'.WSeq.join_cons","line":766,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">s</span> <span class=\"fn\">S</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\">Stream'.WSeq.append</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">S</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L759-L762","name":"Stream'.WSeq.join_think","line":759,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">S</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">S</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L754-L755","name":"Stream'.WSeq.join_nil","line":754,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\">Stream'.WSeq.join</a> <span class=\"fn\">Stream'.WSeq.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.WSeq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L749-L750","name":"Stream'.WSeq.get?_tail","line":749,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get?_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L745-L746","name":"Stream'.WSeq.get?_add","line":745,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_add\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get?_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L739-L742","name":"Stream'.WSeq.dropn_tail","line":739,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">dropn_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L734-L736","name":"Stream'.WSeq.dropn_add","line":734,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_add\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">dropn_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L730-L731","name":"Stream'.WSeq.dropn_think","line":730,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">dropn_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L721-L726","name":"Stream'.WSeq.dropn_cons","line":721,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">dropn_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L717-L717","name":"Stream'.WSeq.dropn_nil","line":717,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.dropn_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">dropn_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\">Stream'.WSeq.drop</a> <span class=\"fn\">Stream'.WSeq.nil</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.WSeq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L713-L713","name":"Stream'.WSeq.tail_think","line":713,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail_think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">tail_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L709-L709","name":"Stream'.WSeq.tail_cons","line":709,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">tail_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L705-L705","name":"Stream'.WSeq.tail_nil","line":705,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">tail_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\">Stream'.WSeq.tail</a> <span class=\"fn\">Stream'.WSeq.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Stream'.WSeq.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L700-L701","name":"Stream'.WSeq.head_terminates_iff","line":700,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_terminates_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_terminates_iff\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_terminates_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L685-L697","name":"Stream'.WSeq.destruct_flatten","line":685,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_flatten","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_flatten\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_flatten</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten\">Stream'.WSeq.flatten</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">Stream'.WSeq.destruct</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L680-L681","name":"Stream'.WSeq.flatten_think","line":680,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten_think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">flatten_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten\">Stream'.WSeq.flatten</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten\">Stream'.WSeq.flatten</a> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L667-L676","name":"Stream'.WSeq.flatten_pure","line":667,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten_pure\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">flatten_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten\">Stream'.WSeq.flatten</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L663-L663","name":"Stream'.WSeq.head_think","line":663,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L659-L659","name":"Stream'.WSeq.head_cons","line":659,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L655-L655","name":"Stream'.WSeq.head_nil","line":655,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">Stream'.WSeq.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">none</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L650-L651","name":"Stream'.WSeq.seq_destruct_think","line":650,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.seq_destruct_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.seq_destruct_think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">seq_destruct_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct\">Stream'.Seq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">none</span>, <span class=\"fn\">s</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L645-L646","name":"Stream'.WSeq.seq_destruct_cons","line":645,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.seq_destruct_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.seq_destruct_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">seq_destruct_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct\">Stream'.Seq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">s</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L640-L641","name":"Stream'.WSeq.seq_destruct_nil","line":640,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.seq_destruct_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.seq_destruct_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">seq_destruct_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct\">Stream'.Seq.destruct</a> <span class=\"fn\">Stream'.WSeq.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L635-L636","name":"Stream'.WSeq.destruct_think","line":635,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L630-L631","name":"Stream'.WSeq.destruct_cons","line":630,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s</span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L625-L626","name":"Stream'.WSeq.destruct_nil","line":625,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">Stream'.WSeq.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">none</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L618-L619","name":"Stream'.WSeq.Equiv.equivalence","line":618,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv.equivalence","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv.equivalence\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">equivalence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">Stream'.WSeq.Equiv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L614-L615","name":"Stream'.WSeq.Equiv.trans","line":614,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv.trans\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">u</span></span> → <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L609-L610","name":"Stream'.WSeq.Equiv.symm","line":609,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv.symm\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L604-L605","name":"Stream'.WSeq.Equiv.refl","line":604,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv.refl\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L599-L600","name":"Stream'.WSeq.LiftRel.equiv","line":599,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.equiv\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">R</span></span> → <span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L567-L596","name":"Stream'.WSeq.LiftRel.trans","line":567,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.trans\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Transitive\">Transitive</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Transitive\">Transitive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L563-L564","name":"Stream'.WSeq.LiftRel.symm","line":563,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.symm\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Symmetric\">Symmetric</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Symmetric\">Symmetric</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L559-L560","name":"Stream'.WSeq.LiftRel.swap","line":559,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.swap\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.swap\">Function.swap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.swap\">Function.swap</a> <span class=\"fn\">R</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L552-L556","name":"Stream'.WSeq.LiftRel.swap_lem","line":552,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.swap_lem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.swap_lem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">swap_lem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.swap\">Function.swap</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">s2</span> <span class=\"fn\">s1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L546-L549","name":"Stream'.WSeq.LiftRelO.swap","line":546,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO.swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO.swap\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRelO</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.swap\">Function.swap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\">Stream'.WSeq.LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\">Stream'.WSeq.LiftRelO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.swap\">Function.swap</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.swap\">Function.swap</a> <span class=\"fn\">C</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L534-L543","name":"Stream'.WSeq.LiftRel.refl","line":534,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel.refl\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Reflexive\">Reflexive</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Reflexive\">Reflexive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L529-L531","name":"Stream'.WSeq.destruct_congr_iff","line":529,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_congr_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_congr_iff\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_congr_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.BisimO\">Stream'.WSeq.BisimO</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">x_1</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L524-L526","name":"Stream'.WSeq.destruct_congr","line":524,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></span> →\n  <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.BisimO\">Stream'.WSeq.BisimO</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">x_1</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L522-L522","name":"Stream'.WSeq.«term_~ʷ_»","line":522,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.«term_~ʷ_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.«term_~ʷ_»\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">«term_~ʷ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L504-L518","name":"Stream'.WSeq.liftRel_destruct_iff","line":504,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_destruct_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_destruct_iff\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_destruct_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\">Stream'.WSeq.LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L496-L501","name":"Stream'.WSeq.liftRel_destruct","line":496,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_destruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.liftRel_destruct\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_destruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> →\n  <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\">Stream'.WSeq.LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\">Stream'.WSeq.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">s</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\">Stream'.WSeq.destruct</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L492-L493","name":"Stream'.WSeq.Equiv","line":492,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv","doc":"If two sequences are equivalent, then they have the same values and\nthe same computational behavior (i.e. if one loops forever then so does\nthe other), although they may differ in the number of `think`s needed to\narrive at the answer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Equiv\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L483-L485","name":"Stream'.WSeq.LiftRel","line":483,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel","doc":"Two weak sequences are `LiftRel R` related if they are either both empty,\nor they are both nonempty and the heads are `R` related and the tails are\n`LiftRel R` related. (This is a coinductive definition.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRel\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L475-L477","name":"Stream'.WSeq.BisimO.imp","line":475,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.BisimO.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.BisimO.imp\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">BisimO</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">s </span>t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.BisimO\">Stream'.WSeq.BisimO</a> <span class=\"fn\">R</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.BisimO\">Stream'.WSeq.BisimO</a> <span class=\"fn\">S</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L471-L472","name":"Stream'.WSeq.BisimO","line":471,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.BisimO","doc":"Definition of bisimilarity for weak sequences"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.BisimO\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">BisimO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L464-L466","name":"Stream'.WSeq.LiftRelO.imp_right","line":464,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO.imp_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO.imp_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRelO</span>.<span class=\"name\">imp_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\">Stream'.WSeq.LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\">Stream'.WSeq.LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">D</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L456-L461","name":"Stream'.WSeq.LiftRelO.imp","line":456,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO.imp\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRelO</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H1 : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H2 : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\">Stream'.WSeq.LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\">Stream'.WSeq.LiftRelO</a> <span class=\"fn\">S</span> <span class=\"fn\">D</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L449-L453","name":"Stream'.WSeq.LiftRelO","line":449,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO","doc":"lift a relation to a relation over weak sequences "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.LiftRelO\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRelO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L443-L444","name":"Stream'.WSeq.bind","line":443,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind","doc":"Monadic bind operator for weak sequences "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.bind\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L433-L439","name":"Stream'.WSeq.join","line":433,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join","doc":"Flatten a sequence of weak sequences. (Note that this allows\nempty sequences, unlike `Seq.join`.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.join\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L427-L428","name":"Stream'.WSeq.map","line":427,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map","doc":"Map a function over a weak sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.map\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L422-L423","name":"Stream'.WSeq.append","line":422,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append","doc":"Append two weak sequences. As with `Seq.append`, this may not use\nthe second sequence if the first one takes forever to compute "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L416-L417","name":"Stream'.WSeq.collect","line":416,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.collect","doc":"Like take, but does not wait for a result. Calculates `n` steps of\ncomputation and returns the sequence computed so far "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.collect\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">collect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L401-L411","name":"Stream'.WSeq.inits","line":401,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.inits","doc":"Get the weak sequence of initial segments of the input sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.inits\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">inits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L387-L397","name":"Stream'.WSeq.scanl","line":387,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.scanl","doc":"Apply a function to the elements of the sequence to produce a sequence\nof partial results. (There is no `scanr` because this would require\nworking from the end of the sequence, which may not exist.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.scanl\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">scanl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L374-L381","name":"Stream'.WSeq.all","line":374,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.all","doc":"Returns `true` if every element of `s` satisfies `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.all\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L363-L370","name":"Stream'.WSeq.any","line":363,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.any","doc":"Returns `true` if any element of `s` satisfies `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.any\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L351-L359","name":"Stream'.WSeq.splitAt","line":351,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.splitAt","doc":"Split the sequence at position `n` into a finite initial segment\nand the weak sequence tail "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.splitAt\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">splitAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L338-L346","name":"Stream'.WSeq.take","line":338,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.take","doc":"Get the first `n` elements of a weak sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.take\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L331-L334","name":"Stream'.WSeq.compute","line":331,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.compute","doc":"Calculate one step of computation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.compute\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">compute</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L326-L327","name":"Stream'.WSeq.isEmpty","line":326,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.isEmpty","doc":"Returns `true` if `s` is `nil` and `false` if `s` has an element "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.isEmpty\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L311-L322","name":"Stream'.WSeq.union","line":311,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.union","doc":"`union s1 s2` is a weak sequence which interleaves `s1` and `s2` in\nsome order (nondeterministically). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.union\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L305-L306","name":"Stream'.WSeq.indexesOf","line":305,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.indexesOf","doc":"Get the indexes of occurrences of `a` in `s` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.indexesOf\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">indexesOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L300-L301","name":"Stream'.WSeq.indexOf","line":300,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.indexOf","doc":"Get the index of the first occurrence of `a` in `s` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.indexOf\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">indexOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L295-L296","name":"Stream'.WSeq.findIndex","line":295,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.findIndex","doc":"Get the index of the first element of `s` satisfying `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.findIndex\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">findIndex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L290-L291","name":"Stream'.WSeq.findIndexes","line":290,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.findIndexes","doc":"Get the list of indexes of elements of `s` satisfying `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.findIndexes\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">findIndexes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L285-L286","name":"Stream'.WSeq.zip","line":285,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.zip","doc":"Zip two weak sequences into a single sequence of pairs "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L272-L281","name":"Stream'.WSeq.zipWith","line":272,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.zipWith","doc":"Zip a function over two weak sequences "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.zipWith\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L267-L268","name":"Stream'.WSeq.find","line":267,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.find","doc":"Get the first element of `s` satisfying `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.find\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">find</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L261-L262","name":"Stream'.WSeq.filter","line":261,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.filter","doc":"Select the elements of `s` that satisfy `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.filter\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L252-L257","name":"Stream'.WSeq.filterMap","line":252,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.filterMap","doc":"Map the elements of `s` over `f`, removing any values that yield `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.filterMap\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L239-L248","name":"Stream'.WSeq.removeNth","line":239,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.removeNth","doc":"Remove the `n`th element of `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.removeNth\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">removeNth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L226-L235","name":"Stream'.WSeq.updateNth","line":226,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.updateNth","doc":"Replace the `n`th element of `s` with `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.updateNth\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">updateNth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L221-L222","name":"Stream'.WSeq.head_terminates","line":221,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head_terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\">Stream'.WSeq.head</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L217-L218","name":"Stream'.WSeq.get?_terminates","line":217,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?_terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get?_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L213-L214","name":"Stream'.WSeq.productive_iff","line":213,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.productive_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.productive_iff\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">productive_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L209-L209","name":"Stream'.WSeq.Productive.get?_terminates","line":209,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive.get?_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive.get?_terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Productive</span>.<span class=\"name\">get?_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L208-L208","name":"Stream'.WSeq.Productive.mk","line":208,"kind":"ctor","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive.mk\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Productive</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(get?_terminates : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\">Stream'.WSeq.get?</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\">Stream'.WSeq.Productive</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L208-L209","name":"Stream'.WSeq.Productive","line":208,"kind":"class","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive","doc":"A weak sequence is *productive* if it never stalls forever - there are\nalways a finite number of `think`s between `cons` constructors.\nThe sequence itself is allowed to be infinite though. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Productive\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Productive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L201-L202","name":"Stream'.WSeq.get","line":201,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get","doc":"Get the list corresponding to a finite weak sequence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.IsFinite\">Stream'.WSeq.IsFinite</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L196-L197","name":"Stream'.WSeq.toList_terminates","line":196,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList_terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toList_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.IsFinite\">Stream'.WSeq.IsFinite</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList\">Stream'.WSeq.toList</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L193-L193","name":"Stream'.WSeq.IsFinite.out","line":193,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.IsFinite.out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.IsFinite.out\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">IsFinite</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.IsFinite\">Stream'.WSeq.IsFinite</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList\">Stream'.WSeq.toList</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L192-L192","name":"Stream'.WSeq.IsFinite.mk","line":192,"kind":"ctor","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.IsFinite.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.IsFinite.mk\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">IsFinite</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(out : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList\">Stream'.WSeq.toList</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.IsFinite\">Stream'.WSeq.IsFinite</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L192-L193","name":"Stream'.WSeq.IsFinite","line":192,"kind":"class","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.IsFinite","doc":"A weak sequence is finite if `toList s` terminates. Equivalently,\nit is a finite number of `think` and `cons` applied to `nil`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.IsFinite\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">IsFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L180-L187","name":"Stream'.WSeq.length","line":180,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.length","doc":"Get the length of `s` (if it is finite and completes in finite time). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.length\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L169-L176","name":"Stream'.WSeq.toList","line":169,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList","doc":"Convert `s` to a list (if it is finite and completes in finite time). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.toList\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L164-L165","name":"Stream'.WSeq.get?","line":164,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?","doc":"Get the nth element of `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.get?\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L158-L160","name":"Stream'.WSeq.drop","line":158,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop","doc":"drop the first `n` elements from `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L153-L154","name":"Stream'.WSeq.tail","line":153,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail","doc":"Get the tail of a weak sequence. This doesn't need a `Computation`\nwrapper, unlike `head`, because `flatten` allows us to hide this\nin the construction of the weak sequence itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L143-L147","name":"Stream'.WSeq.flatten","line":143,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten","doc":"Encode a computation yielding a weak sequence into additional\n`think` constructors in a weak sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.flatten\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">flatten</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L137-L138","name":"Stream'.WSeq.head","line":137,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head","doc":"Get the head of a weak sequence. This involves a possibly\ninfinite computation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.head\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L131-L132","name":"Stream'.WSeq.not_mem_nil","line":131,"kind":"theorem","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.not_mem_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.not_mem_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">not_mem_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">Stream'.WSeq.nil</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L127-L128","name":"Stream'.WSeq.membership","line":127,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.membership","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.membership\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">membership</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L123-L124","name":"Stream'.WSeq.Mem","line":123,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Mem","doc":"membership for weak sequences"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.Mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L117-L119","name":"Stream'.WSeq.recOn","line":117,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.recOn","doc":"Recursion principle for weak sequences, compare with `List.recOn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.recOn\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">recOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Stream'.WSeq.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\">Stream'.WSeq.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h3 : <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\">Stream'.WSeq.think</a> <span class=\"fn\">s</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L108-L113","name":"Stream'.WSeq.destruct","line":108,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct","doc":"Destruct a weak sequence, to (eventually possibly) produce either\n`none` for `nil` or `some (a, s)` if an element is produced. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.destruct\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L102-L103","name":"Stream'.WSeq.think","line":102,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think","doc":"Compute for one tick, without producing any elements "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.think\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L97-L98","name":"Stream'.WSeq.cons","line":97,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons","doc":"Prepend an element to a weak sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L92-L93","name":"Stream'.WSeq.inhabited","line":92,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.inhabited\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L88-L89","name":"Stream'.WSeq.nil","line":88,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.nil","doc":"The empty weak sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L83-L84","name":"Stream'.WSeq.coeStream","line":83,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.coeStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.coeStream\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">coeStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L79-L80","name":"Stream'.WSeq.coeList","line":79,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.coeList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.coeList\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">coeList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L75-L76","name":"Stream'.WSeq.coeSeq","line":75,"kind":"instance","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.coeSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.coeSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">coeSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L71-L72","name":"Stream'.WSeq.ofStream","line":71,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ofStream","doc":"Turn a stream into a weak sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ofStream\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">ofStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L65-L66","name":"Stream'.WSeq.ofList","line":65,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ofList","doc":"Turn a list into a weak sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ofList\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L59-L60","name":"Stream'.WSeq.ofSeq","line":59,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ofSeq","doc":"Turn a sequence into a weak sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq.ofSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">ofSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\">Stream'.WSeq</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Seq/WSeq.lean#L42-L43","name":"Stream'.WSeq","line":42,"kind":"def","docLink":"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq","doc":"Weak sequences.\n\nWhile the `Seq` structure allows for lists which may not be finite,\na weak sequence also allows the computation of each element to\ninvolve an indeterminate amount of computation, including possibly\nan infinite loop. This is represented as a regular `Seq` interspersed\nwith `none` elements to indicate that computation is ongoing.\n\nThis model is appropriate for Haskell style lazy lists, and is closed\nunder most interesting computation patterns on infinite lists,\nbut conversely it is difficult to extract elements from it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/WSeq.html#Stream'.WSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}