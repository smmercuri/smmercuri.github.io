{"name":"Mathlib.Data.Stream.Init","instances":[{"typeNames":["Stream'"],"name":"Stream'.instInhabitedStream'","className":"Inhabited"}],"imports":["Init","Mathlib.Data.Stream.Defs","Mathlib.Logic.Function.Basic","Mathlib.Init.Data.List.Basic","Mathlib.Data.List.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L762-L764","name":"Stream'.nats_eq","line":762,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.nats_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.nats_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">nats_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.nats\">Stream'.nats</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.nats\">Stream'.nats</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L758-L759","name":"Stream'.get_nats","line":758,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_nats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_nats\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_nats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.nats\">Stream'.nats</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L754-L755","name":"Stream'.map_eq_apply","line":754,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_eq_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_eq_apply\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_eq_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L749-L751","name":"Stream'.interchange","line":749,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.interchange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.interchange\"><span class=\"name\">Stream'</span>.<span class=\"name\">interchange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fs : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fs</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span>)</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">fs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L745-L746","name":"Stream'.homomorphism","line":745,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.homomorphism","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.homomorphism\"><span class=\"name\">Stream'</span>.<span class=\"name\">homomorphism</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L740-L742","name":"Stream'.composition","line":740,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.composition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.composition\"><span class=\"name\">Stream'</span>.<span class=\"name\">composition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">Function.comp</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">g</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L736-L737","name":"Stream'.identity","line":736,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.identity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.identity\"><span class=\"name\">Stream'</span>.<span class=\"name\">identity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">id</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L730-L733","name":"Stream'.zip_inits_tails","line":730,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.zip_inits_tails","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.zip_inits_tails\"><span class=\"name\">Stream'</span>.<span class=\"name\">zip_inits_tails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">Stream'.appendStream'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tails\">Stream'.tails</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L721-L727","name":"Stream'.inits_eq","line":721,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.inits_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.inits_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">inits_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">List.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L713-L718","name":"Stream'.get_inits","line":713,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_inits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_inits\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_inits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L700-L709","name":"Stream'.cons_get_inits_core","line":700,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cons_get_inits_core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cons_get_inits_core\"><span class=\"name\">Stream'</span>.<span class=\"name\">cons_get_inits_core</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">l</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L696-L697","name":"Stream'.inits_tail","line":696,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.inits_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.inits_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">inits_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L690-L693","name":"Stream'.tail_inits","line":690,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_inits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_inits\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_inits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L684-L687","name":"Stream'.inits_core_eq","line":684,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.inits_core_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.inits_core_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">inits_core_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">l</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>]</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L680-L681","name":"Stream'.tails_eq_iterate","line":680,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tails_eq_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tails_eq_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">tails_eq_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tails\">Stream'.tails</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">Stream'.tail</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L672-L677","name":"Stream'.get_tails","line":672,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_tails","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_tails\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_tails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tails\">Stream'.tails</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L667-L668","name":"Stream'.tails_eq","line":667,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tails_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tails_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">tails_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tails\">Stream'.tails</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tails\">Stream'.tails</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L663-L664","name":"Stream'.cycle_singleton","line":663,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cycle_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cycle_singleton\"><span class=\"name\">Stream'</span>.<span class=\"name\">cycle_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cycle\">Stream'.cycle</a> <span class=\"fn\">[<span class=\"fn\">a</span>]</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L658-L659","name":"Stream'.mem_cycle","line":658,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_cycle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_cycle\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_cycle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cycle\">Stream'.cycle</a> <span class=\"fn\">l</span> <span class=\"fn\">h</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L642-L655","name":"Stream'.cycle_eq","line":642,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cycle_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cycle_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">cycle_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cycle\">Stream'.cycle</a> <span class=\"fn\">l</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cycle\">Stream'.cycle</a> <span class=\"fn\">l</span> <span class=\"fn\">h</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L637-L639","name":"Stream'.cycle_g_cons","line":637,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cycle_g_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cycle_g_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">cycle_g_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₀ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₀ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cycleG\">Stream'.cycleG</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span></span>, <span class=\"fn\">a₀</span>, <span class=\"fn\">l₀</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">a₁</span>, <span class=\"fn\">l₁</span>, <span class=\"fn\">a₀</span>, <span class=\"fn\">l₀</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L625-L634","name":"Stream'.take_theorem","line":625,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_theorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_theorem\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_theorem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s₂</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L613-L620","name":"Stream'.append_take_drop","line":613,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.append_take_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.append_take_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">append_take_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L606-L610","name":"Stream'.dropLast_take","line":606,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.dropLast_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.dropLast_take\"><span class=\"name\">Stream'</span>.<span class=\"name\">dropLast_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropLast\">List.dropLast</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L601-L603","name":"Stream'.get?_take_succ","line":601,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get?_take_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get?_take_succ\"><span class=\"name\">Stream'</span>.<span class=\"name\">get?_take_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.get?\">List.get?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L597-L599","name":"Stream'.get?_take","line":597,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get?_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get?_take\"><span class=\"name\">Stream'</span>.<span class=\"name\">get?_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.get?\">List.get?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">k</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L594-L595","name":"Stream'.concat_take_get","line":594,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.concat_take_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.concat_take_get\"><span class=\"name\">Stream'</span>.<span class=\"name\">concat_take_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L589-L592","name":"Stream'.take_take","line":589,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_take\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L584-L585","name":"Stream'.length_take","line":584,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.length_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.length_take\"><span class=\"name\">Stream'</span>.<span class=\"name\">length_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L579-L581","name":"Stream'.take_succ'","line":579,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_succ'\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L577-L577","name":"Stream'.take_succ_cons","line":577,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_succ_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_succ_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_succ_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L573-L574","name":"Stream'.take_succ","line":573,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_succ\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L566-L567","name":"Stream'.take_zero","line":566,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_zero\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">0</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L558-L562","name":"Stream'.mem_append_stream_left","line":558,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_append_stream_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_append_stream_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_append_stream_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L551-L555","name":"Stream'.mem_append_stream_right","line":551,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_append_stream_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_append_stream_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_append_stream_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L547-L548","name":"Stream'.append_stream_head_tail","line":547,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.append_stream_head_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.append_stream_head_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">append_stream_head_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>]</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L541-L544","name":"Stream'.drop_append_stream","line":541,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_append_stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_append_stream\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_append_stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L534-L538","name":"Stream'.map_append_stream","line":534,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_append_stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_append_stream\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_append_stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L527-L531","name":"Stream'.append_append_stream","line":527,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.append_append_stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.append_append_stream\"><span class=\"name\">Stream'</span>.<span class=\"name\">append_append_stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L522-L524","name":"Stream'.cons_append_stream","line":522,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cons_append_stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cons_append_stream\"><span class=\"name\">Stream'</span>.<span class=\"name\">cons_append_stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L518-L519","name":"Stream'.nil_append_stream","line":518,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.nil_append_stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.nil_append_stream\"><span class=\"name\">Stream'</span>.<span class=\"name\">nil_append_stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L514-L515","name":"Stream'.mem_of_mem_odd","line":514,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_mem_odd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_mem_odd\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_of_mem_odd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.odd\">Stream'.odd</a> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L510-L511","name":"Stream'.mem_of_mem_even","line":510,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_mem_even","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_mem_even\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_of_mem_even</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L506-L507","name":"Stream'.get_odd","line":506,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_odd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_odd\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_odd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.odd\">Stream'.odd</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L499-L503","name":"Stream'.get_even","line":499,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_even","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_even\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_even</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L490-L496","name":"Stream'.interleave_even_odd","line":490,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.interleave_even_odd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.interleave_even_odd\"><span class=\"name\">Stream'</span>.<span class=\"name\">interleave_even_odd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s₁</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.odd\">Stream'.odd</a> <span class=\"fn\">s₁</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L480-L487","name":"Stream'.even_interleave","line":480,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.even_interleave","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.even_interleave\"><span class=\"name\">Stream'</span>.<span class=\"name\">even_interleave</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L476-L477","name":"Stream'.even_tail","line":476,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.even_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.even_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">even_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.odd\">Stream'.odd</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L471-L473","name":"Stream'.even_cons_cons","line":471,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.even_cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.even_cons_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">even_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a₂</span> <span class=\"fn\">s</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L465-L468","name":"Stream'.tail_even","line":465,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_even","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_even\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_even</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L461-L462","name":"Stream'.head_even","line":461,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_even","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_even\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_even</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L456-L457","name":"Stream'.odd_eq","line":456,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.odd_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.odd_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">odd_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.odd\">Stream'.odd</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L452-L453","name":"Stream'.mem_interleave_right","line":452,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_interleave_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_interleave_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_interleave_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L448-L449","name":"Stream'.mem_interleave_left","line":448,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_interleave_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_interleave_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_interleave_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s₁</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L438-L445","name":"Stream'.get_interleave_right","line":438,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_interleave_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_interleave_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_interleave_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₂</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L428-L435","name":"Stream'.get_interleave_left","line":428,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_interleave_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_interleave_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_interleave_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₁</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L424-L425","name":"Stream'.interleave_tail_tail","line":424,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.interleave_tail_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.interleave_tail_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">interleave_tail_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L420-L421","name":"Stream'.tail_interleave","line":420,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_interleave","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_interleave\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_interleave</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L414-L417","name":"Stream'.interleave_eq","line":414,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.interleave_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.interleave_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">interleave_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L410-L411","name":"Stream'.unfolds_head_eq","line":410,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.unfolds_head_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.unfolds_head_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">unfolds_head_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.unfolds\">Stream'.unfolds</a> <span class=\"fn\">Stream'.head</span> <span class=\"fn\">Stream'.tail</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L401-L407","name":"Stream'.get_unfolds_head_tail","line":401,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_unfolds_head_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_unfolds_head_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_unfolds_head_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.unfolds\">Stream'.unfolds</a> <span class=\"fn\">Stream'.head</span> <span class=\"fn\">Stream'.tail</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L397-L398","name":"Stream'.unfolds_eq","line":397,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.unfolds_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.unfolds_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">unfolds_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.unfolds\">Stream'.unfolds</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.unfolds\">Stream'.unfolds</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L391-L392","name":"Stream'.corec'_eq","line":391,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.corec'_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.corec'_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">corec'_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec'\">Stream'.corec'</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.1</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec'\">Stream'.corec'</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.2</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L383-L384","name":"Stream'.corec_id_f_eq_iterate","line":383,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.corec_id_f_eq_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.corec_id_f_eq_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">corec_id_f_eq_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec\">Stream'.corec</a> <span class=\"fn\">id</span> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L379-L380","name":"Stream'.corec_id_id_eq_const","line":379,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.corec_id_id_eq_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.corec_id_id_eq_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">corec_id_id_eq_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec\">Stream'.corec</a> <span class=\"fn\">id</span> <span class=\"fn\">id</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L375-L376","name":"Stream'.corec_eq","line":375,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.corec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.corec_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">corec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec\">Stream'.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec\">Stream'.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L371-L372","name":"Stream'.corec_def","line":371,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.corec_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.corec_def\"><span class=\"name\">Stream'</span>.<span class=\"name\">corec_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec\">Stream'.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L359-L366","name":"Stream'.map_iterate","line":359,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L355-L356","name":"Stream'.iterate_id","line":355,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.iterate_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.iterate_id\"><span class=\"name\">Stream'</span>.<span class=\"name\">iterate_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">id</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L334-L351","name":"Stream'.coinduction","line":334,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.coinduction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.coinduction\"><span class=\"name\">Stream'</span>.<span class=\"name\">coinduction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₂</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u) (<span class=\"fn\">fr</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\">s₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span>)</span></span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L325-L331","name":"Stream'.bisim_simple","line":325,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.bisim_simple","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.bisim_simple\"><span class=\"name\">Stream'</span>.<span class=\"name\">bisim_simple</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span></span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L319-L320","name":"Stream'.eq_of_bisim","line":319,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.eq_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.eq_of_bisim\"><span class=\"name\">Stream'</span>.<span class=\"name\">eq_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bisim : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Init.html#Stream'.IsBisimulation\">Stream'.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L310-L315","name":"Stream'.get_of_bisim","line":310,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_of_bisim\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bisim : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Init.html#Stream'.IsBisimulation\">Stream'.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₁</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₂</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s₂</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L305-L307","name":"Stream'.IsBisimulation","line":305,"kind":"def","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.IsBisimulation","doc":"Streams `s₁` and `s₂` are defined to be bisimulations if\ntheir heads are equal and tails are bisimulations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.IsBisimulation\"><span class=\"name\">Stream'</span>.<span class=\"name\">IsBisimulation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L292-L293","name":"Stream'.get_succ_iterate","line":292,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_succ_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span>)</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L288-L289","name":"Stream'.get_zero_iterate","line":288,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_zero_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_zero_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_zero_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L282-L284","name":"Stream'.iterate_eq","line":282,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.iterate_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.iterate_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">iterate_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L274-L279","name":"Stream'.tail_iterate","line":274,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L271-L272","name":"Stream'.get_succ_iterate'","line":271,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_iterate'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_iterate'\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_succ_iterate'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L267-L268","name":"Stream'.head_iterate","line":267,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L262-L263","name":"Stream'.drop_const","line":262,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L257-L258","name":"Stream'.get_const","line":257,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L252-L253","name":"Stream'.map_const","line":252,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L246-L248","name":"Stream'.tail_const","line":246,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L240-L242","name":"Stream'.const_eq","line":240,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.const_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.const_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">const_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L236-L237","name":"Stream'.mem_const","line":236,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L229-L230","name":"Stream'.enum_eq_zip","line":229,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.enum_eq_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.enum_eq_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">enum_eq_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.enum\">Stream'.enum</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">Prod.mk</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.nats\">Stream'.nats</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L225-L226","name":"Stream'.get_enum","line":225,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_enum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_enum\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_enum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.enum\">Stream'.enum</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">n</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L219-L221","name":"Stream'.zip_eq","line":219,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.zip_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.zip_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">zip_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₂</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L214-L216","name":"Stream'.tail_zip","line":214,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L210-L211","name":"Stream'.head_zip","line":210,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L205-L207","name":"Stream'.get_zip","line":205,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₁</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₂</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L199-L201","name":"Stream'.drop_zip","line":199,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">s₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L189-L190","name":"Stream'.exists_of_mem_map","line":189,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.exists_of_mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.exists_of_mem_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">exists_of_mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span> → <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L185-L186","name":"Stream'.mem_map","line":185,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L181-L182","name":"Stream'.map_tail","line":181,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L176-L177","name":"Stream'.map_map","line":176,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L171-L172","name":"Stream'.map_id","line":171,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_id\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">id</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L166-L167","name":"Stream'.map_cons","line":166,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L162-L163","name":"Stream'.map_eq","line":162,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L158-L159","name":"Stream'.head_map","line":158,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L154-L154","name":"Stream'.tail_map","line":154,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L150-L151","name":"Stream'.get_map","line":150,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L145-L146","name":"Stream'.drop_map","line":145,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L137-L138","name":"Stream'.mem_of_get_eq","line":137,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_get_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_get_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_of_get_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L127-L134","name":"Stream'.eq_or_mem_of_mem_cons","line":127,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.eq_or_mem_of_mem_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.eq_or_mem_of_mem_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">eq_or_mem_of_mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L123-L124","name":"Stream'.mem_cons_of_mem","line":123,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_cons_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_cons_of_mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_cons_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L119-L120","name":"Stream'.mem_cons","line":119,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L114-L115","name":"Stream'.any_def","line":114,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.any_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.any_def\"><span class=\"name\">Stream'</span>.<span class=\"name\">any_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.Any\">Stream'.Any</a> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L110-L111","name":"Stream'.all_def","line":110,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.all_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.all_def\"><span class=\"name\">Stream'</span>.<span class=\"name\">all_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.All\">Stream'.All</a> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L106-L107","name":"Stream'.cons_injective_right","line":106,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">cons_injective_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L102-L103","name":"Stream'.cons_injective_left","line":102,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">cons_injective_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L97-L99","name":"Stream'.cons_injective2","line":97,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective2\"><span class=\"name\">Stream'</span>.<span class=\"name\">cons_injective2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Injective2\">Function.Injective2</a> <span class=\"fn\">Stream'.cons</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L94-L94","name":"Stream'.head_drop","line":94,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L90-L91","name":"Stream'.drop_succ","line":90,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_succ\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L88-L88","name":"Stream'.drop_zero","line":88,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_zero\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">0</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L84-L85","name":"Stream'.get_succ_cons","line":84,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_succ_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L79-L80","name":"Stream'.get_succ","line":79,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_succ\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L76-L76","name":"Stream'.tail_drop","line":76,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L74-L74","name":"Stream'.drop_tail'","line":74,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_tail'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_tail'\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_tail'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L71-L72","name":"Stream'.tail_drop'","line":71,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_drop'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_drop'\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_drop'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">i</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L69-L69","name":"Stream'.get_tail","line":69,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L65-L66","name":"Stream'.drop_drop","line":65,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">m</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L60-L61","name":"Stream'.tail_eq_drop","line":60,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_eq_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_eq_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_eq_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">1</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L56-L57","name":"Stream'.get_drop","line":56,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">m</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L51-L52","name":"Stream'.tail_cons","line":51,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L46-L47","name":"Stream'.head_cons","line":46,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L41-L42","name":"Stream'.get_zero_cons","line":41,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_zero_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_zero_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_zero_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L36-L37","name":"Stream'.ext","line":36,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.ext\"><span class=\"name\">Stream'</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₁</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₂</span> <span class=\"fn\">n</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L31-L32","name":"Stream'.eta","line":31,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.eta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.eta\"><span class=\"name\">Stream'</span>.<span class=\"name\">eta</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Data/Stream/Init.lean#L28-L29","name":"Stream'.instInhabitedStream'","line":28,"kind":"instance","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.instInhabitedStream'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.instInhabitedStream'\"><span class=\"name\">Stream'</span>.<span class=\"name\">instInhabitedStream'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"}]}