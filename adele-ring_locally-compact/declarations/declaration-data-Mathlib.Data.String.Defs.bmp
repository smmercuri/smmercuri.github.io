{"name":"Mathlib.Data.String.Defs","instances":[],"imports":["Init","Batteries.Data.List.Basic","Batteries.Data.String.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/String/Defs.lean#L50-L51","name":"String.head","line":50,"kind":"def","docLink":"./Mathlib/Data/String/Defs.html#String.head","doc":"Produce the head character from the string `s`, if `s` is not empty, otherwise `'A'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.head\"><span class=\"name\">String</span>.<span class=\"name\">head</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/String/Defs.lean#L47-L47","name":"String.getRest","line":47,"kind":"def","docLink":"./Mathlib/Data/String/Defs.html#String.getRest","doc":"**Alias** of `String.dropPrefix?`.\n\n---\n\nIf `pre` is a prefix of `s`, i.e. `s = pre ++ t`, returns the remainder `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.getRest\"><span class=\"name\">String</span>.<span class=\"name\">getRest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/String/Defs.lean#L44-L45","name":"String.mapTokens","line":44,"kind":"def","docLink":"./Mathlib/Data/String/Defs.html#String.mapTokens","doc":"`String.mapTokens c f s` tokenizes `s : string` on `c : char`, maps `f` over each token, and\nthen reassembles the string by intercalating the separator token `c` over the mapped tokens. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.mapTokens\"><span class=\"name\">String</span>.<span class=\"name\">mapTokens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/String/Defs.lean#L39-L40","name":"String.IsSuffix","line":39,"kind":"def","docLink":"./Mathlib/Data/String/Defs.html#String.IsSuffix","doc":"`s.IsSuffix t` checks if the string `s` is a suffix of the string `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.IsSuffix\"><span class=\"name\">String</span>.<span class=\"name\">IsSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/String/Defs.lean#L35-L36","name":"String.IsPrefix","line":35,"kind":"def","docLink":"./Mathlib/Data/String/Defs.html#String.IsPrefix","doc":"`s.IsPrefix t` checks if the string `s` is a prefix of the string `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.IsPrefix\"><span class=\"name\">String</span>.<span class=\"name\">IsPrefix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/String/Defs.lean#L31-L32","name":"String.rightpad","line":31,"kind":"def","docLink":"./Mathlib/Data/String/Defs.html#String.rightpad","doc":"Pad `s : String` with repeated occurrences of `c : Char` on the right until it's of length `n`.\nIf `s` is initially larger than `n`, just return `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.rightpad\"><span class=\"name\">String</span>.<span class=\"name\">rightpad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <span class=\"fn\">' '</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/String/Defs.lean#L23-L24","name":"String.replicate","line":23,"kind":"def","docLink":"./Mathlib/Data/String/Defs.html#String.replicate","doc":"Construct the string consisting of `n` copies of the character `c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.replicate\"><span class=\"name\">String</span>.<span class=\"name\">replicate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/String/Defs.lean#L19-L20","name":"String.leftpad","line":19,"kind":"def","docLink":"./Mathlib/Data/String/Defs.html#String.leftpad","doc":"Pad `s : String` with repeated occurrences of `c : Char` until it's of length `n`.\nIf `s` is initially larger than `n`, just return `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.leftpad\"><span class=\"name\">String</span>.<span class=\"name\">leftpad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <span class=\"fn\">' '</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"}]}