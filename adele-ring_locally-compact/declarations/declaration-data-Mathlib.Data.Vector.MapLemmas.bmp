{"name":"Mathlib.Data.Vector.MapLemmas","instances":[],"imports":["Init","Mathlib.Data.Vector.Basic","Mathlib.Data.Vector.Snoc"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L390-L392","name":"Mathlib.Vector.mapAccumr₂_flip","line":390,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_flip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_flip\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">ys</span> <span class=\"fn\">xs</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L386-L388","name":"Mathlib.Vector.map₂_flip","line":386,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map₂_flip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map₂_flip\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map₂_flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">ys</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L374-L376","name":"Mathlib.Vector.mapAccumr₂_comm","line":374,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_comm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm : <span class=\"fn\">∀ (<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₂</span> <span class=\"fn\">a₁</span> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">ys</span> <span class=\"fn\">xs</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L370-L372","name":"Mathlib.Vector.map₂_comm","line":370,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map₂_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map₂_comm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map₂_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm : <span class=\"fn\">∀ (<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₂</span> <span class=\"fn\">a₁</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">ys</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L355-L360","name":"Mathlib.Vector.mapAccumr₂_unused_input_right","line":355,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_unused_input_right","doc":"If `f` returns the same output and next state for every value of it's second argument, then\n`ys : Vector` is ignored, and we can rewrite `mapAccumr₂` into `map`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_unused_input_right\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_unused_input_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">default</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">default</span> <span class=\"fn\">s</span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L343-L348","name":"Mathlib.Vector.mapAccumr₂_unused_input_left","line":343,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_unused_input_left","doc":"If `f` returns the same output and next state for every value of it's first argument, then\n`xs : Vector` is ignored, and we can rewrite `mapAccumr₂` into `map`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_unused_input_left\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_unused_input_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">default</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">default</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span>)</span> <span class=\"fn\">ys</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L321-L328","name":"Mathlib.Vector.mapAccumr₂_redundant_pair","line":321,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_redundant_pair","doc":"If `f` takes a pair of states, but always returns the same value for both elements of the\npair, then we can simplify to just a single element of state\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_redundant_pair\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_redundant_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>),\n  <span class=\"fn\">let <span class=\"fn\">s'</span> := <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">s</span>)</span></span>)</span>.1</span>;\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s'</span>.2</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">s</span>)</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">s</span>)</span></span>)</span>.1</span>.1</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">s</span>)</span></span>)</span>.2</span>)</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s</span></span>)</span>.2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L308-L315","name":"Mathlib.Vector.mapAccumr_redundant_pair","line":308,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_redundant_pair","doc":"If `f` takes a pair of states, but always returns the same value for both elements of the\npair, then we can simplify to just a single element of state\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_redundant_pair\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_redundant_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">s</span>)</span></span>)</span>.1</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">s</span>)</span></span>)</span>.1</span>.2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">s</span>)</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">s</span>)</span></span>)</span>.1</span>.1</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">s</span>)</span></span>)</span>.2</span>)</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">s</span></span>)</span>.2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L298-L301","name":"Mathlib.Vector.mapAccumr₂_eq_map₂_of_unused_state","line":298,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_eq_map₂_of_unused_state","doc":"If an accumulation function `f`, produces the same output bits regardless of accumulation state,\nthen the state is redundant and can be optimized out\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_eq_map₂_of_unused_state\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_eq_map₂_of_unused_state</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s'</span></span>)</span>.2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">s</span></span>)</span>.2</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L287-L290","name":"Mathlib.Vector.mapAccumr_eq_map_of_unused_state","line":287,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_eq_map_of_unused_state","doc":"If an accumulation function `f`, produces the same output bits regardless of accumulation state,\nthen the state is redundant and can be optimized out\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_eq_map_of_unused_state\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_eq_map_of_unused_state</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s'</span></span>)</span>.2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">s</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>)</span>.2</span></span>)</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L277-L280","name":"Mathlib.Vector.mapAccumr₂_eq_map₂_of_constant_state","line":277,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_eq_map₂_of_constant_state","doc":"If an accumulation function `f`, given an initial state `s`, produces `s` as its output state\nfor all possible input bits, then the state is redundant and can be optimized out\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_eq_map₂_of_constant_state\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_eq_map₂_of_constant_state</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span>)</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">s</span></span>)</span>.2</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L267-L270","name":"Mathlib.Vector.mapAccumr_eq_map_of_constant_state","line":267,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_eq_map_of_constant_state","doc":"If an accumulation function `f`, given an initial state `s`, produces `s` as its output state\nfor all possible input bits, then the state is redundant and can be optimized out\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_eq_map_of_constant_state\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_eq_map_of_constant_state</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>)</span>.2</span></span>)</span> <span class=\"fn\">xs</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L253-L260","name":"Mathlib.Vector.mapAccumr₂_eq_map₂","line":253,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_eq_map₂","doc":"If there is a set of states that is closed under `f`, and such that `f` produces that same output\nfor all states in this set, then the state is not actually needed.\nHence, then we can rewrite `mapAccumr₂` into just `map₂`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_eq_map₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_eq_map₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₀ : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">s₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(closure : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\">∀ <span class=\"fn\">s</span> ∈ <span class=\"fn\">S</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span>)</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(out : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s'</span></span>)</span>.2</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₀</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> <span class=\"fn\">s₀</span></span>)</span>.2</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L244-L246","name":"Mathlib.Vector.map₂_eq_mapAccumr₂","line":244,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map₂_eq_mapAccumr₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map₂_eq_mapAccumr₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map₂_eq_mapAccumr₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a>} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α_1</span></span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">(<a href=\"./Init/Prelude.html#Unit.unit\">()</a>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L235-L242","name":"Mathlib.Vector.mapAccumr_eq_map","line":235,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_eq_map","doc":"If there is a set of states that is closed under `f`, and such that `f` produces that same output\nfor all states in this set, then the state is not actually needed.\nHence, then we can rewrite `mapAccumr` into just `map`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_eq_map\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_eq_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₀ : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">s₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(closure : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∀ <span class=\"fn\">s</span> ∈ <span class=\"fn\">S</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(out : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s'</span></span>)</span>.2</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">s₀</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">s₀</span></span>)</span>.2</span></span>)</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L225-L228","name":"Mathlib.Vector.map_eq_mapAccumr","line":225,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map_eq_mapAccumr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map_eq_mapAccumr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map_eq_mapAccumr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α_1</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">(<a href=\"./Init/Prelude.html#Unit.unit\">()</a>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L206-L212","name":"Mathlib.Vector.mapAccumr₂_bisim_tail","line":206,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_bisim_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_bisim_tail\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_bisim_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₁ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∃ (<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\">σ₁</span>} {<span class=\"fn\">q</span> : <span class=\"fn\">σ₂</span>} (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">q</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span>)</span>.1</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">q</span></span>)</span>.1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">q</span></span>)</span>.2</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₁</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₂</span></span>)</span>.2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L193-L204","name":"Mathlib.Vector.mapAccumr₂_bisim","line":193,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_bisim\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₁ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hR : <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\">σ₁</span>} {<span class=\"fn\">q</span> : <span class=\"fn\">σ₂</span>} (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">q</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span>)</span>.1</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">q</span></span>)</span>.1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">q</span></span>)</span>.2</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₁</span></span>)</span>.1</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₂</span></span>)</span>.1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₁</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₂</span></span>)</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L186-L191","name":"Mathlib.Vector.mapAccumr_bisim_tail","line":186,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_bisim_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_bisim_tail\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_bisim_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₁ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∃ (<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\">σ₁</span>} {<span class=\"fn\">q</span> : <span class=\"fn\">σ₂</span>} (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">q</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.1</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">a</span> <span class=\"fn\">q</span></span>)</span>.1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">a</span> <span class=\"fn\">q</span></span>)</span>.2</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₁</span> <span class=\"fn\">xs</span> <span class=\"fn\">s₁</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">s₂</span></span>)</span>.2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L174-L184","name":"Mathlib.Vector.mapAccumr_bisim","line":174,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_bisim\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₁ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hR : <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\">σ₁</span>} {<span class=\"fn\">q</span> : <span class=\"fn\">σ₂</span>} (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">q</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.1</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">a</span> <span class=\"fn\">q</span></span>)</span>.1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">a</span> <span class=\"fn\">q</span></span>)</span>.2</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₁</span> <span class=\"fn\">xs</span> <span class=\"fn\">s₁</span></span>)</span>.1</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">s₂</span></span>)</span>.1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₁</span> <span class=\"fn\">xs</span> <span class=\"fn\">s₁</span></span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">s₂</span></span>)</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L146-L155","name":"Mathlib.Vector.mapAccumr₂_mapAccumr₂_right_right","line":146,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr₂_right_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr₂_right_right\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_mapAccumr₂_right_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">φ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\">ys</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₂</span></span>)</span>.2</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">m</span> :=\n    <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ₂</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">x_1</span> with\n        | <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span> =&gt;\n          <span class=\"fn\">let <span class=\"fn\">r₂</span> := <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">s₂</span></span>;\n          <span class=\"fn\">let <span class=\"fn\">r₁</span> := <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">r₂</span>.2</span> <span class=\"fn\">s₁</span></span>;\n          <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r₁</span>.1</span>, <span class=\"fn\"><span class=\"fn\">r₂</span>.1</span>)</span>, <span class=\"fn\"><span class=\"fn\">r₁</span>.2</span>)</span></span></span></span></span>)</span>\n      <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.1</span>.1</span>, <span class=\"fn\"><span class=\"fn\">m</span>.2</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L134-L143","name":"Mathlib.Vector.mapAccumr₂_mapAccumr₂_right_left","line":134,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr₂_right_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr₂_right_left\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_mapAccumr₂_right_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">φ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\">xs</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₂</span></span>)</span>.2</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">m</span> :=\n    <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ₂</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">x_1</span> with\n        | <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span> =&gt;\n          <span class=\"fn\">let <span class=\"fn\">r₂</span> := <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">s₂</span></span>;\n          <span class=\"fn\">let <span class=\"fn\">r₁</span> := <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">r₂</span>.2</span> <span class=\"fn\">s₁</span></span>;\n          <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r₁</span>.1</span>, <span class=\"fn\"><span class=\"fn\">r₂</span>.1</span>)</span>, <span class=\"fn\"><span class=\"fn\">r₁</span>.2</span>)</span></span></span></span></span>)</span>\n      <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.1</span>.1</span>, <span class=\"fn\"><span class=\"fn\">m</span>.2</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L121-L131","name":"Mathlib.Vector.mapAccumr₂_mapAccumr₂_left_right","line":121,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr₂_left_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr₂_left_right\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_mapAccumr₂_left_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">φ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₂</span></span>)</span>.2</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">m</span> :=\n    <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ₂</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">x_1</span> with\n        | <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span> =&gt;\n          <span class=\"fn\">let <span class=\"fn\">r₂</span> := <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">s₂</span></span>;\n          <span class=\"fn\">let <span class=\"fn\">r₁</span> := <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">r₂</span>.2</span> <span class=\"fn\">y</span> <span class=\"fn\">s₁</span></span>;\n          <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r₁</span>.1</span>, <span class=\"fn\"><span class=\"fn\">r₂</span>.1</span>)</span>, <span class=\"fn\"><span class=\"fn\">r₁</span>.2</span>)</span></span></span></span></span>)</span>\n      <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.1</span>.1</span>, <span class=\"fn\"><span class=\"fn\">m</span>.2</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L109-L118","name":"Mathlib.Vector.mapAccumr₂_mapAccumr₂_left_left","line":109,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr₂_left_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr₂_left_left\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_mapAccumr₂_left_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">φ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₂</span></span>)</span>.2</span> <span class=\"fn\">xs</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">m</span> :=\n    <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ₂</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">x_1</span> with\n        | <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span> =&gt;\n          <span class=\"fn\">let <span class=\"fn\">r₂</span> := <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">s₂</span></span>;\n          <span class=\"fn\">let <span class=\"fn\">r₁</span> := <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">r₂</span>.2</span> <span class=\"fn\">x</span> <span class=\"fn\">s₁</span></span>;\n          <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r₁</span>.1</span>, <span class=\"fn\"><span class=\"fn\">r₂</span>.1</span>)</span>, <span class=\"fn\"><span class=\"fn\">r₁</span>.2</span>)</span></span></span></span></span>)</span>\n      <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.1</span>.1</span>, <span class=\"fn\"><span class=\"fn\">m</span>.2</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L104-L106","name":"Mathlib.Vector.map_map₂","line":104,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map_map₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map_map₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map_map₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ζ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">ζ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L93-L101","name":"Mathlib.Vector.mapAccumr_mapAccumr₂","line":93,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_mapAccumr₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_mapAccumr₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_mapAccumr₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ζ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ζ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₂</span></span>)</span>.2</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">m</span> :=\n    <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ₂</span></span>) =&gt;\n        <span class=\"fn\">let <span class=\"fn\">r₂</span> := <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">s</span>.2</span></span>;\n        <span class=\"fn\">let <span class=\"fn\">r₁</span> := <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">r₂</span>.2</span> <span class=\"fn\"><span class=\"fn\">s</span>.1</span></span>;\n        <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r₁</span>.1</span>, <span class=\"fn\"><span class=\"fn\">r₂</span>.1</span>)</span>, <span class=\"fn\"><span class=\"fn\">r₁</span>.2</span>)</span></span></span></span>)</span>\n      <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.1</span>.1</span>, <span class=\"fn\"><span class=\"fn\">m</span>.2</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L88-L90","name":"Mathlib.Vector.map₂_map_right","line":88,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map₂_map_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map₂_map_right\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map₂_map_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ζ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">ζ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f₂</span> <span class=\"fn\">ys</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">y</span></span>)</span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L77-L85","name":"Mathlib.Vector.mapAccumr₂_mapAccumr_right","line":77,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr_right\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_mapAccumr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ζ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ζ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\">xs</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₂</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₂</span></span>)</span>.2</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">m</span> :=\n    <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ₂</span></span>) =&gt;\n        <span class=\"fn\">let <span class=\"fn\">r₂</span> := <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">s</span>.2</span></span>;\n        <span class=\"fn\">let <span class=\"fn\">r₁</span> := <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">r₂</span>.2</span> <span class=\"fn\"><span class=\"fn\">s</span>.1</span></span>;\n        <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r₁</span>.1</span>, <span class=\"fn\"><span class=\"fn\">r₂</span>.1</span>)</span>, <span class=\"fn\"><span class=\"fn\">r₁</span>.2</span>)</span></span></span></span>)</span>\n      <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.1</span>.1</span>, <span class=\"fn\"><span class=\"fn\">m</span>.2</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L72-L74","name":"Mathlib.Vector.map₂_map_left","line":72,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map₂_map_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map₂_map_left\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map₂_map_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ζ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">ζ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">y</span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L61-L69","name":"Mathlib.Vector.mapAccumr₂_mapAccumr_left","line":61,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr₂_mapAccumr_left\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_mapAccumr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ζ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ζ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">s₂</span></span>)</span>.2</span> <span class=\"fn\">ys</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">m</span> :=\n    <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ₂</span></span>) =&gt;\n        <span class=\"fn\">let <span class=\"fn\">r₂</span> := <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">s</span>.2</span></span>;\n        <span class=\"fn\">let <span class=\"fn\">r₁</span> := <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">r₂</span>.2</span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">s</span>.1</span></span>;\n        <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r₁</span>.1</span>, <span class=\"fn\"><span class=\"fn\">r₂</span>.1</span>)</span>, <span class=\"fn\"><span class=\"fn\">r₁</span>.2</span>)</span></span></span></span>)</span>\n      <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.1</span>.1</span>, <span class=\"fn\"><span class=\"fn\">m</span>.2</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L51-L53","name":"Mathlib.Vector.map_map","line":51,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map_map\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span></span>)</span></span></span>)</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L44-L48","name":"Mathlib.Vector.map_mapAccumr","line":44,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map_mapAccumr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.map_mapAccumr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map_mapAccumr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">s</span></span>)</span>.2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ₂</span>) =&gt;\n        <span class=\"fn\">let <span class=\"fn\">r</span> := <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>;\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span>.1</span>, <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">r</span>.2</span></span>)</span></span></span>)</span>\n      <span class=\"fn\">xs</span> <span class=\"fn\">s</span></span>)</span>.2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L39-L41","name":"Mathlib.Vector.mapAccumr_map","line":39,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_map\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ₁</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/MapLemmas.lean#L28-L36","name":"Mathlib.Vector.mapAccumr_mapAccumr","line":28,"kind":"theorem","docLink":"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_mapAccumr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/MapLemmas.html#Mathlib.Vector.mapAccumr_mapAccumr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_mapAccumr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₁ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ₂ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> → <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> → <span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\">σ₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\">σ₁</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f₂</span> <span class=\"fn\">xs</span> <span class=\"fn\">s₂</span></span>)</span>.2</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">m</span> :=\n    <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">σ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ₂</span></span>) =&gt;\n        <span class=\"fn\">let <span class=\"fn\">r₂</span> := <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">s</span>.2</span></span>;\n        <span class=\"fn\">let <span class=\"fn\">r₁</span> := <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\"><span class=\"fn\">r₂</span>.2</span> <span class=\"fn\"><span class=\"fn\">s</span>.1</span></span>;\n        <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r₁</span>.1</span>, <span class=\"fn\"><span class=\"fn\">r₂</span>.1</span>)</span>, <span class=\"fn\"><span class=\"fn\">r₁</span>.2</span>)</span></span></span></span>)</span>\n      <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\">s₁</span>, <span class=\"fn\">s₂</span>)</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.1</span>.1</span>, <span class=\"fn\"><span class=\"fn\">m</span>.2</span>)</span></span></span></div></div>"}]}