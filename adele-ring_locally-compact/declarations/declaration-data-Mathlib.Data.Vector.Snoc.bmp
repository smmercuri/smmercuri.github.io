{"name":"Mathlib.Data.Vector.Snoc","instances":[],"imports":["Init","Mathlib.Data.Vector.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L156-L161","name":"Mathlib.Vector.mapAccumr₂_snoc","line":156,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.mapAccumr₂_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.mapAccumr₂_snoc\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">φ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.snoc</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.snoc</span> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">q</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span>;\n  <span class=\"fn\">let <span class=\"fn\">r</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\"><span class=\"fn\">q</span>.1</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span>.1</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.2</span>.snoc</span> <span class=\"fn\"><span class=\"fn\">q</span>.2</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L152-L153","name":"Mathlib.Vector.mapAccumr₂_nil","line":152,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.mapAccumr₂_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.mapAccumr₂_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">α_1 </span><span class=\"fn\">β_1</span> : <a href=\"./foundational_types.html\">Type</a>} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β_1</span></span></span></span></span>} {<span class=\"fn\">s</span> : <span class=\"fn\">α_1</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">Mathlib.Vector.nil</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L148-L149","name":"Mathlib.Vector.map₂_snoc","line":148,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.map₂_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.map₂_snoc\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map₂_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α_1</span></span></span>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">y</span> : <span class=\"fn\">β</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.snoc</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.snoc</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span>.snoc</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L136-L143","name":"Mathlib.Vector.mapAccumr_snoc","line":136,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.mapAccumr_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.mapAccumr_snoc\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a>} {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">s</span> : <span class=\"fn\">α_1</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.snoc</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\">let <span class=\"fn\">q</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>;\n    <span class=\"fn\">let <span class=\"fn\">r</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\"><span class=\"fn\">q</span>.1</span></span>;\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span>.1</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.2</span>.snoc</span> <span class=\"fn\"><span class=\"fn\">q</span>.2</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L132-L133","name":"Mathlib.Vector.mapAccumr_nil","line":132,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.mapAccumr_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.mapAccumr_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a>} {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>} {<span class=\"fn\">s</span> : <span class=\"fn\">α_1</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">Mathlib.Vector.nil</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L128-L129","name":"Mathlib.Vector.map_snoc","line":128,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.map_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.map_snoc\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α_1</span></span>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.snoc</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span></span>)</span>.snoc</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L111-L115","name":"Mathlib.Vector.revCasesOn","line":111,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.revCasesOn","doc":"Define `C v` by *reverse* case analysis, i.e. by handling the cases `nil` and `xs.snoc x`\nseparately "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.revCasesOn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">revCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(snoc : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.snoc</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L94-L106","name":"Mathlib.Vector.revInductionOn₂","line":94,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.revInductionOn₂","doc":"Define `C v w` by *reverse* induction on a pair of vectors `v : Vector α n` and\n`w : Vector β n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.revInductionOn₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">revInductionOn₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_1</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(snoc : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} →\n  <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.snoc</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.snoc</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L81-L89","name":"Mathlib.Vector.revInductionOn","line":81,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.revInductionOn","doc":"Define `C v` by *reverse* induction on `v : Vector α n`.\nThat is, break the vector down starting from the right-most element, using `snoc`\n\nThis function has two arguments: `nil` handles the base case on `C nil`,\nand `snoc` defines the inductive step using `∀ x : α, C xs → C (xs.snoc x)`.\n\nThis can be used as `induction v using Vector.revInductionOn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.revInductionOn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">revInductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(snoc : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.snoc</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L56-L64","name":"Mathlib.Vector.replicate_succ_to_snoc","line":56,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.replicate_succ_to_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.replicate_succ_to_snoc\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">replicate_succ_to_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.replicate\">Mathlib.Vector.replicate</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.replicate\">Mathlib.Vector.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">val</span></span>)</span>.snoc</span> <span class=\"fn\">val</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L50-L54","name":"Mathlib.Vector.reverse_snoc","line":50,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.reverse_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.reverse_snoc\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">reverse_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.snoc</span> <span class=\"fn\">x</span></span>)</span>.reverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\"><span class=\"fn\">xs</span>.reverse</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L44-L47","name":"Mathlib.Vector.reverse_cons","line":44,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.reverse_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.reverse_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">reverse_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span></span>)</span>.reverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.reverse</span>.snoc</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L40-L41","name":"Mathlib.Vector.snoc_nil","line":40,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.snoc_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.snoc_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">snoc_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Mathlib.Vector.nil</span>.snoc</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">Mathlib.Vector.nil</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L36-L37","name":"Mathlib.Vector.snoc_cons","line":36,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.snoc_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.snoc_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">snoc_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span></span>)</span>.snoc</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.snoc</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Data/Vector/Snoc.lean#L26-L27","name":"Mathlib.Vector.snoc","line":26,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.snoc","doc":"Append a single element to the end of a vector "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Mathlib.Vector.snoc\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span></div></div>"}]}