{"name":"Mathlib.Lean.Elab.Tactic.Basic","instances":[],"imports":["Init","Mathlib.Lean.Meta"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Elab/Tactic/Basic.lean#L36-L42","name":"Lean.Elab.Tactic.focusAndDoneWithScope","line":36,"kind":"def","docLink":"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.focusAndDoneWithScope","doc":"Like `focusAndDone` but takes a scope (e.g. tactic name) as an argument to\nproduce more detailed error messages.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.focusAndDoneWithScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">focusAndDoneWithScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(scope : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tactic : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Elab/Tactic/Basic.lean#L25-L30","name":"Lean.Elab.Tactic.doneWithScope","line":25,"kind":"def","docLink":"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.doneWithScope","doc":"Like `done` but takes a scope (e.g. a tactic name) as an argument\nto produce more detailed error messages.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.doneWithScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">doneWithScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(scope : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Elab/Tactic/Basic.lean#L18-L19","name":"Lean.Elab.Tactic.getMainTarget''","line":18,"kind":"def","docLink":"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.getMainTarget''","doc":"Return expected type for the main goal, cleaning up annotations, using `Lean.MVarId.getType''`.\nRemark: note that `MVarId.getType'` uses `whnf` instead of `cleanupAnnotations`, and\n`MVarId.getType''` also uses `cleanupAnnotations` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.getMainTarget''\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getMainTarget''</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}