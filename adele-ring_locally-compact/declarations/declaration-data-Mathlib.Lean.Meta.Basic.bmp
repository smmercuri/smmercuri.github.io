{"name":"Mathlib.Lean.Meta.Basic","instances":[],"imports":["Init","Lean.Meta.AppBuilder","Lean.Meta.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Meta/Basic.lean#L63-L69","name":"Lean.Meta.mkRel","line":63,"kind":"def","docLink":"./Mathlib/Lean/Meta/Basic.html#Lean.Meta.mkRel","doc":"`mkRel n lhs rhs` is `mkAppM n #[lhs, rhs]`, but with optimizations for `Eq` and `Iff`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Basic.html#Lean.Meta.mkRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkRel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Meta/Basic.lean#L59-L60","name":"Lean.Meta.pureIsDefEq","line":59,"kind":"def","docLink":"./Mathlib/Lean/Meta/Basic.html#Lean.Meta.pureIsDefEq","doc":"`pureIsDefEq e₁ e₂` is short for `withNewMCtxDepth <| isDefEq e₁ e₂`.\nDetermines whether two expressions are definitionally equal to each other\nwhen metavariables are not assignable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Basic.html#Lean.Meta.pureIsDefEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pureIsDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Meta/Basic.lean#L36-L53","name":"Lean.Meta.forallMetaTelescopeReducingUntilDefEq","line":36,"kind":"def","docLink":"./Mathlib/Lean/Meta/Basic.html#Lean.Meta.forallMetaTelescopeReducingUntilDefEq","doc":"This function is similar to `forallMetaTelescopeReducing`: Given `e` of the\nform `forall ..xs, A`, this combinator will create a new metavariable for\neach `x` in `xs` until it reaches an `x` whose type is defeq to `t`,\nand instantiate `A` with these, while also reducing `A` if needed.\nIt uses `forallMetaTelescopeReducing`.\n\nThis function returns a triple `(mvs, bis, out)` where\n- `mvs` is an array containing the new metavariables.\n- `bis` is an array containing the binder infos for the `mvs`.\n- `out` is `e` but instantiated with the `mvs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Basic.html#Lean.Meta.forallMetaTelescopeReducingUntilDefEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">forallMetaTelescopeReducingUntilDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">Lean.MetavarKind</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind.natural\">Lean.MetavarKind.natural</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Meta/Basic.lean#L18-L20","name":"Lean.Meta.preservingMCtx","line":18,"kind":"def","docLink":"./Mathlib/Lean/Meta/Basic.html#Lean.Meta.preservingMCtx","doc":"Restore the metavariable context after execution.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Basic.html#Lean.Meta.preservingMCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">preservingMCtx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"}]}