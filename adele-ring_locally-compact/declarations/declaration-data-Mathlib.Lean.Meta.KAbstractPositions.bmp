{"name":"Mathlib.Lean.Meta.KAbstractPositions","instances":[],"imports":["Init","Lean.HeadIndex","Lean.Meta.ExprLens","Lean.Meta.Check"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Meta/KAbstractPositions.lean#L86-L88","name":"Lean.Meta.kabstractIsTypeCorrect","line":86,"kind":"def","docLink":"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractIsTypeCorrect","doc":"Determine whether the result of abstracting `subExpr` from `e` at position `pos` results\nin a well typed expression. This is important if you want to rewrite at this position.\n\nHere is an example of what goes wrong with an ill-typed kabstract result:\n\n```\nexample (h : [5] ≠ []) : List.getLast [5] h = 5 := by\n  rw [show [5] = [5] from rfl] -- tactic 'rewrite' failed, motive is not type correct\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractIsTypeCorrect\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">kabstractIsTypeCorrect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subExpr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">Lean.SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Meta/KAbstractPositions.lean#L68-L74","name":"Lean.Meta.viewKAbstractSubExpr","line":68,"kind":"def","docLink":"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.viewKAbstractSubExpr","doc":"Return the subexpression at position `pos` in `e` together with an occurrence number\nthat allows the expression to be found by `kabstract`.\nReturn `none` when the subexpression contains loose bound variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.viewKAbstractSubExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">viewKAbstractSubExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">Lean.SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Meta/KAbstractPositions.lean#L37-L62","name":"Lean.Meta.kabstractPositions.visit","line":37,"kind":"def","docLink":"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractPositions.visit","doc":"The main loop that loops through all subexpressions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractPositions.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">kabstractPositions</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pHeadIdx : <a href=\"./Lean/HeadIndex.html#Lean.HeadIndex\">Lean.HeadIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pNumArgs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">Lean.SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(positions : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">Lean.SubExpr.Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">Lean.SubExpr.Pos</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Lean/Meta/KAbstractPositions.lean#L30-L63","name":"Lean.Meta.kabstractPositions","line":30,"kind":"def","docLink":"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractPositions","doc":"Return the positions that `kabstract` would abstract for pattern `p` in expression `e`.\ni.e. the positions that unify with `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractPositions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">kabstractPositions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">Lean.SubExpr.Pos</a></span>)</span></span></div></div>"}]}