{"name":"Mathlib.Logic.Function.OfArity","instances":[{"typeNames":["Function.OfArity"],"name":"Function.OfArity.inhabited","className":"Inhabited"}],"imports":["Init","Mathlib.Mathport.Rename","Mathlib.Logic.Function.FromTypes"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Logic/Function/OfArity.lean#L76-L77","name":"Function.FromTypes.fromTypes_fin_const_equiv","line":76,"kind":"def","docLink":"./Mathlib/Logic/Function/OfArity.html#Function.FromTypes.fromTypes_fin_const_equiv","doc":"The definitional equality between heterogeneous functions with constant\ndomain and `n`-ary functions with that domain. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/OfArity.html#Function.FromTypes.fromTypes_fin_const_equiv\"><span class=\"name\">Function</span>.<span class=\"name\">FromTypes</span>.<span class=\"name\">fromTypes_fin_const_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FromTypes.html#Function.FromTypes\">Function.FromTypes</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">β</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Logic/Function/OfArity.lean#L71-L72","name":"Function.FromTypes.fromTypes_fin_const","line":71,"kind":"theorem","docLink":"./Mathlib/Logic/Function/OfArity.html#Function.FromTypes.fromTypes_fin_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/OfArity.html#Function.FromTypes.fromTypes_fin_const\"><span class=\"name\">Function</span>.<span class=\"name\">FromTypes</span>.<span class=\"name\">fromTypes_fin_const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FromTypes.html#Function.FromTypes\">Function.FromTypes</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Logic/Function/OfArity.lean#L63-L64","name":"Function.OfArity.inhabited","line":63,"kind":"instance","docLink":"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.inhabited\"><span class=\"name\">Function</span>.<span class=\"name\">OfArity</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Logic/Function/OfArity.lean#L59-L60","name":"Function.OfArity.const_succ_apply","line":59,"kind":"theorem","docLink":"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const_succ_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const_succ_apply\"><span class=\"name\">Function</span>.<span class=\"name\">OfArity</span>.<span class=\"name\">const_succ_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const\">Function.OfArity.const</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const\">Function.OfArity.const</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Logic/Function/OfArity.lean#L54-L56","name":"Function.OfArity.const_succ","line":54,"kind":"theorem","docLink":"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const_succ\"><span class=\"name\">Function</span>.<span class=\"name\">OfArity</span>.<span class=\"name\">const_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const\">Function.OfArity.const</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecHead\">Matrix.vecHead</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) =&gt; <span class=\"fn\">α</span></span></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const\">Function.OfArity.const</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Logic/Function/OfArity.lean#L49-L50","name":"Function.OfArity.const_zero","line":49,"kind":"theorem","docLink":"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const_zero\"><span class=\"name\">Function</span>.<span class=\"name\">OfArity</span>.<span class=\"name\">const_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const\">Function.OfArity.const</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Logic/Function/OfArity.lean#L44-L45","name":"Function.OfArity.const","line":44,"kind":"def","docLink":"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const","doc":"Constant `n`-ary function with value `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const\"><span class=\"name\">Function</span>.<span class=\"name\">OfArity</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Logic/Function/OfArity.lean#L37-L38","name":"Function.ofArity_succ","line":37,"kind":"theorem","docLink":"./Mathlib/Logic/Function/OfArity.html#Function.ofArity_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/OfArity.html#Function.ofArity_succ\"><span class=\"name\">Function</span>.<span class=\"name\">ofArity_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Logic/Function/OfArity.lean#L33-L33","name":"Function.ofArity_zero","line":33,"kind":"theorem","docLink":"./Mathlib/Logic/Function/OfArity.html#Function.ofArity_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/OfArity.html#Function.ofArity_zero\"><span class=\"name\">Function</span>.<span class=\"name\">ofArity_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Logic/Function/OfArity.lean#L29-L29","name":"Function.OfArity","line":29,"kind":"def","docLink":"./Mathlib/Logic/Function/OfArity.html#Function.OfArity","doc":"The type of `n`-ary functions `α → α → ... → β`.\n\nNote that this is not universe polymorphic, as this would require that when `n=0` we produce either\n`Unit → β` or `ULift β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\"><span class=\"name\">Function</span>.<span class=\"name\">OfArity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}