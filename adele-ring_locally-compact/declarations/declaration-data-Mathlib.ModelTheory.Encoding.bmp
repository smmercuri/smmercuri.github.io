{"name":"Mathlib.ModelTheory.Encoding","instances":[{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Language.Term.instEncodableTerm","className":"Encodable"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Language.Term.instCountableTerm","className":"Countable"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Language.Term.small","className":"Small"}],"imports":["Init","Mathlib.Computability.Encoding","Mathlib.Logic.Small.List","Mathlib.ModelTheory.Syntax","Mathlib.SetTheory.Cardinal.Ordinal"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L309-L318","name":"FirstOrder.Language.BoundedFormula.card_le","line":309,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.card_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.card_le\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">card_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.aleph0\">Cardinal.aleph0</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.lift\">Cardinal.lift.{max u v, u'}</a>          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.lift\">Cardinal.lift.{u', max u v}</a>          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.card\">FirstOrder.Language.card</a> <span class=\"fn\">L</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L304-L306","name":"FirstOrder.Language.BoundedFormula.listEncode_sigma_injective","line":304,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode_sigma_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode_sigma_injective\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listEncode_sigma_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">φ</span> : <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\">FirstOrder.Language.BoundedFormula.listEncode</a> <span class=\"fn\"><span class=\"fn\">φ</span>.snd</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L292-L301","name":"FirstOrder.Language.BoundedFormula.encoding","line":292,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding","doc":"An encoding of bounded formulas as lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L291-L291","name":"FirstOrder.Language.BoundedFormula.encoding_decode","line":291,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_decode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_decode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding_decode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Relations</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FirstOrder.Language.BoundedFormula.encoding</span>.decode</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode\">FirstOrder.Language.BoundedFormula.listDecode</a> <span class=\"fn\">l</span></span>)</span>.1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L291-L291","name":"FirstOrder.Language.BoundedFormula.encoding_Γ","line":291,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_Γ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_Γ\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding_Γ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FirstOrder.Language.BoundedFormula.encoding</span>.Γ</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Relations</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L291-L291","name":"FirstOrder.Language.BoundedFormula.encoding_encode","line":291,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_encode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_encode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding_encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FirstOrder.Language.BoundedFormula.encoding</span>.encode</span> <span class=\"fn\">φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\">FirstOrder.Language.BoundedFormula.listEncode</a> <span class=\"fn\"><span class=\"fn\">φ</span>.snd</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L235-L287","name":"FirstOrder.Language.BoundedFormula.listDecode_encode_list","line":235,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode_encode_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode_encode_list\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listDecode_encode_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode\">FirstOrder.Language.BoundedFormula.listDecode</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.bind\">List.bind</a> <span class=\"fn\">l</span> <span class=\"fn\">fun (<span class=\"fn\">φ</span> : <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\">FirstOrder.Language.BoundedFormula.listEncode</a> <span class=\"fn\"><span class=\"fn\">φ</span>.snd</span></span></span></span>)</span></span>)</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Init/Data/List/Basic.html#List.headI\">List.headI</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L199-L231","name":"FirstOrder.Language.BoundedFormula.listDecode","line":199,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode","doc":"Decodes a list of symbols as a list of formulas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listDecode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Relations</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a>   <span class=\"fn\">{ <span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Relations</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span>)</span></span> //\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">l</span></span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L193-L194","name":"FirstOrder.Language.BoundedFormula.sigmaImp","line":193,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaImp","doc":"Applies `imp` to two elements of `(Σ n, L.BoundedFormula α n)`,\nor returns `default` if not possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaImp\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">sigmaImp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span> →\n  <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L186-L188","name":"FirstOrder.Language.BoundedFormula.sigmaAll","line":186,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaAll","doc":"Applies the `forall` quantifier to an element of `(Σ n, L.BoundedFormula α n)`,\nor returns `default` if not possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaAll\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">sigmaAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L174-L181","name":"FirstOrder.Language.BoundedFormula.listEncode","line":174,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode","doc":"Encodes a bounded formula as a list of symbols. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listEncode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Relations</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L165-L166","name":"FirstOrder.Language.Term.small","line":165,"kind":"instance","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.small","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.small\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">small</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u'}</a>     <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, max u u'}</a>           <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L160-L163","name":"FirstOrder.Language.Term.instCountableTerm","line":160,"kind":"instance","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instCountableTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instCountableTerm\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">instCountableTerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">(<span class=\"fn\">(l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Functions</span> <span class=\"fn\">l</span></span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L154-L158","name":"FirstOrder.Language.Term.instEncodableTerm","line":154,"kind":"instance","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instEncodableTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instEncodableTerm\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">instEncodableTerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">(<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Functions</span> <span class=\"fn\">i</span></span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L122-L151","name":"FirstOrder.Language.Term.card_sigma","line":122,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_sigma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_sigma\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">card_sigma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></span>)</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.aleph0\">Cardinal.aleph0</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Functions</span> <span class=\"fn\">i</span></span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L118-L119","name":"FirstOrder.Language.Term.card_le","line":118,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_le\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">card_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.aleph0\">Cardinal.aleph0</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Functions</span> <span class=\"fn\">i</span></span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L113-L115","name":"FirstOrder.Language.Term.listEncode_injective","line":113,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode_injective\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listEncode_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FirstOrder.Language.Term.listEncode</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L103-L110","name":"FirstOrder.Language.Term.encoding","line":103,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding","doc":"An encoding of terms as lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L102-L102","name":"FirstOrder.Language.Term.encoding_encode","line":102,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_encode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_encode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding_encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FirstOrder.Language.Term.encoding</span>.encode</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode\">FirstOrder.Language.Term.listEncode</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L102-L102","name":"FirstOrder.Language.Term.encoding_decode","line":102,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_decode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_decode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding_decode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Functions</span> <span class=\"fn\">i</span></span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FirstOrder.Language.Term.encoding</span>.decode</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.join\">Option.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head?\">List.head?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode\">FirstOrder.Language.Term.listDecode</a> <span class=\"fn\">l</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L102-L102","name":"FirstOrder.Language.Term.encoding_Γ","line":102,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_Γ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_Γ\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding_Γ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FirstOrder.Language.Term.encoding</span>.Γ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Functions</span> <span class=\"fn\">i</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L67-L98","name":"FirstOrder.Language.Term.listDecode_encode_list","line":67,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode_encode_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode_encode_list\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listDecode_encode_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode\">FirstOrder.Language.Term.listDecode</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.bind\">List.bind</a> <span class=\"fn\">l</span> <span class=\"fn\">FirstOrder.Language.Term.listEncode</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">some</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L58-L64","name":"FirstOrder.Language.Term.listDecode","line":58,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode","doc":"Decodes a list of variables and function symbols as a list of terms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listDecode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Functions</span> <span class=\"fn\">i</span></span></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/ModelTheory/Encoding.lean#L51-L54","name":"FirstOrder.Language.Term.listEncode","line":51,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode","doc":"Encodes a term as a list of variables and function symbols. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listEncode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.Functions</span> <span class=\"fn\">i</span></span></span></span>)</span></span></span></div></div>"}]}