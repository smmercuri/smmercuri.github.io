{"name":"Mathlib.Order.Copy","instances":[],"imports":["Init","Mathlib.Order.ConditionallyCompleteLattice.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L242-L256","name":"ConditionallyCompleteLattice.copy","line":242,"kind":"def","docLink":"./Mathlib/Order/Copy.html#ConditionallyCompleteLattice.copy","doc":"A function to create a provable equal copy of a conditionally complete lattice\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#ConditionallyCompleteLattice.copy\"><span class=\"name\">ConditionallyCompleteLattice</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/ConditionallyCompleteLattice/Basic.html#ConditionallyCompleteLattice\">ConditionallyCompleteLattice</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sSup : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sSup : <span class=\"fn\"><span class=\"fn\">sSup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SupSet.sSup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sInf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sInf : <span class=\"fn\"><span class=\"fn\">sInf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">InfSet.sInf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/ConditionallyCompleteLattice/Basic.html#ConditionallyCompleteLattice\">ConditionallyCompleteLattice</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L222-L238","name":"CompleteDistribLattice.copy","line":222,"kind":"def","docLink":"./Mathlib/Order/Copy.html#CompleteDistribLattice.copy","doc":"A function to create a provable equal copy of a complete distributive lattice\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#CompleteDistribLattice.copy\"><span class=\"name\">CompleteDistribLattice</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#CompleteDistribLattice\">CompleteDistribLattice</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sdiff : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sdiff : <span class=\"fn\"><span class=\"fn\">sdiff</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SDiff.sdiff</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hnot : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_hnot : <span class=\"fn\"><span class=\"fn\">hnot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HNot.hnot</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(himp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_himp : <span class=\"fn\"><span class=\"fn\">himp</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HImp.himp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(compl : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_compl : <span class=\"fn\"><span class=\"fn\">compl</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HasCompl.compl</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sSup : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sSup : <span class=\"fn\"><span class=\"fn\">sSup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SupSet.sSup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sInf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sInf : <span class=\"fn\"><span class=\"fn\">sInf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">InfSet.sInf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#CompleteDistribLattice\">CompleteDistribLattice</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L204-L218","name":"Coframe.copy","line":204,"kind":"def","docLink":"./Mathlib/Order/Copy.html#Coframe.copy","doc":"A function to create a provable equal copy of a coframe with possibly different definitional\nequalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#Coframe.copy\"><span class=\"name\">Coframe</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#Order.Coframe\">Order.Coframe</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sdiff : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sdiff : <span class=\"fn\"><span class=\"fn\">sdiff</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SDiff.sdiff</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hnot : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_hnot : <span class=\"fn\"><span class=\"fn\">hnot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HNot.hnot</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sSup : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sSup : <span class=\"fn\"><span class=\"fn\">sSup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SupSet.sSup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sInf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sInf : <span class=\"fn\"><span class=\"fn\">sInf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">InfSet.sInf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#Order.Coframe\">Order.Coframe</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L186-L200","name":"Frame.copy","line":186,"kind":"def","docLink":"./Mathlib/Order/Copy.html#Frame.copy","doc":"A function to create a provable equal copy of a frame with possibly different definitional\nequalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#Frame.copy\"><span class=\"name\">Frame</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#Order.Frame\">Order.Frame</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(himp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_himp : <span class=\"fn\"><span class=\"fn\">himp</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HImp.himp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(compl : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_compl : <span class=\"fn\"><span class=\"fn\">compl</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HasCompl.compl</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sSup : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sSup : <span class=\"fn\"><span class=\"fn\">sSup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SupSet.sSup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sInf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sInf : <span class=\"fn\"><span class=\"fn\">sInf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">InfSet.sInf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#Order.Frame\">Order.Frame</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L163-L182","name":"CompleteLattice.copy","line":163,"kind":"def","docLink":"./Mathlib/Order/Copy.html#CompleteLattice.copy","doc":"A function to create a provable equal copy of a complete lattice\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#CompleteLattice.copy\"><span class=\"name\">CompleteLattice</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/CompleteLattice.html#CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sSup : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sSup : <span class=\"fn\"><span class=\"fn\">sSup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SupSet.sSup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sInf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sInf : <span class=\"fn\"><span class=\"fn\">sInf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">InfSet.sInf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteLattice.html#CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L145-L159","name":"BiheytingAlgebra.copy","line":145,"kind":"def","docLink":"./Mathlib/Order/Copy.html#BiheytingAlgebra.copy","doc":"A function to create a provable equal copy of a biheyting algebra\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#BiheytingAlgebra.copy\"><span class=\"name\">BiheytingAlgebra</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/Heyting/Basic.html#BiheytingAlgebra\">BiheytingAlgebra</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sdiff : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sdiff : <span class=\"fn\"><span class=\"fn\">sdiff</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SDiff.sdiff</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hnot : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_hnot : <span class=\"fn\"><span class=\"fn\">hnot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HNot.hnot</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(himp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_himp : <span class=\"fn\"><span class=\"fn\">himp</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HImp.himp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(compl : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_compl : <span class=\"fn\"><span class=\"fn\">compl</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HasCompl.compl</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Heyting/Basic.html#BiheytingAlgebra\">BiheytingAlgebra</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L126-L141","name":"CoheytingAlgebra.copy","line":126,"kind":"def","docLink":"./Mathlib/Order/Copy.html#CoheytingAlgebra.copy","doc":"A function to create a provable equal copy of a coheyting algebra\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#CoheytingAlgebra.copy\"><span class=\"name\">CoheytingAlgebra</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/Heyting/Basic.html#CoheytingAlgebra\">CoheytingAlgebra</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sdiff : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sdiff : <span class=\"fn\"><span class=\"fn\">sdiff</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SDiff.sdiff</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hnot : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_hnot : <span class=\"fn\"><span class=\"fn\">hnot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HNot.hnot</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Heyting/Basic.html#CoheytingAlgebra\">CoheytingAlgebra</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L107-L122","name":"HeytingAlgebra.copy","line":107,"kind":"def","docLink":"./Mathlib/Order/Copy.html#HeytingAlgebra.copy","doc":"A function to create a provable equal copy of a heyting algebra\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#HeytingAlgebra.copy\"><span class=\"name\">HeytingAlgebra</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/Heyting/Basic.html#HeytingAlgebra\">HeytingAlgebra</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(himp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_himp : <span class=\"fn\"><span class=\"fn\">himp</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HImp.himp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(compl : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_compl : <span class=\"fn\"><span class=\"fn\">compl</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HasCompl.compl</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Heyting/Basic.html#HeytingAlgebra\">HeytingAlgebra</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L92-L103","name":"GeneralizedCoheytingAlgebra.copy","line":92,"kind":"def","docLink":"./Mathlib/Order/Copy.html#GeneralizedCoheytingAlgebra.copy","doc":"A function to create a provable equal copy of a generalised coheyting algebra\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#GeneralizedCoheytingAlgebra.copy\"><span class=\"name\">GeneralizedCoheytingAlgebra</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/Heyting/Basic.html#GeneralizedCoheytingAlgebra\">GeneralizedCoheytingAlgebra</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sdiff : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sdiff : <span class=\"fn\"><span class=\"fn\">sdiff</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SDiff.sdiff</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Heyting/Basic.html#GeneralizedCoheytingAlgebra\">GeneralizedCoheytingAlgebra</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L77-L88","name":"GeneralizedHeytingAlgebra.copy","line":77,"kind":"def","docLink":"./Mathlib/Order/Copy.html#GeneralizedHeytingAlgebra.copy","doc":"A function to create a provable equal copy of a generalised heyting algebra\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#GeneralizedHeytingAlgebra.copy\"><span class=\"name\">GeneralizedHeytingAlgebra</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/Heyting/Basic.html#GeneralizedHeytingAlgebra\">GeneralizedHeytingAlgebra</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(himp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_himp : <span class=\"fn\"><span class=\"fn\">himp</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">HImp.himp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Heyting/Basic.html#GeneralizedHeytingAlgebra\">GeneralizedHeytingAlgebra</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L68-L73","name":"DistribLattice.copy","line":68,"kind":"def","docLink":"./Mathlib/Order/Copy.html#DistribLattice.copy","doc":"A function to create a provable equal copy of a distributive lattice\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#DistribLattice.copy\"><span class=\"name\">DistribLattice</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L48-L64","name":"Lattice.copy","line":48,"kind":"def","docLink":"./Mathlib/Order/Copy.html#Lattice.copy","doc":"A function to create a provable equal copy of a lattice\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#Lattice.copy\"><span class=\"name\">Lattice</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#Lattice\">Lattice</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#Lattice\">Lattice</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L39-L44","name":"BoundedOrder.copy","line":39,"kind":"def","docLink":"./Mathlib/Order/Copy.html#BoundedOrder.copy","doc":"A function to create a provable equal copy of a bounded order\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#BoundedOrder.copy\"><span class=\"name\">BoundedOrder</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h' : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le_eq : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L32-L35","name":"OrderBot.copy","line":32,"kind":"def","docLink":"./Mathlib/Order/Copy.html#OrderBot.copy","doc":"A function to create a provable equal copy of a bottom order\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#OrderBot.copy\"><span class=\"name\">OrderBot</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h' : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#OrderBot\">OrderBot</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le_eq : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#OrderBot\">OrderBot</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Order/Copy.lean#L25-L28","name":"OrderTop.copy","line":25,"kind":"def","docLink":"./Mathlib/Order/Copy.html#OrderTop.copy","doc":"A function to create a provable equal copy of a top order\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#OrderTop.copy\"><span class=\"name\">OrderTop</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h' : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#OrderTop\">OrderTop</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le_eq : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#OrderTop\">OrderTop</a> <span class=\"fn\">α</span></span></div></div>"}]}