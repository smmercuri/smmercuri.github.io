{"name":"Mathlib.Probability.Kernel.Disintegration.StandardBorel","instances":[{"typeNames":["ProbabilityTheory.Kernel.condKernelReal"],"name":"ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelReal","className":"ProbabilityTheory.IsMarkovKernel"},{"typeNames":["ProbabilityTheory.Kernel.condKernelUnitReal"],"name":"ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelUnitReal","className":"ProbabilityTheory.IsMarkovKernel"},{"typeNames":["ProbabilityTheory.Kernel.condKernelUnitReal"],"name":"ProbabilityTheory.Kernel.condKernelUnitReal.instIsCondKernel","className":"ProbabilityTheory.Kernel.IsCondKernel"},{"typeNames":["ProbabilityTheory.Kernel.borelMarkovFromReal"],"name":"ProbabilityTheory.Kernel.instIsSFiniteKernelBorelMarkovFromReal","className":"ProbabilityTheory.IsSFiniteKernel"},{"typeNames":["ProbabilityTheory.Kernel.borelMarkovFromReal"],"name":"ProbabilityTheory.Kernel.instIsFiniteKernelBorelMarkovFromReal","className":"ProbabilityTheory.IsFiniteKernel"},{"typeNames":["ProbabilityTheory.Kernel.borelMarkovFromReal"],"name":"ProbabilityTheory.Kernel.instIsMarkovKernelBorelMarkovFromReal","className":"ProbabilityTheory.IsMarkovKernel"},{"typeNames":["ProbabilityTheory.Kernel.condKernelBorel"],"name":"ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelBorel","className":"ProbabilityTheory.IsMarkovKernel"},{"typeNames":["ProbabilityTheory.Kernel.condKernelBorel"],"name":"ProbabilityTheory.Kernel.condKernelBorel.instIsCondKernel","className":"ProbabilityTheory.Kernel.IsCondKernel"},{"typeNames":["ProbabilityTheory.Kernel.condKernelUnitBorel"],"name":"ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelUnitBorel","className":"ProbabilityTheory.IsMarkovKernel"},{"typeNames":["ProbabilityTheory.Kernel.condKernelUnitBorel"],"name":"ProbabilityTheory.Kernel.condKernelUnitBorel.instIsCondKernel","className":"ProbabilityTheory.Kernel.IsCondKernel"},{"typeNames":["MeasureTheory.Measure.condKernel"],"name":"MeasureTheory.Measure.condKernel.instIsCondKernel","className":"MeasureTheory.Measure.IsCondKernel"},{"typeNames":["MeasureTheory.Measure.condKernel"],"name":"MeasureTheory.Measure.instIsMarkovKernelCondKernel","className":"ProbabilityTheory.IsMarkovKernel"},{"typeNames":["ProbabilityTheory.Kernel.condKernel"],"name":"ProbabilityTheory.Kernel.instIsMarkovKernelCondKernel","className":"ProbabilityTheory.IsMarkovKernel"},{"typeNames":["ProbabilityTheory.Kernel.condKernel"],"name":"ProbabilityTheory.Kernel.condKernel.instIsCondKernel","className":"ProbabilityTheory.Kernel.IsCondKernel"}],"imports":["Init","Mathlib.Probability.Kernel.MeasureCompProd","Mathlib.Probability.Kernel.Disintegration.Basic","Mathlib.Probability.Kernel.Disintegration.CondCdf","Mathlib.Probability.Kernel.Disintegration.Density","Mathlib.Probability.Kernel.Disintegration.CdfToKernel","Mathlib.MeasureTheory.Constructions.Polish.EmbeddingReal"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L467-L467","name":"ProbabilityTheory.Kernel.compProd_fst_condKernel","line":467,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernel","doc":"**Disintegration** of finite kernels.\nThe composition-product of `fst κ` and `condKernel κ` is equal to `κ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">compProd_fst_condKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountableOrCountablyGenerated\">MeasurableSpace.CountableOrCountablyGenerated</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.fst</span>.compProd</span> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernel</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L461-L462","name":"ProbabilityTheory.Kernel.condKernel.instIsCondKernel","line":461,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernel.instIsCondKernel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernel.instIsCondKernel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernel</span>.<span class=\"name\">instIsCondKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountableOrCountablyGenerated\">MeasurableSpace.CountableOrCountablyGenerated</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.IsCondKernel</span> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernel</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L457-L459","name":"ProbabilityTheory.Kernel.instIsMarkovKernelCondKernel","line":457,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelCondKernel","doc":"`condKernel κ` is a Markov kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelCondKernel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instIsMarkovKernelCondKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountableOrCountablyGenerated\">MeasurableSpace.CountableOrCountablyGenerated</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsMarkovKernel\">ProbabilityTheory.IsMarkovKernel</a> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernel</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L445-L454","name":"ProbabilityTheory.Kernel.condKernel_def","line":445,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernel_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernel_def\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernel_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountableOrCountablyGenerated\">MeasurableSpace.CountableOrCountablyGenerated</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.condKernel</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if hα : <span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">α</span></span> then <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/Basic.html#ProbabilityTheory.Kernel.condKernelCountable\">ProbabilityTheory.Kernel.condKernelCountable</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">a</span></span>)</span>.condKernel</span></span>)</span> <span class=\"fn\">⋯</span></span>\n  else <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelBorel</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L445-L454","name":"ProbabilityTheory.Kernel.condKernel","line":445,"kind":"def","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernel","doc":"Conditional kernel of a kernel `κ : Kernel α (β × Ω)`: a Markov kernel such that\n`fst κ ⊗ₖ condKernel κ = κ` (see `MeasureTheory.Measure.compProd_fst_condKernel`).\nIt exists whenever `Ω` is standard Borel and either `α` is countable\nor `β` is countably generated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountableOrCountablyGenerated\">MeasurableSpace.CountableOrCountablyGenerated</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">Ω</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L434-L436","name":"ProbabilityTheory.Kernel.compProd_fst_condKernelCountable","line":434,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernelCountable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernelCountable\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">compProd_fst_condKernelCountable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.fst</span>.compProd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/Basic.html#ProbabilityTheory.Kernel.condKernelCountable\">ProbabilityTheory.Kernel.condKernelCountable</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">a</span></span>)</span>.condKernel</span></span>)</span> <span class=\"fn\">⋯</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L422-L425","name":"MeasureTheory.Measure.condKernel_apply_of_ne_zero","line":422,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel_apply_of_ne_zero","doc":"If the singleton `{x}` has non-zero mass for `ρ.fst`, then for all `s : Set Ω`,\n`ρ.condKernel x s = (ρ.fst {x})⁻¹ * ρ ({x} ×ˢ s)` . "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel_apply_of_ne_zero\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">condKernel_apply_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSingletonClass\">MeasurableSingletonClass</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">ρ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">x</span>}</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">s</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L415-L418","name":"MeasureTheory.Measure.condKernel_apply_of_ne_zero_of_measurableSet","line":415,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel_apply_of_ne_zero_of_measurableSet","doc":"Auxiliary lemma for `condKernel_apply_of_ne_zero`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel_apply_of_ne_zero_of_measurableSet\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">condKernel_apply_of_ne_zero_of_measurableSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSingletonClass\">MeasurableSingletonClass</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">ρ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">x</span>}</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">s</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L408-L410","name":"MeasureTheory.Measure.compProd_fst_condKernel","line":408,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.compProd_fst_condKernel","doc":"**Disintegration** of finite product measures on `α × Ω`, where `Ω` is standard Borel. Such a\nmeasure can be written as the composition-product of `ρ.fst` (marginal measure over `α`) and\na Markov kernel from `α` to `Ω`. We call that Markov kernel `ρ.condKernel`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.compProd_fst_condKernel\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">compProd_fst_condKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span>.compProd</span> <span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ρ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L399-L402","name":"MeasureTheory.Measure.instIsMarkovKernelCondKernel","line":399,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.instIsMarkovKernelCondKernel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.instIsMarkovKernelCondKernel\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsMarkovKernelCondKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsMarkovKernel\">ProbabilityTheory.IsMarkovKernel</a> <span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L387-L397","name":"MeasureTheory.Measure.condKernel.instIsCondKernel","line":387,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel.instIsCondKernel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel.instIsCondKernel\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">condKernel</span>.<span class=\"name\">instIsCondKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.IsCondKernel</span> <span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L382-L385","name":"MeasureTheory.Measure.condKernel_apply","line":382,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel_apply\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">condKernel_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel.const\">ProbabilityTheory.Kernel.const</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">ρ</span></span>)</span>.condKernelUnitBorel</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Unit.unit\">()</a>, <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L375-L380","name":"MeasureTheory.Measure.condKernel_def","line":375,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel_def\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">condKernel_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel.const\">ProbabilityTheory.Kernel.const</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">ρ</span></span>)</span>.condKernelUnitBorel</span>.comap</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">(<a href=\"./Init/Prelude.html#Unit.unit\">()</a>, <span class=\"fn\">a</span>)</span></span>)</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L375-L380","name":"MeasureTheory.Measure.condKernel","line":375,"kind":"def","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel","doc":"Conditional kernel of a measure on a product space: a Markov kernel such that\n`ρ = ρ.fst ⊗ₘ ρ.condKernel` (see `MeasureTheory.Measure.compProd_fst_condKernel`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#MeasureTheory.Measure.condKernel\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">condKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">Ω</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L366-L367","name":"ProbabilityTheory.Kernel.compProd_fst_condKernelUnitBorel","line":366,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernelUnitBorel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernelUnitBorel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">compProd_fst_condKernelUnitBorel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.fst</span>.compProd</span> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelUnitBorel</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L361-L363","name":"ProbabilityTheory.Kernel.condKernelUnitBorel.instIsCondKernel","line":361,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelUnitBorel.instIsCondKernel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelUnitBorel.instIsCondKernel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernelUnitBorel</span>.<span class=\"name\">instIsCondKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.IsCondKernel</span> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelUnitBorel</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L357-L359","name":"ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelUnitBorel","line":357,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelUnitBorel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelUnitBorel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instIsMarkovKernelCondKernelUnitBorel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsMarkovKernel\">ProbabilityTheory.IsMarkovKernel</a> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelUnitBorel</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L351-L355","name":"ProbabilityTheory.Kernel.condKernelUnitBorel","line":351,"kind":"def","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelUnitBorel","doc":"Auxiliary definition for `MeasureTheory.Measure.condKernel` and\n`ProbabilityTheory.Kernel.condKernel`.\nA conditional kernel for `κ : Kernel Unit (α × Ω)` where `Ω` is standard Borel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelUnitBorel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernelUnitBorel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">Ω</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L339-L340","name":"ProbabilityTheory.Kernel.compProd_fst_condKernelBorel","line":339,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernelBorel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernelBorel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">compProd_fst_condKernelBorel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.fst</span>.compProd</span> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelBorel</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L333-L336","name":"ProbabilityTheory.Kernel.condKernelBorel.instIsCondKernel","line":333,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelBorel.instIsCondKernel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelBorel.instIsCondKernel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernelBorel</span>.<span class=\"name\">instIsCondKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.IsCondKernel</span> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelBorel</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L328-L331","name":"ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelBorel","line":328,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelBorel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelBorel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instIsMarkovKernelCondKernelBorel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsMarkovKernel\">ProbabilityTheory.IsMarkovKernel</a> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelBorel</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L322-L326","name":"ProbabilityTheory.Kernel.condKernelBorel","line":322,"kind":"def","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelBorel","doc":"Auxiliary definition for `ProbabilityTheory.Kernel.condKernel`.\nA conditional kernel for `κ : Kernel α (γ × Ω)` where `γ` is countably generated and `Ω` is\nstandard Borel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelBorel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernelBorel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span>)</span> <span class=\"fn\">Ω</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L292-L310","name":"ProbabilityTheory.Kernel.compProd_fst_borelMarkovFromReal","line":292,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_borelMarkovFromReal","doc":"For `κ' := map κ (Prod.map (id : β → β) e) (measurable_id.prod_map he.measurable)`, the\nhypothesis `hη` is `fst κ' ⊗ₖ η = κ'`. With that hypothesis,\n`fst κ ⊗ₖ borelMarkovFromReal κ η = κ`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_borelMarkovFromReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">compProd_fst_borelMarkovFromReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hη : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <span class=\"fn\">id</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span> <span class=\"fn\">⋯</span></span>)</span>.fst</span>.compProd</span> <span class=\"fn\">η</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <span class=\"fn\">id</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span> <span class=\"fn\">⋯</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.fst</span>.compProd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal\">ProbabilityTheory.Kernel.borelMarkovFromReal</a> <span class=\"fn\">Ω</span> <span class=\"fn\">η</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L240-L287","name":"ProbabilityTheory.Kernel.compProd_fst_borelMarkovFromReal_eq_comapRight_compProd","line":240,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_borelMarkovFromReal_eq_comapRight_compProd","doc":"For `κ' := map κ (Prod.map (id : β → β) e) (measurable_id.prod_map he.measurable)`, the\nhypothesis `hη` is `fst κ' ⊗ₖ η = κ'`. The conclusion of the lemma is\n`fst κ ⊗ₖ borelMarkovFromReal Ω η = comapRight (fst κ' ⊗ₖ η) _`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_borelMarkovFromReal_eq_comapRight_compProd\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">compProd_fst_borelMarkovFromReal_eq_comapRight_compProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hη : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <span class=\"fn\">id</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span> <span class=\"fn\">⋯</span></span>)</span>.fst</span>.compProd</span> <span class=\"fn\">η</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <span class=\"fn\">id</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span> <span class=\"fn\">⋯</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.fst</span>.compProd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal\">ProbabilityTheory.Kernel.borelMarkovFromReal</a> <span class=\"fn\">Ω</span> <span class=\"fn\">η</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <span class=\"fn\">id</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span> <span class=\"fn\">⋯</span></span>)</span>.fst</span>.compProd</span> <span class=\"fn\">η</span></span>)</span>.comapRight</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L227-L235","name":"ProbabilityTheory.Kernel.instIsMarkovKernelBorelMarkovFromReal","line":227,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelBorelMarkovFromReal","doc":"When `η` is a Markov kernel, `borelMarkovFromReal Ω η` is a Markov kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelBorelMarkovFromReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instIsMarkovKernelBorelMarkovFromReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsMarkovKernel\">ProbabilityTheory.IsMarkovKernel</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsMarkovKernel\">ProbabilityTheory.IsMarkovKernel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal\">ProbabilityTheory.Kernel.borelMarkovFromReal</a> <span class=\"fn\">Ω</span> <span class=\"fn\">η</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L222-L224","name":"ProbabilityTheory.Kernel.instIsFiniteKernelBorelMarkovFromReal","line":222,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsFiniteKernelBorelMarkovFromReal","doc":"When `η` is a finite kernel, `borelMarkovFromReal Ω η` is a finite kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsFiniteKernelBorelMarkovFromReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instIsFiniteKernelBorelMarkovFromReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal\">ProbabilityTheory.Kernel.borelMarkovFromReal</a> <span class=\"fn\">Ω</span> <span class=\"fn\">η</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L217-L219","name":"ProbabilityTheory.Kernel.instIsSFiniteKernelBorelMarkovFromReal","line":217,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsSFiniteKernelBorelMarkovFromReal","doc":"When `η` is an s-finite kernel, `borelMarkovFromReal Ω η` is an s-finite kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsSFiniteKernelBorelMarkovFromReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instIsSFiniteKernelBorelMarkovFromReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal\">ProbabilityTheory.Kernel.borelMarkovFromReal</a> <span class=\"fn\">Ω</span> <span class=\"fn\">η</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L205-L214","name":"ProbabilityTheory.Kernel.borelMarkovFromReal_apply'","line":205,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal_apply'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal_apply'\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">borelMarkovFromReal_apply'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Ω : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal\">ProbabilityTheory.Kernel.borelMarkovFromReal</a> <span class=\"fn\">Ω</span> <span class=\"fn\">η</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">η</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">η</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">s</span></span>)</span></span>\n  else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">s</span></span>)</span>.indicator</span> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Classical.html#Exists.choose\">Exists.choose</a> <span class=\"fn\">⋯</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L195-L203","name":"ProbabilityTheory.Kernel.borelMarkovFromReal_apply","line":195,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal_apply\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">borelMarkovFromReal_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Ω : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal\">ProbabilityTheory.Kernel.borelMarkovFromReal</a> <span class=\"fn\">Ω</span> <span class=\"fn\">η</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">η</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then\n    <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpace.html#MeasureTheory.Measure.comap\">MeasureTheory.Measure.comap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">η</span> <span class=\"fn\">a</span></span>)</span></span>\n  else <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpace.html#MeasureTheory.Measure.comap\">MeasureTheory.Measure.comap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/EmbeddingReal.html#MeasureTheory.embeddingReal\">MeasureTheory.embeddingReal</a> <span class=\"fn\">Ω</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Dirac.html#MeasureTheory.Measure.dirac\">MeasureTheory.Measure.dirac</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Classical.html#Exists.choose\">Exists.choose</a> <span class=\"fn\">⋯</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L185-L193","name":"ProbabilityTheory.Kernel.borelMarkovFromReal","line":185,"kind":"def","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal","doc":"Auxiliary definition for `ProbabilityTheory.Kernel.condKernel`.\nA Borel space `Ω` embeds measurably into `ℝ` (with embedding `e`), hence we can get a `Kernel α Ω`\nfrom a `Kernel α ℝ` by taking the comap by `e`.\nHere we take the comap of a modification of `η : Kernel α ℝ`, useful when `η a` is a probability\nmeasure with all its mass on `range e` almost everywhere with respect to some measure and we want to\nensure that the comap is a Markov kernel.\nWe thus take the comap by `e` of a kernel defined piecewise: `η` when\n`η a (range (embeddingReal Ω))ᶜ = 0`, and an arbitrary deterministic kernel otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.borelMarkovFromReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">borelMarkovFromReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Ω : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">Ω</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L163-L164","name":"ProbabilityTheory.Kernel.compProd_fst_condKernelUnitReal","line":163,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernelUnitReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernelUnitReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">compProd_fst_condKernelUnitReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.fst</span>.compProd</span> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelUnitReal</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L158-L160","name":"ProbabilityTheory.Kernel.condKernelUnitReal.instIsCondKernel","line":158,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelUnitReal.instIsCondKernel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelUnitReal.instIsCondKernel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernelUnitReal</span>.<span class=\"name\">instIsCondKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.IsCondKernel</span> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelUnitReal</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L153-L156","name":"ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelUnitReal","line":153,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelUnitReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelUnitReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instIsMarkovKernelCondKernelUnitReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsMarkovKernel\">ProbabilityTheory.IsMarkovKernel</a> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelUnitReal</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L150-L151","name":"ProbabilityTheory.Kernel.condKernelUnitReal","line":150,"kind":"def","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelUnitReal","doc":"Auxiliary definition for `MeasureTheory.Measure.condKernel` and\n`ProbabilityTheory.Kernel.condKernel`.\nA conditional kernel for `κ : Kernel Unit (α × ℝ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelUnitReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernelUnitReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L142-L144","name":"ProbabilityTheory.Kernel.compProd_fst_condKernelReal","line":142,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernelReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.compProd_fst_condKernelReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">compProd_fst_condKernelReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.fst</span>.compProd</span> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelReal</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L137-L140","name":"ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelReal","line":137,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.instIsMarkovKernelCondKernelReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instIsMarkovKernelCondKernelReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsMarkovKernel\">ProbabilityTheory.IsMarkovKernel</a> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelReal</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L134-L135","name":"ProbabilityTheory.Kernel.condKernelReal","line":134,"kind":"def","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelReal","doc":"Auxiliary definition for `ProbabilityTheory.Kernel.condKernel`.\nA conditional kernel for `κ : Kernel α (γ × ℝ)` where `γ` is countably generated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernelReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span>)</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L127-L129","name":"ProbabilityTheory.Kernel.isCondKernelCDF_condKernelCDF","line":127,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.isCondKernelCDF_condKernelCDF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.isCondKernelCDF_condKernelCDF\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">isCondKernelCDF_condKernelCDF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/CdfToKernel.html#ProbabilityTheory.IsCondKernelCDF\">ProbabilityTheory.IsCondKernelCDF</a> <span class=\"fn\"><span class=\"fn\">κ</span>.condKernelCDF</span> <span class=\"fn\">κ</span> <span class=\"fn\"><span class=\"fn\">κ</span>.fst</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L123-L125","name":"ProbabilityTheory.Kernel.condKernelCDF","line":123,"kind":"def","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelCDF","doc":"The conditional kernel CDF of a kernel `κ : Kernel α (γ × ℝ)`, where `γ` is countably generated.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.condKernelCDF\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernelCDF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span> → <a href=\"./Mathlib/MeasureTheory/Measure/Stieltjes.html#StieltjesFunction\">StieltjesFunction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L116-L118","name":"ProbabilityTheory.Kernel.isRatCondKernelCDF_density_Iic","line":116,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.isRatCondKernelCDF_density_Iic","doc":"Taking the kernel density of intervals `Iic q` for `q : ℚ` gives a function with the property\n`isRatCondKernelCDF`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.isRatCondKernelCDF_density_Iic\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">isRatCondKernelCDF_density_Iic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/CdfToKernel.html#ProbabilityTheory.IsRatCondKernelCDF\">ProbabilityTheory.IsRatCondKernelCDF</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span>) (<span class=\"fn\">q</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.density</span> <span class=\"fn\"><span class=\"fn\">κ</span>.fst</span> <span class=\"fn\"><span class=\"fn\">p</span>.1</span> <span class=\"fn\"><span class=\"fn\">p</span>.2</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Basic.html#Set.Iic\">Set.Iic</a> <span class=\"fn\">↑<span class=\"fn\">q</span></span></span>)</span></span></span>)</span> <span class=\"fn\">κ</span> <span class=\"fn\"><span class=\"fn\">κ</span>.fst</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean#L79-L112","name":"ProbabilityTheory.Kernel.isRatCondKernelCDFAux_density_Iic","line":79,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.isRatCondKernelCDFAux_density_Iic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/StandardBorel.html#ProbabilityTheory.Kernel.isRatCondKernelCDFAux_density_Iic\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">isRatCondKernelCDFAux_density_Iic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mγ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountablyGenerated\">MeasurableSpace.CountablyGenerated</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Disintegration/CdfToKernel.html#ProbabilityTheory.IsRatCondKernelCDFAux\">ProbabilityTheory.IsRatCondKernelCDFAux</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span>) (<span class=\"fn\">q</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.density</span> <span class=\"fn\"><span class=\"fn\">κ</span>.fst</span> <span class=\"fn\"><span class=\"fn\">p</span>.1</span> <span class=\"fn\"><span class=\"fn\">p</span>.2</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Basic.html#Set.Iic\">Set.Iic</a> <span class=\"fn\">↑<span class=\"fn\">q</span></span></span>)</span></span></span>)</span> <span class=\"fn\">κ</span> <span class=\"fn\"><span class=\"fn\">κ</span>.fst</span></span></div></div>"}]}