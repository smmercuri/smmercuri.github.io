{"name":"Mathlib.Probability.Kernel.Disintegration.Unique","instances":[],"imports":["Init","Mathlib.Probability.Kernel.Disintegration.Integral"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/Unique.lean#L168-L174","name":"ProbabilityTheory.eq_condKernel_of_kernel_eq_compProd","line":168,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.eq_condKernel_of_kernel_eq_compProd","doc":"A finite kernel which satisfies the disintegration property is almost everywhere equal to the\ndisintegration kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.eq_condKernel_of_kernel_eq_compProd\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">eq_condKernel_of_kernel_eq_compProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountableOrCountablyGenerated\">MeasurableSpace.CountableOrCountablyGenerated</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hκ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span>.compProd</span> <span class=\"fn\">κ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ρ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ᵐ (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) ∂<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span> <span class=\"fn\">a</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">x</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/Unique.lean#L151-L156","name":"ProbabilityTheory.condKernel_const","line":151,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.condKernel_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.condKernel_const\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">condKernel_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountableOrCountablyGenerated\">MeasurableSpace.CountableOrCountablyGenerated</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel.const\">ProbabilityTheory.Kernel.const</a> <span class=\"fn\">α</span> <span class=\"fn\">ρ</span></span>)</span>.condKernel</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/Unique.lean#L146-L149","name":"ProbabilityTheory.Kernel.condKernel_apply_eq_condKernel","line":146,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.Kernel.condKernel_apply_eq_condKernel","doc":"For `fst κ a`-almost all `b`, the conditional kernel `Kernel.condKernel κ` applied to `(a, b)`\nis equal to the conditional kernel of the measure `κ a` applied to `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.Kernel.condKernel_apply_eq_condKernel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">condKernel_apply_eq_condKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/CountablyGenerated.html#MeasurableSpace.CountableOrCountablyGenerated\">MeasurableSpace.CountableOrCountablyGenerated</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.condKernel</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.fst</span> <span class=\"fn\">a</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">a</span></span>)</span>.condKernel</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/Unique.lean#L130-L142","name":"ProbabilityTheory.Kernel.apply_eq_measure_condKernel_of_compProd_eq","line":130,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.Kernel.apply_eq_measure_condKernel_of_compProd_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.Kernel.apply_eq_measure_condKernel_of_compProd_eq\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">apply_eq_measure_condKernel_of_compProd_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hκ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span>.compProd</span> <span class=\"fn\">κ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ρ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span> <span class=\"fn\">a</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ρ</span> <span class=\"fn\">a</span></span>)</span>.condKernel</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/Unique.lean#L81-L124","name":"ProbabilityTheory.eq_condKernel_of_measure_eq_compProd","line":81,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.eq_condKernel_of_measure_eq_compProd","doc":"A finite kernel which satisfies the disintegration property is almost everywhere equal to the\ndisintegration kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.eq_condKernel_of_measure_eq_compProd\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">eq_condKernel_of_measure_eq_compProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hκ : <span class=\"fn\"><span class=\"fn\">ρ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span>.compProd</span> <span class=\"fn\">κ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ᵐ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) ∂<span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/Unique.lean#L60-L77","name":"ProbabilityTheory.eq_condKernel_of_measure_eq_compProd_real","line":60,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.eq_condKernel_of_measure_eq_compProd_real","doc":"Auxiliary lemma for `eq_condKernel_of_measure_eq_compProd`.\nUniqueness of the disintegration kernel on ℝ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.eq_condKernel_of_measure_eq_compProd_real\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">eq_condKernel_of_measure_eq_compProd_real</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hκ : <span class=\"fn\"><span class=\"fn\">ρ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span>.compProd</span> <span class=\"fn\">κ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ᵐ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) ∂<span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Kernel/Disintegration/Unique.lean#L47-L56","name":"ProbabilityTheory.eq_condKernel_of_measure_eq_compProd'","line":47,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.eq_condKernel_of_measure_eq_compProd'","doc":"A s-finite kernel which satisfy the disintegration property of the given measure `ρ` is almost\neverywhere equal to the disintegration kernel of `ρ` when evaluated on a measurable set.\n\nThis theorem in the case of finite kernels is weaker than `eq_condKernel_of_measure_eq_compProd`\nwhich asserts that the kernels are equal almost everywhere and not just on a given measurable\nset. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/Disintegration/Unique.html#ProbabilityTheory.eq_condKernel_of_measure_eq_compProd'\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">eq_condKernel_of_measure_eq_compProd'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Polish/Basic.html#StandardBorelSpace\">StandardBorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Ω</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.Kernel\">ProbabilityTheory.Kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hκ : <span class=\"fn\"><span class=\"fn\">ρ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span>.compProd</span> <span class=\"fn\">κ</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ᵐ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) ∂<span class=\"fn\"><span class=\"fn\">ρ</span>.fst</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ρ</span>.condKernel</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span></span></span></div></div>"}]}