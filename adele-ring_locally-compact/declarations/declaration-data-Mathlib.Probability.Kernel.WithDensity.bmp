{"name":"Mathlib.Probability.Kernel.WithDensity","instances":[{"typeNames":["ProbabilityTheory.kernel.withDensity"],"name":"ProbabilityTheory.kernel.instIsSFiniteKernelWithDensityOfNNReal","className":"ProbabilityTheory.IsSFiniteKernel"}],"imports":["Init","Mathlib.Probability.Kernel.MeasurableIntegral","Mathlib.MeasureTheory.Integral.SetIntegral"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L285-L299","name":"ProbabilityTheory.kernel.withDensity_mul","line":285,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_mul\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">g</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L281-L283","name":"ProbabilityTheory.kernel.instIsSFiniteKernelWithDensityOfNNReal","line":281,"kind":"instance","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.instIsSFiniteKernelWithDensityOfNNReal","doc":"For an s-finite kernel `κ` and a function `f : α → β → ℝ≥0`, `withDensity κ f` is s-finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.instIsSFiniteKernelWithDensityOfNNReal\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">instIsSFiniteKernelWithDensityOfNNReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L269-L277","name":"ProbabilityTheory.kernel.IsSFiniteKernel.withDensity","line":269,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.IsSFiniteKernel.withDensity","doc":"For an s-finite kernel `κ` and a function `f : α → β → ℝ≥0∞` which is everywhere finite,\n`withDensity κ f` is s-finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.IsSFiniteKernel.withDensity\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">IsSFiniteKernel</span>.<span class=\"name\">withDensity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf_ne_top : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L208-L264","name":"ProbabilityTheory.kernel.isSFiniteKernel_withDensity_of_isFiniteKernel","line":208,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.isSFiniteKernel_withDensity_of_isFiniteKernel","doc":"Auxiliary lemma for `IsSFiniteKernel.withDensity`.\nIf a kernel `κ` is finite, then `withDensity κ f` is s-finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.isSFiniteKernel_withDensity_of_isFiniteKernel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">isSFiniteKernel_withDensity_of_isFiniteKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf_ne_top : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L191-L203","name":"ProbabilityTheory.kernel.isFiniteKernel_withDensity_of_bounded","line":191,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.isFiniteKernel_withDensity_of_bounded","doc":"If a kernel `κ` is finite and a function `f : α → β → ℝ≥0∞` is bounded, then `withDensity κ f`\nis finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.isFiniteKernel_withDensity_of_bounded\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">isFiniteKernel_withDensity_of_bounded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hB_top : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf_B : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">B</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsFiniteKernel\">ProbabilityTheory.IsFiniteKernel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L166-L186","name":"ProbabilityTheory.kernel.withDensity_tsum","line":166,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_tsum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_tsum\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_tsum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">(<span class=\"fn\">∑' (n : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel.sum\">ProbabilityTheory.kernel.sum</a> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L156-L164","name":"ProbabilityTheory.kernel.withDensity_sub_add_cancel","line":156,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_sub_add_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_sub_add_cancel\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_sub_add_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">g</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hfg : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">a</span></span>)</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>     <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">g</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L147-L154","name":"ProbabilityTheory.kernel.withDensity_add_right","line":147,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_add_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_add_right\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_add_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">g</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L135-L144","name":"ProbabilityTheory.kernel.withDensity_kernel_sum","line":135,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_kernel_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_kernel_sum\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_kernel_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hκ : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel.sum\">ProbabilityTheory.kernel.sum</a> <span class=\"fn\">κ</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel.sum\">ProbabilityTheory.kernel.sum</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">f</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L125-L132","name":"ProbabilityTheory.kernel.withDensity_add_left","line":125,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_add_left\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">η</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">η</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L116-L122","name":"ProbabilityTheory.kernel.integral_withDensity","line":116,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.integral_withDensity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.integral_withDensity\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">integral_withDensity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">g</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">∫ (b : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> ∂<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∫ (b : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span></span> ∂<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L108-L113","name":"ProbabilityTheory.kernel.lintegral_withDensity","line":108,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.lintegral_withDensity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.lintegral_withDensity\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">lintegral_withDensity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">∫⁻ (b : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">b</span></span> ∂<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∫⁻ (b : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">b</span></span></span> ∂<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L105-L106","name":"ProbabilityTheory.kernel.withDensity_zero'","line":105,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_zero'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_zero'\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">0</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L100-L102","name":"ProbabilityTheory.kernel.withDensity_zero","line":100,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_zero\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L96-L97","name":"ProbabilityTheory.kernel.withDensity_one'","line":96,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_one'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_one'\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_one'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">1</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L91-L93","name":"ProbabilityTheory.kernel.withDensity_one","line":91,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_one\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L81-L88","name":"ProbabilityTheory.kernel.withDensity_absolutelyContinuous","line":81,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_absolutelyContinuous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_absolutelyContinuous\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_absolutelyContinuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpace.html#MeasureTheory.Measure.AbsolutelyContinuous\">MeasureTheory.Measure.AbsolutelyContinuous</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L74-L79","name":"ProbabilityTheory.kernel.withDensity_congr_ae","line":74,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_congr_ae","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_congr_ae\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_congr_ae</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">g</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hfg : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">a</span></span>)</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L68-L71","name":"ProbabilityTheory.kernel.withDensity_apply'","line":68,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_apply'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_apply'\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_apply'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∫⁻ (b : <span class=\"fn\">β</span>) in <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> ∂<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L60-L65","name":"ProbabilityTheory.kernel.withDensity_apply","line":60,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_apply\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/WithDensity.html#MeasureTheory.Measure.withDensity\">MeasureTheory.Measure.withDensity</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L56-L57","name":"ProbabilityTheory.kernel.withDensity_of_not_measurable","line":56,"kind":"theorem","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_of_not_measurable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity_of_not_measurable\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity_of_not_measurable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">f</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\">ProbabilityTheory.kernel.withDensity</a> <span class=\"fn\">κ</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/Kernel/WithDensity.lean#L46-L53","name":"ProbabilityTheory.kernel.withDensity","line":46,"kind":"def","docLink":"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity","doc":"Kernel with image `(κ a).withDensity (f a)` if `Function.uncurry f` is measurable, and\nwith image 0 otherwise. If `Function.uncurry f` is measurable, it satisfies\n`∫⁻ b, g b ∂(withDensity κ f hf a) = ∫⁻ b, f a b * g b ∂(κ a)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Kernel/WithDensity.html#ProbabilityTheory.kernel.withDensity\"><span class=\"name\">ProbabilityTheory</span>.<span class=\"name\">kernel</span>.<span class=\"name\">withDensity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mα : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mβ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.IsSFiniteKernel\">ProbabilityTheory.IsSFiniteKernel</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Kernel/Basic.html#ProbabilityTheory.kernel\">ProbabilityTheory.kernel</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span></div></div>"}]}