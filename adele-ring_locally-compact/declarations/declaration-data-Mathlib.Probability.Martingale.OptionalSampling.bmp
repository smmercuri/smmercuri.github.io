{"name":"Mathlib.Probability.Martingale.OptionalSampling","instances":[],"imports":["Init","Mathlib.Order.SuccPred.LinearLocallyFinite","Mathlib.Probability.Martingale.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Martingale/OptionalSampling.lean#L180-L205","name":"MeasureTheory.Martingale.stoppedValue_min_ae_eq_condexp","line":180,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_min_ae_eq_condexp","doc":"**Optional Sampling theorem**. If `τ` is a bounded stopping time and `σ` is another stopping\ntime, then the value of a martingale `f` at the stopping time `min τ σ` is almost everywhere equal\nto the conditional expectation of `f` stopped at `τ` with respect to the σ-algebra generated\nby `σ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_min_ae_eq_condexp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">stoppedValue_min_ae_eq_condexp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrder\">LocallyFiniteOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#OrderBot\">OrderBot</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#DiscreteTopology\">DiscreteTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">MeasureTheory.Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">ℱ</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hσ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h_sf_min : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\">μ</span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a>   <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hσ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Martingale/OptionalSampling.lean#L148-L174","name":"MeasureTheory.Martingale.condexp_stoppedValue_stopping_time_ae_eq_restrict_le","line":148,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.condexp_stoppedValue_stopping_time_ae_eq_restrict_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.condexp_stoppedValue_stopping_time_ae_eq_restrict_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">condexp_stoppedValue_stopping_time_ae_eq_restrict_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrder\">LocallyFiniteOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#OrderBot\">OrderBot</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#DiscreteTopology\">DiscreteTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">MeasureTheory.Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">ℱ</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hσ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hσ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.restrict</span> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">x</span></span></span>}</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a>   <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Martingale/OptionalSampling.lean#L127-L132","name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le","line":127,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le","doc":"If `τ` and `σ` are two stopping times with `σ ≤ τ` and `τ` is bounded, then the value of a\nmartingale `f` at `σ` is the conditional expectation of its value at `τ` with respect to the\nσ-algebra generated by `σ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">stoppedValue_ae_eq_condexp_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">MeasureTheory.Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">ℱ</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hσ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hσ_le_τ : <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">σ</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\">μ</span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hσ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Martingale/OptionalSampling.lean#L108-L122","name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_of_countable_range","line":108,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_of_countable_range","doc":"If `τ` and `σ` are two stopping times with `σ ≤ τ` and `τ` is bounded, then the value of a\nmartingale `f` at `σ` is the conditional expectation of its value at `τ` with respect to the\nσ-algebra generated by `σ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_of_countable_range\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">stoppedValue_ae_eq_condexp_of_le_of_countable_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">MeasureTheory.Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">ℱ</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hσ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hσ_le_τ : <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ_countable_range : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">τ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hσ_countable_range : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">σ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">σ</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\">μ</span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hσ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Martingale/OptionalSampling.lean#L99-L103","name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_const","line":99,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_const","doc":"The value of a martingale `f` at a stopping time `τ` bounded by `n` is the conditional\nexpectation of `f n` with respect to the σ-algebra generated by `τ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">stoppedValue_ae_eq_condexp_of_le_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">MeasureTheory.Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">ℱ</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\">μ</span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Martingale/OptionalSampling.lean#L85-L95","name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_const_of_countable_range","line":85,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_const_of_countable_range","doc":"The value of a martingale `f` at a stopping time `τ` bounded by `n` is the conditional\nexpectation of `f n` with respect to the σ-algebra generated by `τ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_const_of_countable_range\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">stoppedValue_ae_eq_condexp_of_le_const_of_countable_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">MeasureTheory.Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">ℱ</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_countable_range : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">τ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\">μ</span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Martingale/OptionalSampling.lean#L73-L81","name":"MeasureTheory.Martingale.stoppedValue_ae_eq_restrict_eq","line":73,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_ae_eq_restrict_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.stoppedValue_ae_eq_restrict_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">stoppedValue_ae_eq_restrict_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">MeasureTheory.Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">ℱ</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.restrict</span> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Martingale/OptionalSampling.lean#L58-L71","name":"MeasureTheory.Martingale.condexp_stopping_time_ae_eq_restrict_eq_const_of_le_const","line":58,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.condexp_stopping_time_ae_eq_restrict_eq_const_of_le_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.condexp_stopping_time_ae_eq_restrict_eq_const_of_le_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">condexp_stopping_time_ae_eq_restrict_eq_const_of_le_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">MeasureTheory.Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">ℱ</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.restrict</span> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Martingale/OptionalSampling.lean#L49-L56","name":"MeasureTheory.Martingale.condexp_stopping_time_ae_eq_restrict_eq_const","line":49,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.condexp_stopping_time_ae_eq_restrict_eq_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/OptionalSampling.html#MeasureTheory.Martingale.condexp_stopping_time_ae_eq_restrict_eq_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">condexp_stopping_time_ae_eq_restrict_eq_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">Filter.atTop</span>.IsCountablyGenerated</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">MeasureTheory.Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">ℱ</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hin : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.restrict</span> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span></div></div>"}]}