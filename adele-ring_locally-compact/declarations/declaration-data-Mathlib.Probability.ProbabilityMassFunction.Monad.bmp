{"name":"Mathlib.Probability.ProbabilityMassFunction.Monad","instances":[{"typeNames":["PMF"],"name":"PMF.instInhabitedPMF","className":"Inhabited"},{"typeNames":["PMF"],"name":"PMF.instMonadPMF","className":"Monad"}],"imports":["Init","Mathlib.Probability.ProbabilityMassFunction.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L330-L333","name":"PMF.toMeasure_bindOnSupport_apply","line":330,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toMeasure_bindOnSupport_apply","doc":"The measure of a set under `p.bindOnSupport f` is the sum over `a : α`\nof the probability of `a` under `p` times the measure of the set under `f a _`.\nThe additional if statement is needed since `f` is only a partial function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toMeasure_bindOnSupport_apply\"><span class=\"name\">PMF</span>.<span class=\"name\">toMeasure_bindOnSupport_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toMeasure\">PMF.toMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span>)</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑' (a : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">if h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">0</span> else <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toMeasure\">PMF.toMeasure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span>)</span></span>)</span></span></span> <span class=\"fn\">s</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L310-L323","name":"PMF.toOuterMeasure_bindOnSupport_apply","line":310,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toOuterMeasure_bindOnSupport_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toOuterMeasure_bindOnSupport_apply\"><span class=\"name\">PMF</span>.<span class=\"name\">toOuterMeasure_bindOnSupport_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toOuterMeasure\">PMF.toOuterMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span>)</span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">∑' (a : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">if h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">0</span> else <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toOuterMeasure\">PMF.toOuterMeasure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span>)</span></span>)</span></span> <span class=\"fn\">s</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L295-L302","name":"PMF.bindOnSupport_comm","line":295,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_comm\"><span class=\"name\">PMF</span>.<span class=\"name\">bindOnSupport_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">q</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">γ</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">q</span> <span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">q</span></span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">ha</span> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L276-L292","name":"PMF.bindOnSupport_bindOnSupport","line":276,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_bindOnSupport","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_bindOnSupport\"><span class=\"name\">PMF</span>.<span class=\"name\">bindOnSupport_bindOnSupport</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">γ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">b</span> <span class=\"fn\">⋯</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L271-L272","name":"PMF.bindOnSupport_pure","line":271,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_pure\"><span class=\"name\">PMF</span>.<span class=\"name\">bindOnSupport_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L263-L268","name":"PMF.pure_bindOnSupport","line":263,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure_bindOnSupport","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure_bindOnSupport\"><span class=\"name\">PMF</span>.<span class=\"name\">pure_bindOnSupport</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L255-L259","name":"PMF.bindOnSupport_eq_zero_iff","line":255,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_eq_zero_iff\"><span class=\"name\">PMF</span>.<span class=\"name\">bindOnSupport_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L246-L252","name":"PMF.bindOnSupport_eq_bind","line":246,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_eq_bind","doc":"`bindOnSupport` reduces to `bind` if `f` doesn't depend on the additional hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_eq_bind\"><span class=\"name\">PMF</span>.<span class=\"name\">bindOnSupport_eq_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L239-L241","name":"PMF.mem_support_bindOnSupport_iff","line":239,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.mem_support_bindOnSupport_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.mem_support_bindOnSupport_iff\"><span class=\"name\">PMF</span>.<span class=\"name\">mem_support_bindOnSupport_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (a : <span class=\"fn\">α</span>) (h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span>), <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L225-L236","name":"PMF.support_bindOnSupport","line":225,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.support_bindOnSupport","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.support_bindOnSupport\"><span class=\"name\">PMF</span>.<span class=\"name\">support_bindOnSupport</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ (a : <span class=\"fn\">α</span>), <span class=\"fn\">⋃ (h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span>), <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L220-L221","name":"PMF.bindOnSupport_apply","line":220,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport_apply\"><span class=\"name\">PMF</span>.<span class=\"name\">bindOnSupport_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\">PMF.bindOnSupport</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑' (a : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">if h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">0</span> else <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">b</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L208-L214","name":"PMF.bindOnSupport","line":208,"kind":"def","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport","doc":"Generalized version of `bind` allowing `f` to only be defined on the support of `p`.\n`p.bind f` is equivalent to `p.bindOnSupport (fun a _ ↦ f a)`, see `bindOnSupport_eq_bind`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bindOnSupport\"><span class=\"name\">PMF</span>.<span class=\"name\">bindOnSupport</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L200-L202","name":"PMF.instMonadPMF","line":200,"kind":"instance","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.instMonadPMF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.instMonadPMF\"><span class=\"name\">PMF</span>.<span class=\"name\">instMonadPMF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L188-L193","name":"PMF.toMeasure_bind_apply","line":188,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toMeasure_bind_apply","doc":"The measure of a set under `p.bind f` is the sum over `a : α`\nof the probability of `a` under `p` times the measure of the set under `f a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toMeasure_bind_apply\"><span class=\"name\">PMF</span>.<span class=\"name\">toMeasure_bind_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toMeasure\">PMF.toMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span>)</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑' (a : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toMeasure\">PMF.toMeasure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L170-L182","name":"PMF.toOuterMeasure_bind_apply","line":170,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toOuterMeasure_bind_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toOuterMeasure_bind_apply\"><span class=\"name\">PMF</span>.<span class=\"name\">toOuterMeasure_bind_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toOuterMeasure\">PMF.toOuterMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span>)</span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑' (a : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toOuterMeasure\">PMF.toOuterMeasure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L158-L162","name":"PMF.bind_comm","line":158,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind_comm\"><span class=\"name\">PMF</span>.<span class=\"name\">bind_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">γ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">q</span> <span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L152-L155","name":"PMF.bind_bind","line":152,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind_bind\"><span class=\"name\">PMF</span>.<span class=\"name\">bind_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">g</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L147-L148","name":"PMF.bind_const","line":147,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind_const\"><span class=\"name\">PMF</span>.<span class=\"name\">bind_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">q</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L140-L143","name":"PMF.bind_pure","line":140,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind_pure\"><span class=\"name\">PMF</span>.<span class=\"name\">bind_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">PMF.pure</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L132-L136","name":"PMF.pure_bind","line":132,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure_bind\"><span class=\"name\">PMF</span>.<span class=\"name\">pure_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L126-L128","name":"PMF.mem_support_bind_iff","line":126,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.mem_support_bind_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.mem_support_bind_iff\"><span class=\"name\">PMF</span>.<span class=\"name\">mem_support_bind_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ a ∈ <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span>, <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L122-L123","name":"PMF.support_bind","line":122,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.support_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.support_bind\"><span class=\"name\">PMF</span>.<span class=\"name\">support_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ a ∈ <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">p</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L118-L118","name":"PMF.bind_apply","line":118,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind_apply\"><span class=\"name\">PMF</span>.<span class=\"name\">bind_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\">PMF.bind</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑' (a : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L109-L112","name":"PMF.bind","line":109,"kind":"def","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind","doc":"The monadic bind operation for `PMF`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.bind\"><span class=\"name\">PMF</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L97-L99","name":"PMF.toPMF_dirac","line":97,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toPMF_dirac","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toPMF_dirac\"><span class=\"name\">PMF</span>.<span class=\"name\">toPMF_dirac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSingletonClass\">MeasurableSingletonClass</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#MeasureTheory.Measure.toPMF\">MeasureTheory.Measure.toPMF</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Dirac.html#MeasureTheory.Measure.dirac\">MeasureTheory.Measure.dirac</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L92-L93","name":"PMF.toMeasure_pure","line":92,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toMeasure_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toMeasure_pure\"><span class=\"name\">PMF</span>.<span class=\"name\">toMeasure_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toMeasure\">PMF.toMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Dirac.html#MeasureTheory.Measure.dirac\">MeasureTheory.Measure.dirac</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L87-L89","name":"PMF.toMeasure_pure_apply","line":87,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toMeasure_pure_apply","doc":"The measure of a set under `pure a` is `1` for sets containing `a` and `0` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toMeasure_pure_apply\"><span class=\"name\">PMF</span>.<span class=\"name\">toMeasure_pure_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toMeasure\">PMF.toMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> then <span class=\"fn\">1</span> else <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L74-L80","name":"PMF.toOuterMeasure_pure_apply","line":74,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toOuterMeasure_pure_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.toOuterMeasure_pure_apply\"><span class=\"name\">PMF</span>.<span class=\"name\">toOuterMeasure_pure_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.toOuterMeasure\">PMF.toOuterMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> then <span class=\"fn\">1</span> else <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L66-L67","name":"PMF.instInhabitedPMF","line":66,"kind":"instance","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.instInhabitedPMF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.instInhabitedPMF\"><span class=\"name\">PMF</span>.<span class=\"name\">instInhabitedPMF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L62-L63","name":"PMF.pure_apply_of_ne","line":62,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure_apply_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure_apply_of_ne\"><span class=\"name\">PMF</span>.<span class=\"name\">pure_apply_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a' : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L58-L59","name":"PMF.pure_apply_self","line":58,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure_apply_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure_apply_self\"><span class=\"name\">PMF</span>.<span class=\"name\">pure_apply_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L54-L54","name":"PMF.mem_support_pure_iff","line":54,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.mem_support_pure_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.mem_support_pure_iff\"><span class=\"name\">PMF</span>.<span class=\"name\">mem_support_pure_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a' : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L50-L51","name":"PMF.support_pure","line":50,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.support_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.support_pure\"><span class=\"name\">PMF</span>.<span class=\"name\">support_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF.support\">PMF.support</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L46-L46","name":"PMF.pure_apply","line":46,"kind":"theorem","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure_apply\"><span class=\"name\">PMF</span>.<span class=\"name\">pure_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a' : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\">PMF.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span> then <span class=\"fn\">1</span> else <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Probability/ProbabilityMassFunction/Monad.lean#L39-L40","name":"PMF.pure","line":39,"kind":"def","docLink":"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure","doc":"The pure `PMF` is the `PMF` where all the mass lies in one point.\nThe value of `pure a` is `1` at `a` and `0` elsewhere. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/ProbabilityMassFunction/Monad.html#PMF.pure\"><span class=\"name\">PMF</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\">α</span></span></div></div>"}]}